
VGA_Audio.elf:     file format elf32-littlenios2
VGA_Audio.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c0dc memsz 0x0000c0dc flags r-x
    LOAD off    0x0000d0fc vaddr 0x0000c0fc paddr 0x0000e178 align 2**12
         filesz 0x0000207c memsz 0x0000207c flags rw-
    LOAD off    0x0000f1f4 vaddr 0x000101f4 paddr 0x000101f4 align 2**12
         filesz 0x00000000 memsz 0x007a18e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b918  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000062c  0000bad0  0000bad0  0000cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000207c  0000c0fc  0000e178  0000d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          007a1bbe  000101f4  000101f4  0000f1f4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f178  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b58  00000000  00000000  0000f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001f23  00000000  00000000  0000fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002422f  00000000  00000000  00011c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000065ae  00000000  00000000  00035e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00011f79  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e24  00000000  00000000  0004e374  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000207a  00000000  00000000  00050198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000054d2  00000000  00000000  00052212  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000576e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003d8  00000000  00000000  00057738  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005bd79  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005bd7c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005bd7f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005bd80  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005bd81  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005bd85  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005bd89  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005bd8d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005bd96  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005bd9f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0005bda8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  0005bdb3  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a0b  00000000  00000000  0005bde6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00105f7e  00000000  00000000  000607f1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0000bad0 l    d  .rodata	00000000 .rodata
0000c0fc l    d  .rwdata	00000000 .rwdata
000101f4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 amplitude_calculation.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
0000be34 l     O .rodata	00000010 C.37.3134
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000030fc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000035c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c37c l     O .rwdata	00001060 JTAG_UART
0000d3dc l     O .rwdata	00000030 AV_Config
0000d40c l     O .rwdata	00000030 Audio
0000d43c l     O .rwdata	0000002c Char_LCD_16x2
0000d468 l     O .rwdata	0000003c Ethernet
0000d4a4 l     O .rwdata	0000002c IrDA_UART
0000d4d0 l     O .rwdata	0000002c Expansion_JP1
0000d4fc l     O .rwdata	0000002c Expansion_JP2
0000d528 l     O .rwdata	0000002c Green_LEDs
0000d554 l     O .rwdata	0000002c HEX3_HEX0
0000d580 l     O .rwdata	0000002c HEX7_HEX4
0000d5ac l     O .rwdata	0000002c Pushbuttons
0000d5d8 l     O .rwdata	0000002c Red_LEDs
0000d604 l     O .rwdata	0000002c Slider_Switches
0000d630 l     O .rwdata	00000038 PS2_Port
0000d668 l     O .rwdata	0000002c Serial_Port
0000d694 l     O .rwdata	00000034 USB
0000d6c8 l     O .rwdata	00000048 VGA_Char_Buffer
0000d710 l     O .rwdata	00000054 VGA_Pixel_Buffer
0000d764 l     O .rwdata	0000002c SD_Card
00003d64 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003f9c l     F .text	0000022c altera_avalon_jtag_uart_irq
000041c8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004844 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00008330 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000083ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000848c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008678 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000087b4 l     F .text	000000dc alt_file_locked
00008a18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000d938 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000097f8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009bdc l     F .text	00000058 std
00009ce8 l     F .text	00000008 __fp_lock
00009cf0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b2cc l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b400 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b520 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b670 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b830 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000e174 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000ba6c l     F .text	00000060 alt_get_errno
0000b16c g     F .text	00000070 _isatty_r
0000362c g     F .text	0000006c alt_main
000077e0 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00000a74 g     F .text	00000060 interval_timer_ISR
00006024 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
007b1848 g     O .bss	00000100 alt_irq
0000b1dc g     F .text	00000078 _lseek_r
0000e178 g       *ABS*	00000000 __flash_rwdata_start
000051c8 g     F .text	00000034 alt_up_character_lcd_send_cmd
00010204 g     O .bss	00000001 byte2
00002a7c g     F .text	00000680 __divdi3
00004bb8 g     F .text	00000070 alt_up_audio_read_fifo_avail
007b1ad8 g       *ABS*	00000000 __alt_heap_start
00004c28 g     F .text	00000070 alt_up_audio_record_r
00010205 g     O .bss	00000001 byte3
0000ada8 g     F .text	00000068 __sseek
00009c44 g     F .text	000000a4 __sinit
0000943c g     F .text	00000130 __swbuf_r
00006a04 g     F .text	00000114 alt_up_char_buffer_string
00005e3c g     F .text	00000034 read_CE_bit
00010208 g     O .bss	00000004 Play_Index
00009d44 g     F .text	00000068 __sfmoreglue
0000b6f0 g     F .text	00000020 __malloc_unlock
000061d0 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000670c g     F .text	00000090 alt_up_rs232_read_fd
000023c8 g     F .text	000002d8 Audio_Average
00006934 g     F .text	000000d0 alt_up_char_buffer_draw
00004b30 g     F .text	00000088 alt_up_audio_reset_audio_core
0000033c g     F .text	00000070 amplitude_operation
0001020c g     O .bss	00000001 byte1
00009d34 g     F .text	00000010 _cleanup
00006bb4 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
0000514c g     F .text	0000007c get_DDRAM_addr
00006b74 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b0f8 g     F .text	00000074 _fstat_r
00010290 g     O .bss	00000004 errno
000027f8 g     F .text	00000134 Calculate_Avrage
000101f8 g     O .bss	00000004 Read_Data
00004af4 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00010280 g     O .bss	00000004 alt_argv
00016140 g       *ABS*	00000000 _gp
00008c7c g     F .text	00000030 usleep
00006d54 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0000d7b8 g     O .rwdata	00000180 alt_fd_list
0001024c g     O .bss	00000004 XoverFlow
0000c0fc g     O .rwdata	00000080 coeff
000085b4 g     F .text	00000094 alt_find_dev
00003248 g     F .text	000000a0 memcpy
00005360 g     F .text	0000004c alt_up_character_lcd_write_fd
00006b18 g     F .text	0000005c alt_up_char_buffer_clear
00009d28 g     F .text	0000000c _cleanup_r
0000873c g     F .text	00000078 alt_io_redirect
0000bad0 g       *ABS*	00000000 __DTOR_END__
00000420 g     F .text	00000074 amplitude_circute_set_size
00005cc8 g     F .text	00000090 alt_up_irda_write_fd
000003ac g     F .text	00000074 amplitude_circute_stop
00006698 g     F .text	00000074 alt_up_rs232_read_data
00010250 g     O .bss	00000004 MiddleBtn
0000508c g     F .text	00000060 alt_up_audio_read_fifo_head
00006e04 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
007b14e8 g     O .bss	00000080 Out_Ram
00005ab0 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
000043e0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003238 g     F .text	00000008 __udivsi3
0000b460 g     F .text	000000c0 isatty
0001020d g     O .bss	00000001 local_b2
00010248 g     O .bss	00000004 anita2
00005808 g     F .text	00000044 alt_up_ethernet_reg_write
00010254 g     O .bss	00000004 index_Echo
0001020e g     O .bss	00000001 local_b1
00007490 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00005a58 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00008fd0 g     F .text	00000090 alt_icache_flush
00010294 g     O .bss	00000004 __malloc_top_pad
00000494 g     F .text	00000074 amplitude_circute_set_num
00002098 g     F .text	000001a4 Do_Soft_Echo
0000ad30 g     F .text	00000070 _sbrk_r
000102c8 g     O .bss	00000020 up_dev
00007c74 g     F .text	000000d0 helper_plot_pixel
0000b254 g     F .text	00000078 _read_r
00010210 g     O .bss	00000004 Echo_End
0000e154 g     O .rwdata	00000004 alt_max_fd
00006600 g     F .text	00000050 alt_up_rs232_check_parity
000050ec g     F .text	00000060 alt_up_audio_write_fifo_head
0000567c g     F .text	00000110 alt_up_ethernet_init
0000afd4 g     F .text	00000110 _fclose_r
00005e70 g     F .text	00000034 read_num_bytes_available
00009ba8 g     F .text	00000034 fflush
00010298 g     O .bss	00000004 __malloc_max_sbrked_mem
00003380 g     F .text	000001c0 alt_irq_register
00005dd8 g     F .text	00000034 read_RI_bit
007b1568 g     O .bss	00000080 Right_Ram
007b15e8 g     O .bss	000000f0 Avrage_Hardware
00006e38 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000b580 g     F .text	000000f0 lseek
000101fc g     O .bss	00000004 Read_Reg0
0000e168 g     O .rwdata	00000004 _global_impure_ptr
007b1ad8 g       *ABS*	00000000 __bss_end
00006f9c g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00008b70 g     F .text	0000010c alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00004940 g     F .text	00000040 alt_up_audio_open_dev
00005ed8 g     F .text	0000002c read_data_byte
00009d10 g     F .text	00000018 __fp_lock_all
000102e8 g     O .bss	001e8480 Echo_buf_l
00004d7c g     F .text	00000070 alt_up_audio_play_r
00008ad8 g     F .text	00000098 alt_alarm_stop
00005e0c g     F .text	00000030 read_RE_bit
00010278 g     O .bss	00000004 alt_irq_active
00010214 g     O .bss	00000004 Echo_complete
00005aec g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
0000d790 g     O .rwdata	00000028 alt_dev_null
00005648 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00005d98 g     F .text	00000040 alt_up_parallel_port_open_dev
0001023c g     O .bss	00000004 Echo
0000607c g     F .text	00000078 alt_up_ps2_write_data_byte
00000538 g     F .text	00000030 amplitude_circute_set_lbuff_addr
00008390 g     F .text	0000001c alt_dcache_flush_all
00010258 g     O .bss	00000004 nibble_TempY
0001025c g     O .bss	00000004 nibble_TempX
00007bb0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
007b16d8 g     O .bss	000000f0 Average
00010218 g     O .bss	00000004 Play_Flag
0000e178 g       *ABS*	00000000 __ram_rwdata_end
0000e14c g     O .rwdata	00000008 alt_dev_list
0000b94c g     F .text	00000120 write
00009224 g     F .text	000000e8 _putc_r
00007d44 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0000c0fc g       *ABS*	00000000 __ram_rodata_end
0000b32c g     F .text	000000d4 fstat
0000679c g     F .text	00000094 alt_up_rs232_write_fd
000005cc g     F .text	00000070 amplitude_circute_get_status
0000c17c g     O .rwdata	00000200 Mouse_Icon
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00010260 g     O .bss	00000004 RightBtn
00003240 g     F .text	00000008 __umodsi3
007b1ad8 g       *ABS*	00000000 end
000063f0 g     F .text	000000a8 alt_up_ps2_write_fd
00005b2c g     F .text	00000050 alt_up_irda_check_parity
00006870 g     F .text	00000084 alt_up_char_buffer_init
001f8768 g     O .bss	001e8480 r_buf
00003ee4 g     F .text	000000b8 altera_avalon_jtag_uart_init
0000bacc g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000048b8 g     F .text	00000088 alt_avalon_timer_sc_init
00004604 g     F .text	00000240 altera_avalon_jtag_uart_write
00009c34 g     F .text	00000004 __sfp_lock_acquire
00005270 g     F .text	00000078 alt_up_character_lcd_write
00000508 g     F .text	00000030 amplitude_circute_set_rbuff_addr
00009fc8 g     F .text	00000314 _free_r
00003698 g     F .text	00000258 alt_printf
000097fc g     F .text	000001b0 __call_exitprocs
000026a0 g     F .text	0000010c Plot_Play_Audio
0000e170 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00010288 g     O .bss	00000004 _alt_tick_rate
00004f60 g     F .text	0000012c alt_up_audio_write_fifo
0001028c g     O .bss	00000004 _alt_nticks
0000b710 g     F .text	00000120 read
00003964 g     F .text	00000400 alt_sys_init
000054d4 g     F .text	000000b0 alt_up_character_lcd_shift_display
00004e5c g     F .text	00000104 alt_up_audio_read_fifo
000096c4 g     F .text	00000134 __register_exitproc
00004a68 g     F .text	00000050 alt_up_audio_disable_write_interrupt
000062fc g     F .text	00000058 alt_up_ps2_clear_fifo
000065c0 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00005584 g     F .text	00000090 alt_up_character_lcd_erase_pos
00004278 g     F .text	00000074 altera_avalon_jtag_uart_close
0000c0fc g       *ABS*	00000000 __ram_rwdata_start
0000bad0 g       *ABS*	00000000 __ram_rodata_start
000102a0 g     O .bss	00000028 __malloc_current_mallinfo
00003d9c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
007b17c8 g     O .bss	00000080 Left_Ram
00008f18 g     F .text	000000b8 alt_get_fd
00008ccc g     F .text	0000012c alt_busy_sleep
0000af64 g     F .text	00000070 _close_r
00010264 g     O .bss	00000004 Xsign
00004a1c g     F .text	0000004c alt_up_audio_enable_write_interrupt
003e0be8 g     O .bss	001e8480 Echo_buf_r
000090ac g     F .text	00000074 memcmp
00003e4c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
007b1ad8 g       *ABS*	00000000 __alt_stack_base
00003e94 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00005a04 g     F .text	00000054 alt_up_irda_enable_read_interrupt
00009588 g     F .text	0000013c __swsetup_r
000049cc g     F .text	00000050 alt_up_audio_disable_read_interrupt
00009dac g     F .text	000000f0 __sfp
0000dd38 g     O .rwdata	00000408 __malloc_av_
00009c40 g     F .text	00000004 __sinit_lock_release
0000ae8c g     F .text	00000060 __sread
0000652c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00008df8 g     F .text	00000120 alt_find_file
000083d8 g     F .text	000000b4 alt_dev_llist_insert
0000b6d0 g     F .text	00000020 __malloc_lock
0000b890 g     F .text	000000bc sbrk
000099ac g     F .text	000001fc _fflush_r
000101f4 g       *ABS*	00000000 __bss_start
000032e8 g     F .text	00000098 memset
0001021c g     O .bss	00000004 Clear_Play_Plot
00000ad4 g     F .text	000012b8 main
00004d08 g     F .text	00000074 alt_up_audio_write_fifo_space
00010284 g     O .bss	00000004 alt_envp
0001029c g     O .bss	00000004 __malloc_max_total_mem
00006dac g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
000068f4 g     F .text	00000040 alt_up_char_buffer_open_dev
00003df4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00010220 g     O .bss	00000004 End_Record
0000956c g     F .text	0000001c __swbuf
00005424 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000ada0 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000b0e4 g     F .text	00000014 fclose
00006280 g     F .text	0000007c alt_up_ps2_read_data_byte
00010224 g     O .bss	00000004 timeout
007b1948 g     O .bss	00000190 _atexit0
0000a5f0 g     F .text	00000740 _malloc_r
0000e158 g     O .rwdata	00000004 alt_errno
0000a3a4 g     F .text	000000b8 _fwalk
00010200 g     O .bss	00000004 Done_Bit
00005b7c g     F .text	00000048 alt_up_irda_write_data
00006498 g     F .text	00000040 alt_up_ps2_open_dev
00009120 g     F .text	00000104 putc
00003178 g     F .text	00000060 __divsi3
00005230 g     F .text	00000040 alt_up_character_lcd_open_dev
00009e9c g     F .text	0000012c _malloc_trim_r
00005fd0 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0000bad0 g       *ABS*	00000000 __CTOR_END__
000051fc g     F .text	00000034 alt_up_character_lcd_init
0000930c g     F .text	000000bc strcmp
0000bad0 g       *ABS*	00000000 __flash_rodata_start
0000bad0 g       *ABS*	00000000 __DTOR_LIST__
00006830 g     F .text	00000040 alt_up_rs232_open_dev
00010228 g     O .bss	00000004 count
00003930 g     F .text	00000034 alt_irq_init
00008a78 g     F .text	00000060 alt_release_fd
00005ea4 g     F .text	00000034 read_data_valid
00005614 g     F .text	00000034 alt_up_character_lcd_cursor_off
0000be44 g     O .rodata	00000100 __clz_tab
00006164 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00009060 g     F .text	00000014 atexit
00010268 g     O .bss	00000004 Temp_Sign
0000aeec g     F .text	00000078 _write_r
0000292c g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	00000148 PS2_ISR
0000e164 g     O .rwdata	00000004 _impure_ptr
0001022c g     O .bss	00000004 buf_index_play
0001027c g     O .bss	00000004 alt_argc
00008550 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00009cf8 g     F .text	00000018 __fp_unlock_all
0000e144 g     O .rwdata	00000008 alt_fs_list
000064d8 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00004c98 g     F .text	00000070 alt_up_audio_record_l
00010240 g     O .bss	00000004 anita0
00006650 g     F .text	00000048 alt_up_rs232_write_data
0000584c g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001d8c g     F .text	0000030c HEXxy_PS2
0000e178 g       *ABS*	00000000 _edata
007b1ad8 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
000042ec g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000063c g     F .text	00000438 audio_ISR
005c9068 g     O .bss	001e8480 l_buf
00004dec g     F .text	00000070 alt_up_audio_play_l
00010230 g     O .bss	00000001 local_b3
0000ae10 g     F .text	0000007c __swrite
0000e16c g     O .rwdata	00000004 __malloc_trim_threshold
00008cac g     F .text	00000020 altera_nios2_qsys_irq_init
00009074 g     F .text	00000038 exit
00005bc4 g     F .text	00000074 alt_up_irda_read_data
0000a2dc g     F .text	000000c8 _fwalk_reent
00005f04 g     F .text	000000cc alt_up_ps2_init
000031d8 g     F .text	00000060 __modsi3
0001026c g     O .bss	00000004 LeftBtn
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00009c38 g     F .text	00000004 __sfp_lock_release
000052e8 g     F .text	00000078 alt_up_character_lcd_string
000027ac g     F .text	0000004c Do_Hardware_Calculate
00005d58 g     F .text	00000040 alt_up_irda_open_dev
000101f4 g     O .bss	00000004 Base_Data
00010244 g     O .bss	00000004 anita1
0000b30c g     F .text	00000020 _exit
000080e0 g     F .text	00000154 alt_alarm_start
0000223c g     F .text	0000018c Plot_AudioRecord
000029e4 g     F .text	00000098 __muldi3
0000a45c g     F .text	00000194 __smakebuf_r
000060f4 g     F .text	00000070 alt_up_ps2_wait_for_ack
000093c8 g     F .text	00000074 strlen
0000578c g     F .text	00000040 alt_up_ethernet_open_dev
00008890 g     F .text	00000188 open
000038f0 g     F .text	00000040 alt_putchar
00010234 g     O .bss	00000004 buf_index_record
00008648 g     F .text	00000030 alt_icache_flush_all
0000592c g     F .text	000000d8 alt_up_ethernet_phy_reg_write
000053ac g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0000e140 g     O .rwdata	00000004 alt_priority_mask
00006354 g     F .text	0000009c alt_up_ps2_read_fd
00000598 g     F .text	00000034 amplitude_circute_start
00005c38 g     F .text	00000090 alt_up_irda_read_fd
0000e15c g     O .rwdata	00000008 alt_alarm_list
000084ec g     F .text	00000064 _do_ctors
00006584 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00010270 g     O .bss	00000004 YoverFlow
00008234 g     F .text	000000fc close
00010238 g     O .bss	00000004 Click_Echo
00010274 g     O .bss	00000004 Ysign
00003540 g     F .text	00000080 alt_load
000057cc g     F .text	0000003c alt_up_ethernet_reg_read
00004980 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00000568 g     F .text	00000030 amplitude_circute_set_dest_addr
00000000  w      *UND*	00000000 free
00009c3c g     F .text	00000004 __sinit_lock_acquire
00004ab8 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c01ef4 	movhi	r3,123
 134:	18c61204 	addi	r3,r3,6216
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c01ef4 	movhi	r3,123
 14c:	18c61204 	addi	r3,r3,6216
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6985014 	ori	gp,gp,24896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10807d14 	ori	r2,r2,500

    movhi r3, %hi(__bss_end)
     1d0:	00c01ef4 	movhi	r3,123
    ori r3, r3, %lo(__bss_end)
     1d4:	18c6b614 	ori	r3,r3,6872

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00035400 	call	3540 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000362c0 	call	362c <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/

void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)

	unsigned char PS2_data;


	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000317 	ldw	r4,12(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	00062800 	call	6280 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000411e 	bne	r2,zero,328 <PS2_ISR+0x134>
	{
		count++;
     224:	00800074 	movhi	r2,1
     228:	10808a04 	addi	r2,r2,552
     22c:	10800017 	ldw	r2,0(r2)
     230:	10c00044 	addi	r3,r2,1
     234:	00800074 	movhi	r2,1
     238:	10808a04 	addi	r2,r2,552
     23c:	10c00015 	stw	r3,0(r2)
		local_b1 = local_b2;
     240:	00800074 	movhi	r2,1
     244:	10808344 	addi	r2,r2,525
     248:	10c00003 	ldbu	r3,0(r2)
     24c:	00800074 	movhi	r2,1
     250:	10808384 	addi	r2,r2,526
     254:	10c00005 	stb	r3,0(r2)
		local_b2 = local_b3;
     258:	00800074 	movhi	r2,1
     25c:	10808c04 	addi	r2,r2,560
     260:	10c00003 	ldbu	r3,0(r2)
     264:	00800074 	movhi	r2,1
     268:	10808344 	addi	r2,r2,525
     26c:	10c00005 	stb	r3,0(r2)
		local_b3 = PS2_data;
     270:	e0fffd03 	ldbu	r3,-12(fp)
     274:	00800074 	movhi	r2,1
     278:	10808c04 	addi	r2,r2,560
     27c:	10c00005 	stb	r3,0(r2)
		if(count == 3){
     280:	00800074 	movhi	r2,1
     284:	10808a04 	addi	r2,r2,552
     288:	10800017 	ldw	r2,0(r2)
     28c:	108000d8 	cmpnei	r2,r2,3
     290:	1000151e 	bne	r2,zero,2e8 <PS2_ISR+0xf4>
			byte1 = local_b1;
     294:	00800074 	movhi	r2,1
     298:	10808384 	addi	r2,r2,526
     29c:	10c00003 	ldbu	r3,0(r2)
     2a0:	00800074 	movhi	r2,1
     2a4:	10808304 	addi	r2,r2,524
     2a8:	10c00005 	stb	r3,0(r2)
			byte2 = local_b2;
     2ac:	00800074 	movhi	r2,1
     2b0:	10808344 	addi	r2,r2,525
     2b4:	10c00003 	ldbu	r3,0(r2)
     2b8:	00800074 	movhi	r2,1
     2bc:	10808104 	addi	r2,r2,516
     2c0:	10c00005 	stb	r3,0(r2)
			byte3 = local_b3;
     2c4:	00800074 	movhi	r2,1
     2c8:	10808c04 	addi	r2,r2,560
     2cc:	10c00003 	ldbu	r3,0(r2)
     2d0:	00800074 	movhi	r2,1
     2d4:	10808144 	addi	r2,r2,517
     2d8:	10c00005 	stb	r3,0(r2)
			count = 0;
     2dc:	00800074 	movhi	r2,1
     2e0:	10808a04 	addi	r2,r2,552
     2e4:	10000015 	stw	zero,0(r2)
		}
		/* allows save the last three bytes of data */
//		byte1 = byte2;
//		byte2 = byte3;
//		byte3 = PS2_data;
		if ( (local_b2 == (unsigned char) 0xAA) && (local_b3 == (unsigned char) 0x00) )
     2e8:	00800074 	movhi	r2,1
     2ec:	10808344 	addi	r2,r2,525
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	10803fcc 	andi	r2,r2,255
     2f8:	10802a98 	cmpnei	r2,r2,170
     2fc:	10000a1e 	bne	r2,zero,328 <PS2_ISR+0x134>
     300:	00800074 	movhi	r2,1
     304:	10808c04 	addi	r2,r2,560
     308:	10800003 	ldbu	r2,0(r2)
     30c:	10803fcc 	andi	r2,r2,255
     310:	1004c03a 	cmpne	r2,r2,zero
     314:	1000041e 	bne	r2,zero,328 <PS2_ISR+0x134>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (up_dev->PS2_dev, (unsigned char) 0xF4);
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	11000317 	ldw	r4,12(r2)
     320:	01403d04 	movi	r5,244
     324:	000607c0 	call	607c <alt_up_ps2_write_data_byte>
	}

	return;
}
     328:	e037883a 	mov	sp,fp
     32c:	dfc00117 	ldw	ra,4(sp)
     330:	df000017 	ldw	fp,0(sp)
     334:	dec00204 	addi	sp,sp,8
     338:	f800283a 	ret

0000033c <amplitude_operation>:
#include "amplitude_calculation.h"


void amplitude_operation(int size, int num, int rbuff_addr, int lbuff_addr, int dest_addr)
{
     33c:	defffa04 	addi	sp,sp,-24
     340:	dfc00515 	stw	ra,20(sp)
     344:	df000415 	stw	fp,16(sp)
     348:	df000404 	addi	fp,sp,16
     34c:	e13ffc15 	stw	r4,-16(fp)
     350:	e17ffd15 	stw	r5,-12(fp)
     354:	e1bffe15 	stw	r6,-8(fp)
     358:	e1ffff15 	stw	r7,-4(fp)
	amplitude_circute_stop();
     35c:	00003ac0 	call	3ac <amplitude_circute_stop>
	amplitude_circute_set_size(size);
     360:	e13ffc17 	ldw	r4,-16(fp)
     364:	00004200 	call	420 <amplitude_circute_set_size>
	// also for your debugging make int amplitude_circute_get_size(); (optional)
	amplitude_circute_set_num(num);
     368:	e13ffd17 	ldw	r4,-12(fp)
     36c:	00004940 	call	494 <amplitude_circute_set_num>
	// also for your debugging make int amplitude_circute_get_num(); (optional)
	amplitude_circute_set_rbuff_addr(rbuff_addr);
     370:	e13ffe17 	ldw	r4,-8(fp)
     374:	00005080 	call	508 <amplitude_circute_set_rbuff_addr>
	// also for your debugging make int amplitude_circute_get_lbuff_addr(); (optional)
	amplitude_circute_set_lbuff_addr(lbuff_addr);
     378:	e13fff17 	ldw	r4,-4(fp)
     37c:	00005380 	call	538 <amplitude_circute_set_lbuff_addr>
	// also for your debugging make int amplitude_circute_get_rbuff_addr(); (optional)
	amplitude_circute_set_dest_addr(dest_addr);
     380:	e1000217 	ldw	r4,8(fp)
     384:	00005680 	call	568 <amplitude_circute_set_dest_addr>
	// also for your debugging make int amplitude_circute_get_dest_addr(); (optional)
	amplitude_circute_start();
     388:	00005980 	call	598 <amplitude_circute_start>
	while(amplitude_circute_get_status() == 0);
     38c:	00005cc0 	call	5cc <amplitude_circute_get_status>
     390:	1005003a 	cmpeq	r2,r2,zero
     394:	103ffd1e 	bne	r2,zero,38c <amplitude_operation+0x50>
	return;
}
     398:	e037883a 	mov	sp,fp
     39c:	dfc00117 	ldw	ra,4(sp)
     3a0:	df000017 	ldw	fp,0(sp)
     3a4:	dec00204 	addi	sp,sp,8
     3a8:	f800283a 	ret

000003ac <amplitude_circute_stop>:
int Base_Data = 0;
int Read_Data;
int Read_Reg0;
int Done_Bit;

void amplitude_circute_stop(){
     3ac:	deffff04 	addi	sp,sp,-4
     3b0:	df000015 	stw	fp,0(sp)
     3b4:	d839883a 	mov	fp,sp
	Read_Reg0 = IORD_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000);
     3b8:	00840034 	movhi	r2,4096
     3bc:	10900104 	addi	r2,r2,16388
     3c0:	10800037 	ldwio	r2,0(r2)
     3c4:	d0a82f15 	stw	r2,-24388(gp)
	Done_Bit = Read_Reg0 >> 31;
     3c8:	d0a82f17 	ldw	r2,-24388(gp)
     3cc:	1005d7fa 	srai	r2,r2,31
     3d0:	d0a83015 	stw	r2,-24384(gp)
	if(Done_Bit == 1){
     3d4:	d0a83017 	ldw	r2,-24384(gp)
     3d8:	10800058 	cmpnei	r2,r2,1
     3dc:	1000051e 	bne	r2,zero,3f4 <amplitude_circute_stop+0x48>
		IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000,Base_Data || 1 << 31);
     3e0:	00c40034 	movhi	r3,4096
     3e4:	18d00104 	addi	r3,r3,16388
     3e8:	00800044 	movi	r2,1
     3ec:	18800035 	stwio	r2,0(r3)
     3f0:	00000706 	br	410 <amplitude_circute_stop+0x64>
	}
	else if (Done_Bit == 0){
     3f4:	d0a83017 	ldw	r2,-24384(gp)
     3f8:	1004c03a 	cmpne	r2,r2,zero
     3fc:	1000041e 	bne	r2,zero,410 <amplitude_circute_stop+0x64>
		IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000,Base_Data);
     400:	d0e82d17 	ldw	r3,-24396(gp)
     404:	00840034 	movhi	r2,4096
     408:	10900104 	addi	r2,r2,16388
     40c:	10c00035 	stwio	r3,0(r2)
	}
}
     410:	e037883a 	mov	sp,fp
     414:	df000017 	ldw	fp,0(sp)
     418:	dec00104 	addi	sp,sp,4
     41c:	f800283a 	ret

00000420 <amplitude_circute_set_size>:

void amplitude_circute_set_size(int size){
     420:	defffd04 	addi	sp,sp,-12
     424:	df000215 	stw	fp,8(sp)
     428:	df000204 	addi	fp,sp,8
     42c:	e13ffe15 	stw	r4,-8(fp)
	Base_Data = size;
     430:	e0bffe17 	ldw	r2,-8(fp)
     434:	d0a82d15 	stw	r2,-24396(gp)
	Read_Reg0 = IORD_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000);
     438:	00840034 	movhi	r2,4096
     43c:	10900104 	addi	r2,r2,16388
     440:	10800037 	ldwio	r2,0(r2)
     444:	d0a82f15 	stw	r2,-24388(gp)
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000,Read_Reg0 || (Base_Data << 12));
     448:	d0a82f17 	ldw	r2,-24388(gp)
     44c:	1004c03a 	cmpne	r2,r2,zero
     450:	1000041e 	bne	r2,zero,464 <amplitude_circute_set_size+0x44>
     454:	d0a82d17 	ldw	r2,-24396(gp)
     458:	1004933a 	slli	r2,r2,12
     45c:	1005003a 	cmpeq	r2,r2,zero
     460:	1000031e 	bne	r2,zero,470 <amplitude_circute_set_size+0x50>
     464:	00800044 	movi	r2,1
     468:	e0bfff15 	stw	r2,-4(fp)
     46c:	00000106 	br	474 <amplitude_circute_set_size+0x54>
     470:	e03fff15 	stw	zero,-4(fp)
     474:	00840034 	movhi	r2,4096
     478:	10900104 	addi	r2,r2,16388
     47c:	e0ffff17 	ldw	r3,-4(fp)
     480:	10c00035 	stwio	r3,0(r2)
}
     484:	e037883a 	mov	sp,fp
     488:	df000017 	ldw	fp,0(sp)
     48c:	dec00104 	addi	sp,sp,4
     490:	f800283a 	ret

00000494 <amplitude_circute_set_num>:

void amplitude_circute_set_num(int num){
     494:	defffd04 	addi	sp,sp,-12
     498:	df000215 	stw	fp,8(sp)
     49c:	df000204 	addi	fp,sp,8
     4a0:	e13ffe15 	stw	r4,-8(fp)
	Base_Data = num;
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	d0a82d15 	stw	r2,-24396(gp)
	Read_Reg0 = IORD_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000);
     4ac:	00840034 	movhi	r2,4096
     4b0:	10900104 	addi	r2,r2,16388
     4b4:	10800037 	ldwio	r2,0(r2)
     4b8:	d0a82f15 	stw	r2,-24388(gp)
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000,Read_Reg0 || (Base_Data << 1));
     4bc:	d0a82f17 	ldw	r2,-24388(gp)
     4c0:	1004c03a 	cmpne	r2,r2,zero
     4c4:	1000041e 	bne	r2,zero,4d8 <amplitude_circute_set_num+0x44>
     4c8:	d0a82d17 	ldw	r2,-24396(gp)
     4cc:	1085883a 	add	r2,r2,r2
     4d0:	1005003a 	cmpeq	r2,r2,zero
     4d4:	1000031e 	bne	r2,zero,4e4 <amplitude_circute_set_num+0x50>
     4d8:	00800044 	movi	r2,1
     4dc:	e0bfff15 	stw	r2,-4(fp)
     4e0:	00000106 	br	4e8 <amplitude_circute_set_num+0x54>
     4e4:	e03fff15 	stw	zero,-4(fp)
     4e8:	00840034 	movhi	r2,4096
     4ec:	10900104 	addi	r2,r2,16388
     4f0:	e0ffff17 	ldw	r3,-4(fp)
     4f4:	10c00035 	stwio	r3,0(r2)
}
     4f8:	e037883a 	mov	sp,fp
     4fc:	df000017 	ldw	fp,0(sp)
     500:	dec00104 	addi	sp,sp,4
     504:	f800283a 	ret

00000508 <amplitude_circute_set_rbuff_addr>:

void amplitude_circute_set_rbuff_addr(int Right_Address){
     508:	defffe04 	addi	sp,sp,-8
     50c:	df000115 	stw	fp,4(sp)
     510:	df000104 	addi	fp,sp,4
     514:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004004, Right_Address);
     518:	00c40034 	movhi	r3,4096
     51c:	18d00204 	addi	r3,r3,16392
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	18800035 	stwio	r2,0(r3)
}
     528:	e037883a 	mov	sp,fp
     52c:	df000017 	ldw	fp,0(sp)
     530:	dec00104 	addi	sp,sp,4
     534:	f800283a 	ret

00000538 <amplitude_circute_set_lbuff_addr>:

void amplitude_circute_set_lbuff_addr(int Left_Address){
     538:	defffe04 	addi	sp,sp,-8
     53c:	df000115 	stw	fp,4(sp)
     540:	df000104 	addi	fp,sp,4
     544:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004008, Left_Address);
     548:	00c40034 	movhi	r3,4096
     54c:	18d00304 	addi	r3,r3,16396
     550:	e0bfff17 	ldw	r2,-4(fp)
     554:	18800035 	stwio	r2,0(r3)
}
     558:	e037883a 	mov	sp,fp
     55c:	df000017 	ldw	fp,0(sp)
     560:	dec00104 	addi	sp,sp,4
     564:	f800283a 	ret

00000568 <amplitude_circute_set_dest_addr>:

void amplitude_circute_set_dest_addr(int Dest_Address){
     568:	defffe04 	addi	sp,sp,-8
     56c:	df000115 	stw	fp,4(sp)
     570:	df000104 	addi	fp,sp,4
     574:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004012, Dest_Address);
     578:	00c40034 	movhi	r3,4096
     57c:	18d00584 	addi	r3,r3,16406
     580:	e0bfff17 	ldw	r2,-4(fp)
     584:	18800035 	stwio	r2,0(r3)
}
     588:	e037883a 	mov	sp,fp
     58c:	df000017 	ldw	fp,0(sp)
     590:	dec00104 	addi	sp,sp,4
     594:	f800283a 	ret

00000598 <amplitude_circute_start>:

void amplitude_circute_start(){
     598:	deffff04 	addi	sp,sp,-4
     59c:	df000015 	stw	fp,0(sp)
     5a0:	d839883a 	mov	fp,sp
	Base_Data = 1;
     5a4:	00800044 	movi	r2,1
     5a8:	d0a82d15 	stw	r2,-24396(gp)
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000,Base_Data);
     5ac:	d0e82d17 	ldw	r3,-24396(gp)
     5b0:	00840034 	movhi	r2,4096
     5b4:	10900104 	addi	r2,r2,16388
     5b8:	10c00035 	stwio	r3,0(r2)
}
     5bc:	e037883a 	mov	sp,fp
     5c0:	df000017 	ldw	fp,0(sp)
     5c4:	dec00104 	addi	sp,sp,4
     5c8:	f800283a 	ret

000005cc <amplitude_circute_get_status>:

int amplitude_circute_get_status(){
     5cc:	defffe04 	addi	sp,sp,-8
     5d0:	df000115 	stw	fp,4(sp)
     5d4:	df000104 	addi	fp,sp,4
	Read_Reg0 = IORD_ALT_UP_PARALLEL_PORT_DIRECTION(0x10004000);
     5d8:	00840034 	movhi	r2,4096
     5dc:	10900104 	addi	r2,r2,16388
     5e0:	10800037 	ldwio	r2,0(r2)
     5e4:	d0a82f15 	stw	r2,-24388(gp)
	Done_Bit = Read_Reg0 >> 31;
     5e8:	d0a82f17 	ldw	r2,-24388(gp)
     5ec:	1005d7fa 	srai	r2,r2,31
     5f0:	d0a83015 	stw	r2,-24384(gp)
	if(Done_Bit == 1){
     5f4:	d0a83017 	ldw	r2,-24384(gp)
     5f8:	10800058 	cmpnei	r2,r2,1
     5fc:	1000021e 	bne	r2,zero,608 <amplitude_circute_get_status+0x3c>
		return 0;
     600:	e03fff15 	stw	zero,-4(fp)
     604:	00000806 	br	628 <amplitude_circute_get_status+0x5c>
	}
	if(Done_Bit == 0){
     608:	d0a83017 	ldw	r2,-24384(gp)
     60c:	1004c03a 	cmpne	r2,r2,zero
     610:	1000031e 	bne	r2,zero,620 <amplitude_circute_get_status+0x54>
		return 1;
     614:	00800044 	movi	r2,1
     618:	e0bfff15 	stw	r2,-4(fp)
     61c:	00000206 	br	628 <amplitude_circute_get_status+0x5c>
	}
	return 2;
     620:	00800084 	movi	r2,2
     624:	e0bfff15 	stw	r2,-4(fp)
     628:	e0bfff17 	ldw	r2,-4(fp)
}
     62c:	e037883a 	mov	sp,fp
     630:	df000017 	ldw	fp,0(sp)
     634:	dec00104 	addi	sp,sp,4
     638:	f800283a 	ret

0000063c <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     63c:	defff904 	addi	sp,sp,-28
     640:	dfc00615 	stw	ra,24(sp)
     644:	df000515 	stw	fp,20(sp)
     648:	df000504 	addi	fp,sp,20
     64c:	e13ffe15 	stw	r4,-8(fp)
     650:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     654:	e0bffe17 	ldw	r2,-8(fp)
     658:	11000517 	ldw	r4,20(r2)
     65c:	0004ab80 	call	4ab8 <alt_up_audio_read_interrupt_pending>
     660:	1005003a 	cmpeq	r2,r2,zero
     664:	10004a1e 	bne	r2,zero,790 <audio_ISR+0x154>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     668:	e0bffe17 	ldw	r2,-8(fp)
     66c:	10800117 	ldw	r2,4(r2)
     670:	10800a17 	ldw	r2,40(r2)
     674:	1007883a 	mov	r3,r2
     678:	00800044 	movi	r2,1
     67c:	18800035 	stwio	r2,0(r3)
		Echo_End = 0;
     680:	00800074 	movhi	r2,1
     684:	10808404 	addi	r2,r2,528
     688:	10000015 	stw	zero,0(r2)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     68c:	00800074 	movhi	r2,1
     690:	10808d04 	addi	r2,r2,564
     694:	10c00017 	ldw	r3,0(r2)
     698:	00800234 	movhi	r2,8
     69c:	10a847c4 	addi	r2,r2,-24289
     6a0:	10c03b16 	blt	r2,r3,790 <audio_ISR+0x154>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     6a4:	e0bffe17 	ldw	r2,-8(fp)
     6a8:	11000517 	ldw	r4,20(r2)
     6ac:	00800074 	movhi	r2,1
     6b0:	10808d04 	addi	r2,r2,564
     6b4:	10800017 	ldw	r2,0(r2)
     6b8:	1085883a 	add	r2,r2,r2
     6bc:	1085883a 	add	r2,r2,r2
     6c0:	1007883a 	mov	r3,r2
     6c4:	00800834 	movhi	r2,32
     6c8:	10a1da04 	addi	r2,r2,-30872
     6cc:	1885883a 	add	r2,r3,r2
     6d0:	100b883a 	mov	r5,r2
     6d4:	00800074 	movhi	r2,1
     6d8:	10808d04 	addi	r2,r2,564
     6dc:	10c00017 	ldw	r3,0(r2)
     6e0:	00800234 	movhi	r2,8
     6e4:	10a84804 	addi	r2,r2,-24288
     6e8:	10cdc83a 	sub	r6,r2,r3
     6ec:	0004c280 	call	4c28 <alt_up_audio_record_r>
     6f0:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
//			Temp_r_buf[buf_index_record] = r_buf[buf_index_record];
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     6f4:	e0bffe17 	ldw	r2,-8(fp)
     6f8:	11000517 	ldw	r4,20(r2)
     6fc:	00800074 	movhi	r2,1
     700:	10808d04 	addi	r2,r2,564
     704:	10800017 	ldw	r2,0(r2)
     708:	1085883a 	add	r2,r2,r2
     70c:	1085883a 	add	r2,r2,r2
     710:	1007883a 	mov	r3,r2
     714:	00801774 	movhi	r2,93
     718:	10a41a04 	addi	r2,r2,-28568
     71c:	1885883a 	add	r2,r3,r2
     720:	100b883a 	mov	r5,r2
     724:	e1bffd17 	ldw	r6,-12(fp)
     728:	0004c980 	call	4c98 <alt_up_audio_record_l>
				num_read);
//			Temp_l_buf[buf_index_record] = l_buf[buf_index_record];
			buf_index_record += num_read;
     72c:	00800074 	movhi	r2,1
     730:	10808d04 	addi	r2,r2,564
     734:	10c00017 	ldw	r3,0(r2)
     738:	e0bffd17 	ldw	r2,-12(fp)
     73c:	1887883a 	add	r3,r3,r2
     740:	00800074 	movhi	r2,1
     744:	10808d04 	addi	r2,r2,564
     748:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     74c:	00800074 	movhi	r2,1
     750:	10808d04 	addi	r2,r2,564
     754:	10c00017 	ldw	r3,0(r2)
     758:	00800234 	movhi	r2,8
     75c:	10a84804 	addi	r2,r2,-24288
     760:	18800b1e 	bne	r3,r2,790 <audio_ISR+0x154>
			{
				// done recording
				End_Record = 1;
     764:	00c00074 	movhi	r3,1
     768:	18c08804 	addi	r3,r3,544
     76c:	00800044 	movi	r2,1
     770:	18800015 	stw	r2,0(r3)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     774:	e0bffe17 	ldw	r2,-8(fp)
     778:	10800117 	ldw	r2,4(r2)
     77c:	10800a17 	ldw	r2,40(r2)
     780:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     784:	e0bffe17 	ldw	r2,-8(fp)
     788:	11000517 	ldw	r4,20(r2)
     78c:	00049cc0 	call	49cc <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	11000517 	ldw	r4,20(r2)
     798:	0004af40 	call	4af4 <alt_up_audio_write_interrupt_pending>
     79c:	1005003a 	cmpeq	r2,r2,zero
     7a0:	1000af1e 	bne	r2,zero,a60 <audio_ISR+0x424>
	{

		// output data until the buffer is empty //Echo
		if (buf_index_play < BUF_SIZE && Echo_complete == 1 && Click_Echo == 1)
     7a4:	00800074 	movhi	r2,1
     7a8:	10808b04 	addi	r2,r2,556
     7ac:	10c00017 	ldw	r3,0(r2)
     7b0:	00800234 	movhi	r2,8
     7b4:	10a847c4 	addi	r2,r2,-24289
     7b8:	10c04816 	blt	r2,r3,8dc <audio_ISR+0x2a0>
     7bc:	00800074 	movhi	r2,1
     7c0:	10808504 	addi	r2,r2,532
     7c4:	10800017 	ldw	r2,0(r2)
     7c8:	10800058 	cmpnei	r2,r2,1
     7cc:	1000431e 	bne	r2,zero,8dc <audio_ISR+0x2a0>
     7d0:	00800074 	movhi	r2,1
     7d4:	10808e04 	addi	r2,r2,568
     7d8:	10800017 	ldw	r2,0(r2)
     7dc:	10800058 	cmpnei	r2,r2,1
     7e0:	10003e1e 	bne	r2,zero,8dc <audio_ISR+0x2a0>
		{
			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x4); // set LEDG[1] on
     7e4:	e0bffe17 	ldw	r2,-8(fp)
     7e8:	10800117 	ldw	r2,4(r2)
     7ec:	10800a17 	ldw	r2,40(r2)
     7f0:	1007883a 	mov	r3,r2
     7f4:	00800104 	movi	r2,4
     7f8:	18800035 	stwio	r2,0(r3)
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(Echo_buf_r[buf_index_play]),
     7fc:	e0bffe17 	ldw	r2,-8(fp)
     800:	11000517 	ldw	r4,20(r2)
     804:	00800074 	movhi	r2,1
     808:	10808b04 	addi	r2,r2,556
     80c:	10800017 	ldw	r2,0(r2)
     810:	1085883a 	add	r2,r2,r2
     814:	1085883a 	add	r2,r2,r2
     818:	1007883a 	mov	r3,r2
     81c:	00800fb4 	movhi	r2,62
     820:	1082fa04 	addi	r2,r2,3048
     824:	1885883a 	add	r2,r3,r2
     828:	100b883a 	mov	r5,r2
     82c:	00800074 	movhi	r2,1
     830:	10808b04 	addi	r2,r2,556
     834:	10c00017 	ldw	r3,0(r2)
     838:	00800234 	movhi	r2,8
     83c:	10a84804 	addi	r2,r2,-24288
     840:	10cdc83a 	sub	r6,r2,r3
     844:	0004d7c0 	call	4d7c <alt_up_audio_play_r>
     848:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(Echo_buf_l[buf_index_play]),
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	11000517 	ldw	r4,20(r2)
     854:	00800074 	movhi	r2,1
     858:	10808b04 	addi	r2,r2,556
     85c:	10800017 	ldw	r2,0(r2)
     860:	1085883a 	add	r2,r2,r2
     864:	1085883a 	add	r2,r2,r2
     868:	1007883a 	mov	r3,r2
     86c:	00800074 	movhi	r2,1
     870:	1080ba04 	addi	r2,r2,744
     874:	1885883a 	add	r2,r3,r2
     878:	100b883a 	mov	r5,r2
     87c:	e1bffc17 	ldw	r6,-16(fp)
     880:	0004dec0 	call	4dec <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     884:	00800074 	movhi	r2,1
     888:	10808b04 	addi	r2,r2,556
     88c:	10c00017 	ldw	r3,0(r2)
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	1887883a 	add	r3,r3,r2
     898:	00800074 	movhi	r2,1
     89c:	10808b04 	addi	r2,r2,556
     8a0:	10c00015 	stw	r3,0(r2)

				if (buf_index_play >= BUF_SIZE)
     8a4:	00800074 	movhi	r2,1
     8a8:	10808b04 	addi	r2,r2,556
     8ac:	10c00017 	ldw	r3,0(r2)
     8b0:	00800234 	movhi	r2,8
     8b4:	10a847c4 	addi	r2,r2,-24289
     8b8:	10c0690e 	bge	r2,r3,a60 <audio_ISR+0x424>
				{
					// done playback
					alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     8bc:	e0bffe17 	ldw	r2,-8(fp)
     8c0:	10800117 	ldw	r2,4(r2)
     8c4:	10800a17 	ldw	r2,40(r2)
     8c8:	10000035 	stwio	zero,0(r2)
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     8cc:	e0bffe17 	ldw	r2,-8(fp)
     8d0:	11000517 	ldw	r4,20(r2)
     8d4:	0004a680 	call	4a68 <alt_up_audio_disable_write_interrupt>
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
	{

		// output data until the buffer is empty //Echo
		if (buf_index_play < BUF_SIZE && Echo_complete == 1 && Click_Echo == 1)
     8d8:	00006106 	br	a60 <audio_ISR+0x424>
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
				}
		}

		// output data until the buffer is empty //Play
		else if (buf_index_play < BUF_SIZE && Click_Echo == 0)
     8dc:	00800074 	movhi	r2,1
     8e0:	10808b04 	addi	r2,r2,556
     8e4:	10c00017 	ldw	r3,0(r2)
     8e8:	00800234 	movhi	r2,8
     8ec:	10a847c4 	addi	r2,r2,-24289
     8f0:	10c05216 	blt	r2,r3,a3c <audio_ISR+0x400>
     8f4:	00800074 	movhi	r2,1
     8f8:	10808e04 	addi	r2,r2,568
     8fc:	10800017 	ldw	r2,0(r2)
     900:	1004c03a 	cmpne	r2,r2,zero
     904:	10004d1e 	bne	r2,zero,a3c <audio_ISR+0x400>
		{

			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[2] on
     908:	e0bffe17 	ldw	r2,-8(fp)
     90c:	10800117 	ldw	r2,4(r2)
     910:	10800a17 	ldw	r2,40(r2)
     914:	1007883a 	mov	r3,r2
     918:	00800084 	movi	r2,2
     91c:	18800035 	stwio	r2,0(r3)
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf[buf_index_play]), 
     920:	e0bffe17 	ldw	r2,-8(fp)
     924:	11000517 	ldw	r4,20(r2)
     928:	00800074 	movhi	r2,1
     92c:	10808b04 	addi	r2,r2,556
     930:	10800017 	ldw	r2,0(r2)
     934:	1085883a 	add	r2,r2,r2
     938:	1085883a 	add	r2,r2,r2
     93c:	1007883a 	mov	r3,r2
     940:	00800834 	movhi	r2,32
     944:	10a1da04 	addi	r2,r2,-30872
     948:	1885883a 	add	r2,r3,r2
     94c:	100b883a 	mov	r5,r2
     950:	00800074 	movhi	r2,1
     954:	10808b04 	addi	r2,r2,556
     958:	10c00017 	ldw	r3,0(r2)
     95c:	00800234 	movhi	r2,8
     960:	10a84804 	addi	r2,r2,-24288
     964:	10cdc83a 	sub	r6,r2,r3
     968:	0004d7c0 	call	4d7c <alt_up_audio_play_r>
     96c:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf[buf_index_play]), 
     970:	e0bffe17 	ldw	r2,-8(fp)
     974:	11000517 	ldw	r4,20(r2)
     978:	00800074 	movhi	r2,1
     97c:	10808b04 	addi	r2,r2,556
     980:	10800017 	ldw	r2,0(r2)
     984:	1085883a 	add	r2,r2,r2
     988:	1085883a 	add	r2,r2,r2
     98c:	1007883a 	mov	r3,r2
     990:	00801774 	movhi	r2,93
     994:	10a41a04 	addi	r2,r2,-28568
     998:	1885883a 	add	r2,r3,r2
     99c:	100b883a 	mov	r5,r2
     9a0:	e1bffc17 	ldw	r6,-16(fp)
     9a4:	0004dec0 	call	4dec <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     9a8:	00800074 	movhi	r2,1
     9ac:	10808b04 	addi	r2,r2,556
     9b0:	10c00017 	ldw	r3,0(r2)
     9b4:	e0bffc17 	ldw	r2,-16(fp)
     9b8:	1887883a 	add	r3,r3,r2
     9bc:	00800074 	movhi	r2,1
     9c0:	10808b04 	addi	r2,r2,556
     9c4:	10c00015 	stw	r3,0(r2)

			if(buf_index_play >= ((BUF_SIZE / N)*Play_Index)){
     9c8:	00800074 	movhi	r2,1
     9cc:	10808204 	addi	r2,r2,520
     9d0:	10800017 	ldw	r2,0(r2)
     9d4:	10d046a4 	muli	r3,r2,16666
     9d8:	00800074 	movhi	r2,1
     9dc:	10808b04 	addi	r2,r2,556
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	10c00416 	blt	r2,r3,9f8 <audio_ISR+0x3bc>
				Play_Flag = 1;
     9e8:	00c00074 	movhi	r3,1
     9ec:	18c08604 	addi	r3,r3,536
     9f0:	00800044 	movi	r2,1
     9f4:	18800015 	stw	r2,0(r3)
			}
	
			if (buf_index_play >= BUF_SIZE)
     9f8:	00800074 	movhi	r2,1
     9fc:	10808b04 	addi	r2,r2,556
     a00:	10c00017 	ldw	r3,0(r2)
     a04:	00800234 	movhi	r2,8
     a08:	10a847c4 	addi	r2,r2,-24289
     a0c:	10c0140e 	bge	r2,r3,a60 <audio_ISR+0x424>
			{
				// done playback
				Play_Index = 0;
     a10:	00800074 	movhi	r2,1
     a14:	10808204 	addi	r2,r2,520
     a18:	10000015 	stw	zero,0(r2)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     a1c:	e0bffe17 	ldw	r2,-8(fp)
     a20:	10800117 	ldw	r2,4(r2)
     a24:	10800a17 	ldw	r2,40(r2)
     a28:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     a2c:	e0bffe17 	ldw	r2,-8(fp)
     a30:	11000517 	ldw	r4,20(r2)
     a34:	0004a680 	call	4a68 <alt_up_audio_disable_write_interrupt>
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
				}
		}

		// output data until the buffer is empty //Play
		else if (buf_index_play < BUF_SIZE && Click_Echo == 0)
     a38:	00000906 	br	a60 <audio_ISR+0x424>
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
			}
		}
		else {
			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x80); //  LEDG
     a3c:	e0bffe17 	ldw	r2,-8(fp)
     a40:	10800117 	ldw	r2,4(r2)
     a44:	10800a17 	ldw	r2,40(r2)
     a48:	1007883a 	mov	r3,r2
     a4c:	00802004 	movi	r2,128
     a50:	18800035 	stwio	r2,0(r3)
			alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     a54:	e0bffe17 	ldw	r2,-8(fp)
     a58:	11000517 	ldw	r4,20(r2)
     a5c:	0004a680 	call	4a68 <alt_up_audio_disable_write_interrupt>
		}

	}
	return;
}
     a60:	e037883a 	mov	sp,fp
     a64:	dfc00117 	ldw	ra,4(sp)
     a68:	df000017 	ldw	fp,0(sp)
     a6c:	dec00204 	addi	sp,sp,8
     a70:	f800283a 	ret

00000a74 <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     a74:	defffb04 	addi	sp,sp,-20
     a78:	dfc00415 	stw	ra,16(sp)
     a7c:	df000315 	stw	fp,12(sp)
     a80:	df000304 	addi	fp,sp,12
     a84:	e13ffe15 	stw	r4,-8(fp)
     a88:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     a8c:	00840034 	movhi	r2,4096
     a90:	10880004 	addi	r2,r2,8192
     a94:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     a98:	e0bffd17 	ldw	r2,-12(fp)
     a9c:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     aa0:	00c00074 	movhi	r3,1
     aa4:	18c08904 	addi	r3,r3,548
     aa8:	00800044 	movi	r2,1
     aac:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     ab0:	e0bffe17 	ldw	r2,-8(fp)
     ab4:	11000417 	ldw	r4,16(r2)
     ab8:	017fffc4 	movi	r5,-1
     abc:	00054d40 	call	54d4 <alt_up_character_lcd_shift_display>

	return;
}
     ac0:	e037883a 	mov	sp,fp
     ac4:	dfc00117 	ldw	ra,4(sp)
     ac8:	df000017 	ldw	fp,0(sp)
     acc:	dec00204 	addi	sp,sp,8
     ad0:	f800283a 	ret

00000ad4 <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     ad4:	deffb804 	addi	sp,sp,-288
     ad8:	dfc04715 	stw	ra,284(sp)
     adc:	df004615 	stw	fp,280(sp)
     ae0:	df004604 	addi	fp,sp,280
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     ae4:	00840034 	movhi	r2,4096
     ae8:	10880004 	addi	r2,r2,8192
     aec:	e0bfce15 	stw	r2,-200(fp)

	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0; 			// used to hold PS/2 data
     af0:	00800074 	movhi	r2,1
     af4:	10808304 	addi	r2,r2,524
     af8:	10000005 	stb	zero,0(r2)
     afc:	00800074 	movhi	r2,1
     b00:	10808104 	addi	r2,r2,516
     b04:	10000005 	stb	zero,0(r2)
     b08:	00800074 	movhi	r2,1
     b0c:	10808144 	addi	r2,r2,517
     b10:	10000005 	stb	zero,0(r2)
	count = 0;
     b14:	00800074 	movhi	r2,1
     b18:	10808a04 	addi	r2,r2,552
     b1c:	10000015 	stw	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     b20:	00800074 	movhi	r2,1
     b24:	10808904 	addi	r2,r2,548
     b28:	10000015 	stw	zero,0(r2)
	int blue_x1; int blue_y1; int blue_x2; int blue_y2; 
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     b2c:	008025b4 	movhi	r2,150
     b30:	e0bfc015 	stw	r2,-256(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     b34:	e0bfce17 	ldw	r2,-200(fp)
     b38:	10c00204 	addi	r3,r2,8
     b3c:	e0bfc017 	ldw	r2,-256(fp)
     b40:	10bfffcc 	andi	r2,r2,65535
     b44:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     b48:	e0bfce17 	ldw	r2,-200(fp)
     b4c:	10c00304 	addi	r3,r2,12
     b50:	e0bfc017 	ldw	r2,-256(fp)
     b54:	1005d43a 	srai	r2,r2,16
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     b60:	e0bfce17 	ldw	r2,-200(fp)
     b64:	10c00104 	addi	r3,r2,4
     b68:	008001c4 	movi	r2,7
     b6c:	18800015 	stw	r2,0(r3)
	
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     b70:	01000074 	movhi	r4,1
     b74:	212eb404 	addi	r4,r4,-17712
     b78:	0005d980 	call	5d98 <alt_up_parallel_port_open_dev>
     b7c:	e0bfd615 	stw	r2,-168(fp)
	if ( KEY_dev == NULL)
     b80:	e0bfd617 	ldw	r2,-168(fp)
     b84:	1004c03a 	cmpne	r2,r2,zero
     b88:	1000061e 	bne	r2,zero,ba4 <main+0xd0>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     b8c:	01000074 	movhi	r4,1
     b90:	212eb904 	addi	r4,r4,-17692
     b94:	00036980 	call	3698 <alt_printf>
		return -1;
     b98:	00bfffc4 	movi	r2,-1
     b9c:	e0bfff15 	stw	r2,-4(fp)
     ba0:	00047406 	br	1d74 <main+0x12a0>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     ba4:	01000074 	movhi	r4,1
     ba8:	212ec504 	addi	r4,r4,-17644
     bac:	00036980 	call	3698 <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     bb0:	00c00074 	movhi	r3,1
     bb4:	18c0b204 	addi	r3,r3,712
     bb8:	e0bfd617 	ldw	r2,-168(fp)
     bbc:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     bc0:	e0bfd617 	ldw	r2,-168(fp)
     bc4:	10800a17 	ldw	r2,40(r2)
     bc8:	10800204 	addi	r2,r2,8
     bcc:	1007883a 	mov	r3,r2
     bd0:	00800384 	movi	r2,14
     bd4:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     bd8:	01000074 	movhi	r4,1
     bdc:	212ecd04 	addi	r4,r4,-17612
     be0:	0005d980 	call	5d98 <alt_up_parallel_port_open_dev>
     be4:	e0bfd515 	stw	r2,-172(fp)
	if ( green_LEDs_dev == NULL)
     be8:	e0bfd517 	ldw	r2,-172(fp)
     bec:	1004c03a 	cmpne	r2,r2,zero
     bf0:	1000061e 	bne	r2,zero,c0c <main+0x138>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     bf4:	01000074 	movhi	r4,1
     bf8:	212ed104 	addi	r4,r4,-17596
     bfc:	00036980 	call	3698 <alt_printf>
		return -1;
     c00:	00bfffc4 	movi	r2,-1
     c04:	e0bfff15 	stw	r2,-4(fp)
     c08:	00045a06 	br	1d74 <main+0x12a0>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     c0c:	01000074 	movhi	r4,1
     c10:	212edc04 	addi	r4,r4,-17552
     c14:	00036980 	call	3698 <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     c18:	00c00074 	movhi	r3,1
     c1c:	18c0b204 	addi	r3,r3,712
     c20:	e0bfd517 	ldw	r2,-172(fp)
     c24:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     c28:	01000074 	movhi	r4,1
     c2c:	212ee304 	addi	r4,r4,-17524
     c30:	0005d980 	call	5d98 <alt_up_parallel_port_open_dev>
     c34:	e0bfd515 	stw	r2,-172(fp)
	if ( green_LEDs_dev == NULL)
     c38:	e0bfd517 	ldw	r2,-172(fp)
     c3c:	1004c03a 	cmpne	r2,r2,zero
     c40:	1000061e 	bne	r2,zero,c5c <main+0x188>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     c44:	01000074 	movhi	r4,1
     c48:	212ee704 	addi	r4,r4,-17508
     c4c:	00036980 	call	3698 <alt_printf>
		return -1;
     c50:	00bfffc4 	movi	r2,-1
     c54:	e0bfff15 	stw	r2,-4(fp)
     c58:	00044606 	br	1d74 <main+0x12a0>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     c5c:	01000074 	movhi	r4,1
     c60:	212ef104 	addi	r4,r4,-17468
     c64:	00036980 	call	3698 <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     c68:	00c00074 	movhi	r3,1
     c6c:	18c0b204 	addi	r3,r3,712
     c70:	e0bfd417 	ldw	r2,-176(fp)
     c74:	18800215 	stw	r2,8(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     c78:	01000074 	movhi	r4,1
     c7c:	212ef704 	addi	r4,r4,-17444
     c80:	00064980 	call	6498 <alt_up_ps2_open_dev>
     c84:	e0bfd315 	stw	r2,-180(fp)
	if ( PS2_dev == NULL)
     c88:	e0bfd317 	ldw	r2,-180(fp)
     c8c:	1004c03a 	cmpne	r2,r2,zero
     c90:	1000061e 	bne	r2,zero,cac <main+0x1d8>
	{
		alt_printf ("Error: could not open PS2 device\n");
     c94:	01000074 	movhi	r4,1
     c98:	212efb04 	addi	r4,r4,-17428
     c9c:	00036980 	call	3698 <alt_printf>
		return -1;
     ca0:	00bfffc4 	movi	r2,-1
     ca4:	e0bfff15 	stw	r2,-4(fp)
     ca8:	00043206 	br	1d74 <main+0x12a0>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     cac:	01000074 	movhi	r4,1
     cb0:	212f0404 	addi	r4,r4,-17392
     cb4:	00036980 	call	3698 <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     cb8:	00c00074 	movhi	r3,1
     cbc:	18c0b204 	addi	r3,r3,712
     cc0:	e0bfd317 	ldw	r2,-180(fp)
     cc4:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     cc8:	e13fd317 	ldw	r4,-180(fp)
     ccc:	01403fc4 	movi	r5,255
     cd0:	000607c0 	call	607c <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     cd4:	e13fd317 	ldw	r4,-180(fp)
     cd8:	0005fd00 	call	5fd0 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     cdc:	01000074 	movhi	r4,1
     ce0:	212f0904 	addi	r4,r4,-17372
     ce4:	00049400 	call	4940 <alt_up_audio_open_dev>
     ce8:	e0bfd115 	stw	r2,-188(fp)
	if ( audio_dev == NULL)
     cec:	e0bfd117 	ldw	r2,-188(fp)
     cf0:	1004c03a 	cmpne	r2,r2,zero
     cf4:	1000061e 	bne	r2,zero,d10 <main+0x23c>
	{
		alt_printf ("Error: could not open audio device\n");
     cf8:	01000074 	movhi	r4,1
     cfc:	212f0c04 	addi	r4,r4,-17360
     d00:	00036980 	call	3698 <alt_printf>
		return -1;
     d04:	00bfffc4 	movi	r2,-1
     d08:	e0bfff15 	stw	r2,-4(fp)
     d0c:	00041906 	br	1d74 <main+0x12a0>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     d10:	01000074 	movhi	r4,1
     d14:	212f1504 	addi	r4,r4,-17324
     d18:	00036980 	call	3698 <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     d1c:	00c00074 	movhi	r3,1
     d20:	18c0b204 	addi	r3,r3,712
     d24:	e0bfd117 	ldw	r2,-188(fp)
     d28:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     d2c:	01000074 	movhi	r4,1
     d30:	212f1b04 	addi	r4,r4,-17300
     d34:	00052300 	call	5230 <alt_up_character_lcd_open_dev>
     d38:	e0bfd215 	stw	r2,-184(fp)
	if ( lcd_dev == NULL)
     d3c:	e0bfd217 	ldw	r2,-184(fp)
     d40:	1004c03a 	cmpne	r2,r2,zero
     d44:	1000061e 	bne	r2,zero,d60 <main+0x28c>
	{
		alt_printf ("Error: could not open character LCD device\n");
     d48:	01000074 	movhi	r4,1
     d4c:	212f2004 	addi	r4,r4,-17280
     d50:	00036980 	call	3698 <alt_printf>
		return -1;
     d54:	00bfffc4 	movi	r2,-1
     d58:	e0bfff15 	stw	r2,-4(fp)
     d5c:	00040506 	br	1d74 <main+0x12a0>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     d60:	01000074 	movhi	r4,1
     d64:	212f2b04 	addi	r4,r4,-17236
     d68:	00036980 	call	3698 <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     d6c:	00c00074 	movhi	r3,1
     d70:	18c0b204 	addi	r3,r3,712
     d74:	e0bfd217 	ldw	r2,-184(fp)
     d78:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     d7c:	01800034 	movhi	r6,0
     d80:	31829d04 	addi	r6,r6,2676
     d84:	0009883a 	mov	r4,zero
     d88:	01400074 	movhi	r5,1
     d8c:	2940b204 	addi	r5,r5,712
     d90:	00033800 	call	3380 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     d94:	01800034 	movhi	r6,0
     d98:	318a4b04 	addi	r6,r6,10540
     d9c:	01000044 	movi	r4,1
     da0:	01400074 	movhi	r5,1
     da4:	2940b204 	addi	r5,r5,712
     da8:	00033800 	call	3380 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     dac:	01800034 	movhi	r6,0
     db0:	31818f04 	addi	r6,r6,1596
     db4:	01000184 	movi	r4,6
     db8:	01400074 	movhi	r5,1
     dbc:	2940b204 	addi	r5,r5,712
     dc0:	00033800 	call	3380 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     dc4:	01800034 	movhi	r6,0
     dc8:	31807d04 	addi	r6,r6,500
     dcc:	010001c4 	movi	r4,7
     dd0:	01400074 	movhi	r5,1
     dd4:	2940b204 	addi	r5,r5,712
     dd8:	00033800 	call	3380 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     ddc:	00c00074 	movhi	r3,1
     de0:	18ef6504 	addi	r3,r3,-17004
     de4:	18800017 	ldw	r2,0(r3)
     de8:	e0bfd715 	stw	r2,-164(fp)
     dec:	18800117 	ldw	r2,4(r3)
     df0:	e0bfd815 	stw	r2,-160(fp)
     df4:	18800217 	ldw	r2,8(r3)
     df8:	e0bfd915 	stw	r2,-156(fp)
     dfc:	18800317 	ldw	r2,12(r3)
     e00:	e0bfda15 	stw	r2,-152(fp)
     e04:	18800417 	ldw	r2,16(r3)
     e08:	e0bfdb15 	stw	r2,-148(fp)
     e0c:	18800517 	ldw	r2,20(r3)
     e10:	e0bfdc15 	stw	r2,-144(fp)
     e14:	18800617 	ldw	r2,24(r3)
     e18:	e0bfdd15 	stw	r2,-140(fp)
     e1c:	18800717 	ldw	r2,28(r3)
     e20:	e0bfde15 	stw	r2,-136(fp)
     e24:	18800817 	ldw	r2,32(r3)
     e28:	e0bfdf15 	stw	r2,-132(fp)
     e2c:	1880090b 	ldhu	r2,36(r3)
     e30:	e0bfe00d 	sth	r2,-128(fp)
     e34:	e13fe084 	addi	r4,fp,-126
     e38:	01800a84 	movi	r6,42
     e3c:	000b883a 	mov	r5,zero
     e40:	00032e80 	call	32e8 <memset>
	char text_Record[20] = "Record\0";
     e44:	00c00074 	movhi	r3,1
     e48:	18ef7904 	addi	r3,r3,-16924
     e4c:	18800017 	ldw	r2,0(r3)
     e50:	e0bfeb15 	stw	r2,-84(fp)
     e54:	18800117 	ldw	r2,4(r3)
     e58:	e0bfec15 	stw	r2,-80(fp)
     e5c:	e03fed15 	stw	zero,-76(fp)
     e60:	e03fee15 	stw	zero,-72(fp)
     e64:	e03fef15 	stw	zero,-68(fp)
	char text_Play[20] = "Play\0";
     e68:	00c00074 	movhi	r3,1
     e6c:	18ef7e04 	addi	r3,r3,-16904
     e70:	18800017 	ldw	r2,0(r3)
     e74:	e0bff015 	stw	r2,-64(fp)
     e78:	1880010b 	ldhu	r2,4(r3)
     e7c:	e0bff10d 	sth	r2,-60(fp)
     e80:	e03ff18d 	sth	zero,-58(fp)
     e84:	e03ff20d 	sth	zero,-56(fp)
     e88:	e03ff28d 	sth	zero,-54(fp)
     e8c:	e03ff30d 	sth	zero,-52(fp)
     e90:	e03ff38d 	sth	zero,-50(fp)
     e94:	e03ff40d 	sth	zero,-48(fp)
     e98:	e03ff48d 	sth	zero,-46(fp)
	char text_Echo[20] = "Echo\0";
     e9c:	00c00074 	movhi	r3,1
     ea0:	18ef8304 	addi	r3,r3,-16884
     ea4:	18800017 	ldw	r2,0(r3)
     ea8:	e0bff515 	stw	r2,-44(fp)
     eac:	1880010b 	ldhu	r2,4(r3)
     eb0:	e0bff60d 	sth	r2,-40(fp)
     eb4:	e03ff68d 	sth	zero,-38(fp)
     eb8:	e03ff70d 	sth	zero,-36(fp)
     ebc:	e03ff78d 	sth	zero,-34(fp)
     ec0:	e03ff80d 	sth	zero,-32(fp)
     ec4:	e03ff88d 	sth	zero,-30(fp)
     ec8:	e03ff90d 	sth	zero,-28(fp)
     ecc:	e03ff98d 	sth	zero,-26(fp)
	char test_Audio[20] = "Audio Plot\0";
     ed0:	00c00074 	movhi	r3,1
     ed4:	18ef8804 	addi	r3,r3,-16864
     ed8:	18800017 	ldw	r2,0(r3)
     edc:	e0bffa15 	stw	r2,-24(fp)
     ee0:	18800117 	ldw	r2,4(r3)
     ee4:	e0bffb15 	stw	r2,-20(fp)
     ee8:	18800217 	ldw	r2,8(r3)
     eec:	e0bffc15 	stw	r2,-16(fp)
     ef0:	e03ffd15 	stw	zero,-12(fp)
     ef4:	e03ffe15 	stw	zero,-8(fp)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     ef8:	e13fd217 	ldw	r4,-184(fp)
     efc:	000b883a 	mov	r5,zero
     f00:	000d883a 	mov	r6,zero
     f04:	00053ac0 	call	53ac <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     f08:	e17fd704 	addi	r5,fp,-164
     f0c:	e13fd217 	ldw	r4,-184(fp)
     f10:	00052e80 	call	52e8 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     f14:	e13fd217 	ldw	r4,-184(fp)
     f18:	00056140 	call	5614 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     f1c:	01000074 	movhi	r4,1
     f20:	212f3304 	addi	r4,r4,-17204
     f24:	0006b740 	call	6b74 <alt_up_pixel_buffer_dma_open_dev>
     f28:	e0bfcf15 	stw	r2,-196(fp)
	if ( pixel_buffer_dev == NULL)
     f2c:	e0bfcf17 	ldw	r2,-196(fp)
     f30:	1004c03a 	cmpne	r2,r2,zero
     f34:	1000041e 	bne	r2,zero,f48 <main+0x474>
		alt_printf ("Error: could not open pixel buffer device\n");
     f38:	01000074 	movhi	r4,1
     f3c:	212f3904 	addi	r4,r4,-17180
     f40:	00036980 	call	3698 <alt_printf>
     f44:	00000306 	br	f54 <main+0x480>
	else
		alt_printf ("Opened pixel buffer device\n");
     f48:	01000074 	movhi	r4,1
     f4c:	212f4404 	addi	r4,r4,-17136
     f50:	00036980 	call	3698 <alt_printf>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     f54:	01000074 	movhi	r4,1
     f58:	212f4b04 	addi	r4,r4,-17108
     f5c:	00068f40 	call	68f4 <alt_up_char_buffer_open_dev>
     f60:	e0bfd015 	stw	r2,-192(fp)
	if ( char_buffer_dev == NULL)
     f64:	e0bfd017 	ldw	r2,-192(fp)
     f68:	1004c03a 	cmpne	r2,r2,zero
     f6c:	1000041e 	bne	r2,zero,f80 <main+0x4ac>
		alt_printf ("Error: could not open character buffer device\n");
     f70:	01000074 	movhi	r4,1
     f74:	212f5104 	addi	r4,r4,-17084
     f78:	00036980 	call	3698 <alt_printf>
     f7c:	00000306 	br	f8c <main+0x4b8>
	else
		alt_printf ("Opened character buffer device\n");
     f80:	01000074 	movhi	r4,1
     f84:	212f5d04 	addi	r4,r4,-17036
     f88:	00036980 	call	3698 <alt_printf>


	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     f8c:	00804fc4 	movi	r2,319
     f90:	e0bfc515 	stw	r2,-236(fp)
     f94:	00803bc4 	movi	r2,239
     f98:	e0bfc415 	stw	r2,-240(fp)
	color = 0x1863;		// a dark grey color
     f9c:	008618c4 	movi	r2,6243
     fa0:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
     fa4:	e0ffc10f 	ldh	r3,-252(fp)
     fa8:	e0bfc417 	ldw	r2,-240(fp)
     fac:	d8800015 	stw	r2,0(sp)
     fb0:	d8c00115 	stw	r3,4(sp)
     fb4:	d8000215 	stw	zero,8(sp)
     fb8:	e13fcf17 	ldw	r4,-196(fp)
     fbc:	000b883a 	mov	r5,zero
     fc0:	000d883a 	mov	r6,zero
     fc4:	e1ffc517 	ldw	r7,-236(fp)
     fc8:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		screen_y, color, 0); // fill the screen
	
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	blue_x1 = 0; blue_x2 = 100; blue_y1 = 0; blue_y2 = 20;
     fcc:	e03fc915 	stw	zero,-220(fp)
     fd0:	00801904 	movi	r2,100
     fd4:	e0bfc715 	stw	r2,-228(fp)
     fd8:	e03fc815 	stw	zero,-224(fp)
     fdc:	00800504 	movi	r2,20
     fe0:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x0360;		// a medium blue color
     fe4:	0080d804 	movi	r2,864
     fe8:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
     fec:	e0bfc917 	ldw	r2,-220(fp)
     ff0:	1085883a 	add	r2,r2,r2
     ff4:	1085883a 	add	r2,r2,r2
     ff8:	100b883a 	mov	r5,r2
     ffc:	e0bfc817 	ldw	r2,-224(fp)
    1000:	1085883a 	add	r2,r2,r2
    1004:	1085883a 	add	r2,r2,r2
    1008:	100d883a 	mov	r6,r2
    100c:	e0bfc717 	ldw	r2,-228(fp)
    1010:	1085883a 	add	r2,r2,r2
    1014:	1085883a 	add	r2,r2,r2
    1018:	100f883a 	mov	r7,r2
    101c:	e0bfc617 	ldw	r2,-232(fp)
    1020:	1085883a 	add	r2,r2,r2
    1024:	1085883a 	add	r2,r2,r2
    1028:	e0ffc10f 	ldh	r3,-252(fp)
    102c:	d8800015 	stw	r2,0(sp)
    1030:	d8c00115 	stw	r3,4(sp)
    1034:	d8000215 	stw	zero,8(sp)
    1038:	e13fcf17 	ldw	r4,-196(fp)
    103c:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);

	//Green Box For Record //Record ******************
	blue_x1 = 15; blue_x2 = 25; blue_y1 = 4; blue_y2 = 14;
    1040:	008003c4 	movi	r2,15
    1044:	e0bfc915 	stw	r2,-220(fp)
    1048:	00800644 	movi	r2,25
    104c:	e0bfc715 	stw	r2,-228(fp)
    1050:	00800104 	movi	r2,4
    1054:	e0bfc815 	stw	r2,-224(fp)
    1058:	00800384 	movi	r2,14
    105c:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x100F;		// a medium blue color
    1060:	008403c4 	movi	r2,4111
    1064:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1068:	e0bfc917 	ldw	r2,-220(fp)
    106c:	1085883a 	add	r2,r2,r2
    1070:	1085883a 	add	r2,r2,r2
    1074:	100b883a 	mov	r5,r2
    1078:	e0bfc817 	ldw	r2,-224(fp)
    107c:	1085883a 	add	r2,r2,r2
    1080:	1085883a 	add	r2,r2,r2
    1084:	100d883a 	mov	r6,r2
    1088:	e0bfc717 	ldw	r2,-228(fp)
    108c:	1085883a 	add	r2,r2,r2
    1090:	1085883a 	add	r2,r2,r2
    1094:	100f883a 	mov	r7,r2
    1098:	e0bfc617 	ldw	r2,-232(fp)
    109c:	1085883a 	add	r2,r2,r2
    10a0:	1085883a 	add	r2,r2,r2
    10a4:	e0ffc10f 	ldh	r3,-252(fp)
    10a8:	d8800015 	stw	r2,0(sp)
    10ac:	d8c00115 	stw	r3,4(sp)
    10b0:	d8000215 	stw	zero,8(sp)
    10b4:	e13fcf17 	ldw	r4,-196(fp)
    10b8:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, text_Record, blue_x1 + 2, blue_y1 + 4);
    10bc:	e0bfc917 	ldw	r2,-220(fp)
    10c0:	10800084 	addi	r2,r2,2
    10c4:	100d883a 	mov	r6,r2
    10c8:	e0bfc817 	ldw	r2,-224(fp)
    10cc:	10800104 	addi	r2,r2,4
    10d0:	100f883a 	mov	r7,r2
    10d4:	e17feb04 	addi	r5,fp,-84
    10d8:	e13fd017 	ldw	r4,-192(fp)
    10dc:	0006a040 	call	6a04 <alt_up_char_buffer_string>

	//Green Box For Play //PLAY**********************
	blue_x1 = 35; blue_x2 = 45; blue_y1 = 4; blue_y2 = 14;
    10e0:	008008c4 	movi	r2,35
    10e4:	e0bfc915 	stw	r2,-220(fp)
    10e8:	00800b44 	movi	r2,45
    10ec:	e0bfc715 	stw	r2,-228(fp)
    10f0:	00800104 	movi	r2,4
    10f4:	e0bfc815 	stw	r2,-224(fp)
    10f8:	00800384 	movi	r2,14
    10fc:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x100F;		// a medium blue color
    1100:	008403c4 	movi	r2,4111
    1104:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1108:	e0bfc917 	ldw	r2,-220(fp)
    110c:	1085883a 	add	r2,r2,r2
    1110:	1085883a 	add	r2,r2,r2
    1114:	100b883a 	mov	r5,r2
    1118:	e0bfc817 	ldw	r2,-224(fp)
    111c:	1085883a 	add	r2,r2,r2
    1120:	1085883a 	add	r2,r2,r2
    1124:	100d883a 	mov	r6,r2
    1128:	e0bfc717 	ldw	r2,-228(fp)
    112c:	1085883a 	add	r2,r2,r2
    1130:	1085883a 	add	r2,r2,r2
    1134:	100f883a 	mov	r7,r2
    1138:	e0bfc617 	ldw	r2,-232(fp)
    113c:	1085883a 	add	r2,r2,r2
    1140:	1085883a 	add	r2,r2,r2
    1144:	e0ffc10f 	ldh	r3,-252(fp)
    1148:	d8800015 	stw	r2,0(sp)
    114c:	d8c00115 	stw	r3,4(sp)
    1150:	d8000215 	stw	zero,8(sp)
    1154:	e13fcf17 	ldw	r4,-196(fp)
    1158:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, text_Play, blue_x1 + 4, blue_y1 + 4);
    115c:	e0bfc917 	ldw	r2,-220(fp)
    1160:	10800104 	addi	r2,r2,4
    1164:	100d883a 	mov	r6,r2
    1168:	e0bfc817 	ldw	r2,-224(fp)
    116c:	10800104 	addi	r2,r2,4
    1170:	100f883a 	mov	r7,r2
    1174:	e17ff004 	addi	r5,fp,-64
    1178:	e13fd017 	ldw	r4,-192(fp)
    117c:	0006a040 	call	6a04 <alt_up_char_buffer_string>

	//Green Box For Echo //Echo**********************
	blue_x1 = 55; blue_x2 = 65; blue_y1 = 4; blue_y2 = 14;
    1180:	00800dc4 	movi	r2,55
    1184:	e0bfc915 	stw	r2,-220(fp)
    1188:	00801044 	movi	r2,65
    118c:	e0bfc715 	stw	r2,-228(fp)
    1190:	00800104 	movi	r2,4
    1194:	e0bfc815 	stw	r2,-224(fp)
    1198:	00800384 	movi	r2,14
    119c:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x100F;		// a medium blue color
    11a0:	008403c4 	movi	r2,4111
    11a4:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    11a8:	e0bfc917 	ldw	r2,-220(fp)
    11ac:	1085883a 	add	r2,r2,r2
    11b0:	1085883a 	add	r2,r2,r2
    11b4:	100b883a 	mov	r5,r2
    11b8:	e0bfc817 	ldw	r2,-224(fp)
    11bc:	1085883a 	add	r2,r2,r2
    11c0:	1085883a 	add	r2,r2,r2
    11c4:	100d883a 	mov	r6,r2
    11c8:	e0bfc717 	ldw	r2,-228(fp)
    11cc:	1085883a 	add	r2,r2,r2
    11d0:	1085883a 	add	r2,r2,r2
    11d4:	100f883a 	mov	r7,r2
    11d8:	e0bfc617 	ldw	r2,-232(fp)
    11dc:	1085883a 	add	r2,r2,r2
    11e0:	1085883a 	add	r2,r2,r2
    11e4:	e0ffc10f 	ldh	r3,-252(fp)
    11e8:	d8800015 	stw	r2,0(sp)
    11ec:	d8c00115 	stw	r3,4(sp)
    11f0:	d8000215 	stw	zero,8(sp)
    11f4:	e13fcf17 	ldw	r4,-196(fp)
    11f8:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, text_Echo, blue_x1 + 4, blue_y1 + 4);
    11fc:	e0bfc917 	ldw	r2,-220(fp)
    1200:	10800104 	addi	r2,r2,4
    1204:	100d883a 	mov	r6,r2
    1208:	e0bfc817 	ldw	r2,-224(fp)
    120c:	10800104 	addi	r2,r2,4
    1210:	100f883a 	mov	r7,r2
    1214:	e17ff504 	addi	r5,fp,-44
    1218:	e13fd017 	ldw	r4,-192(fp)
    121c:	0006a040 	call	6a04 <alt_up_char_buffer_string>

	// Draw Audio Display
	blue_x1 = 0; blue_x2 = 100; blue_y1 = 20; blue_y2 = 60;
    1220:	e03fc915 	stw	zero,-220(fp)
    1224:	00801904 	movi	r2,100
    1228:	e0bfc715 	stw	r2,-228(fp)
    122c:	00800504 	movi	r2,20
    1230:	e0bfc815 	stw	r2,-224(fp)
    1234:	00800f04 	movi	r2,60
    1238:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x0328;		// a medium blue color
    123c:	0080ca04 	movi	r2,808
    1240:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1244:	e0bfc917 	ldw	r2,-220(fp)
    1248:	1085883a 	add	r2,r2,r2
    124c:	1085883a 	add	r2,r2,r2
    1250:	100b883a 	mov	r5,r2
    1254:	e0bfc817 	ldw	r2,-224(fp)
    1258:	1085883a 	add	r2,r2,r2
    125c:	1085883a 	add	r2,r2,r2
    1260:	100d883a 	mov	r6,r2
    1264:	e0bfc717 	ldw	r2,-228(fp)
    1268:	1085883a 	add	r2,r2,r2
    126c:	1085883a 	add	r2,r2,r2
    1270:	100f883a 	mov	r7,r2
    1274:	e0bfc617 	ldw	r2,-232(fp)
    1278:	1085883a 	add	r2,r2,r2
    127c:	1085883a 	add	r2,r2,r2
    1280:	e0ffc10f 	ldh	r3,-252(fp)
    1284:	d8800015 	stw	r2,0(sp)
    1288:	d8c00115 	stw	r3,4(sp)
    128c:	d8000215 	stw	zero,8(sp)
    1290:	e13fcf17 	ldw	r4,-196(fp)
    1294:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);

	//Write Audio
	blue_x1 = 39; blue_y1 = 22;
    1298:	008009c4 	movi	r2,39
    129c:	e0bfc915 	stw	r2,-220(fp)
    12a0:	00800584 	movi	r2,22
    12a4:	e0bfc815 	stw	r2,-224(fp)
	color = 0xABCD;
    12a8:	00aaf344 	movi	r2,-21555
    12ac:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_char_buffer_string (char_buffer_dev, test_Audio, blue_x1 , blue_y1 );
    12b0:	e1bfc917 	ldw	r6,-220(fp)
    12b4:	e1ffc817 	ldw	r7,-224(fp)
    12b8:	e17ffa04 	addi	r5,fp,-24
    12bc:	e13fd017 	ldw	r4,-192(fp)
    12c0:	0006a040 	call	6a04 <alt_up_char_buffer_string>
	//Audio Line
	blue_x1 = 10; blue_x2 = 70; blue_y1 = 21;
    12c4:	00800284 	movi	r2,10
    12c8:	e0bfc915 	stw	r2,-220(fp)
    12cc:	00801184 	movi	r2,70
    12d0:	e0bfc715 	stw	r2,-228(fp)
    12d4:	00800544 	movi	r2,21
    12d8:	e0bfc815 	stw	r2,-224(fp)
	color = 0xABCD;
    12dc:	00aaf344 	movi	r2,-21555
    12e0:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev,blue_x1 * 4, blue_x2 * 4, blue_y1 * 4, color, 0);
    12e4:	e0bfc917 	ldw	r2,-220(fp)
    12e8:	1085883a 	add	r2,r2,r2
    12ec:	1085883a 	add	r2,r2,r2
    12f0:	100b883a 	mov	r5,r2
    12f4:	e0bfc717 	ldw	r2,-228(fp)
    12f8:	1085883a 	add	r2,r2,r2
    12fc:	1085883a 	add	r2,r2,r2
    1300:	100d883a 	mov	r6,r2
    1304:	e0bfc817 	ldw	r2,-224(fp)
    1308:	1085883a 	add	r2,r2,r2
    130c:	1085883a 	add	r2,r2,r2
    1310:	100f883a 	mov	r7,r2
    1314:	e0bfc10f 	ldh	r2,-252(fp)
    1318:	d8800015 	stw	r2,0(sp)
    131c:	d8000115 	stw	zero,4(sp)
    1320:	e13fcf17 	ldw	r4,-196(fp)
    1324:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>
	blue_x1 = 10; blue_x2 = 70; blue_y1 = 23;
    1328:	00800284 	movi	r2,10
    132c:	e0bfc915 	stw	r2,-220(fp)
    1330:	00801184 	movi	r2,70
    1334:	e0bfc715 	stw	r2,-228(fp)
    1338:	008005c4 	movi	r2,23
    133c:	e0bfc815 	stw	r2,-224(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev,blue_x1 * 4, blue_x2 * 4, blue_y1 * 4, color, 0);
    1340:	e0bfc917 	ldw	r2,-220(fp)
    1344:	1085883a 	add	r2,r2,r2
    1348:	1085883a 	add	r2,r2,r2
    134c:	100b883a 	mov	r5,r2
    1350:	e0bfc717 	ldw	r2,-228(fp)
    1354:	1085883a 	add	r2,r2,r2
    1358:	1085883a 	add	r2,r2,r2
    135c:	100d883a 	mov	r6,r2
    1360:	e0bfc817 	ldw	r2,-224(fp)
    1364:	1085883a 	add	r2,r2,r2
    1368:	1085883a 	add	r2,r2,r2
    136c:	100f883a 	mov	r7,r2
    1370:	e0bfc10f 	ldh	r2,-252(fp)
    1374:	d8800015 	stw	r2,0(sp)
    1378:	d8000115 	stw	zero,4(sp)
    137c:	e13fcf17 	ldw	r4,-196(fp)
    1380:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>
	//Audio OverFlow
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev,10, 300, 105, 0xABCD, 0);
    1384:	00aaf354 	movui	r2,43981
    1388:	d8800015 	stw	r2,0(sp)
    138c:	d8000115 	stw	zero,4(sp)
    1390:	e13fcf17 	ldw	r4,-196(fp)
    1394:	01400284 	movi	r5,10
    1398:	01804b04 	movi	r6,300
    139c:	01c01a44 	movi	r7,105
    13a0:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>

	
	char_buffer_x = 79; char_buffer_y = 59;
    13a4:	008013c4 	movi	r2,79
    13a8:	e0bfc315 	stw	r2,-244(fp)
    13ac:	00800ec4 	movi	r2,59
    13b0:	e0bfc215 	stw	r2,-248(fp)
	MouseX = 10;
    13b4:	00800284 	movi	r2,10
    13b8:	e0bfcd15 	stw	r2,-204(fp)
	MouseY = 10;
    13bc:	00800284 	movi	r2,10
    13c0:	e0bfcc15 	stw	r2,-208(fp)
	int temp1;
	int temp2;
	int temp3;
	Echo_complete = 0;
    13c4:	00800074 	movhi	r2,1
    13c8:	10808504 	addi	r2,r2,532
    13cc:	10000015 	stw	zero,0(r2)
	Play_Index = 0;
    13d0:	00800074 	movhi	r2,1
    13d4:	10808204 	addi	r2,r2,520
    13d8:	10000015 	stw	zero,0(r2)
    13dc:	00000006 	br	13e0 <main+0x90c>
	/* this loops "bounces" the word ALTERA around on the VGA screen */
	while (1)
	{
			while(!timeout);
    13e0:	00800074 	movhi	r2,1
    13e4:	10808904 	addi	r2,r2,548
    13e8:	10800017 	ldw	r2,0(r2)
    13ec:	1005003a 	cmpeq	r2,r2,zero
    13f0:	103ffb1e 	bne	r2,zero,13e0 <main+0x90c>
			// wait to synchronize with timeout, which is set by the interval timer ISR
			/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */
			HEXxy_PS2 (&up_dev, byte1, byte2, byte3);
    13f4:	00800074 	movhi	r2,1
    13f8:	10808304 	addi	r2,r2,524
    13fc:	10800003 	ldbu	r2,0(r2)
    1400:	11403fcc 	andi	r5,r2,255
    1404:	00800074 	movhi	r2,1
    1408:	10808104 	addi	r2,r2,516
    140c:	10800003 	ldbu	r2,0(r2)
    1410:	11803fcc 	andi	r6,r2,255
    1414:	00800074 	movhi	r2,1
    1418:	10808144 	addi	r2,r2,517
    141c:	10800003 	ldbu	r2,0(r2)
    1420:	11c03fcc 	andi	r7,r2,255
    1424:	01000074 	movhi	r4,1
    1428:	2100b204 	addi	r4,r4,712
    142c:	0001d8c0 	call	1d8c <HEXxy_PS2>
			temp1 = byte1;
    1430:	00800074 	movhi	r2,1
    1434:	10808304 	addi	r2,r2,524
    1438:	10800003 	ldbu	r2,0(r2)
    143c:	10803fcc 	andi	r2,r2,255
    1440:	e0bfbf15 	stw	r2,-260(fp)
			temp2 = byte2;
    1444:	00800074 	movhi	r2,1
    1448:	10808104 	addi	r2,r2,516
    144c:	10800003 	ldbu	r2,0(r2)
    1450:	10803fcc 	andi	r2,r2,255
    1454:	e0bfbe15 	stw	r2,-264(fp)
			temp3 = byte3;
    1458:	00800074 	movhi	r2,1
    145c:	10808144 	addi	r2,r2,517
    1460:	10800003 	ldbu	r2,0(r2)
    1464:	10803fcc 	andi	r2,r2,255
    1468:	e0bfbd15 	stw	r2,-268(fp)
			if((temp1 >= 100 && !Xsign) || (temp2>= 100 && !Ysign)){
    146c:	e0bfbf17 	ldw	r2,-260(fp)
    1470:	10801910 	cmplti	r2,r2,100
    1474:	1000031e 	bne	r2,zero,1484 <main+0x9b0>
    1478:	d0a84917 	ldw	r2,-24284(gp)
    147c:	1005003a 	cmpeq	r2,r2,zero
    1480:	103fd71e 	bne	r2,zero,13e0 <main+0x90c>
    1484:	e0bfbe17 	ldw	r2,-264(fp)
    1488:	10801910 	cmplti	r2,r2,100
    148c:	1000031e 	bne	r2,zero,149c <main+0x9c8>
    1490:	d0a84d17 	ldw	r2,-24268(gp)
    1494:	1005003a 	cmpeq	r2,r2,zero
    1498:	103fd11e 	bne	r2,zero,13e0 <main+0x90c>
				continue;
			}
			if((temp1 <= 150 && Xsign) || (temp2<= 150 && Ysign)){
    149c:	e0bfbf17 	ldw	r2,-260(fp)
    14a0:	108025c8 	cmpgei	r2,r2,151
    14a4:	1000031e 	bne	r2,zero,14b4 <main+0x9e0>
    14a8:	d0a84917 	ldw	r2,-24284(gp)
    14ac:	1004c03a 	cmpne	r2,r2,zero
    14b0:	103fcb1e 	bne	r2,zero,13e0 <main+0x90c>
    14b4:	e0bfbe17 	ldw	r2,-264(fp)
    14b8:	108025c8 	cmpgei	r2,r2,151
    14bc:	1000031e 	bne	r2,zero,14cc <main+0x9f8>
    14c0:	d0a84d17 	ldw	r2,-24268(gp)
    14c4:	1004c03a 	cmpne	r2,r2,zero
    14c8:	103fc51e 	bne	r2,zero,13e0 <main+0x90c>
				continue;
			}


			//Record interrupt
			if(Temp_MouseX >= 60 && Temp_MouseX <= 100 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    14cc:	e0bfcb17 	ldw	r2,-212(fp)
    14d0:	10800f10 	cmplti	r2,r2,60
    14d4:	10006f1e 	bne	r2,zero,1694 <main+0xbc0>
    14d8:	e0bfcb17 	ldw	r2,-212(fp)
    14dc:	10801948 	cmpgei	r2,r2,101
    14e0:	10006c1e 	bne	r2,zero,1694 <main+0xbc0>
    14e4:	e0bfca17 	ldw	r2,-216(fp)
    14e8:	10800410 	cmplti	r2,r2,16
    14ec:	1000691e 	bne	r2,zero,1694 <main+0xbc0>
    14f0:	e0bfca17 	ldw	r2,-216(fp)
    14f4:	10800e48 	cmpgei	r2,r2,57
    14f8:	1000661e 	bne	r2,zero,1694 <main+0xbc0>
				if(Temp_MouseX <= 62 || Temp_MouseX >= 98 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    14fc:	e0bfcb17 	ldw	r2,-212(fp)
    1500:	10800fd0 	cmplti	r2,r2,63
    1504:	1000091e 	bne	r2,zero,152c <main+0xa58>
    1508:	e0bfcb17 	ldw	r2,-212(fp)
    150c:	10801888 	cmpgei	r2,r2,98
    1510:	1000061e 	bne	r2,zero,152c <main+0xa58>
    1514:	e0bfca17 	ldw	r2,-216(fp)
    1518:	10800550 	cmplti	r2,r2,21
    151c:	1000031e 	bne	r2,zero,152c <main+0xa58>
    1520:	e0bfca17 	ldw	r2,-216(fp)
    1524:	10800d10 	cmplti	r2,r2,52
    1528:	1000481e 	bne	r2,zero,164c <main+0xb78>

					// draw a medium-blue box in the middle of the screen, using character buffer coordinates
					blue_x1 = 14; blue_x2 = 26; blue_y1 = 3; blue_y2 = 15;
    152c:	00800384 	movi	r2,14
    1530:	e0bfc915 	stw	r2,-220(fp)
    1534:	00800684 	movi	r2,26
    1538:	e0bfc715 	stw	r2,-228(fp)
    153c:	008000c4 	movi	r2,3
    1540:	e0bfc815 	stw	r2,-224(fp)
    1544:	008003c4 	movi	r2,15
    1548:	e0bfc615 	stw	r2,-232(fp)
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x0360;		// a medium blue color
    154c:	0080d804 	movi	r2,864
    1550:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1554:	e0bfc917 	ldw	r2,-220(fp)
    1558:	1085883a 	add	r2,r2,r2
    155c:	1085883a 	add	r2,r2,r2
    1560:	100b883a 	mov	r5,r2
    1564:	e0bfc817 	ldw	r2,-224(fp)
    1568:	1085883a 	add	r2,r2,r2
    156c:	1085883a 	add	r2,r2,r2
    1570:	100d883a 	mov	r6,r2
    1574:	e0bfc717 	ldw	r2,-228(fp)
    1578:	1085883a 	add	r2,r2,r2
    157c:	1085883a 	add	r2,r2,r2
    1580:	100f883a 	mov	r7,r2
    1584:	e0bfc617 	ldw	r2,-232(fp)
    1588:	1085883a 	add	r2,r2,r2
    158c:	1085883a 	add	r2,r2,r2
    1590:	e0ffc10f 	ldh	r3,-252(fp)
    1594:	d8800015 	stw	r2,0(sp)
    1598:	d8c00115 	stw	r3,4(sp)
    159c:	d8000215 	stw	zero,8(sp)
    15a0:	e13fcf17 	ldw	r4,-196(fp)
    15a4:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);

					//Green Box For Record //Record ******************
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					blue_x1 = 15; blue_x2 = 25; blue_y1 = 4; blue_y2 = 14;
    15a8:	008003c4 	movi	r2,15
    15ac:	e0bfc915 	stw	r2,-220(fp)
    15b0:	00800644 	movi	r2,25
    15b4:	e0bfc715 	stw	r2,-228(fp)
    15b8:	00800104 	movi	r2,4
    15bc:	e0bfc815 	stw	r2,-224(fp)
    15c0:	00800384 	movi	r2,14
    15c4:	e0bfc615 	stw	r2,-232(fp)
					color = 0x100F;
    15c8:	008403c4 	movi	r2,4111
    15cc:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    15d0:	e0bfc917 	ldw	r2,-220(fp)
    15d4:	1085883a 	add	r2,r2,r2
    15d8:	1085883a 	add	r2,r2,r2
    15dc:	100b883a 	mov	r5,r2
    15e0:	e0bfc817 	ldw	r2,-224(fp)
    15e4:	1085883a 	add	r2,r2,r2
    15e8:	1085883a 	add	r2,r2,r2
    15ec:	100d883a 	mov	r6,r2
    15f0:	e0bfc717 	ldw	r2,-228(fp)
    15f4:	1085883a 	add	r2,r2,r2
    15f8:	1085883a 	add	r2,r2,r2
    15fc:	100f883a 	mov	r7,r2
    1600:	e0bfc617 	ldw	r2,-232(fp)
    1604:	1085883a 	add	r2,r2,r2
    1608:	1085883a 	add	r2,r2,r2
    160c:	e0ffc10f 	ldh	r3,-252(fp)
    1610:	d8800015 	stw	r2,0(sp)
    1614:	d8c00115 	stw	r3,4(sp)
    1618:	d8000215 	stw	zero,8(sp)
    161c:	e13fcf17 	ldw	r4,-196(fp)
    1620:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Record, blue_x1 + 2, blue_y1 + 4);
    1624:	e0bfc917 	ldw	r2,-220(fp)
    1628:	10800084 	addi	r2,r2,2
    162c:	100d883a 	mov	r6,r2
    1630:	e0bfc817 	ldw	r2,-224(fp)
    1634:	10800104 	addi	r2,r2,4
    1638:	100f883a 	mov	r7,r2
    163c:	e17feb04 	addi	r5,fp,-84
    1640:	e13fd017 	ldw	r4,-192(fp)
    1644:	0006a040 	call	6a04 <alt_up_char_buffer_string>
			}


			//Record interrupt
			if(Temp_MouseX >= 60 && Temp_MouseX <= 100 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
				if(Temp_MouseX <= 62 || Temp_MouseX >= 98 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    1648:	00011306 	br	1a98 <main+0xfc4>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Record, blue_x1 + 2, blue_y1 + 4);

				}
				else {
					color = 0x100F;		// a medium blue color
    164c:	008403c4 	movi	r2,4111
    1650:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    1654:	e0bfcb17 	ldw	r2,-212(fp)
    1658:	117fff84 	addi	r5,r2,-2
    165c:	e0bfca17 	ldw	r2,-216(fp)
    1660:	11bfff84 	addi	r6,r2,-2
    1664:	e0bfcb17 	ldw	r2,-212(fp)
    1668:	11c00084 	addi	r7,r2,2
    166c:	e0bfca17 	ldw	r2,-216(fp)
    1670:	10800084 	addi	r2,r2,2
    1674:	e0ffc10f 	ldh	r3,-252(fp)
    1678:	d8800015 	stw	r2,0(sp)
    167c:	d8c00115 	stw	r3,4(sp)
    1680:	00800044 	movi	r2,1
    1684:	d8800215 	stw	r2,8(sp)
    1688:	e13fcf17 	ldw	r4,-196(fp)
    168c:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
				continue;
			}


			//Record interrupt
			if(Temp_MouseX >= 60 && Temp_MouseX <= 100 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1690:	00010106 	br	1a98 <main+0xfc4>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}


			else if(Temp_MouseX >= 140 && Temp_MouseX <= 180 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1694:	e0bfcb17 	ldw	r2,-212(fp)
    1698:	10802310 	cmplti	r2,r2,140
    169c:	10006f1e 	bne	r2,zero,185c <main+0xd88>
    16a0:	e0bfcb17 	ldw	r2,-212(fp)
    16a4:	10802d48 	cmpgei	r2,r2,181
    16a8:	10006c1e 	bne	r2,zero,185c <main+0xd88>
    16ac:	e0bfca17 	ldw	r2,-216(fp)
    16b0:	10800410 	cmplti	r2,r2,16
    16b4:	1000691e 	bne	r2,zero,185c <main+0xd88>
    16b8:	e0bfca17 	ldw	r2,-216(fp)
    16bc:	10800e48 	cmpgei	r2,r2,57
    16c0:	1000661e 	bne	r2,zero,185c <main+0xd88>
				if(Temp_MouseX <= 142 || Temp_MouseX >= 178 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    16c4:	e0bfcb17 	ldw	r2,-212(fp)
    16c8:	108023d0 	cmplti	r2,r2,143
    16cc:	1000091e 	bne	r2,zero,16f4 <main+0xc20>
    16d0:	e0bfcb17 	ldw	r2,-212(fp)
    16d4:	10802c88 	cmpgei	r2,r2,178
    16d8:	1000061e 	bne	r2,zero,16f4 <main+0xc20>
    16dc:	e0bfca17 	ldw	r2,-216(fp)
    16e0:	10800550 	cmplti	r2,r2,21
    16e4:	1000031e 	bne	r2,zero,16f4 <main+0xc20>
    16e8:	e0bfca17 	ldw	r2,-216(fp)
    16ec:	10800d10 	cmplti	r2,r2,52
    16f0:	1000481e 	bne	r2,zero,1814 <main+0xd40>

					// draw a medium-blue box in the middle of the screen, using character buffer coordinates
					blue_x1 = 34; blue_x2 = 46; blue_y1 = 3; blue_y2 = 15;
    16f4:	00800884 	movi	r2,34
    16f8:	e0bfc915 	stw	r2,-220(fp)
    16fc:	00800b84 	movi	r2,46
    1700:	e0bfc715 	stw	r2,-228(fp)
    1704:	008000c4 	movi	r2,3
    1708:	e0bfc815 	stw	r2,-224(fp)
    170c:	008003c4 	movi	r2,15
    1710:	e0bfc615 	stw	r2,-232(fp)
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x0360;		// a medium blue color
    1714:	0080d804 	movi	r2,864
    1718:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    171c:	e0bfc917 	ldw	r2,-220(fp)
    1720:	1085883a 	add	r2,r2,r2
    1724:	1085883a 	add	r2,r2,r2
    1728:	100b883a 	mov	r5,r2
    172c:	e0bfc817 	ldw	r2,-224(fp)
    1730:	1085883a 	add	r2,r2,r2
    1734:	1085883a 	add	r2,r2,r2
    1738:	100d883a 	mov	r6,r2
    173c:	e0bfc717 	ldw	r2,-228(fp)
    1740:	1085883a 	add	r2,r2,r2
    1744:	1085883a 	add	r2,r2,r2
    1748:	100f883a 	mov	r7,r2
    174c:	e0bfc617 	ldw	r2,-232(fp)
    1750:	1085883a 	add	r2,r2,r2
    1754:	1085883a 	add	r2,r2,r2
    1758:	e0ffc10f 	ldh	r3,-252(fp)
    175c:	d8800015 	stw	r2,0(sp)
    1760:	d8c00115 	stw	r3,4(sp)
    1764:	d8000215 	stw	zero,8(sp)
    1768:	e13fcf17 	ldw	r4,-196(fp)
    176c:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);

					blue_x1 = 35; blue_x2 = 45; blue_y1 = 4; blue_y2 = 14;
    1770:	008008c4 	movi	r2,35
    1774:	e0bfc915 	stw	r2,-220(fp)
    1778:	00800b44 	movi	r2,45
    177c:	e0bfc715 	stw	r2,-228(fp)
    1780:	00800104 	movi	r2,4
    1784:	e0bfc815 	stw	r2,-224(fp)
    1788:	00800384 	movi	r2,14
    178c:	e0bfc615 	stw	r2,-232(fp)
					//Green Box For Record //Record ******************
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x100F;		//
    1790:	008403c4 	movi	r2,4111
    1794:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1798:	e0bfc917 	ldw	r2,-220(fp)
    179c:	1085883a 	add	r2,r2,r2
    17a0:	1085883a 	add	r2,r2,r2
    17a4:	100b883a 	mov	r5,r2
    17a8:	e0bfc817 	ldw	r2,-224(fp)
    17ac:	1085883a 	add	r2,r2,r2
    17b0:	1085883a 	add	r2,r2,r2
    17b4:	100d883a 	mov	r6,r2
    17b8:	e0bfc717 	ldw	r2,-228(fp)
    17bc:	1085883a 	add	r2,r2,r2
    17c0:	1085883a 	add	r2,r2,r2
    17c4:	100f883a 	mov	r7,r2
    17c8:	e0bfc617 	ldw	r2,-232(fp)
    17cc:	1085883a 	add	r2,r2,r2
    17d0:	1085883a 	add	r2,r2,r2
    17d4:	e0ffc10f 	ldh	r3,-252(fp)
    17d8:	d8800015 	stw	r2,0(sp)
    17dc:	d8c00115 	stw	r3,4(sp)
    17e0:	d8000215 	stw	zero,8(sp)
    17e4:	e13fcf17 	ldw	r4,-196(fp)
    17e8:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Play, blue_x1 + 4, blue_y1 + 4);
    17ec:	e0bfc917 	ldw	r2,-220(fp)
    17f0:	10800104 	addi	r2,r2,4
    17f4:	100d883a 	mov	r6,r2
    17f8:	e0bfc817 	ldw	r2,-224(fp)
    17fc:	10800104 	addi	r2,r2,4
    1800:	100f883a 	mov	r7,r2
    1804:	e17ff004 	addi	r5,fp,-64
    1808:	e13fd017 	ldw	r4,-192(fp)
    180c:	0006a040 	call	6a04 <alt_up_char_buffer_string>
				}
			}


			else if(Temp_MouseX >= 140 && Temp_MouseX <= 180 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
				if(Temp_MouseX <= 142 || Temp_MouseX >= 178 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    1810:	0000a106 	br	1a98 <main+0xfc4>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Play, blue_x1 + 4, blue_y1 + 4);

				}
				else {
					color = 0x100F;		// a medium blue color
    1814:	008403c4 	movi	r2,4111
    1818:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    181c:	e0bfcb17 	ldw	r2,-212(fp)
    1820:	117fff84 	addi	r5,r2,-2
    1824:	e0bfca17 	ldw	r2,-216(fp)
    1828:	11bfff84 	addi	r6,r2,-2
    182c:	e0bfcb17 	ldw	r2,-212(fp)
    1830:	11c00084 	addi	r7,r2,2
    1834:	e0bfca17 	ldw	r2,-216(fp)
    1838:	10800084 	addi	r2,r2,2
    183c:	e0ffc10f 	ldh	r3,-252(fp)
    1840:	d8800015 	stw	r2,0(sp)
    1844:	d8c00115 	stw	r3,4(sp)
    1848:	00800044 	movi	r2,1
    184c:	d8800215 	stw	r2,8(sp)
    1850:	e13fcf17 	ldw	r4,-196(fp)
    1854:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}


			else if(Temp_MouseX >= 140 && Temp_MouseX <= 180 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1858:	00008f06 	br	1a98 <main+0xfc4>
					color = 0x100F;		// a medium blue color
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			else if(Temp_MouseX >= 220 && Temp_MouseX <= 260 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    185c:	e0bfcb17 	ldw	r2,-212(fp)
    1860:	10803710 	cmplti	r2,r2,220
    1864:	10006f1e 	bne	r2,zero,1a24 <main+0xf50>
    1868:	e0bfcb17 	ldw	r2,-212(fp)
    186c:	10804148 	cmpgei	r2,r2,261
    1870:	10006c1e 	bne	r2,zero,1a24 <main+0xf50>
    1874:	e0bfca17 	ldw	r2,-216(fp)
    1878:	10800410 	cmplti	r2,r2,16
    187c:	1000691e 	bne	r2,zero,1a24 <main+0xf50>
    1880:	e0bfca17 	ldw	r2,-216(fp)
    1884:	10800e48 	cmpgei	r2,r2,57
    1888:	1000661e 	bne	r2,zero,1a24 <main+0xf50>
				if(Temp_MouseX <= 222 || Temp_MouseX >= 258 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    188c:	e0bfcb17 	ldw	r2,-212(fp)
    1890:	108037d0 	cmplti	r2,r2,223
    1894:	1000091e 	bne	r2,zero,18bc <main+0xde8>
    1898:	e0bfcb17 	ldw	r2,-212(fp)
    189c:	10804088 	cmpgei	r2,r2,258
    18a0:	1000061e 	bne	r2,zero,18bc <main+0xde8>
    18a4:	e0bfca17 	ldw	r2,-216(fp)
    18a8:	10800550 	cmplti	r2,r2,21
    18ac:	1000031e 	bne	r2,zero,18bc <main+0xde8>
    18b0:	e0bfca17 	ldw	r2,-216(fp)
    18b4:	10800d10 	cmplti	r2,r2,52
    18b8:	1000481e 	bne	r2,zero,19dc <main+0xf08>

					// draw a medium-blue box in the middle of the screen, using character buffer coordinates
					blue_x1 = 54; blue_x2 = 66; blue_y1 = 3; blue_y2 = 15;
    18bc:	00800d84 	movi	r2,54
    18c0:	e0bfc915 	stw	r2,-220(fp)
    18c4:	00801084 	movi	r2,66
    18c8:	e0bfc715 	stw	r2,-228(fp)
    18cc:	008000c4 	movi	r2,3
    18d0:	e0bfc815 	stw	r2,-224(fp)
    18d4:	008003c4 	movi	r2,15
    18d8:	e0bfc615 	stw	r2,-232(fp)
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x0360;		// a medium blue color
    18dc:	0080d804 	movi	r2,864
    18e0:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    18e4:	e0bfc917 	ldw	r2,-220(fp)
    18e8:	1085883a 	add	r2,r2,r2
    18ec:	1085883a 	add	r2,r2,r2
    18f0:	100b883a 	mov	r5,r2
    18f4:	e0bfc817 	ldw	r2,-224(fp)
    18f8:	1085883a 	add	r2,r2,r2
    18fc:	1085883a 	add	r2,r2,r2
    1900:	100d883a 	mov	r6,r2
    1904:	e0bfc717 	ldw	r2,-228(fp)
    1908:	1085883a 	add	r2,r2,r2
    190c:	1085883a 	add	r2,r2,r2
    1910:	100f883a 	mov	r7,r2
    1914:	e0bfc617 	ldw	r2,-232(fp)
    1918:	1085883a 	add	r2,r2,r2
    191c:	1085883a 	add	r2,r2,r2
    1920:	e0ffc10f 	ldh	r3,-252(fp)
    1924:	d8800015 	stw	r2,0(sp)
    1928:	d8c00115 	stw	r3,4(sp)
    192c:	d8000215 	stw	zero,8(sp)
    1930:	e13fcf17 	ldw	r4,-196(fp)
    1934:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);

					//Green Box For Record //Record ******************
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					blue_x1 = 55; blue_x2 = 65; blue_y1 = 4; blue_y2 = 14;
    1938:	00800dc4 	movi	r2,55
    193c:	e0bfc915 	stw	r2,-220(fp)
    1940:	00801044 	movi	r2,65
    1944:	e0bfc715 	stw	r2,-228(fp)
    1948:	00800104 	movi	r2,4
    194c:	e0bfc815 	stw	r2,-224(fp)
    1950:	00800384 	movi	r2,14
    1954:	e0bfc615 	stw	r2,-232(fp)
					color = 0x100F;
    1958:	008403c4 	movi	r2,4111
    195c:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1960:	e0bfc917 	ldw	r2,-220(fp)
    1964:	1085883a 	add	r2,r2,r2
    1968:	1085883a 	add	r2,r2,r2
    196c:	100b883a 	mov	r5,r2
    1970:	e0bfc817 	ldw	r2,-224(fp)
    1974:	1085883a 	add	r2,r2,r2
    1978:	1085883a 	add	r2,r2,r2
    197c:	100d883a 	mov	r6,r2
    1980:	e0bfc717 	ldw	r2,-228(fp)
    1984:	1085883a 	add	r2,r2,r2
    1988:	1085883a 	add	r2,r2,r2
    198c:	100f883a 	mov	r7,r2
    1990:	e0bfc617 	ldw	r2,-232(fp)
    1994:	1085883a 	add	r2,r2,r2
    1998:	1085883a 	add	r2,r2,r2
    199c:	e0ffc10f 	ldh	r3,-252(fp)
    19a0:	d8800015 	stw	r2,0(sp)
    19a4:	d8c00115 	stw	r3,4(sp)
    19a8:	d8000215 	stw	zero,8(sp)
    19ac:	e13fcf17 	ldw	r4,-196(fp)
    19b0:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Echo, blue_x1 + 4, blue_y1 + 4);
    19b4:	e0bfc917 	ldw	r2,-220(fp)
    19b8:	10800104 	addi	r2,r2,4
    19bc:	100d883a 	mov	r6,r2
    19c0:	e0bfc817 	ldw	r2,-224(fp)
    19c4:	10800104 	addi	r2,r2,4
    19c8:	100f883a 	mov	r7,r2
    19cc:	e17ff504 	addi	r5,fp,-44
    19d0:	e13fd017 	ldw	r4,-192(fp)
    19d4:	0006a040 	call	6a04 <alt_up_char_buffer_string>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			else if(Temp_MouseX >= 220 && Temp_MouseX <= 260 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
				if(Temp_MouseX <= 222 || Temp_MouseX >= 258 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    19d8:	00002f06 	br	1a98 <main+0xfc4>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Echo, blue_x1 + 4, blue_y1 + 4);

				}
				else {
					color = 0x100F;		// a medium blue color
    19dc:	008403c4 	movi	r2,4111
    19e0:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    19e4:	e0bfcb17 	ldw	r2,-212(fp)
    19e8:	117fff84 	addi	r5,r2,-2
    19ec:	e0bfca17 	ldw	r2,-216(fp)
    19f0:	11bfff84 	addi	r6,r2,-2
    19f4:	e0bfcb17 	ldw	r2,-212(fp)
    19f8:	11c00084 	addi	r7,r2,2
    19fc:	e0bfca17 	ldw	r2,-216(fp)
    1a00:	10800084 	addi	r2,r2,2
    1a04:	e0ffc10f 	ldh	r3,-252(fp)
    1a08:	d8800015 	stw	r2,0(sp)
    1a0c:	d8c00115 	stw	r3,4(sp)
    1a10:	00800044 	movi	r2,1
    1a14:	d8800215 	stw	r2,8(sp)
    1a18:	e13fcf17 	ldw	r4,-196(fp)
    1a1c:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
					color = 0x100F;		// a medium blue color
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			else if(Temp_MouseX >= 220 && Temp_MouseX <= 260 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1a20:	00001d06 	br	1a98 <main+0xfc4>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			//Boxe Out
			else if(Temp_MouseX >= 0 && Temp_MouseX <= 400 && Temp_MouseY >= 0 && Temp_MouseY <= 80){
    1a24:	e0bfcb17 	ldw	r2,-212(fp)
    1a28:	1004803a 	cmplt	r2,r2,zero
    1a2c:	10001a1e 	bne	r2,zero,1a98 <main+0xfc4>
    1a30:	e0bfcb17 	ldw	r2,-212(fp)
    1a34:	10806448 	cmpgei	r2,r2,401
    1a38:	1000171e 	bne	r2,zero,1a98 <main+0xfc4>
    1a3c:	e0bfca17 	ldw	r2,-216(fp)
    1a40:	1004803a 	cmplt	r2,r2,zero
    1a44:	1000141e 	bne	r2,zero,1a98 <main+0xfc4>
    1a48:	e0bfca17 	ldw	r2,-216(fp)
    1a4c:	10801448 	cmpgei	r2,r2,81
    1a50:	1000111e 	bne	r2,zero,1a98 <main+0xfc4>
				color = 0x0360;
    1a54:	0080d804 	movi	r2,864
    1a58:	e0bfc10d 	sth	r2,-252(fp)
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    1a5c:	e0bfcb17 	ldw	r2,-212(fp)
    1a60:	117fff84 	addi	r5,r2,-2
    1a64:	e0bfca17 	ldw	r2,-216(fp)
    1a68:	11bfff84 	addi	r6,r2,-2
    1a6c:	e0bfcb17 	ldw	r2,-212(fp)
    1a70:	11c00084 	addi	r7,r2,2
    1a74:	e0bfca17 	ldw	r2,-216(fp)
    1a78:	10800084 	addi	r2,r2,2
    1a7c:	e0ffc10f 	ldh	r3,-252(fp)
    1a80:	d8800015 	stw	r2,0(sp)
    1a84:	d8c00115 	stw	r3,4(sp)
    1a88:	00800044 	movi	r2,1
    1a8c:	d8800215 	stw	r2,8(sp)
    1a90:	e13fcf17 	ldw	r4,-196(fp)
    1a94:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
//				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
//			}

//			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);

			if(Xsign){
    1a98:	d0a84917 	ldw	r2,-24284(gp)
    1a9c:	1005003a 	cmpeq	r2,r2,zero
    1aa0:	1000071e 	bne	r2,zero,1ac0 <main+0xfec>
				MouseX = MouseX - (256-(alt_u8)(temp1)) - 1;
    1aa4:	e0bfbf17 	ldw	r2,-260(fp)
    1aa8:	10c03fcc 	andi	r3,r2,255
    1aac:	e0bfcd17 	ldw	r2,-204(fp)
    1ab0:	1885883a 	add	r2,r3,r2
    1ab4:	10bfbfc4 	addi	r2,r2,-257
    1ab8:	e0bfcd15 	stw	r2,-204(fp)
    1abc:	00000506 	br	1ad4 <main+0x1000>
			}
			else{
				MouseX = MouseX + (alt_u8)(temp1);
    1ac0:	e0bfbf17 	ldw	r2,-260(fp)
    1ac4:	10c03fcc 	andi	r3,r2,255
    1ac8:	e0bfcd17 	ldw	r2,-204(fp)
    1acc:	10c5883a 	add	r2,r2,r3
    1ad0:	e0bfcd15 	stw	r2,-204(fp)
			}
			if(Ysign){
    1ad4:	d0a84d17 	ldw	r2,-24268(gp)
    1ad8:	1005003a 	cmpeq	r2,r2,zero
    1adc:	1000071e 	bne	r2,zero,1afc <main+0x1028>
				MouseY = MouseY + (256-(alt_u8)(temp2)) + 1;
    1ae0:	e0bfbe17 	ldw	r2,-264(fp)
    1ae4:	10c03fcc 	andi	r3,r2,255
    1ae8:	e0bfcc17 	ldw	r2,-208(fp)
    1aec:	10c5c83a 	sub	r2,r2,r3
    1af0:	10804044 	addi	r2,r2,257
    1af4:	e0bfcc15 	stw	r2,-208(fp)
    1af8:	00000506 	br	1b10 <main+0x103c>
			}
			else {
				MouseY = MouseY - (alt_u8)(temp2);
    1afc:	e0bfbe17 	ldw	r2,-264(fp)
    1b00:	10c03fcc 	andi	r3,r2,255
    1b04:	e0bfcc17 	ldw	r2,-208(fp)
    1b08:	10c5c83a 	sub	r2,r2,r3
    1b0c:	e0bfcc15 	stw	r2,-208(fp)
			}
			if(MouseX >= 320){
    1b10:	e0bfcd17 	ldw	r2,-204(fp)
    1b14:	10805010 	cmplti	r2,r2,320
    1b18:	1000021e 	bne	r2,zero,1b24 <main+0x1050>
				MouseX = 320;
    1b1c:	00805004 	movi	r2,320
    1b20:	e0bfcd15 	stw	r2,-204(fp)
			}
			if(MouseX <= 2){
    1b24:	e0bfcd17 	ldw	r2,-204(fp)
    1b28:	108000c8 	cmpgei	r2,r2,3
    1b2c:	1000021e 	bne	r2,zero,1b38 <main+0x1064>
				MouseX = 2;
    1b30:	00800084 	movi	r2,2
    1b34:	e0bfcd15 	stw	r2,-204(fp)
			}
			if(MouseY >= 77){
    1b38:	e0bfcc17 	ldw	r2,-208(fp)
    1b3c:	10801350 	cmplti	r2,r2,77
    1b40:	1000021e 	bne	r2,zero,1b4c <main+0x1078>
				MouseY = 77;
    1b44:	00801344 	movi	r2,77
    1b48:	e0bfcc15 	stw	r2,-208(fp)
			}
			if(MouseY <= 2){
    1b4c:	e0bfcc17 	ldw	r2,-208(fp)
    1b50:	108000c8 	cmpgei	r2,r2,3
    1b54:	1000021e 	bne	r2,zero,1b60 <main+0x108c>
				MouseY = 2;
    1b58:	00800084 	movi	r2,2
    1b5c:	e0bfcc15 	stw	r2,-208(fp)
			}
			color = 0xDDDD;		// a medium blue color
    1b60:	00b77744 	movi	r2,-8739
    1b64:	e0bfc10d 	sth	r2,-252(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, MouseX - 2, MouseY - 2, MouseX + 2, MouseY + 2, color, 1);
    1b68:	e0bfcd17 	ldw	r2,-204(fp)
    1b6c:	117fff84 	addi	r5,r2,-2
    1b70:	e0bfcc17 	ldw	r2,-208(fp)
    1b74:	11bfff84 	addi	r6,r2,-2
    1b78:	e0bfcd17 	ldw	r2,-204(fp)
    1b7c:	11c00084 	addi	r7,r2,2
    1b80:	e0bfcc17 	ldw	r2,-208(fp)
    1b84:	10800084 	addi	r2,r2,2
    1b88:	e0ffc10f 	ldh	r3,-252(fp)
    1b8c:	d8800015 	stw	r2,0(sp)
    1b90:	d8c00115 	stw	r3,4(sp)
    1b94:	00800044 	movi	r2,1
    1b98:	d8800215 	stw	r2,8(sp)
    1b9c:	e13fcf17 	ldw	r4,-196(fp)
    1ba0:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
//						alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, MouseX - a, MouseY - b,MouseX - a+1, MouseY - b+1, color, 1);
//					}
//				}
//			}

			Temp_MouseX = MouseX;
    1ba4:	e0bfcd17 	ldw	r2,-204(fp)
    1ba8:	e0bfcb15 	stw	r2,-212(fp)
			Temp_MouseY = MouseY;
    1bac:	e0bfcc17 	ldw	r2,-208(fp)
    1bb0:	e0bfca15 	stw	r2,-216(fp)

			//Record interrupt
			if(MouseX >= 60 && MouseX <= 100 && MouseY >= 16 && MouseY <= 56 && LeftBtn){
    1bb4:	e0bfcd17 	ldw	r2,-204(fp)
    1bb8:	10800f10 	cmplti	r2,r2,60
    1bbc:	10001a1e 	bne	r2,zero,1c28 <main+0x1154>
    1bc0:	e0bfcd17 	ldw	r2,-204(fp)
    1bc4:	10801948 	cmpgei	r2,r2,101
    1bc8:	1000171e 	bne	r2,zero,1c28 <main+0x1154>
    1bcc:	e0bfcc17 	ldw	r2,-208(fp)
    1bd0:	10800410 	cmplti	r2,r2,16
    1bd4:	1000141e 	bne	r2,zero,1c28 <main+0x1154>
    1bd8:	e0bfcc17 	ldw	r2,-208(fp)
    1bdc:	10800e48 	cmpgei	r2,r2,57
    1be0:	1000111e 	bne	r2,zero,1c28 <main+0x1154>
    1be4:	d0a84b17 	ldw	r2,-24276(gp)
    1be8:	1005003a 	cmpeq	r2,r2,zero
    1bec:	10000e1e 	bne	r2,zero,1c28 <main+0x1154>
				index_Echo = 0;
    1bf0:	d0284515 	stw	zero,-24300(gp)
				Echo_complete = 0;
    1bf4:	00800074 	movhi	r2,1
    1bf8:	10808504 	addi	r2,r2,532
    1bfc:	10000015 	stw	zero,0(r2)
				Click_Echo = 0;
    1c00:	00800074 	movhi	r2,1
    1c04:	10808e04 	addi	r2,r2,568
    1c08:	10000015 	stw	zero,0(r2)
				// reset the buffer index for recording
				buf_index_record = 0;
    1c0c:	00800074 	movhi	r2,1
    1c10:	10808d04 	addi	r2,r2,564
    1c14:	10000015 	stw	zero,0(r2)
				// clear audio FIFOs
				alt_up_audio_reset_audio_core (audio_dev);
    1c18:	e13fd117 	ldw	r4,-188(fp)
    1c1c:	0004b300 	call	4b30 <alt_up_audio_reset_audio_core>
				// enable audio-in interrupts
				alt_up_audio_enable_read_interrupt (audio_dev);
    1c20:	e13fd117 	ldw	r4,-188(fp)
    1c24:	00049800 	call	4980 <alt_up_audio_enable_read_interrupt>
			}

			//Play interrupt
			if(MouseX >= 140 && MouseX <= 180 && MouseY >= 16 && MouseY <= 56 && LeftBtn){
    1c28:	e0bfcd17 	ldw	r2,-204(fp)
    1c2c:	10802310 	cmplti	r2,r2,140
    1c30:	1000231e 	bne	r2,zero,1cc0 <main+0x11ec>
    1c34:	e0bfcd17 	ldw	r2,-204(fp)
    1c38:	10802d48 	cmpgei	r2,r2,181
    1c3c:	1000201e 	bne	r2,zero,1cc0 <main+0x11ec>
    1c40:	e0bfcc17 	ldw	r2,-208(fp)
    1c44:	10800410 	cmplti	r2,r2,16
    1c48:	10001d1e 	bne	r2,zero,1cc0 <main+0x11ec>
    1c4c:	e0bfcc17 	ldw	r2,-208(fp)
    1c50:	10800e48 	cmpgei	r2,r2,57
    1c54:	10001a1e 	bne	r2,zero,1cc0 <main+0x11ec>
    1c58:	d0a84b17 	ldw	r2,-24276(gp)
    1c5c:	1005003a 	cmpeq	r2,r2,zero
    1c60:	1000171e 	bne	r2,zero,1cc0 <main+0x11ec>
				Click_Echo = 0;
    1c64:	00800074 	movhi	r2,1
    1c68:	10808e04 	addi	r2,r2,568
    1c6c:	10000015 	stw	zero,0(r2)
				Play_Index = 0;
    1c70:	00800074 	movhi	r2,1
    1c74:	10808204 	addi	r2,r2,520
    1c78:	10000015 	stw	zero,0(r2)
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0 , 200, 100 * 4,
    1c7c:	00803e84 	movi	r2,250
    1c80:	d8800015 	stw	r2,0(sp)
    1c84:	0080ca04 	movi	r2,808
    1c88:	d8800115 	stw	r2,4(sp)
    1c8c:	d8000215 	stw	zero,8(sp)
    1c90:	e13fcf17 	ldw	r4,-196(fp)
    1c94:	000b883a 	mov	r5,zero
    1c98:	01803204 	movi	r6,200
    1c9c:	01c06404 	movi	r7,400
    1ca0:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
					250, 0x0328, 0);
				// reset the buffer index for recording
				buf_index_play = 0;
    1ca4:	00800074 	movhi	r2,1
    1ca8:	10808b04 	addi	r2,r2,556
    1cac:	10000015 	stw	zero,0(r2)
				// clear audio FIFOs
				alt_up_audio_reset_audio_core (audio_dev);
    1cb0:	e13fd117 	ldw	r4,-188(fp)
    1cb4:	0004b300 	call	4b30 <alt_up_audio_reset_audio_core>
				// enable audio-in interrupts
				alt_up_audio_enable_write_interrupt (audio_dev);
    1cb8:	e13fd117 	ldw	r4,-188(fp)
    1cbc:	0004a1c0 	call	4a1c <alt_up_audio_enable_write_interrupt>
			}

			//Echo interrupt
			if(MouseX >= 220 && MouseX <= 260 && MouseY >= 16 && MouseY <= 56 && LeftBtn){
    1cc0:	e0bfcd17 	ldw	r2,-204(fp)
    1cc4:	10803710 	cmplti	r2,r2,220
    1cc8:	1000181e 	bne	r2,zero,1d2c <main+0x1258>
    1ccc:	e0bfcd17 	ldw	r2,-204(fp)
    1cd0:	10804148 	cmpgei	r2,r2,261
    1cd4:	1000151e 	bne	r2,zero,1d2c <main+0x1258>
    1cd8:	e0bfcc17 	ldw	r2,-208(fp)
    1cdc:	10800410 	cmplti	r2,r2,16
    1ce0:	1000121e 	bne	r2,zero,1d2c <main+0x1258>
    1ce4:	e0bfcc17 	ldw	r2,-208(fp)
    1ce8:	10800e48 	cmpgei	r2,r2,57
    1cec:	10000f1e 	bne	r2,zero,1d2c <main+0x1258>
    1cf0:	d0a84b17 	ldw	r2,-24276(gp)
    1cf4:	1005003a 	cmpeq	r2,r2,zero
    1cf8:	10000c1e 	bne	r2,zero,1d2c <main+0x1258>
				Do_Soft_Echo();
    1cfc:	00020980 	call	2098 <Do_Soft_Echo>
				Click_Echo = 1;
    1d00:	00800074 	movhi	r2,1
    1d04:	10808e04 	addi	r2,r2,568
    1d08:	00c00044 	movi	r3,1
    1d0c:	10c00015 	stw	r3,0(r2)
				// reset the buffer index for recording
				buf_index_play = 0;
    1d10:	00800074 	movhi	r2,1
    1d14:	10808b04 	addi	r2,r2,556
    1d18:	10000015 	stw	zero,0(r2)
				// clear audio FIFOs
				alt_up_audio_reset_audio_core (audio_dev);
    1d1c:	e13fd117 	ldw	r4,-188(fp)
    1d20:	0004b300 	call	4b30 <alt_up_audio_reset_audio_core>
				// enable audio-in interrupts
				alt_up_audio_enable_write_interrupt (audio_dev);
    1d24:	e13fd117 	ldw	r4,-188(fp)
    1d28:	0004a1c0 	call	4a1c <alt_up_audio_enable_write_interrupt>
			}
//			if(Echo_End == 1 && Echo_complete == 0){
//				Do_Echo();
//			}

			if(End_Record == 1){
    1d2c:	00800074 	movhi	r2,1
    1d30:	10808804 	addi	r2,r2,544
    1d34:	10800017 	ldw	r2,0(r2)
    1d38:	10800058 	cmpnei	r2,r2,1
    1d3c:	1000071e 	bne	r2,zero,1d5c <main+0x1288>
//				Audio_Average(); // Software Calculate
				Do_Hardware_Calculate();//Hardware Calculate
    1d40:	00027ac0 	call	27ac <Do_Hardware_Calculate>
				Calculate_Avrage();//For Hardware
    1d44:	00027f80 	call	27f8 <Calculate_Avrage>
				Plot_AudioRecord(pixel_buffer_dev);
    1d48:	e13fcf17 	ldw	r4,-196(fp)
    1d4c:	000223c0 	call	223c <Plot_AudioRecord>
				End_Record = 0;
    1d50:	00800074 	movhi	r2,1
    1d54:	10808804 	addi	r2,r2,544
    1d58:	10000015 	stw	zero,0(r2)
			}
			Plot_Play_Audio(pixel_buffer_dev);
    1d5c:	e13fcf17 	ldw	r4,-196(fp)
    1d60:	00026a00 	call	26a0 <Plot_Play_Audio>
			timeout = 0;
    1d64:	00800074 	movhi	r2,1
    1d68:	10808904 	addi	r2,r2,548
    1d6c:	10000015 	stw	zero,0(r2)

		}
    1d70:	003d9b06 	br	13e0 <main+0x90c>
    1d74:	e0bfff17 	ldw	r2,-4(fp)
}
    1d78:	e037883a 	mov	sp,fp
    1d7c:	dfc00117 	ldw	ra,4(sp)
    1d80:	df000017 	ldw	fp,0(sp)
    1d84:	dec00204 	addi	sp,sp,8
    1d88:	f800283a 	ret

00001d8c <HEXxy_PS2>:
 * also use the HAL functions for these ports instead
 ****************************************************************************************/

/****************************************************************************************/
void HEXxy_PS2(struct alt_up_dev *up_dev,unsigned char b1, unsigned char b2, unsigned char b3)
{
    1d8c:	deffec04 	addi	sp,sp,-80
    1d90:	dfc01315 	stw	ra,76(sp)
    1d94:	df001215 	stw	fp,72(sp)
    1d98:	df001204 	addi	fp,sp,72
    1d9c:	e13ffc15 	stw	r4,-16(fp)
    1da0:	e17ffd05 	stb	r5,-12(fp)
    1da4:	e1bffe05 	stb	r6,-8(fp)
    1da8:	e1ffff05 	stb	r7,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    1dac:	00840034 	movhi	r2,4096
    1db0:	10800804 	addi	r2,r2,32
    1db4:	e0bff515 	stw	r2,-44(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    1db8:	00840034 	movhi	r2,4096
    1dbc:	10800c04 	addi	r2,r2,48
    1dc0:	e0bff415 	stw	r2,-48(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
												0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71  };
    1dc4:	00800074 	movhi	r2,1
    1dc8:	10af8d04 	addi	r2,r2,-16844
    1dcc:	e13ff604 	addi	r4,fp,-40
    1dd0:	100b883a 	mov	r5,r2
    1dd4:	01800404 	movi	r6,16
    1dd8:	00032480 	call	3248 <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    1ddc:	e03ffa05 	stb	zero,-24(fp)
    1de0:	e03ffa45 	stb	zero,-23(fp)
    1de4:	e03ffa85 	stb	zero,-22(fp)
    1de8:	e03ffac5 	stb	zero,-21(fp)
    1dec:	e03ffb05 	stb	zero,-20(fp)
    1df0:	e03ffb45 	stb	zero,-19(fp)
    1df4:	e03ffb85 	stb	zero,-18(fp)
    1df8:	e03ffbc5 	stb	zero,-17(fp)
	unsigned int shift_buffer,Temp_Buffer, nibble;
	unsigned char code;
	unsigned int Mouse_Btn;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    1dfc:	e0bffd03 	ldbu	r2,-12(fp)
    1e00:	1006943a 	slli	r3,r2,16
    1e04:	e0bffe03 	ldbu	r2,-8(fp)
    1e08:	1004923a 	slli	r2,r2,8
    1e0c:	1886b03a 	or	r3,r3,r2
    1e10:	e0bfff03 	ldbu	r2,-4(fp)
    1e14:	1884b03a 	or	r2,r3,r2
    1e18:	e0bff315 	stw	r2,-52(fp)
	Temp_Buffer = shift_buffer;
    1e1c:	e0bff317 	ldw	r2,-52(fp)
    1e20:	e0bff215 	stw	r2,-56(fp)


	for ( i = 0; i < 6; i++ )
    1e24:	e03fee15 	stw	zero,-72(fp)
    1e28:	00008a06 	br	2054 <HEXxy_PS2+0x2c8>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    1e2c:	e0bff317 	ldw	r2,-52(fp)
    1e30:	108003cc 	andi	r2,r2,15
    1e34:	e0bff115 	stw	r2,-60(fp)
		code = seven_seg_decode_table[nibble];
    1e38:	e0fff117 	ldw	r3,-60(fp)
    1e3c:	e0bff604 	addi	r2,fp,-40
    1e40:	10c5883a 	add	r2,r2,r3
    1e44:	10800003 	ldbu	r2,0(r2)
    1e48:	e0bff005 	stb	r2,-64(fp)
		if(i==0){
    1e4c:	e0bfee17 	ldw	r2,-72(fp)
    1e50:	1004c03a 	cmpne	r2,r2,zero
    1e54:	1000131e 	bne	r2,zero,1ea4 <HEXxy_PS2+0x118>
			LeftBtn   = shift_buffer & 0x00000001;
    1e58:	e0bff317 	ldw	r2,-52(fp)
    1e5c:	1080004c 	andi	r2,r2,1
    1e60:	d0a84b15 	stw	r2,-24276(gp)
			RightBtn  = shift_buffer & 0x00000002;
    1e64:	e0bff317 	ldw	r2,-52(fp)
    1e68:	1080008c 	andi	r2,r2,2
    1e6c:	d0a84815 	stw	r2,-24288(gp)
			MiddleBtn = shift_buffer & 0x00000004;
    1e70:	e0bff317 	ldw	r2,-52(fp)
    1e74:	1080010c 	andi	r2,r2,4
    1e78:	d0a84415 	stw	r2,-24304(gp)
			Mouse_Btn = LeftBtn | MiddleBtn | RightBtn;
    1e7c:	d0e84b17 	ldw	r3,-24276(gp)
    1e80:	d0a84417 	ldw	r2,-24304(gp)
    1e84:	1886b03a 	or	r3,r3,r2
    1e88:	d0a84817 	ldw	r2,-24288(gp)
    1e8c:	1884b03a 	or	r2,r3,r2
    1e90:	e0bfef15 	stw	r2,-68(fp)
			IOWR_ALT_UP_PARALLEL_PORT_DATA(RED_LEDS_BASE,Mouse_Btn);
    1e94:	e0ffef17 	ldw	r3,-68(fp)
    1e98:	00840034 	movhi	r2,4096
    1e9c:	10c00035 	stwio	r3,0(r2)
    1ea0:	00006606 	br	203c <HEXxy_PS2+0x2b0>
		}
		else if(i==1){
    1ea4:	e0bfee17 	ldw	r2,-72(fp)
    1ea8:	10800058 	cmpnei	r2,r2,1
    1eac:	1000211e 	bne	r2,zero,1f34 <HEXxy_PS2+0x1a8>
			Xsign = shift_buffer & 0x00000001;
    1eb0:	e0bff317 	ldw	r2,-52(fp)
    1eb4:	1080004c 	andi	r2,r2,1
    1eb8:	d0a84915 	stw	r2,-24284(gp)
			Ysign = shift_buffer & 0x00000002;
    1ebc:	e0bff317 	ldw	r2,-52(fp)
    1ec0:	1080008c 	andi	r2,r2,2
    1ec4:	d0a84d15 	stw	r2,-24268(gp)
			XoverFlow = shift_buffer & 0x00000004;
    1ec8:	e0bff317 	ldw	r2,-52(fp)
    1ecc:	1080010c 	andi	r2,r2,4
    1ed0:	d0a84315 	stw	r2,-24308(gp)
			YoverFlow = shift_buffer & 0x00000008;
    1ed4:	e0bff317 	ldw	r2,-52(fp)
    1ed8:	1080020c 	andi	r2,r2,8
    1edc:	d0a84c15 	stw	r2,-24272(gp)
			hex_segs[6] = seven_seg_decode_table[Xsign];
    1ee0:	d0e84917 	ldw	r3,-24284(gp)
    1ee4:	e0bff604 	addi	r2,fp,-40
    1ee8:	10c5883a 	add	r2,r2,r3
    1eec:	10800003 	ldbu	r2,0(r2)
    1ef0:	e0bffb85 	stb	r2,-18(fp)
			hex_segs[2] = seven_seg_decode_table[Ysign];
    1ef4:	d0e84d17 	ldw	r3,-24268(gp)
    1ef8:	e0bff604 	addi	r2,fp,-40
    1efc:	10c5883a 	add	r2,r2,r3
    1f00:	10800003 	ldbu	r2,0(r2)
    1f04:	e0bffa85 	stb	r2,-22(fp)
			hex_segs[7] = seven_seg_decode_table[XoverFlow];
    1f08:	d0e84317 	ldw	r3,-24308(gp)
    1f0c:	e0bff604 	addi	r2,fp,-40
    1f10:	10c5883a 	add	r2,r2,r3
    1f14:	10800003 	ldbu	r2,0(r2)
    1f18:	e0bffbc5 	stb	r2,-17(fp)
			hex_segs[3] = seven_seg_decode_table[YoverFlow];
    1f1c:	d0e84c17 	ldw	r3,-24272(gp)
    1f20:	e0bff604 	addi	r2,fp,-40
    1f24:	10c5883a 	add	r2,r2,r3
    1f28:	10800003 	ldbu	r2,0(r2)
    1f2c:	e0bffac5 	stb	r2,-21(fp)
    1f30:	00004206 	br	203c <HEXxy_PS2+0x2b0>
		}
		else if(i==4 || i==5){
    1f34:	e0bfee17 	ldw	r2,-72(fp)
    1f38:	10800120 	cmpeqi	r2,r2,4
    1f3c:	1000031e 	bne	r2,zero,1f4c <HEXxy_PS2+0x1c0>
    1f40:	e0bfee17 	ldw	r2,-72(fp)
    1f44:	10800158 	cmpnei	r2,r2,5
    1f48:	10001b1e 	bne	r2,zero,1fb8 <HEXxy_PS2+0x22c>
			Temp_Sign = Temp_Buffer & 0x00000010;
    1f4c:	e0bff217 	ldw	r2,-56(fp)
    1f50:	1080040c 	andi	r2,r2,16
    1f54:	d0a84a15 	stw	r2,-24280(gp)
			if(Xsign){
    1f58:	d0a84917 	ldw	r2,-24284(gp)
    1f5c:	1005003a 	cmpeq	r2,r2,zero
    1f60:	10000a1e 	bne	r2,zero,1f8c <HEXxy_PS2+0x200>
				nibble_TempX = 15 - nibble;
    1f64:	00c003c4 	movi	r3,15
    1f68:	e0bff117 	ldw	r2,-60(fp)
    1f6c:	1885c83a 	sub	r2,r3,r2
    1f70:	d0a84715 	stw	r2,-24292(gp)
				code = seven_seg_decode_table[nibble_TempX];
    1f74:	d0e84717 	ldw	r3,-24292(gp)
    1f78:	e0bff604 	addi	r2,fp,-40
    1f7c:	10c5883a 	add	r2,r2,r3
    1f80:	10800003 	ldbu	r2,0(r2)
    1f84:	e0bff005 	stb	r2,-64(fp)
    1f88:	00000506 	br	1fa0 <HEXxy_PS2+0x214>
			}
			else{
				code = seven_seg_decode_table[nibble];
    1f8c:	e0fff117 	ldw	r3,-60(fp)
    1f90:	e0bff604 	addi	r2,fp,-40
    1f94:	10c5883a 	add	r2,r2,r3
    1f98:	10800003 	ldbu	r2,0(r2)
    1f9c:	e0bff005 	stb	r2,-64(fp)
			}
			hex_segs[i] = code;
    1fa0:	e0ffee17 	ldw	r3,-72(fp)
    1fa4:	e0bffa04 	addi	r2,fp,-24
    1fa8:	10c7883a 	add	r3,r2,r3
    1fac:	e0bff003 	ldbu	r2,-64(fp)
    1fb0:	18800005 	stb	r2,0(r3)
			hex_segs[6] = seven_seg_decode_table[Xsign];
			hex_segs[2] = seven_seg_decode_table[Ysign];
			hex_segs[7] = seven_seg_decode_table[XoverFlow];
			hex_segs[3] = seven_seg_decode_table[YoverFlow];
		}
		else if(i==4 || i==5){
    1fb4:	00002106 	br	203c <HEXxy_PS2+0x2b0>
			else{
				code = seven_seg_decode_table[nibble];
			}
			hex_segs[i] = code;
		}
		else if(i==2 || i==3){
    1fb8:	e0bfee17 	ldw	r2,-72(fp)
    1fbc:	108000a0 	cmpeqi	r2,r2,2
    1fc0:	1000031e 	bne	r2,zero,1fd0 <HEXxy_PS2+0x244>
    1fc4:	e0bfee17 	ldw	r2,-72(fp)
    1fc8:	108000d8 	cmpnei	r2,r2,3
    1fcc:	10001b1e 	bne	r2,zero,203c <HEXxy_PS2+0x2b0>
			Temp_Sign = Temp_Buffer & 0x00000002;
    1fd0:	e0bff217 	ldw	r2,-56(fp)
    1fd4:	1080008c 	andi	r2,r2,2
    1fd8:	d0a84a15 	stw	r2,-24280(gp)
			if(Ysign){
    1fdc:	d0a84d17 	ldw	r2,-24268(gp)
    1fe0:	1005003a 	cmpeq	r2,r2,zero
    1fe4:	10000a1e 	bne	r2,zero,2010 <HEXxy_PS2+0x284>
				nibble_TempY = 15 - nibble;
    1fe8:	00c003c4 	movi	r3,15
    1fec:	e0bff117 	ldw	r2,-60(fp)
    1ff0:	1885c83a 	sub	r2,r3,r2
    1ff4:	d0a84615 	stw	r2,-24296(gp)
				code = seven_seg_decode_table[nibble_TempY];
    1ff8:	d0e84617 	ldw	r3,-24296(gp)
    1ffc:	e0bff604 	addi	r2,fp,-40
    2000:	10c5883a 	add	r2,r2,r3
    2004:	10800003 	ldbu	r2,0(r2)
    2008:	e0bff005 	stb	r2,-64(fp)
    200c:	00000506 	br	2024 <HEXxy_PS2+0x298>
			}
			else{
				code = seven_seg_decode_table[nibble];
    2010:	e0fff117 	ldw	r3,-60(fp)
    2014:	e0bff604 	addi	r2,fp,-40
    2018:	10c5883a 	add	r2,r2,r3
    201c:	10800003 	ldbu	r2,0(r2)
    2020:	e0bff005 	stb	r2,-64(fp)
			}
			hex_segs[i-2] = code;
    2024:	e0bfee17 	ldw	r2,-72(fp)
    2028:	10ffff84 	addi	r3,r2,-2
    202c:	e0bffa04 	addi	r2,fp,-24
    2030:	10c7883a 	add	r3,r2,r3
    2034:	e0bff003 	ldbu	r2,-64(fp)
    2038:	18800005 	stb	r2,0(r3)
		}
		shift_buffer = shift_buffer >> 4;
    203c:	e0bff317 	ldw	r2,-52(fp)
    2040:	1004d13a 	srli	r2,r2,4
    2044:	e0bff315 	stw	r2,-52(fp)

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	Temp_Buffer = shift_buffer;


	for ( i = 0; i < 6; i++ )
    2048:	e0bfee17 	ldw	r2,-72(fp)
    204c:	10800044 	addi	r2,r2,1
    2050:	e0bfee15 	stw	r2,-72(fp)
    2054:	e0bfee17 	ldw	r2,-72(fp)
    2058:	10800190 	cmplti	r2,r2,6
    205c:	103f731e 	bne	r2,zero,1e2c <HEXxy_PS2+0xa0>
			hex_segs[i-2] = code;
		}
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    2060:	e0bffa04 	addi	r2,fp,-24
    2064:	10c00017 	ldw	r3,0(r2)
    2068:	e0bff517 	ldw	r2,-44(fp)
    206c:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    2070:	e0bffa04 	addi	r2,fp,-24
    2074:	10800104 	addi	r2,r2,4
    2078:	10c00017 	ldw	r3,0(r2)
    207c:	e0bff417 	ldw	r2,-48(fp)
    2080:	10c00015 	stw	r3,0(r2)
}
    2084:	e037883a 	mov	sp,fp
    2088:	dfc00117 	ldw	ra,4(sp)
    208c:	df000017 	ldw	fp,0(sp)
    2090:	dec00204 	addi	sp,sp,8
    2094:	f800283a 	ret

00002098 <Do_Soft_Echo>:
//
//}


/****************************************************************************************/
void Do_Soft_Echo(){
    2098:	defff504 	addi	sp,sp,-44
    209c:	dfc00a15 	stw	ra,40(sp)
    20a0:	df000915 	stw	fp,36(sp)
    20a4:	df000904 	addi	fp,sp,36
	int j;
	int i;
	for(i=0;i<BUF_SIZE;i++){
    20a8:	e03ffe15 	stw	zero,-8(fp)
    20ac:	00005206 	br	21f8 <Do_Soft_Echo+0x160>
		alt_64 temp = 0;
    20b0:	e03ffc15 	stw	zero,-16(fp)
    20b4:	e03ffd15 	stw	zero,-12(fp)
		for(j = 0; j<64; j++)
    20b8:	e03fff15 	stw	zero,-4(fp)
    20bc:	00002d06 	br	2174 <Do_Soft_Echo+0xdc>
		{
			alt_64 eff = (alt_64)(coeff[j]);
    20c0:	e0bfff17 	ldw	r2,-4(fp)
    20c4:	00c00074 	movhi	r3,1
    20c8:	18f03f04 	addi	r3,r3,-16132
    20cc:	1085883a 	add	r2,r2,r2
    20d0:	10c5883a 	add	r2,r2,r3
    20d4:	1080000b 	ldhu	r2,0(r2)
    20d8:	10bfffcc 	andi	r2,r2,65535
    20dc:	10a0001c 	xori	r2,r2,32768
    20e0:	10a00004 	addi	r2,r2,-32768
    20e4:	e0bff915 	stw	r2,-28(fp)
    20e8:	1005d7fa 	srai	r2,r2,31
    20ec:	e0bffa15 	stw	r2,-24(fp)
			alt_64 data = ((alt_64)((alt_32)l_buf[i-j]));
    20f0:	e0fffe17 	ldw	r3,-8(fp)
    20f4:	e0bfff17 	ldw	r2,-4(fp)
    20f8:	1885c83a 	sub	r2,r3,r2
    20fc:	00c01774 	movhi	r3,93
    2100:	18e41a04 	addi	r3,r3,-28568
    2104:	1085883a 	add	r2,r2,r2
    2108:	1085883a 	add	r2,r2,r2
    210c:	10c5883a 	add	r2,r2,r3
    2110:	10800017 	ldw	r2,0(r2)
    2114:	e0bff715 	stw	r2,-36(fp)
    2118:	1005d7fa 	srai	r2,r2,31
    211c:	e0bff815 	stw	r2,-32(fp)
			temp = (temp + (data * eff));
    2120:	e13ff717 	ldw	r4,-36(fp)
    2124:	e17ff817 	ldw	r5,-32(fp)
    2128:	e1bff917 	ldw	r6,-28(fp)
    212c:	e1fffa17 	ldw	r7,-24(fp)
    2130:	00029e40 	call	29e4 <__muldi3>
    2134:	1009883a 	mov	r4,r2
    2138:	180b883a 	mov	r5,r3
    213c:	200d883a 	mov	r6,r4
    2140:	280f883a 	mov	r7,r5
    2144:	e13ffc17 	ldw	r4,-16(fp)
    2148:	e17ffd17 	ldw	r5,-12(fp)
    214c:	2185883a 	add	r2,r4,r6
    2150:	1111803a 	cmpltu	r8,r2,r4
    2154:	29c7883a 	add	r3,r5,r7
    2158:	40c9883a 	add	r4,r8,r3
    215c:	2007883a 	mov	r3,r4
    2160:	e0bffc15 	stw	r2,-16(fp)
    2164:	e0fffd15 	stw	r3,-12(fp)
void Do_Soft_Echo(){
	int j;
	int i;
	for(i=0;i<BUF_SIZE;i++){
		alt_64 temp = 0;
		for(j = 0; j<64; j++)
    2168:	e0bfff17 	ldw	r2,-4(fp)
    216c:	10800044 	addi	r2,r2,1
    2170:	e0bfff15 	stw	r2,-4(fp)
    2174:	e0bfff17 	ldw	r2,-4(fp)
    2178:	10801010 	cmplti	r2,r2,64
    217c:	103fd01e 	bne	r2,zero,20c0 <Do_Soft_Echo+0x28>
		{
			alt_64 eff = (alt_64)(coeff[j]);
			alt_64 data = ((alt_64)((alt_32)l_buf[i-j]));
			temp = (temp + (data * eff));
		}
		temp = (temp >> 15);
    2180:	e0bffd17 	ldw	r2,-12(fp)
    2184:	100a947a 	slli	r5,r2,17
    2188:	e13ffc17 	ldw	r4,-16(fp)
    218c:	e1bffd17 	ldw	r6,-12(fp)
    2190:	2004d3fa 	srli	r2,r4,15
    2194:	1144b03a 	or	r2,r2,r5
    2198:	3007d3fa 	srai	r3,r6,15
    219c:	e0bffc15 	stw	r2,-16(fp)
    21a0:	e0fffd15 	stw	r3,-12(fp)
		alt_u32 dataout = (alt_u32)((alt_32)temp);
    21a4:	e0bffc17 	ldw	r2,-16(fp)
    21a8:	e0bffb15 	stw	r2,-20(fp)
		Echo_buf_l[i] = dataout;
    21ac:	e0bffe17 	ldw	r2,-8(fp)
    21b0:	00c00074 	movhi	r3,1
    21b4:	18c0ba04 	addi	r3,r3,744
    21b8:	1085883a 	add	r2,r2,r2
    21bc:	1085883a 	add	r2,r2,r2
    21c0:	10c7883a 	add	r3,r2,r3
    21c4:	e0bffb17 	ldw	r2,-20(fp)
    21c8:	18800015 	stw	r2,0(r3)
		Echo_buf_r[i] = dataout;
    21cc:	e0bffe17 	ldw	r2,-8(fp)
    21d0:	00c00fb4 	movhi	r3,62
    21d4:	18c2fa04 	addi	r3,r3,3048
    21d8:	1085883a 	add	r2,r2,r2
    21dc:	1085883a 	add	r2,r2,r2
    21e0:	10c7883a 	add	r3,r2,r3
    21e4:	e0bffb17 	ldw	r2,-20(fp)
    21e8:	18800015 	stw	r2,0(r3)

/****************************************************************************************/
void Do_Soft_Echo(){
	int j;
	int i;
	for(i=0;i<BUF_SIZE;i++){
    21ec:	e0bffe17 	ldw	r2,-8(fp)
    21f0:	10800044 	addi	r2,r2,1
    21f4:	e0bffe15 	stw	r2,-8(fp)
    21f8:	e0fffe17 	ldw	r3,-8(fp)
    21fc:	00800234 	movhi	r2,8
    2200:	10a847c4 	addi	r2,r2,-24289
    2204:	10ffaa0e 	bge	r2,r3,20b0 <Do_Soft_Echo+0x18>
//			temp = ((alt_64)temp + (((alt_64)((alt_32)r_buf[i])) * ((alt_64)coeff)));
//		}
//		Echo_buf_r[i] = temp;
//	}

	IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE,0x0);
    2208:	00840034 	movhi	r2,4096
    220c:	10800404 	addi	r2,r2,16
    2210:	10000035 	stwio	zero,0(r2)
	Echo = 0;
    2214:	d0283f15 	stw	zero,-24324(gp)
	Echo_complete = 1;
    2218:	00c00074 	movhi	r3,1
    221c:	18c08504 	addi	r3,r3,532
    2220:	00800044 	movi	r2,1
    2224:	18800015 	stw	r2,0(r3)
}
    2228:	e037883a 	mov	sp,fp
    222c:	dfc00117 	ldw	ra,4(sp)
    2230:	df000017 	ldw	fp,0(sp)
    2234:	dec00204 	addi	sp,sp,8
    2238:	f800283a 	ret

0000223c <Plot_AudioRecord>:

/****************************************************************************************/
void Plot_AudioRecord(alt_up_pixel_buffer_dma_dev *pixel_buffer){
    223c:	defff204 	addi	sp,sp,-56
    2240:	dfc00d15 	stw	ra,52(sp)
    2244:	df000c15 	stw	fp,48(sp)
    2248:	df000c04 	addi	fp,sp,48
    224c:	e13fff15 	stw	r4,-4(fp)

	// Draw Audio Display
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer, 0 , 20 * 4, 100 * 4,
    2250:	00803c04 	movi	r2,240
    2254:	d8800015 	stw	r2,0(sp)
    2258:	0080ca04 	movi	r2,808
    225c:	d8800115 	stw	r2,4(sp)
    2260:	d8000215 	stw	zero,8(sp)
    2264:	e13fff17 	ldw	r4,-4(fp)
    2268:	000b883a 	mov	r5,zero
    226c:	01801404 	movi	r6,80
    2270:	01c06404 	movi	r7,400
    2274:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
		60 * 4, 0x0328, 0);

	//Audio Line
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer,10 * 4, 70 * 4, 21 * 4, 0xABCD, 0);
    2278:	00aaf354 	movui	r2,43981
    227c:	d8800015 	stw	r2,0(sp)
    2280:	d8000115 	stw	zero,4(sp)
    2284:	e13fff17 	ldw	r4,-4(fp)
    2288:	01400a04 	movi	r5,40
    228c:	01804604 	movi	r6,280
    2290:	01c01504 	movi	r7,84
    2294:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer,10 * 4, 70 * 4, 23 * 4, 0xABCD, 0);
    2298:	00aaf354 	movui	r2,43981
    229c:	d8800015 	stw	r2,0(sp)
    22a0:	d8000115 	stw	zero,4(sp)
    22a4:	e13fff17 	ldw	r4,-4(fp)
    22a8:	01400a04 	movi	r5,40
    22ac:	01804604 	movi	r6,280
    22b0:	01c01704 	movi	r7,92
    22b4:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>
	//Audio OverFlow
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer,10, 300, 105, 0xABCD, 0);
    22b8:	00aaf354 	movui	r2,43981
    22bc:	d8800015 	stw	r2,0(sp)
    22c0:	d8000115 	stw	zero,4(sp)
    22c4:	e13fff17 	ldw	r4,-4(fp)
    22c8:	01400284 	movi	r5,10
    22cc:	01804b04 	movi	r6,300
    22d0:	01c01a44 	movi	r7,105
    22d4:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>

	int i=0;
    22d8:	e03ffe15 	stw	zero,-8(fp)
	short color = 0x8053;
    22dc:	00a014c4 	movi	r2,-32685
    22e0:	e0bffd0d 	sth	r2,-12(fp)
	int x1 = 10;
    22e4:	00800284 	movi	r2,10
    22e8:	e0bffc15 	stw	r2,-16(fp)
	int x2 = 310;
    22ec:	00804d84 	movi	r2,310
    22f0:	e0bffb15 	stw	r2,-20(fp)
	int gap = 3;
    22f4:	008000c4 	movi	r2,3
    22f8:	e0bffa15 	stw	r2,-24(fp)
	int Range = ((x2 - x1)/N)-3;
    22fc:	e0fffb17 	ldw	r3,-20(fp)
    2300:	e0bffc17 	ldw	r2,-16(fp)
    2304:	1887c83a 	sub	r3,r3,r2
    2308:	00800784 	movi	r2,30
    230c:	1885283a 	div	r2,r3,r2
    2310:	10bfff44 	addi	r2,r2,-3
    2314:	e0bff915 	stw	r2,-28(fp)

	int x_Start=0,x_End=10;
    2318:	e03ff815 	stw	zero,-32(fp)
    231c:	00800284 	movi	r2,10
    2320:	e0bff715 	stw	r2,-36(fp)

	for(i=0;i<N;i++){
    2324:	e03ffe15 	stw	zero,-8(fp)
    2328:	00001f06 	br	23a8 <Plot_AudioRecord+0x16c>
		x_Start = x_End + gap;
    232c:	e0fff717 	ldw	r3,-36(fp)
    2330:	e0bffa17 	ldw	r2,-24(fp)
    2334:	1885883a 	add	r2,r3,r2
    2338:	e0bff815 	stw	r2,-32(fp)
		x_End = x_Start + Range;
    233c:	e0fff817 	ldw	r3,-32(fp)
    2340:	e0bff917 	ldw	r2,-28(fp)
    2344:	1885883a 	add	r2,r3,r2
    2348:	e0bff715 	stw	r2,-36(fp)
		//Draw Audio Range
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer, x_Start, 200-Average[i], x_End,
    234c:	e0bffe17 	ldw	r2,-8(fp)
    2350:	00c01ef4 	movhi	r3,123
    2354:	18c5b604 	addi	r3,r3,5848
    2358:	100490fa 	slli	r2,r2,3
    235c:	10c9883a 	add	r4,r2,r3
    2360:	20800017 	ldw	r2,0(r4)
    2364:	20c00117 	ldw	r3,4(r4)
    2368:	1007883a 	mov	r3,r2
    236c:	00803204 	movi	r2,200
    2370:	10c5c83a 	sub	r2,r2,r3
    2374:	100d883a 	mov	r6,r2
    2378:	e0fffd0f 	ldh	r3,-12(fp)
    237c:	00803204 	movi	r2,200
    2380:	d8800015 	stw	r2,0(sp)
    2384:	d8c00115 	stw	r3,4(sp)
    2388:	d8000215 	stw	zero,8(sp)
    238c:	e13fff17 	ldw	r4,-4(fp)
    2390:	e17ff817 	ldw	r5,-32(fp)
    2394:	e1fff717 	ldw	r7,-36(fp)
    2398:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
	int gap = 3;
	int Range = ((x2 - x1)/N)-3;

	int x_Start=0,x_End=10;

	for(i=0;i<N;i++){
    239c:	e0bffe17 	ldw	r2,-8(fp)
    23a0:	10800044 	addi	r2,r2,1
    23a4:	e0bffe15 	stw	r2,-8(fp)
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	10800790 	cmplti	r2,r2,30
    23b0:	103fde1e 	bne	r2,zero,232c <Plot_AudioRecord+0xf0>
		x_End = x_Start + Range;
		//Draw Audio Range
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer, x_Start, 200-Average[i], x_End,
			200, color, 0);
	}
}
    23b4:	e037883a 	mov	sp,fp
    23b8:	dfc00117 	ldw	ra,4(sp)
    23bc:	df000017 	ldw	fp,0(sp)
    23c0:	dec00204 	addi	sp,sp,8
    23c4:	f800283a 	ret

000023c8 <Audio_Average>:
/****************************************************************************************/
void Audio_Average(){
    23c8:	defff304 	addi	sp,sp,-52
    23cc:	dfc00c15 	stw	ra,48(sp)
    23d0:	df000b15 	stw	fp,44(sp)
    23d4:	dc000a15 	stw	r16,40(sp)
    23d8:	df000a04 	addi	fp,sp,40
	int i=0;
    23dc:	e03ffb15 	stw	zero,-20(fp)
	int j=0;
    23e0:	e03ffa15 	stw	zero,-24(fp)
	long long int Sum=0;
    23e4:	e03ff815 	stw	zero,-32(fp)
    23e8:	e03ff915 	stw	zero,-28(fp)

	int anita;

	int Duration = BUF_SIZE / N;
    23ec:	00904684 	movi	r2,16666
    23f0:	e0bff615 	stw	r2,-40(fp)
	for(j=0;j<N;j++){
    23f4:	e03ffa15 	stw	zero,-24(fp)
    23f8:	0000a006 	br	267c <Audio_Average+0x2b4>
		Average[j] = 0;
    23fc:	e0bffa17 	ldw	r2,-24(fp)
    2400:	00c01ef4 	movhi	r3,123
    2404:	18c5b604 	addi	r3,r3,5848
    2408:	100490fa 	slli	r2,r2,3
    240c:	10c5883a 	add	r2,r2,r3
    2410:	10000015 	stw	zero,0(r2)
    2414:	10000115 	stw	zero,4(r2)
		Sum =0;
    2418:	e03ff815 	stw	zero,-32(fp)
    241c:	e03ff915 	stw	zero,-28(fp)
		for(i=0;i<Duration;i++){
    2420:	e03ffb15 	stw	zero,-20(fp)
    2424:	00004506 	br	253c <Audio_Average+0x174>
			Sum = ((alt_u64)abs(((alt_u32)l_buf[i + j * Duration]))) + Sum;
    2428:	e0fffa17 	ldw	r3,-24(fp)
    242c:	e0bff617 	ldw	r2,-40(fp)
    2430:	1887383a 	mul	r3,r3,r2
    2434:	e0bffb17 	ldw	r2,-20(fp)
    2438:	1885883a 	add	r2,r3,r2
    243c:	00c01774 	movhi	r3,93
    2440:	18e41a04 	addi	r3,r3,-28568
    2444:	1085883a 	add	r2,r2,r2
    2448:	1085883a 	add	r2,r2,r2
    244c:	10c5883a 	add	r2,r2,r3
    2450:	10800017 	ldw	r2,0(r2)
    2454:	e0bfff15 	stw	r2,-4(fp)
    2458:	e0ffff17 	ldw	r3,-4(fp)
    245c:	1804403a 	cmpge	r2,r3,zero
    2460:	1000031e 	bne	r2,zero,2470 <Audio_Average+0xa8>
    2464:	e13fff17 	ldw	r4,-4(fp)
    2468:	0109c83a 	sub	r4,zero,r4
    246c:	e13fff15 	stw	r4,-4(fp)
    2470:	e0ffff17 	ldw	r3,-4(fp)
    2474:	1805d7fa 	srai	r2,r3,31
    2478:	e13fff17 	ldw	r4,-4(fp)
    247c:	100b883a 	mov	r5,r2
    2480:	e1bff817 	ldw	r6,-32(fp)
    2484:	e1fff917 	ldw	r7,-28(fp)
    2488:	2185883a 	add	r2,r4,r6
    248c:	1111803a 	cmpltu	r8,r2,r4
    2490:	29c7883a 	add	r3,r5,r7
    2494:	40c9883a 	add	r4,r8,r3
    2498:	2007883a 	mov	r3,r4
    249c:	1009883a 	mov	r4,r2
    24a0:	180b883a 	mov	r5,r3
    24a4:	e13ff815 	stw	r4,-32(fp)
    24a8:	e17ff915 	stw	r5,-28(fp)
			Sum = ((alt_u64)abs(((alt_u32)r_buf[i + j * Duration]))) + Sum;
    24ac:	e0fffa17 	ldw	r3,-24(fp)
    24b0:	e0bff617 	ldw	r2,-40(fp)
    24b4:	1887383a 	mul	r3,r3,r2
    24b8:	e0bffb17 	ldw	r2,-20(fp)
    24bc:	1885883a 	add	r2,r3,r2
    24c0:	00c00834 	movhi	r3,32
    24c4:	18e1da04 	addi	r3,r3,-30872
    24c8:	1085883a 	add	r2,r2,r2
    24cc:	1085883a 	add	r2,r2,r2
    24d0:	10c5883a 	add	r2,r2,r3
    24d4:	10800017 	ldw	r2,0(r2)
    24d8:	e0bffe15 	stw	r2,-8(fp)
    24dc:	e13ffe17 	ldw	r4,-8(fp)
    24e0:	2004403a 	cmpge	r2,r4,zero
    24e4:	1000031e 	bne	r2,zero,24f4 <Audio_Average+0x12c>
    24e8:	e0bffe17 	ldw	r2,-8(fp)
    24ec:	0085c83a 	sub	r2,zero,r2
    24f0:	e0bffe15 	stw	r2,-8(fp)
    24f4:	e0fffe17 	ldw	r3,-8(fp)
    24f8:	1805d7fa 	srai	r2,r3,31
    24fc:	e13ffe17 	ldw	r4,-8(fp)
    2500:	100b883a 	mov	r5,r2
    2504:	e1bff817 	ldw	r6,-32(fp)
    2508:	e1fff917 	ldw	r7,-28(fp)
    250c:	2185883a 	add	r2,r4,r6
    2510:	1111803a 	cmpltu	r8,r2,r4
    2514:	29c7883a 	add	r3,r5,r7
    2518:	40c9883a 	add	r4,r8,r3
    251c:	2007883a 	mov	r3,r4
    2520:	1009883a 	mov	r4,r2
    2524:	180b883a 	mov	r5,r3
    2528:	e13ff815 	stw	r4,-32(fp)
    252c:	e17ff915 	stw	r5,-28(fp)

	int Duration = BUF_SIZE / N;
	for(j=0;j<N;j++){
		Average[j] = 0;
		Sum =0;
		for(i=0;i<Duration;i++){
    2530:	e0bffb17 	ldw	r2,-20(fp)
    2534:	10800044 	addi	r2,r2,1
    2538:	e0bffb15 	stw	r2,-20(fp)
    253c:	e0fffb17 	ldw	r3,-20(fp)
    2540:	e0bff617 	ldw	r2,-40(fp)
    2544:	18bfb816 	blt	r3,r2,2428 <Audio_Average+0x60>
			Sum = ((alt_u64)abs(((alt_u32)l_buf[i + j * Duration]))) + Sum;
			Sum = ((alt_u64)abs(((alt_u32)r_buf[i + j * Duration]))) + Sum;
		}

		Average[j] = (((Sum * 400) / (Duration) ) >> 32);
    2548:	e43ffa17 	ldw	r16,-24(fp)
    254c:	e13ff817 	ldw	r4,-32(fp)
    2550:	e17ff917 	ldw	r5,-28(fp)
    2554:	01806404 	movi	r6,400
    2558:	000f883a 	mov	r7,zero
    255c:	00029e40 	call	29e4 <__muldi3>
    2560:	1009883a 	mov	r4,r2
    2564:	180b883a 	mov	r5,r3
    2568:	200d883a 	mov	r6,r4
    256c:	280f883a 	mov	r7,r5
    2570:	e0bff617 	ldw	r2,-40(fp)
    2574:	1009d7fa 	srai	r4,r2,31
    2578:	e0bff617 	ldw	r2,-40(fp)
    257c:	2007883a 	mov	r3,r4
    2580:	3009883a 	mov	r4,r6
    2584:	380b883a 	mov	r5,r7
    2588:	100d883a 	mov	r6,r2
    258c:	180f883a 	mov	r7,r3
    2590:	0002a7c0 	call	2a7c <__divdi3>
    2594:	1009883a 	mov	r4,r2
    2598:	180b883a 	mov	r5,r3
    259c:	2005883a 	mov	r2,r4
    25a0:	2807883a 	mov	r3,r5
    25a4:	1809d83a 	sra	r4,r3,zero
    25a8:	180bd7fa 	srai	r5,r3,31
    25ac:	00c01ef4 	movhi	r3,123
    25b0:	18c5b604 	addi	r3,r3,5848
    25b4:	800490fa 	slli	r2,r16,3
    25b8:	10c5883a 	add	r2,r2,r3
    25bc:	11000015 	stw	r4,0(r2)
    25c0:	11400115 	stw	r5,4(r2)
		anita = Average[j];
    25c4:	e0bffa17 	ldw	r2,-24(fp)
    25c8:	00c01ef4 	movhi	r3,123
    25cc:	18c5b604 	addi	r3,r3,5848
    25d0:	100490fa 	slli	r2,r2,3
    25d4:	10c9883a 	add	r4,r2,r3
    25d8:	20800017 	ldw	r2,0(r4)
    25dc:	20c00117 	ldw	r3,4(r4)
    25e0:	e0bff715 	stw	r2,-36(fp)
        if((200-Average[j]) < 110 ){
    25e4:	e0bffa17 	ldw	r2,-24(fp)
    25e8:	00c01ef4 	movhi	r3,123
    25ec:	18c5b604 	addi	r3,r3,5848
    25f0:	100490fa 	slli	r2,r2,3
    25f4:	10c5883a 	add	r2,r2,r3
    25f8:	11800017 	ldw	r6,0(r2)
    25fc:	11c00117 	ldw	r7,4(r2)
    2600:	01003204 	movi	r4,200
    2604:	000b883a 	mov	r5,zero
    2608:	2185c83a 	sub	r2,r4,r6
    260c:	2091803a 	cmpltu	r8,r4,r2
    2610:	29c7c83a 	sub	r3,r5,r7
    2614:	1a09c83a 	sub	r4,r3,r8
    2618:	2007883a 	mov	r3,r4
    261c:	1009883a 	mov	r4,r2
    2620:	e13ffc15 	stw	r4,-16(fp)
    2624:	1805883a 	mov	r2,r3
    2628:	e0bffd15 	stw	r2,-12(fp)
    262c:	e0fffd17 	ldw	r3,-12(fp)
    2630:	18800048 	cmpgei	r2,r3,1
    2634:	10000e1e 	bne	r2,zero,2670 <Audio_Average+0x2a8>
    2638:	e13ffd17 	ldw	r4,-12(fp)
    263c:	2004c03a 	cmpne	r2,r4,zero
    2640:	1000031e 	bne	r2,zero,2650 <Audio_Average+0x288>
    2644:	e0fffc17 	ldw	r3,-16(fp)
    2648:	18801ba8 	cmpgeui	r2,r3,110
    264c:	1000081e 	bne	r2,zero,2670 <Audio_Average+0x2a8>
        	Average[j] = 95;
    2650:	e0bffa17 	ldw	r2,-24(fp)
    2654:	00c01ef4 	movhi	r3,123
    2658:	18c5b604 	addi	r3,r3,5848
    265c:	100490fa 	slli	r2,r2,3
    2660:	10c7883a 	add	r3,r2,r3
    2664:	008017c4 	movi	r2,95
    2668:	18800015 	stw	r2,0(r3)
    266c:	18000115 	stw	zero,4(r3)
	long long int Sum=0;

	int anita;

	int Duration = BUF_SIZE / N;
	for(j=0;j<N;j++){
    2670:	e0bffa17 	ldw	r2,-24(fp)
    2674:	10800044 	addi	r2,r2,1
    2678:	e0bffa15 	stw	r2,-24(fp)
    267c:	e0bffa17 	ldw	r2,-24(fp)
    2680:	10800790 	cmplti	r2,r2,30
    2684:	103f5d1e 	bne	r2,zero,23fc <Audio_Average+0x34>
		anita = Average[j];
        if((200-Average[j]) < 110 ){
        	Average[j] = 95;
        }
	}
}
    2688:	e037883a 	mov	sp,fp
    268c:	dfc00217 	ldw	ra,8(sp)
    2690:	df000117 	ldw	fp,4(sp)
    2694:	dc000017 	ldw	r16,0(sp)
    2698:	dec00304 	addi	sp,sp,12
    269c:	f800283a 	ret

000026a0 <Plot_Play_Audio>:
/****************************************************************************************/
void Plot_Play_Audio(alt_up_pixel_buffer_dma_dev *pixel_buffer){
    26a0:	defff304 	addi	sp,sp,-52
    26a4:	dfc00c15 	stw	ra,48(sp)
    26a8:	df000b15 	stw	fp,44(sp)
    26ac:	df000b04 	addi	fp,sp,44
    26b0:	e13fff15 	stw	r4,-4(fp)
	int x_Start=0,x_End=10;
    26b4:	e03ffe15 	stw	zero,-8(fp)
    26b8:	00800284 	movi	r2,10
    26bc:	e0bffd15 	stw	r2,-12(fp)
	int gap = 3;
    26c0:	008000c4 	movi	r2,3
    26c4:	e0bffc15 	stw	r2,-16(fp)
	int x1 = 10;
    26c8:	00800284 	movi	r2,10
    26cc:	e0bffb15 	stw	r2,-20(fp)
	int x2 = 310;
    26d0:	00804d84 	movi	r2,310
    26d4:	e0bffa15 	stw	r2,-24(fp)
	int Range = ((x2 - x1)/N)-3;
    26d8:	e0fffa17 	ldw	r3,-24(fp)
    26dc:	e0bffb17 	ldw	r2,-20(fp)
    26e0:	1887c83a 	sub	r3,r3,r2
    26e4:	00800784 	movi	r2,30
    26e8:	1885283a 	div	r2,r3,r2
    26ec:	10bfff44 	addi	r2,r2,-3
    26f0:	e0bff915 	stw	r2,-28(fp)
	short color = 0x1111;
    26f4:	00844444 	movi	r2,4369
    26f8:	e0bff80d 	sth	r2,-32(fp)


	if(Play_Flag == 1){
    26fc:	00800074 	movhi	r2,1
    2700:	10808604 	addi	r2,r2,536
    2704:	10800017 	ldw	r2,0(r2)
    2708:	10800058 	cmpnei	r2,r2,1
    270c:	1000221e 	bne	r2,zero,2798 <Plot_Play_Audio+0xf8>
		x_Start = Play_Index * Range + gap * Play_Index + 13;
    2710:	e0fff917 	ldw	r3,-28(fp)
    2714:	e0bffc17 	ldw	r2,-16(fp)
    2718:	1887883a 	add	r3,r3,r2
    271c:	00800074 	movhi	r2,1
    2720:	10808204 	addi	r2,r2,520
    2724:	10800017 	ldw	r2,0(r2)
    2728:	1885383a 	mul	r2,r3,r2
    272c:	10800344 	addi	r2,r2,13
    2730:	e0bffe15 	stw	r2,-8(fp)
		x_End = x_Start + Range;
    2734:	e0fffe17 	ldw	r3,-8(fp)
    2738:	e0bff917 	ldw	r2,-28(fp)
    273c:	1885883a 	add	r2,r3,r2
    2740:	e0bffd15 	stw	r2,-12(fp)
		Play_Flag = 0;
    2744:	00800074 	movhi	r2,1
    2748:	10808604 	addi	r2,r2,536
    274c:	10000015 	stw	zero,0(r2)
		Play_Index = Play_Index + 1;
    2750:	00800074 	movhi	r2,1
    2754:	10808204 	addi	r2,r2,520
    2758:	10800017 	ldw	r2,0(r2)
    275c:	10c00044 	addi	r3,r2,1
    2760:	00800074 	movhi	r2,1
    2764:	10808204 	addi	r2,r2,520
    2768:	10c00015 	stw	r3,0(r2)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer, x_Start, 205, x_End,
    276c:	e0bff917 	ldw	r2,-28(fp)
    2770:	10803344 	addi	r2,r2,205
    2774:	e0fff80f 	ldh	r3,-32(fp)
    2778:	d8800015 	stw	r2,0(sp)
    277c:	d8c00115 	stw	r3,4(sp)
    2780:	d8000215 	stw	zero,8(sp)
    2784:	e13fff17 	ldw	r4,-4(fp)
    2788:	e17ffe17 	ldw	r5,-8(fp)
    278c:	01803344 	movi	r6,205
    2790:	e1fffd17 	ldw	r7,-12(fp)
    2794:	0006f9c0 	call	6f9c <alt_up_pixel_buffer_dma_draw_box>
			205 + Range , color, 0);
	}
}
    2798:	e037883a 	mov	sp,fp
    279c:	dfc00117 	ldw	ra,4(sp)
    27a0:	df000017 	ldw	fp,0(sp)
    27a4:	dec00204 	addi	sp,sp,8
    27a8:	f800283a 	ret

000027ac <Do_Hardware_Calculate>:
/****************************************************************************************/
void Do_Hardware_Calculate(){
    27ac:	defffd04 	addi	sp,sp,-12
    27b0:	dfc00215 	stw	ra,8(sp)
    27b4:	df000115 	stw	fp,4(sp)
    27b8:	df000104 	addi	fp,sp,4
	amplitude_operation(Size,Number,Right_Ram,Left_Ram,Out_Ram);
    27bc:	01801ef4 	movhi	r6,123
    27c0:	31855a04 	addi	r6,r6,5480
    27c4:	01c01ef4 	movhi	r7,123
    27c8:	39c5f204 	addi	r7,r7,6088
    27cc:	00801ef4 	movhi	r2,123
    27d0:	10853a04 	addi	r2,r2,5352
    27d4:	d8800015 	stw	r2,0(sp)
    27d8:	01104684 	movi	r4,16666
    27dc:	01400784 	movi	r5,30
    27e0:	000033c0 	call	33c <amplitude_operation>
}
    27e4:	e037883a 	mov	sp,fp
    27e8:	dfc00117 	ldw	ra,4(sp)
    27ec:	df000017 	ldw	fp,0(sp)
    27f0:	dec00204 	addi	sp,sp,8
    27f4:	f800283a 	ret

000027f8 <Calculate_Avrage>:
/****************************************************************************************/
void Calculate_Avrage(){
    27f8:	defffc04 	addi	sp,sp,-16
    27fc:	df000315 	stw	fp,12(sp)
    2800:	df000304 	addi	fp,sp,12
	int i;
	for(i=0;i<=Number;i++){
    2804:	e03ffd15 	stw	zero,-12(fp)
    2808:	00004106 	br	2910 <Calculate_Avrage+0x118>
		Average[i] = 0;
    280c:	e0bffd17 	ldw	r2,-12(fp)
    2810:	00c01ef4 	movhi	r3,123
    2814:	18c5b604 	addi	r3,r3,5848
    2818:	100490fa 	slli	r2,r2,3
    281c:	10c5883a 	add	r2,r2,r3
    2820:	10000015 	stw	zero,0(r2)
    2824:	10000115 	stw	zero,4(r2)
		Average[i] = Out_Ram[i]/Size;
    2828:	e1bffd17 	ldw	r6,-12(fp)
    282c:	e0bffd17 	ldw	r2,-12(fp)
    2830:	00c01ef4 	movhi	r3,123
    2834:	18c53a04 	addi	r3,r3,5352
    2838:	1085883a 	add	r2,r2,r2
    283c:	1085883a 	add	r2,r2,r2
    2840:	10c5883a 	add	r2,r2,r3
    2844:	10c00017 	ldw	r3,0(r2)
    2848:	00803974 	movhi	r2,229
    284c:	10b87004 	addi	r2,r2,-7744
    2850:	1889283a 	div	r4,r3,r2
    2854:	200bd7fa 	srai	r5,r4,31
    2858:	2005883a 	mov	r2,r4
    285c:	2807883a 	mov	r3,r5
    2860:	01401ef4 	movhi	r5,123
    2864:	2945b604 	addi	r5,r5,5848
    2868:	300890fa 	slli	r4,r6,3
    286c:	2149883a 	add	r4,r4,r5
    2870:	20800015 	stw	r2,0(r4)
    2874:	20c00115 	stw	r3,4(r4)
        if((200-Average[i]) < 110 ){
    2878:	e0bffd17 	ldw	r2,-12(fp)
    287c:	00c01ef4 	movhi	r3,123
    2880:	18c5b604 	addi	r3,r3,5848
    2884:	100490fa 	slli	r2,r2,3
    2888:	10c5883a 	add	r2,r2,r3
    288c:	11800017 	ldw	r6,0(r2)
    2890:	11c00117 	ldw	r7,4(r2)
    2894:	01003204 	movi	r4,200
    2898:	000b883a 	mov	r5,zero
    289c:	2185c83a 	sub	r2,r4,r6
    28a0:	2091803a 	cmpltu	r8,r4,r2
    28a4:	29c7c83a 	sub	r3,r5,r7
    28a8:	1a09c83a 	sub	r4,r3,r8
    28ac:	2007883a 	mov	r3,r4
    28b0:	1009883a 	mov	r4,r2
    28b4:	e13ffe15 	stw	r4,-8(fp)
    28b8:	1805883a 	mov	r2,r3
    28bc:	e0bfff15 	stw	r2,-4(fp)
    28c0:	e0ffff17 	ldw	r3,-4(fp)
    28c4:	18800048 	cmpgei	r2,r3,1
    28c8:	10000e1e 	bne	r2,zero,2904 <Calculate_Avrage+0x10c>
    28cc:	e13fff17 	ldw	r4,-4(fp)
    28d0:	2004c03a 	cmpne	r2,r4,zero
    28d4:	1000031e 	bne	r2,zero,28e4 <Calculate_Avrage+0xec>
    28d8:	e0fffe17 	ldw	r3,-8(fp)
    28dc:	18801ba8 	cmpgeui	r2,r3,110
    28e0:	1000081e 	bne	r2,zero,2904 <Calculate_Avrage+0x10c>
        	Average[i] = 95;
    28e4:	e0bffd17 	ldw	r2,-12(fp)
    28e8:	00c01ef4 	movhi	r3,123
    28ec:	18c5b604 	addi	r3,r3,5848
    28f0:	100490fa 	slli	r2,r2,3
    28f4:	10c7883a 	add	r3,r2,r3
    28f8:	008017c4 	movi	r2,95
    28fc:	18800015 	stw	r2,0(r3)
    2900:	18000115 	stw	zero,4(r3)
	amplitude_operation(Size,Number,Right_Ram,Left_Ram,Out_Ram);
}
/****************************************************************************************/
void Calculate_Avrage(){
	int i;
	for(i=0;i<=Number;i++){
    2904:	e0bffd17 	ldw	r2,-12(fp)
    2908:	10800044 	addi	r2,r2,1
    290c:	e0bffd15 	stw	r2,-12(fp)
    2910:	e0bffd17 	ldw	r2,-12(fp)
    2914:	108007d0 	cmplti	r2,r2,31
    2918:	103fbc1e 	bne	r2,zero,280c <Calculate_Avrage+0x14>
		Average[i] = Out_Ram[i]/Size;
        if((200-Average[i]) < 110 ){
        	Average[i] = 95;
        }
	}
}
    291c:	e037883a 	mov	sp,fp
    2920:	df000017 	ldw	fp,0(sp)
    2924:	dec00104 	addi	sp,sp,4
    2928:	f800283a 	ret

0000292c <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    292c:	defffa04 	addi	sp,sp,-24
    2930:	dfc00515 	stw	ra,20(sp)
    2934:	df000415 	stw	fp,16(sp)
    2938:	df000404 	addi	fp,sp,16
    293c:	e13ffe15 	stw	r4,-8(fp)
    2940:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    2944:	e0bffe17 	ldw	r2,-8(fp)
    2948:	10800517 	ldw	r2,20(r2)
    294c:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    2950:	e0bffe17 	ldw	r2,-8(fp)
    2954:	10800017 	ldw	r2,0(r2)
    2958:	10800a17 	ldw	r2,40(r2)
    295c:	10800304 	addi	r2,r2,12
    2960:	10800037 	ldwio	r2,0(r2)
    2964:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    2968:	e0bffe17 	ldw	r2,-8(fp)
    296c:	10800017 	ldw	r2,0(r2)
    2970:	10800a17 	ldw	r2,40(r2)
    2974:	10800304 	addi	r2,r2,12
    2978:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    297c:	e0bffc17 	ldw	r2,-16(fp)
    2980:	10800098 	cmpnei	r2,r2,2
    2984:	1000081e 	bne	r2,zero,29a8 <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    2988:	00800074 	movhi	r2,1
    298c:	10808d04 	addi	r2,r2,564
    2990:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2994:	e13ffd17 	ldw	r4,-12(fp)
    2998:	0004b300 	call	4b30 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    299c:	e13ffd17 	ldw	r4,-12(fp)
    29a0:	00049800 	call	4980 <alt_up_audio_enable_read_interrupt>
    29a4:	00000a06 	br	29d0 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    29a8:	e0bffc17 	ldw	r2,-16(fp)
    29ac:	10800118 	cmpnei	r2,r2,4
    29b0:	1000071e 	bne	r2,zero,29d0 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    29b4:	00800074 	movhi	r2,1
    29b8:	10808b04 	addi	r2,r2,556
    29bc:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    29c0:	e13ffd17 	ldw	r4,-12(fp)
    29c4:	0004b300 	call	4b30 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    29c8:	e13ffd17 	ldw	r4,-12(fp)
    29cc:	0004a1c0 	call	4a1c <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    29d0:	e037883a 	mov	sp,fp
    29d4:	dfc00117 	ldw	ra,4(sp)
    29d8:	df000017 	ldw	fp,0(sp)
    29dc:	dec00204 	addi	sp,sp,8
    29e0:	f800283a 	ret

000029e4 <__muldi3>:
    29e4:	2011883a 	mov	r8,r4
    29e8:	427fffcc 	andi	r9,r8,65535
    29ec:	4018d43a 	srli	r12,r8,16
    29f0:	32bfffcc 	andi	r10,r6,65535
    29f4:	3016d43a 	srli	r11,r6,16
    29f8:	4a85383a 	mul	r2,r9,r10
    29fc:	6295383a 	mul	r10,r12,r10
    2a00:	4ad3383a 	mul	r9,r9,r11
    2a04:	113fffcc 	andi	r4,r2,65535
    2a08:	1004d43a 	srli	r2,r2,16
    2a0c:	4a93883a 	add	r9,r9,r10
    2a10:	3807883a 	mov	r3,r7
    2a14:	1245883a 	add	r2,r2,r9
    2a18:	280f883a 	mov	r7,r5
    2a1c:	180b883a 	mov	r5,r3
    2a20:	1006943a 	slli	r3,r2,16
    2a24:	defffd04 	addi	sp,sp,-12
    2a28:	dc800215 	stw	r18,8(sp)
    2a2c:	1907883a 	add	r3,r3,r4
    2a30:	dc400115 	stw	r17,4(sp)
    2a34:	dc000015 	stw	r16,0(sp)
    2a38:	4165383a 	mul	r18,r8,r5
    2a3c:	31e3383a 	mul	r17,r6,r7
    2a40:	1012d43a 	srli	r9,r2,16
    2a44:	62d9383a 	mul	r12,r12,r11
    2a48:	181f883a 	mov	r15,r3
    2a4c:	1280022e 	bgeu	r2,r10,2a58 <__muldi3+0x74>
    2a50:	00800074 	movhi	r2,1
    2a54:	6099883a 	add	r12,r12,r2
    2a58:	624d883a 	add	r6,r12,r9
    2a5c:	9187883a 	add	r3,r18,r6
    2a60:	88c7883a 	add	r3,r17,r3
    2a64:	7805883a 	mov	r2,r15
    2a68:	dc800217 	ldw	r18,8(sp)
    2a6c:	dc400117 	ldw	r17,4(sp)
    2a70:	dc000017 	ldw	r16,0(sp)
    2a74:	dec00304 	addi	sp,sp,12
    2a78:	f800283a 	ret

00002a7c <__divdi3>:
    2a7c:	deffef04 	addi	sp,sp,-68
    2a80:	2005883a 	mov	r2,r4
    2a84:	2807883a 	mov	r3,r5
    2a88:	dfc01015 	stw	ra,64(sp)
    2a8c:	df000f15 	stw	fp,60(sp)
    2a90:	ddc00e15 	stw	r23,56(sp)
    2a94:	dd800d15 	stw	r22,52(sp)
    2a98:	dd400c15 	stw	r21,48(sp)
    2a9c:	dd000b15 	stw	r20,44(sp)
    2aa0:	dcc00a15 	stw	r19,40(sp)
    2aa4:	dc800915 	stw	r18,36(sp)
    2aa8:	dc400815 	stw	r17,32(sp)
    2aac:	dc000715 	stw	r16,28(sp)
    2ab0:	1019883a 	mov	r12,r2
    2ab4:	181b883a 	mov	r13,r3
    2ab8:	3015883a 	mov	r10,r6
    2abc:	3817883a 	mov	r11,r7
    2ac0:	1800ba16 	blt	r3,zero,2dac <__divdi3+0x330>
    2ac4:	d8000615 	stw	zero,24(sp)
    2ac8:	5800ad16 	blt	r11,zero,2d80 <__divdi3+0x304>
    2acc:	5021883a 	mov	r16,r10
    2ad0:	602f883a 	mov	r23,r12
    2ad4:	6829883a 	mov	r20,r13
    2ad8:	58003b1e 	bne	r11,zero,2bc8 <__divdi3+0x14c>
    2adc:	6a805836 	bltu	r13,r10,2c40 <__divdi3+0x1c4>
    2ae0:	5000ce26 	beq	r10,zero,2e1c <__divdi3+0x3a0>
    2ae4:	00bfffd4 	movui	r2,65535
    2ae8:	1400ba36 	bltu	r2,r16,2dd4 <__divdi3+0x358>
    2aec:	00803fc4 	movi	r2,255
    2af0:	14015f36 	bltu	r2,r16,3070 <__divdi3+0x5f4>
    2af4:	000b883a 	mov	r5,zero
    2af8:	0005883a 	mov	r2,zero
    2afc:	8084d83a 	srl	r2,r16,r2
    2b00:	01000074 	movhi	r4,1
    2b04:	212f9104 	addi	r4,r4,-16828
    2b08:	01800804 	movi	r6,32
    2b0c:	1105883a 	add	r2,r2,r4
    2b10:	10c00003 	ldbu	r3,0(r2)
    2b14:	28c7883a 	add	r3,r5,r3
    2b18:	30edc83a 	sub	r22,r6,r3
    2b1c:	b001101e 	bne	r22,zero,2f60 <__divdi3+0x4e4>
    2b20:	802ad43a 	srli	r21,r16,16
    2b24:	01000044 	movi	r4,1
    2b28:	a423c83a 	sub	r17,r20,r16
    2b2c:	873fffcc 	andi	fp,r16,65535
    2b30:	d9000315 	stw	r4,12(sp)
    2b34:	8809883a 	mov	r4,r17
    2b38:	a80b883a 	mov	r5,r21
    2b3c:	00032380 	call	3238 <__udivsi3>
    2b40:	8809883a 	mov	r4,r17
    2b44:	a80b883a 	mov	r5,r21
    2b48:	102d883a 	mov	r22,r2
    2b4c:	00032400 	call	3240 <__umodsi3>
    2b50:	1004943a 	slli	r2,r2,16
    2b54:	b806d43a 	srli	r3,r23,16
    2b58:	e5a3383a 	mul	r17,fp,r22
    2b5c:	10c4b03a 	or	r2,r2,r3
    2b60:	1440042e 	bgeu	r2,r17,2b74 <__divdi3+0xf8>
    2b64:	1405883a 	add	r2,r2,r16
    2b68:	b5bfffc4 	addi	r22,r22,-1
    2b6c:	14000136 	bltu	r2,r16,2b74 <__divdi3+0xf8>
    2b70:	14415f36 	bltu	r2,r17,30f0 <__divdi3+0x674>
    2b74:	1463c83a 	sub	r17,r2,r17
    2b78:	8809883a 	mov	r4,r17
    2b7c:	a80b883a 	mov	r5,r21
    2b80:	00032380 	call	3238 <__udivsi3>
    2b84:	8809883a 	mov	r4,r17
    2b88:	a80b883a 	mov	r5,r21
    2b8c:	1029883a 	mov	r20,r2
    2b90:	00032400 	call	3240 <__umodsi3>
    2b94:	1004943a 	slli	r2,r2,16
    2b98:	e509383a 	mul	r4,fp,r20
    2b9c:	b8ffffcc 	andi	r3,r23,65535
    2ba0:	10c4b03a 	or	r2,r2,r3
    2ba4:	1100042e 	bgeu	r2,r4,2bb8 <__divdi3+0x13c>
    2ba8:	8085883a 	add	r2,r16,r2
    2bac:	a53fffc4 	addi	r20,r20,-1
    2bb0:	14000136 	bltu	r2,r16,2bb8 <__divdi3+0x13c>
    2bb4:	11014736 	bltu	r2,r4,30d4 <__divdi3+0x658>
    2bb8:	b004943a 	slli	r2,r22,16
    2bbc:	d8c00317 	ldw	r3,12(sp)
    2bc0:	a084b03a 	or	r2,r20,r2
    2bc4:	00000406 	br	2bd8 <__divdi3+0x15c>
    2bc8:	5811883a 	mov	r8,r11
    2bcc:	6ac0582e 	bgeu	r13,r11,2d30 <__divdi3+0x2b4>
    2bd0:	0005883a 	mov	r2,zero
    2bd4:	0007883a 	mov	r3,zero
    2bd8:	1025883a 	mov	r18,r2
    2bdc:	100d883a 	mov	r6,r2
    2be0:	d8800617 	ldw	r2,24(sp)
    2be4:	180f883a 	mov	r7,r3
    2be8:	10000726 	beq	r2,zero,2c08 <__divdi3+0x18c>
    2bec:	0009883a 	mov	r4,zero
    2bf0:	2485c83a 	sub	r2,r4,r18
    2bf4:	2089803a 	cmpltu	r4,r4,r2
    2bf8:	00c7c83a 	sub	r3,zero,r3
    2bfc:	1909c83a 	sub	r4,r3,r4
    2c00:	100d883a 	mov	r6,r2
    2c04:	200f883a 	mov	r7,r4
    2c08:	3005883a 	mov	r2,r6
    2c0c:	3807883a 	mov	r3,r7
    2c10:	dfc01017 	ldw	ra,64(sp)
    2c14:	df000f17 	ldw	fp,60(sp)
    2c18:	ddc00e17 	ldw	r23,56(sp)
    2c1c:	dd800d17 	ldw	r22,52(sp)
    2c20:	dd400c17 	ldw	r21,48(sp)
    2c24:	dd000b17 	ldw	r20,44(sp)
    2c28:	dcc00a17 	ldw	r19,40(sp)
    2c2c:	dc800917 	ldw	r18,36(sp)
    2c30:	dc400817 	ldw	r17,32(sp)
    2c34:	dc000717 	ldw	r16,28(sp)
    2c38:	dec01104 	addi	sp,sp,68
    2c3c:	f800283a 	ret
    2c40:	00bfffd4 	movui	r2,65535
    2c44:	12806f36 	bltu	r2,r10,2e04 <__divdi3+0x388>
    2c48:	00803fc4 	movi	r2,255
    2c4c:	12810236 	bltu	r2,r10,3058 <__divdi3+0x5dc>
    2c50:	000b883a 	mov	r5,zero
    2c54:	0005883a 	mov	r2,zero
    2c58:	8084d83a 	srl	r2,r16,r2
    2c5c:	01000074 	movhi	r4,1
    2c60:	212f9104 	addi	r4,r4,-16828
    2c64:	01800804 	movi	r6,32
    2c68:	1105883a 	add	r2,r2,r4
    2c6c:	10c00003 	ldbu	r3,0(r2)
    2c70:	28c7883a 	add	r3,r5,r3
    2c74:	30d1c83a 	sub	r8,r6,r3
    2c78:	40000626 	beq	r8,zero,2c94 <__divdi3+0x218>
    2c7c:	3205c83a 	sub	r2,r6,r8
    2c80:	b884d83a 	srl	r2,r23,r2
    2c84:	a206983a 	sll	r3,r20,r8
    2c88:	ba2e983a 	sll	r23,r23,r8
    2c8c:	8220983a 	sll	r16,r16,r8
    2c90:	18a8b03a 	or	r20,r3,r2
    2c94:	802ad43a 	srli	r21,r16,16
    2c98:	a009883a 	mov	r4,r20
    2c9c:	873fffcc 	andi	fp,r16,65535
    2ca0:	a80b883a 	mov	r5,r21
    2ca4:	00032380 	call	3238 <__udivsi3>
    2ca8:	a009883a 	mov	r4,r20
    2cac:	a80b883a 	mov	r5,r21
    2cb0:	102d883a 	mov	r22,r2
    2cb4:	00032400 	call	3240 <__umodsi3>
    2cb8:	1004943a 	slli	r2,r2,16
    2cbc:	b806d43a 	srli	r3,r23,16
    2cc0:	e5a3383a 	mul	r17,fp,r22
    2cc4:	10c4b03a 	or	r2,r2,r3
    2cc8:	1440042e 	bgeu	r2,r17,2cdc <__divdi3+0x260>
    2ccc:	1405883a 	add	r2,r2,r16
    2cd0:	b5bfffc4 	addi	r22,r22,-1
    2cd4:	14000136 	bltu	r2,r16,2cdc <__divdi3+0x260>
    2cd8:	14410236 	bltu	r2,r17,30e4 <__divdi3+0x668>
    2cdc:	1463c83a 	sub	r17,r2,r17
    2ce0:	8809883a 	mov	r4,r17
    2ce4:	a80b883a 	mov	r5,r21
    2ce8:	00032380 	call	3238 <__udivsi3>
    2cec:	8809883a 	mov	r4,r17
    2cf0:	a80b883a 	mov	r5,r21
    2cf4:	1029883a 	mov	r20,r2
    2cf8:	00032400 	call	3240 <__umodsi3>
    2cfc:	1004943a 	slli	r2,r2,16
    2d00:	e509383a 	mul	r4,fp,r20
    2d04:	b8ffffcc 	andi	r3,r23,65535
    2d08:	10c4b03a 	or	r2,r2,r3
    2d0c:	1100042e 	bgeu	r2,r4,2d20 <__divdi3+0x2a4>
    2d10:	8085883a 	add	r2,r16,r2
    2d14:	a53fffc4 	addi	r20,r20,-1
    2d18:	14000136 	bltu	r2,r16,2d20 <__divdi3+0x2a4>
    2d1c:	1100ef36 	bltu	r2,r4,30dc <__divdi3+0x660>
    2d20:	b004943a 	slli	r2,r22,16
    2d24:	0007883a 	mov	r3,zero
    2d28:	a084b03a 	or	r2,r20,r2
    2d2c:	003faa06 	br	2bd8 <__divdi3+0x15c>
    2d30:	00bfffd4 	movui	r2,65535
    2d34:	12c02d36 	bltu	r2,r11,2dec <__divdi3+0x370>
    2d38:	00803fc4 	movi	r2,255
    2d3c:	12c0cf36 	bltu	r2,r11,307c <__divdi3+0x600>
    2d40:	000b883a 	mov	r5,zero
    2d44:	0005883a 	mov	r2,zero
    2d48:	4084d83a 	srl	r2,r8,r2
    2d4c:	01000074 	movhi	r4,1
    2d50:	212f9104 	addi	r4,r4,-16828
    2d54:	01800804 	movi	r6,32
    2d58:	1105883a 	add	r2,r2,r4
    2d5c:	10c00003 	ldbu	r3,0(r2)
    2d60:	28c7883a 	add	r3,r5,r3
    2d64:	30f9c83a 	sub	fp,r6,r3
    2d68:	e000331e 	bne	fp,zero,2e38 <__divdi3+0x3bc>
    2d6c:	45000136 	bltu	r8,r20,2d74 <__divdi3+0x2f8>
    2d70:	bc3f9736 	bltu	r23,r16,2bd0 <__divdi3+0x154>
    2d74:	00800044 	movi	r2,1
    2d78:	0007883a 	mov	r3,zero
    2d7c:	003f9606 	br	2bd8 <__divdi3+0x15c>
    2d80:	0009883a 	mov	r4,zero
    2d84:	2285c83a 	sub	r2,r4,r10
    2d88:	02c7c83a 	sub	r3,zero,r11
    2d8c:	2089803a 	cmpltu	r4,r4,r2
    2d90:	1909c83a 	sub	r4,r3,r4
    2d94:	d8c00617 	ldw	r3,24(sp)
    2d98:	1015883a 	mov	r10,r2
    2d9c:	2017883a 	mov	r11,r4
    2da0:	00c6303a 	nor	r3,zero,r3
    2da4:	d8c00615 	stw	r3,24(sp)
    2da8:	003f4806 	br	2acc <__divdi3+0x50>
    2dac:	0009883a 	mov	r4,zero
    2db0:	2085c83a 	sub	r2,r4,r2
    2db4:	2089803a 	cmpltu	r4,r4,r2
    2db8:	00c7c83a 	sub	r3,zero,r3
    2dbc:	1909c83a 	sub	r4,r3,r4
    2dc0:	1019883a 	mov	r12,r2
    2dc4:	201b883a 	mov	r13,r4
    2dc8:	00bfffc4 	movi	r2,-1
    2dcc:	d8800615 	stw	r2,24(sp)
    2dd0:	003f3d06 	br	2ac8 <__divdi3+0x4c>
    2dd4:	00804034 	movhi	r2,256
    2dd8:	10bfffc4 	addi	r2,r2,-1
    2ddc:	1400aa36 	bltu	r2,r16,3088 <__divdi3+0x60c>
    2de0:	01400404 	movi	r5,16
    2de4:	2805883a 	mov	r2,r5
    2de8:	003f4406 	br	2afc <__divdi3+0x80>
    2dec:	00804034 	movhi	r2,256
    2df0:	10bfffc4 	addi	r2,r2,-1
    2df4:	12c09b36 	bltu	r2,r11,3064 <__divdi3+0x5e8>
    2df8:	01400404 	movi	r5,16
    2dfc:	2805883a 	mov	r2,r5
    2e00:	003fd106 	br	2d48 <__divdi3+0x2cc>
    2e04:	00804034 	movhi	r2,256
    2e08:	10bfffc4 	addi	r2,r2,-1
    2e0c:	1280a136 	bltu	r2,r10,3094 <__divdi3+0x618>
    2e10:	01400404 	movi	r5,16
    2e14:	2805883a 	mov	r2,r5
    2e18:	003f8f06 	br	2c58 <__divdi3+0x1dc>
    2e1c:	01000044 	movi	r4,1
    2e20:	000b883a 	mov	r5,zero
    2e24:	00032380 	call	3238 <__udivsi3>
    2e28:	1021883a 	mov	r16,r2
    2e2c:	00bfffd4 	movui	r2,65535
    2e30:	143fe836 	bltu	r2,r16,2dd4 <__divdi3+0x358>
    2e34:	003f2d06 	br	2aec <__divdi3+0x70>
    2e38:	3705c83a 	sub	r2,r6,fp
    2e3c:	4708983a 	sll	r4,r8,fp
    2e40:	8086d83a 	srl	r3,r16,r2
    2e44:	a0a2d83a 	srl	r17,r20,r2
    2e48:	b884d83a 	srl	r2,r23,r2
    2e4c:	20eab03a 	or	r21,r4,r3
    2e50:	a82cd43a 	srli	r22,r21,16
    2e54:	a706983a 	sll	r3,r20,fp
    2e58:	8809883a 	mov	r4,r17
    2e5c:	b00b883a 	mov	r5,r22
    2e60:	1886b03a 	or	r3,r3,r2
    2e64:	d8c00215 	stw	r3,8(sp)
    2e68:	00032380 	call	3238 <__udivsi3>
    2e6c:	8809883a 	mov	r4,r17
    2e70:	b00b883a 	mov	r5,r22
    2e74:	1029883a 	mov	r20,r2
    2e78:	00032400 	call	3240 <__umodsi3>
    2e7c:	a8ffffcc 	andi	r3,r21,65535
    2e80:	d8c00515 	stw	r3,20(sp)
    2e84:	d9000217 	ldw	r4,8(sp)
    2e88:	d9400517 	ldw	r5,20(sp)
    2e8c:	1004943a 	slli	r2,r2,16
    2e90:	2006d43a 	srli	r3,r4,16
    2e94:	8720983a 	sll	r16,r16,fp
    2e98:	2d23383a 	mul	r17,r5,r20
    2e9c:	10c4b03a 	or	r2,r2,r3
    2ea0:	dc000015 	stw	r16,0(sp)
    2ea4:	1440032e 	bgeu	r2,r17,2eb4 <__divdi3+0x438>
    2ea8:	1545883a 	add	r2,r2,r21
    2eac:	a53fffc4 	addi	r20,r20,-1
    2eb0:	1540842e 	bgeu	r2,r21,30c4 <__divdi3+0x648>
    2eb4:	1463c83a 	sub	r17,r2,r17
    2eb8:	8809883a 	mov	r4,r17
    2ebc:	b00b883a 	mov	r5,r22
    2ec0:	00032380 	call	3238 <__udivsi3>
    2ec4:	8809883a 	mov	r4,r17
    2ec8:	b00b883a 	mov	r5,r22
    2ecc:	1021883a 	mov	r16,r2
    2ed0:	00032400 	call	3240 <__umodsi3>
    2ed4:	d8c00517 	ldw	r3,20(sp)
    2ed8:	d9000217 	ldw	r4,8(sp)
    2edc:	1004943a 	slli	r2,r2,16
    2ee0:	1c0f383a 	mul	r7,r3,r16
    2ee4:	20ffffcc 	andi	r3,r4,65535
    2ee8:	10e2b03a 	or	r17,r2,r3
    2eec:	89c0032e 	bgeu	r17,r7,2efc <__divdi3+0x480>
    2ef0:	8d63883a 	add	r17,r17,r21
    2ef4:	843fffc4 	addi	r16,r16,-1
    2ef8:	8d406e2e 	bgeu	r17,r21,30b4 <__divdi3+0x638>
    2efc:	a008943a 	slli	r4,r20,16
    2f00:	d9400017 	ldw	r5,0(sp)
    2f04:	89e3c83a 	sub	r17,r17,r7
    2f08:	8110b03a 	or	r8,r16,r4
    2f0c:	280cd43a 	srli	r6,r5,16
    2f10:	28ffffcc 	andi	r3,r5,65535
    2f14:	40bfffcc 	andi	r2,r8,65535
    2f18:	400ad43a 	srli	r5,r8,16
    2f1c:	10d3383a 	mul	r9,r2,r3
    2f20:	1185383a 	mul	r2,r2,r6
    2f24:	28c7383a 	mul	r3,r5,r3
    2f28:	4808d43a 	srli	r4,r9,16
    2f2c:	298b383a 	mul	r5,r5,r6
    2f30:	10c5883a 	add	r2,r2,r3
    2f34:	2089883a 	add	r4,r4,r2
    2f38:	20c0022e 	bgeu	r4,r3,2f44 <__divdi3+0x4c8>
    2f3c:	00800074 	movhi	r2,1
    2f40:	288b883a 	add	r5,r5,r2
    2f44:	2004d43a 	srli	r2,r4,16
    2f48:	288b883a 	add	r5,r5,r2
    2f4c:	89403f36 	bltu	r17,r5,304c <__divdi3+0x5d0>
    2f50:	89403926 	beq	r17,r5,3038 <__divdi3+0x5bc>
    2f54:	4005883a 	mov	r2,r8
    2f58:	0007883a 	mov	r3,zero
    2f5c:	003f1e06 	br	2bd8 <__divdi3+0x15c>
    2f60:	85a0983a 	sll	r16,r16,r22
    2f64:	3585c83a 	sub	r2,r6,r22
    2f68:	a0a2d83a 	srl	r17,r20,r2
    2f6c:	802ad43a 	srli	r21,r16,16
    2f70:	b884d83a 	srl	r2,r23,r2
    2f74:	a586983a 	sll	r3,r20,r22
    2f78:	8809883a 	mov	r4,r17
    2f7c:	a80b883a 	mov	r5,r21
    2f80:	1886b03a 	or	r3,r3,r2
    2f84:	d8c00115 	stw	r3,4(sp)
    2f88:	00032380 	call	3238 <__udivsi3>
    2f8c:	8809883a 	mov	r4,r17
    2f90:	a80b883a 	mov	r5,r21
    2f94:	d8800415 	stw	r2,16(sp)
    2f98:	00032400 	call	3240 <__umodsi3>
    2f9c:	d9400117 	ldw	r5,4(sp)
    2fa0:	d9000417 	ldw	r4,16(sp)
    2fa4:	1004943a 	slli	r2,r2,16
    2fa8:	873fffcc 	andi	fp,r16,65535
    2fac:	2806d43a 	srli	r3,r5,16
    2fb0:	e123383a 	mul	r17,fp,r4
    2fb4:	10c4b03a 	or	r2,r2,r3
    2fb8:	1440042e 	bgeu	r2,r17,2fcc <__divdi3+0x550>
    2fbc:	213fffc4 	addi	r4,r4,-1
    2fc0:	1405883a 	add	r2,r2,r16
    2fc4:	d9000415 	stw	r4,16(sp)
    2fc8:	1400352e 	bgeu	r2,r16,30a0 <__divdi3+0x624>
    2fcc:	1463c83a 	sub	r17,r2,r17
    2fd0:	8809883a 	mov	r4,r17
    2fd4:	a80b883a 	mov	r5,r21
    2fd8:	00032380 	call	3238 <__udivsi3>
    2fdc:	8809883a 	mov	r4,r17
    2fe0:	a80b883a 	mov	r5,r21
    2fe4:	1029883a 	mov	r20,r2
    2fe8:	00032400 	call	3240 <__umodsi3>
    2fec:	d9400117 	ldw	r5,4(sp)
    2ff0:	1004943a 	slli	r2,r2,16
    2ff4:	e509383a 	mul	r4,fp,r20
    2ff8:	28ffffcc 	andi	r3,r5,65535
    2ffc:	10c6b03a 	or	r3,r2,r3
    3000:	1900062e 	bgeu	r3,r4,301c <__divdi3+0x5a0>
    3004:	1c07883a 	add	r3,r3,r16
    3008:	a53fffc4 	addi	r20,r20,-1
    300c:	1c000336 	bltu	r3,r16,301c <__divdi3+0x5a0>
    3010:	1900022e 	bgeu	r3,r4,301c <__divdi3+0x5a0>
    3014:	a53fffc4 	addi	r20,r20,-1
    3018:	1c07883a 	add	r3,r3,r16
    301c:	d9400417 	ldw	r5,16(sp)
    3020:	bdae983a 	sll	r23,r23,r22
    3024:	1923c83a 	sub	r17,r3,r4
    3028:	2804943a 	slli	r2,r5,16
    302c:	a0a8b03a 	or	r20,r20,r2
    3030:	dd000315 	stw	r20,12(sp)
    3034:	003ebf06 	br	2b34 <__divdi3+0xb8>
    3038:	2004943a 	slli	r2,r4,16
    303c:	bf08983a 	sll	r4,r23,fp
    3040:	48ffffcc 	andi	r3,r9,65535
    3044:	10c5883a 	add	r2,r2,r3
    3048:	20bfc22e 	bgeu	r4,r2,2f54 <__divdi3+0x4d8>
    304c:	40bfffc4 	addi	r2,r8,-1
    3050:	0007883a 	mov	r3,zero
    3054:	003ee006 	br	2bd8 <__divdi3+0x15c>
    3058:	01400204 	movi	r5,8
    305c:	2805883a 	mov	r2,r5
    3060:	003efd06 	br	2c58 <__divdi3+0x1dc>
    3064:	01400604 	movi	r5,24
    3068:	2805883a 	mov	r2,r5
    306c:	003f3606 	br	2d48 <__divdi3+0x2cc>
    3070:	01400204 	movi	r5,8
    3074:	2805883a 	mov	r2,r5
    3078:	003ea006 	br	2afc <__divdi3+0x80>
    307c:	01400204 	movi	r5,8
    3080:	2805883a 	mov	r2,r5
    3084:	003f3006 	br	2d48 <__divdi3+0x2cc>
    3088:	01400604 	movi	r5,24
    308c:	2805883a 	mov	r2,r5
    3090:	003e9a06 	br	2afc <__divdi3+0x80>
    3094:	01400604 	movi	r5,24
    3098:	2805883a 	mov	r2,r5
    309c:	003eee06 	br	2c58 <__divdi3+0x1dc>
    30a0:	147fca2e 	bgeu	r2,r17,2fcc <__divdi3+0x550>
    30a4:	213fffc4 	addi	r4,r4,-1
    30a8:	1405883a 	add	r2,r2,r16
    30ac:	d9000415 	stw	r4,16(sp)
    30b0:	003fc606 	br	2fcc <__divdi3+0x550>
    30b4:	89ff912e 	bgeu	r17,r7,2efc <__divdi3+0x480>
    30b8:	8d63883a 	add	r17,r17,r21
    30bc:	843fffc4 	addi	r16,r16,-1
    30c0:	003f8e06 	br	2efc <__divdi3+0x480>
    30c4:	147f7b2e 	bgeu	r2,r17,2eb4 <__divdi3+0x438>
    30c8:	a53fffc4 	addi	r20,r20,-1
    30cc:	1545883a 	add	r2,r2,r21
    30d0:	003f7806 	br	2eb4 <__divdi3+0x438>
    30d4:	a53fffc4 	addi	r20,r20,-1
    30d8:	003eb706 	br	2bb8 <__divdi3+0x13c>
    30dc:	a53fffc4 	addi	r20,r20,-1
    30e0:	003f0f06 	br	2d20 <__divdi3+0x2a4>
    30e4:	b5bfffc4 	addi	r22,r22,-1
    30e8:	1405883a 	add	r2,r2,r16
    30ec:	003efb06 	br	2cdc <__divdi3+0x260>
    30f0:	b5bfffc4 	addi	r22,r22,-1
    30f4:	1405883a 	add	r2,r2,r16
    30f8:	003e9e06 	br	2b74 <__divdi3+0xf8>

000030fc <udivmodsi4>:
    30fc:	29001b2e 	bgeu	r5,r4,316c <udivmodsi4+0x70>
    3100:	28001a16 	blt	r5,zero,316c <udivmodsi4+0x70>
    3104:	00800044 	movi	r2,1
    3108:	0007883a 	mov	r3,zero
    310c:	01c007c4 	movi	r7,31
    3110:	00000306 	br	3120 <udivmodsi4+0x24>
    3114:	19c01326 	beq	r3,r7,3164 <udivmodsi4+0x68>
    3118:	18c00044 	addi	r3,r3,1
    311c:	28000416 	blt	r5,zero,3130 <udivmodsi4+0x34>
    3120:	294b883a 	add	r5,r5,r5
    3124:	1085883a 	add	r2,r2,r2
    3128:	293ffa36 	bltu	r5,r4,3114 <udivmodsi4+0x18>
    312c:	10000d26 	beq	r2,zero,3164 <udivmodsi4+0x68>
    3130:	0007883a 	mov	r3,zero
    3134:	21400236 	bltu	r4,r5,3140 <udivmodsi4+0x44>
    3138:	2149c83a 	sub	r4,r4,r5
    313c:	1886b03a 	or	r3,r3,r2
    3140:	1004d07a 	srli	r2,r2,1
    3144:	280ad07a 	srli	r5,r5,1
    3148:	103ffa1e 	bne	r2,zero,3134 <udivmodsi4+0x38>
    314c:	30000226 	beq	r6,zero,3158 <udivmodsi4+0x5c>
    3150:	2005883a 	mov	r2,r4
    3154:	f800283a 	ret
    3158:	1809883a 	mov	r4,r3
    315c:	2005883a 	mov	r2,r4
    3160:	f800283a 	ret
    3164:	0007883a 	mov	r3,zero
    3168:	003ff806 	br	314c <udivmodsi4+0x50>
    316c:	00800044 	movi	r2,1
    3170:	0007883a 	mov	r3,zero
    3174:	003fef06 	br	3134 <udivmodsi4+0x38>

00003178 <__divsi3>:
    3178:	defffe04 	addi	sp,sp,-8
    317c:	dc000015 	stw	r16,0(sp)
    3180:	dfc00115 	stw	ra,4(sp)
    3184:	0021883a 	mov	r16,zero
    3188:	20000c16 	blt	r4,zero,31bc <__divsi3+0x44>
    318c:	000d883a 	mov	r6,zero
    3190:	28000e16 	blt	r5,zero,31cc <__divsi3+0x54>
    3194:	00030fc0 	call	30fc <udivmodsi4>
    3198:	1007883a 	mov	r3,r2
    319c:	8005003a 	cmpeq	r2,r16,zero
    31a0:	1000011e 	bne	r2,zero,31a8 <__divsi3+0x30>
    31a4:	00c7c83a 	sub	r3,zero,r3
    31a8:	1805883a 	mov	r2,r3
    31ac:	dfc00117 	ldw	ra,4(sp)
    31b0:	dc000017 	ldw	r16,0(sp)
    31b4:	dec00204 	addi	sp,sp,8
    31b8:	f800283a 	ret
    31bc:	0109c83a 	sub	r4,zero,r4
    31c0:	04000044 	movi	r16,1
    31c4:	000d883a 	mov	r6,zero
    31c8:	283ff20e 	bge	r5,zero,3194 <__divsi3+0x1c>
    31cc:	014bc83a 	sub	r5,zero,r5
    31d0:	8021003a 	cmpeq	r16,r16,zero
    31d4:	003fef06 	br	3194 <__divsi3+0x1c>

000031d8 <__modsi3>:
    31d8:	deffff04 	addi	sp,sp,-4
    31dc:	dfc00015 	stw	ra,0(sp)
    31e0:	01800044 	movi	r6,1
    31e4:	2807883a 	mov	r3,r5
    31e8:	20000416 	blt	r4,zero,31fc <__modsi3+0x24>
    31ec:	28000c16 	blt	r5,zero,3220 <__modsi3+0x48>
    31f0:	dfc00017 	ldw	ra,0(sp)
    31f4:	dec00104 	addi	sp,sp,4
    31f8:	00030fc1 	jmpi	30fc <udivmodsi4>
    31fc:	0109c83a 	sub	r4,zero,r4
    3200:	28000b16 	blt	r5,zero,3230 <__modsi3+0x58>
    3204:	180b883a 	mov	r5,r3
    3208:	01800044 	movi	r6,1
    320c:	00030fc0 	call	30fc <udivmodsi4>
    3210:	0085c83a 	sub	r2,zero,r2
    3214:	dfc00017 	ldw	ra,0(sp)
    3218:	dec00104 	addi	sp,sp,4
    321c:	f800283a 	ret
    3220:	014bc83a 	sub	r5,zero,r5
    3224:	dfc00017 	ldw	ra,0(sp)
    3228:	dec00104 	addi	sp,sp,4
    322c:	00030fc1 	jmpi	30fc <udivmodsi4>
    3230:	0147c83a 	sub	r3,zero,r5
    3234:	003ff306 	br	3204 <__modsi3+0x2c>

00003238 <__udivsi3>:
    3238:	000d883a 	mov	r6,zero
    323c:	00030fc1 	jmpi	30fc <udivmodsi4>

00003240 <__umodsi3>:
    3240:	01800044 	movi	r6,1
    3244:	00030fc1 	jmpi	30fc <udivmodsi4>

00003248 <memcpy>:
    3248:	01c003c4 	movi	r7,15
    324c:	2007883a 	mov	r3,r4
    3250:	3980032e 	bgeu	r7,r6,3260 <memcpy+0x18>
    3254:	2904b03a 	or	r2,r5,r4
    3258:	108000cc 	andi	r2,r2,3
    325c:	10000926 	beq	r2,zero,3284 <memcpy+0x3c>
    3260:	30000626 	beq	r6,zero,327c <memcpy+0x34>
    3264:	30cd883a 	add	r6,r6,r3
    3268:	28800003 	ldbu	r2,0(r5)
    326c:	29400044 	addi	r5,r5,1
    3270:	18800005 	stb	r2,0(r3)
    3274:	18c00044 	addi	r3,r3,1
    3278:	30fffb1e 	bne	r6,r3,3268 <memcpy+0x20>
    327c:	2005883a 	mov	r2,r4
    3280:	f800283a 	ret
    3284:	3811883a 	mov	r8,r7
    3288:	200f883a 	mov	r7,r4
    328c:	28c00017 	ldw	r3,0(r5)
    3290:	31bffc04 	addi	r6,r6,-16
    3294:	38c00015 	stw	r3,0(r7)
    3298:	28800117 	ldw	r2,4(r5)
    329c:	38800115 	stw	r2,4(r7)
    32a0:	28c00217 	ldw	r3,8(r5)
    32a4:	38c00215 	stw	r3,8(r7)
    32a8:	28800317 	ldw	r2,12(r5)
    32ac:	29400404 	addi	r5,r5,16
    32b0:	38800315 	stw	r2,12(r7)
    32b4:	39c00404 	addi	r7,r7,16
    32b8:	41bff436 	bltu	r8,r6,328c <memcpy+0x44>
    32bc:	008000c4 	movi	r2,3
    32c0:	1180072e 	bgeu	r2,r6,32e0 <memcpy+0x98>
    32c4:	1007883a 	mov	r3,r2
    32c8:	28800017 	ldw	r2,0(r5)
    32cc:	31bfff04 	addi	r6,r6,-4
    32d0:	29400104 	addi	r5,r5,4
    32d4:	38800015 	stw	r2,0(r7)
    32d8:	39c00104 	addi	r7,r7,4
    32dc:	19bffa36 	bltu	r3,r6,32c8 <memcpy+0x80>
    32e0:	3807883a 	mov	r3,r7
    32e4:	003fde06 	br	3260 <memcpy+0x18>

000032e8 <memset>:
    32e8:	008000c4 	movi	r2,3
    32ec:	29403fcc 	andi	r5,r5,255
    32f0:	2007883a 	mov	r3,r4
    32f4:	1180022e 	bgeu	r2,r6,3300 <memset+0x18>
    32f8:	2084703a 	and	r2,r4,r2
    32fc:	10000826 	beq	r2,zero,3320 <memset+0x38>
    3300:	30000526 	beq	r6,zero,3318 <memset+0x30>
    3304:	2805883a 	mov	r2,r5
    3308:	30cd883a 	add	r6,r6,r3
    330c:	18800005 	stb	r2,0(r3)
    3310:	18c00044 	addi	r3,r3,1
    3314:	19bffd1e 	bne	r3,r6,330c <memset+0x24>
    3318:	2005883a 	mov	r2,r4
    331c:	f800283a 	ret
    3320:	2804923a 	slli	r2,r5,8
    3324:	020003c4 	movi	r8,15
    3328:	200f883a 	mov	r7,r4
    332c:	2884b03a 	or	r2,r5,r2
    3330:	1006943a 	slli	r3,r2,16
    3334:	10c6b03a 	or	r3,r2,r3
    3338:	41800a2e 	bgeu	r8,r6,3364 <memset+0x7c>
    333c:	4005883a 	mov	r2,r8
    3340:	31bffc04 	addi	r6,r6,-16
    3344:	38c00015 	stw	r3,0(r7)
    3348:	38c00115 	stw	r3,4(r7)
    334c:	38c00215 	stw	r3,8(r7)
    3350:	38c00315 	stw	r3,12(r7)
    3354:	39c00404 	addi	r7,r7,16
    3358:	11bff936 	bltu	r2,r6,3340 <memset+0x58>
    335c:	008000c4 	movi	r2,3
    3360:	1180052e 	bgeu	r2,r6,3378 <memset+0x90>
    3364:	31bfff04 	addi	r6,r6,-4
    3368:	008000c4 	movi	r2,3
    336c:	38c00015 	stw	r3,0(r7)
    3370:	39c00104 	addi	r7,r7,4
    3374:	11bffb36 	bltu	r2,r6,3364 <memset+0x7c>
    3378:	3807883a 	mov	r3,r7
    337c:	003fe006 	br	3300 <memset+0x18>

00003380 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    3380:	deffef04 	addi	sp,sp,-68
    3384:	df001015 	stw	fp,64(sp)
    3388:	df001004 	addi	fp,sp,64
    338c:	e13ffc15 	stw	r4,-16(fp)
    3390:	e17ffd15 	stw	r5,-12(fp)
    3394:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    3398:	00bffa84 	movi	r2,-22
    339c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    33a0:	e0bffc17 	ldw	r2,-16(fp)
    33a4:	10800828 	cmpgeui	r2,r2,32
    33a8:	1000601e 	bne	r2,zero,352c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    33ac:	0005303a 	rdctl	r2,status
    33b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    33b4:	e0fff917 	ldw	r3,-28(fp)
    33b8:	00bfff84 	movi	r2,-2
    33bc:	1884703a 	and	r2,r3,r2
    33c0:	1001703a 	wrctl	status,r2
  
  return context;
    33c4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    33c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    33cc:	e0bffc17 	ldw	r2,-16(fp)
    33d0:	00c01ef4 	movhi	r3,123
    33d4:	18c61204 	addi	r3,r3,6216
    33d8:	100490fa 	slli	r2,r2,3
    33dc:	10c7883a 	add	r3,r2,r3
    33e0:	e0bffe17 	ldw	r2,-8(fp)
    33e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    33e8:	e0bffc17 	ldw	r2,-16(fp)
    33ec:	00c01ef4 	movhi	r3,123
    33f0:	18c61204 	addi	r3,r3,6216
    33f4:	100490fa 	slli	r2,r2,3
    33f8:	10c5883a 	add	r2,r2,r3
    33fc:	10c00104 	addi	r3,r2,4
    3400:	e0bffd17 	ldw	r2,-12(fp)
    3404:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    3408:	e0bffe17 	ldw	r2,-8(fp)
    340c:	1005003a 	cmpeq	r2,r2,zero
    3410:	1000201e 	bne	r2,zero,3494 <alt_irq_register+0x114>
    3414:	e0bffc17 	ldw	r2,-16(fp)
    3418:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    341c:	0005303a 	rdctl	r2,status
    3420:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3424:	e0fff617 	ldw	r3,-40(fp)
    3428:	00bfff84 	movi	r2,-2
    342c:	1884703a 	and	r2,r3,r2
    3430:	1001703a 	wrctl	status,r2
  
  return context;
    3434:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    3438:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    343c:	e0fff717 	ldw	r3,-36(fp)
    3440:	00800044 	movi	r2,1
    3444:	10c4983a 	sll	r2,r2,r3
    3448:	1007883a 	mov	r3,r2
    344c:	00800074 	movhi	r2,1
    3450:	10809e04 	addi	r2,r2,632
    3454:	10800017 	ldw	r2,0(r2)
    3458:	1886b03a 	or	r3,r3,r2
    345c:	00800074 	movhi	r2,1
    3460:	10809e04 	addi	r2,r2,632
    3464:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    3468:	00800074 	movhi	r2,1
    346c:	10809e04 	addi	r2,r2,632
    3470:	10800017 	ldw	r2,0(r2)
    3474:	100170fa 	wrctl	ienable,r2
    3478:	e0bff817 	ldw	r2,-32(fp)
    347c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3480:	e0bff517 	ldw	r2,-44(fp)
    3484:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    3488:	0005883a 	mov	r2,zero
    348c:	e0bfff15 	stw	r2,-4(fp)
    3490:	00002006 	br	3514 <alt_irq_register+0x194>
    3494:	e0bffc17 	ldw	r2,-16(fp)
    3498:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    349c:	0005303a 	rdctl	r2,status
    34a0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    34a4:	e0fff217 	ldw	r3,-56(fp)
    34a8:	00bfff84 	movi	r2,-2
    34ac:	1884703a 	and	r2,r3,r2
    34b0:	1001703a 	wrctl	status,r2
  
  return context;
    34b4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    34b8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    34bc:	e0fff317 	ldw	r3,-52(fp)
    34c0:	00800044 	movi	r2,1
    34c4:	10c4983a 	sll	r2,r2,r3
    34c8:	0084303a 	nor	r2,zero,r2
    34cc:	1007883a 	mov	r3,r2
    34d0:	00800074 	movhi	r2,1
    34d4:	10809e04 	addi	r2,r2,632
    34d8:	10800017 	ldw	r2,0(r2)
    34dc:	1886703a 	and	r3,r3,r2
    34e0:	00800074 	movhi	r2,1
    34e4:	10809e04 	addi	r2,r2,632
    34e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    34ec:	00800074 	movhi	r2,1
    34f0:	10809e04 	addi	r2,r2,632
    34f4:	10800017 	ldw	r2,0(r2)
    34f8:	100170fa 	wrctl	ienable,r2
    34fc:	e0bff417 	ldw	r2,-48(fp)
    3500:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3504:	e0bff117 	ldw	r2,-60(fp)
    3508:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    350c:	0005883a 	mov	r2,zero
    3510:	e0bfff15 	stw	r2,-4(fp)
    3514:	e0bfff17 	ldw	r2,-4(fp)
    3518:	e0bffb15 	stw	r2,-20(fp)
    351c:	e0bffa17 	ldw	r2,-24(fp)
    3520:	e0bff015 	stw	r2,-64(fp)
    3524:	e0bff017 	ldw	r2,-64(fp)
    3528:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    352c:	e0bffb17 	ldw	r2,-20(fp)
}
    3530:	e037883a 	mov	sp,fp
    3534:	df000017 	ldw	fp,0(sp)
    3538:	dec00104 	addi	sp,sp,4
    353c:	f800283a 	ret

00003540 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3540:	defffe04 	addi	sp,sp,-8
    3544:	dfc00115 	stw	ra,4(sp)
    3548:	df000015 	stw	fp,0(sp)
    354c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3550:	01000074 	movhi	r4,1
    3554:	21385e04 	addi	r4,r4,-7816
    3558:	01400074 	movhi	r5,1
    355c:	29703f04 	addi	r5,r5,-16132
    3560:	01800074 	movhi	r6,1
    3564:	31b85e04 	addi	r6,r6,-7816
    3568:	00035c00 	call	35c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    356c:	01000034 	movhi	r4,0
    3570:	21000804 	addi	r4,r4,32
    3574:	01400034 	movhi	r5,0
    3578:	29400804 	addi	r5,r5,32
    357c:	01800034 	movhi	r6,0
    3580:	31806e04 	addi	r6,r6,440
    3584:	00035c00 	call	35c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3588:	01000074 	movhi	r4,1
    358c:	212eb404 	addi	r4,r4,-17712
    3590:	01400074 	movhi	r5,1
    3594:	296eb404 	addi	r5,r5,-17712
    3598:	01800074 	movhi	r6,1
    359c:	31b03f04 	addi	r6,r6,-16132
    35a0:	00035c00 	call	35c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    35a4:	00083900 	call	8390 <alt_dcache_flush_all>
  alt_icache_flush_all();
    35a8:	00086480 	call	8648 <alt_icache_flush_all>
}
    35ac:	e037883a 	mov	sp,fp
    35b0:	dfc00117 	ldw	ra,4(sp)
    35b4:	df000017 	ldw	fp,0(sp)
    35b8:	dec00204 	addi	sp,sp,8
    35bc:	f800283a 	ret

000035c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    35c0:	defffc04 	addi	sp,sp,-16
    35c4:	df000315 	stw	fp,12(sp)
    35c8:	df000304 	addi	fp,sp,12
    35cc:	e13ffd15 	stw	r4,-12(fp)
    35d0:	e17ffe15 	stw	r5,-8(fp)
    35d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    35d8:	e0fffe17 	ldw	r3,-8(fp)
    35dc:	e0bffd17 	ldw	r2,-12(fp)
    35e0:	18800e26 	beq	r3,r2,361c <alt_load_section+0x5c>
  {
    while( to != end )
    35e4:	00000a06 	br	3610 <alt_load_section+0x50>
    {
      *to++ = *from++;
    35e8:	e0bffd17 	ldw	r2,-12(fp)
    35ec:	10c00017 	ldw	r3,0(r2)
    35f0:	e0bffe17 	ldw	r2,-8(fp)
    35f4:	10c00015 	stw	r3,0(r2)
    35f8:	e0bffe17 	ldw	r2,-8(fp)
    35fc:	10800104 	addi	r2,r2,4
    3600:	e0bffe15 	stw	r2,-8(fp)
    3604:	e0bffd17 	ldw	r2,-12(fp)
    3608:	10800104 	addi	r2,r2,4
    360c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3610:	e0fffe17 	ldw	r3,-8(fp)
    3614:	e0bfff17 	ldw	r2,-4(fp)
    3618:	18bff31e 	bne	r3,r2,35e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    361c:	e037883a 	mov	sp,fp
    3620:	df000017 	ldw	fp,0(sp)
    3624:	dec00104 	addi	sp,sp,4
    3628:	f800283a 	ret

0000362c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    362c:	defffd04 	addi	sp,sp,-12
    3630:	dfc00215 	stw	ra,8(sp)
    3634:	df000115 	stw	fp,4(sp)
    3638:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    363c:	0009883a 	mov	r4,zero
    3640:	00039300 	call	3930 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3644:	00039640 	call	3964 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3648:	01000074 	movhi	r4,1
    364c:	212fd104 	addi	r4,r4,-16572
    3650:	01400074 	movhi	r5,1
    3654:	296fd104 	addi	r5,r5,-16572
    3658:	01800074 	movhi	r6,1
    365c:	31afd104 	addi	r6,r6,-16572
    3660:	000873c0 	call	873c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3664:	00084ec0 	call	84ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3668:	01000074 	movhi	r4,1
    366c:	21215404 	addi	r4,r4,-31408
    3670:	00090600 	call	9060 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3674:	d1284f17 	ldw	r4,-24260(gp)
    3678:	d1685017 	ldw	r5,-24256(gp)
    367c:	d1a85117 	ldw	r6,-24252(gp)
    3680:	0000ad40 	call	ad4 <main>
    3684:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3688:	01000044 	movi	r4,1
    368c:	00082340 	call	8234 <close>
  exit (result);
    3690:	e13fff17 	ldw	r4,-4(fp)
    3694:	00090740 	call	9074 <exit>

00003698 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    3698:	defff204 	addi	sp,sp,-56
    369c:	dfc00a15 	stw	ra,40(sp)
    36a0:	df000915 	stw	fp,36(sp)
    36a4:	df000904 	addi	fp,sp,36
    36a8:	e1400215 	stw	r5,8(fp)
    36ac:	e1800315 	stw	r6,12(fp)
    36b0:	e1c00415 	stw	r7,16(fp)
    36b4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    36b8:	e0800204 	addi	r2,fp,8
    36bc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    36c0:	e0bfff17 	ldw	r2,-4(fp)
    36c4:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    36c8:	00007806 	br	38ac <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    36cc:	e0bffc07 	ldb	r2,-16(fp)
    36d0:	10800960 	cmpeqi	r2,r2,37
    36d4:	1000031e 	bne	r2,zero,36e4 <alt_printf+0x4c>
        {
            alt_putchar(c);
    36d8:	e13ffc07 	ldb	r4,-16(fp)
    36dc:	00038f00 	call	38f0 <alt_putchar>
    36e0:	00007206 	br	38ac <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    36e4:	e0bffd17 	ldw	r2,-12(fp)
    36e8:	10800003 	ldbu	r2,0(r2)
    36ec:	e0bffc05 	stb	r2,-16(fp)
    36f0:	e0bffc07 	ldb	r2,-16(fp)
    36f4:	1004c03a 	cmpne	r2,r2,zero
    36f8:	1007883a 	mov	r3,r2
    36fc:	e0bffd17 	ldw	r2,-12(fp)
    3700:	10800044 	addi	r2,r2,1
    3704:	e0bffd15 	stw	r2,-12(fp)
    3708:	18803fcc 	andi	r2,r3,255
    370c:	1005003a 	cmpeq	r2,r2,zero
    3710:	1000721e 	bne	r2,zero,38dc <alt_printf+0x244>
            {
                if (c == '%')
    3714:	e0bffc07 	ldb	r2,-16(fp)
    3718:	10800958 	cmpnei	r2,r2,37
    371c:	1000031e 	bne	r2,zero,372c <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    3720:	e13ffc07 	ldb	r4,-16(fp)
    3724:	00038f00 	call	38f0 <alt_putchar>
    3728:	00006006 	br	38ac <alt_printf+0x214>
                } 
                else if (c == 'c')
    372c:	e0bffc07 	ldb	r2,-16(fp)
    3730:	108018d8 	cmpnei	r2,r2,99
    3734:	1000091e 	bne	r2,zero,375c <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    3738:	e0fffe17 	ldw	r3,-8(fp)
    373c:	18800104 	addi	r2,r3,4
    3740:	e0bffe15 	stw	r2,-8(fp)
    3744:	1805883a 	mov	r2,r3
    3748:	10800017 	ldw	r2,0(r2)
    374c:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    3750:	e13ffb17 	ldw	r4,-20(fp)
    3754:	00038f00 	call	38f0 <alt_putchar>
    3758:	00005406 	br	38ac <alt_printf+0x214>
                }
                else if (c == 'x')
    375c:	e0bffc07 	ldb	r2,-16(fp)
    3760:	10801e18 	cmpnei	r2,r2,120
    3764:	1000371e 	bne	r2,zero,3844 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    3768:	e0fffe17 	ldw	r3,-8(fp)
    376c:	18800104 	addi	r2,r3,4
    3770:	e0bffe15 	stw	r2,-8(fp)
    3774:	1805883a 	mov	r2,r3
    3778:	10800017 	ldw	r2,0(r2)
    377c:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    3780:	e0bffa17 	ldw	r2,-24(fp)
    3784:	1004c03a 	cmpne	r2,r2,zero
    3788:	1000031e 	bne	r2,zero,3798 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    378c:	01000c04 	movi	r4,48
    3790:	00038f00 	call	38f0 <alt_putchar>
                        continue;
    3794:	00004506 	br	38ac <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    3798:	00800704 	movi	r2,28
    379c:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    37a0:	00000306 	br	37b0 <alt_printf+0x118>
                        digit_shift -= 4;
    37a4:	e0bff817 	ldw	r2,-32(fp)
    37a8:	10bfff04 	addi	r2,r2,-4
    37ac:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    37b0:	00c003c4 	movi	r3,15
    37b4:	e0bff817 	ldw	r2,-32(fp)
    37b8:	1884983a 	sll	r2,r3,r2
    37bc:	1007883a 	mov	r3,r2
    37c0:	e0bffa17 	ldw	r2,-24(fp)
    37c4:	1884703a 	and	r2,r3,r2
    37c8:	1005003a 	cmpeq	r2,r2,zero
    37cc:	103ff51e 	bne	r2,zero,37a4 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    37d0:	00001806 	br	3834 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    37d4:	00c003c4 	movi	r3,15
    37d8:	e0bff817 	ldw	r2,-32(fp)
    37dc:	1884983a 	sll	r2,r3,r2
    37e0:	1007883a 	mov	r3,r2
    37e4:	e0bffa17 	ldw	r2,-24(fp)
    37e8:	1886703a 	and	r3,r3,r2
    37ec:	e0bff817 	ldw	r2,-32(fp)
    37f0:	1884d83a 	srl	r2,r3,r2
    37f4:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    37f8:	e0bff917 	ldw	r2,-28(fp)
    37fc:	108002a8 	cmpgeui	r2,r2,10
    3800:	1000041e 	bne	r2,zero,3814 <alt_printf+0x17c>
                            c = '0' + digit;
    3804:	e0bff917 	ldw	r2,-28(fp)
    3808:	10800c04 	addi	r2,r2,48
    380c:	e0bffc05 	stb	r2,-16(fp)
    3810:	00000306 	br	3820 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    3814:	e0bff917 	ldw	r2,-28(fp)
    3818:	108015c4 	addi	r2,r2,87
    381c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    3820:	e13ffc07 	ldb	r4,-16(fp)
    3824:	00038f00 	call	38f0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3828:	e0bff817 	ldw	r2,-32(fp)
    382c:	10bfff04 	addi	r2,r2,-4
    3830:	e0bff815 	stw	r2,-32(fp)
    3834:	e0bff817 	ldw	r2,-32(fp)
    3838:	1004403a 	cmpge	r2,r2,zero
    383c:	103fe51e 	bne	r2,zero,37d4 <alt_printf+0x13c>
    3840:	00001a06 	br	38ac <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    3844:	e0bffc07 	ldb	r2,-16(fp)
    3848:	10801cd8 	cmpnei	r2,r2,115
    384c:	1000171e 	bne	r2,zero,38ac <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    3850:	e0fffe17 	ldw	r3,-8(fp)
    3854:	18800104 	addi	r2,r3,4
    3858:	e0bffe15 	stw	r2,-8(fp)
    385c:	1805883a 	mov	r2,r3
    3860:	10800017 	ldw	r2,0(r2)
    3864:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    3868:	00000906 	br	3890 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    386c:	e0bff717 	ldw	r2,-36(fp)
    3870:	10800003 	ldbu	r2,0(r2)
    3874:	11003fcc 	andi	r4,r2,255
    3878:	2100201c 	xori	r4,r4,128
    387c:	213fe004 	addi	r4,r4,-128
    3880:	e0bff717 	ldw	r2,-36(fp)
    3884:	10800044 	addi	r2,r2,1
    3888:	e0bff715 	stw	r2,-36(fp)
    388c:	00038f00 	call	38f0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    3890:	e0bff717 	ldw	r2,-36(fp)
    3894:	10800003 	ldbu	r2,0(r2)
    3898:	10803fcc 	andi	r2,r2,255
    389c:	1080201c 	xori	r2,r2,128
    38a0:	10bfe004 	addi	r2,r2,-128
    38a4:	1004c03a 	cmpne	r2,r2,zero
    38a8:	103ff01e 	bne	r2,zero,386c <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    38ac:	e0bffd17 	ldw	r2,-12(fp)
    38b0:	10800003 	ldbu	r2,0(r2)
    38b4:	e0bffc05 	stb	r2,-16(fp)
    38b8:	e0bffc07 	ldb	r2,-16(fp)
    38bc:	1004c03a 	cmpne	r2,r2,zero
    38c0:	1007883a 	mov	r3,r2
    38c4:	e0bffd17 	ldw	r2,-12(fp)
    38c8:	10800044 	addi	r2,r2,1
    38cc:	e0bffd15 	stw	r2,-12(fp)
    38d0:	18803fcc 	andi	r2,r3,255
    38d4:	1004c03a 	cmpne	r2,r2,zero
    38d8:	103f7c1e 	bne	r2,zero,36cc <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    38dc:	e037883a 	mov	sp,fp
    38e0:	dfc00117 	ldw	ra,4(sp)
    38e4:	df000017 	ldw	fp,0(sp)
    38e8:	dec00504 	addi	sp,sp,20
    38ec:	f800283a 	ret

000038f0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    38f0:	defffd04 	addi	sp,sp,-12
    38f4:	dfc00215 	stw	ra,8(sp)
    38f8:	df000115 	stw	fp,4(sp)
    38fc:	df000104 	addi	fp,sp,4
    3900:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    3904:	00800074 	movhi	r2,1
    3908:	10b85904 	addi	r2,r2,-7836
    390c:	10800017 	ldw	r2,0(r2)
    3910:	11400217 	ldw	r5,8(r2)
    3914:	e13fff17 	ldw	r4,-4(fp)
    3918:	00091200 	call	9120 <putc>
#endif
}
    391c:	e037883a 	mov	sp,fp
    3920:	dfc00117 	ldw	ra,4(sp)
    3924:	df000017 	ldw	fp,0(sp)
    3928:	dec00204 	addi	sp,sp,8
    392c:	f800283a 	ret

00003930 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3930:	defffd04 	addi	sp,sp,-12
    3934:	dfc00215 	stw	ra,8(sp)
    3938:	df000115 	stw	fp,4(sp)
    393c:	df000104 	addi	fp,sp,4
    3940:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    3944:	0008cac0 	call	8cac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3948:	00800044 	movi	r2,1
    394c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3950:	e037883a 	mov	sp,fp
    3954:	dfc00117 	ldw	ra,4(sp)
    3958:	df000017 	ldw	fp,0(sp)
    395c:	dec00204 	addi	sp,sp,8
    3960:	f800283a 	ret

00003964 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3964:	defffd04 	addi	sp,sp,-12
    3968:	dfc00215 	stw	ra,8(sp)
    396c:	df000115 	stw	fp,4(sp)
    3970:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3974:	01040034 	movhi	r4,4096
    3978:	21080004 	addi	r4,r4,8192
    397c:	000b883a 	mov	r5,zero
    3980:	000d883a 	mov	r6,zero
    3984:	01c00204 	movi	r7,8
    3988:	00048b80 	call	48b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    398c:	01000074 	movhi	r4,1
    3990:	2130e904 	addi	r4,r4,-15452
    3994:	000b883a 	mov	r5,zero
    3998:	01800204 	movi	r6,8
    399c:	0003ee40 	call	3ee4 <altera_avalon_jtag_uart_init>
    39a0:	01000074 	movhi	r4,1
    39a4:	2130df04 	addi	r4,r4,-15492
    39a8:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    39ac:	01000074 	movhi	r4,1
    39b0:	2134f704 	addi	r4,r4,-11300
    39b4:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    39b8:	01000074 	movhi	r4,1
    39bc:	21350304 	addi	r4,r4,-11252
    39c0:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    39c4:	01000074 	movhi	r4,1
    39c8:	21350f04 	addi	r4,r4,-11204
    39cc:	00051fc0 	call	51fc <alt_up_character_lcd_init>
    39d0:	01000074 	movhi	r4,1
    39d4:	21350f04 	addi	r4,r4,-11204
    39d8:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    39dc:	01000074 	movhi	r4,1
    39e0:	21351a04 	addi	r4,r4,-11160
    39e4:	000567c0 	call	567c <alt_up_ethernet_init>
    39e8:	01000074 	movhi	r4,1
    39ec:	21351a04 	addi	r4,r4,-11160
    39f0:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    39f4:	01000074 	movhi	r4,1
    39f8:	21352904 	addi	r4,r4,-11100
    39fc:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    3a00:	01000074 	movhi	r4,1
    3a04:	21353404 	addi	r4,r4,-11056
    3a08:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    3a0c:	01000074 	movhi	r4,1
    3a10:	21353f04 	addi	r4,r4,-11012
    3a14:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    3a18:	01000074 	movhi	r4,1
    3a1c:	21354a04 	addi	r4,r4,-10968
    3a20:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    3a24:	01000074 	movhi	r4,1
    3a28:	21355504 	addi	r4,r4,-10924
    3a2c:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    3a30:	01000074 	movhi	r4,1
    3a34:	21356004 	addi	r4,r4,-10880
    3a38:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    3a3c:	01000074 	movhi	r4,1
    3a40:	21356b04 	addi	r4,r4,-10836
    3a44:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    3a48:	01000074 	movhi	r4,1
    3a4c:	21357604 	addi	r4,r4,-10792
    3a50:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    3a54:	01000074 	movhi	r4,1
    3a58:	21358104 	addi	r4,r4,-10748
    3a5c:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    3a60:	01000074 	movhi	r4,1
    3a64:	21358c04 	addi	r4,r4,-10704
    3a68:	0005f040 	call	5f04 <alt_up_ps2_init>
    3a6c:	01000074 	movhi	r4,1
    3a70:	21358c04 	addi	r4,r4,-10704
    3a74:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    3a78:	01000074 	movhi	r4,1
    3a7c:	21359a04 	addi	r4,r4,-10648
    3a80:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    3a84:	01000074 	movhi	r4,1
    3a88:	2135a504 	addi	r4,r4,-10604
    3a8c:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    3a90:	00800074 	movhi	r2,1
    3a94:	10b5b204 	addi	r2,r2,-10552
    3a98:	10800a17 	ldw	r2,40(r2)
    3a9c:	10800104 	addi	r2,r2,4
    3aa0:	10800017 	ldw	r2,0(r2)
    3aa4:	10ffffcc 	andi	r3,r2,65535
    3aa8:	00800074 	movhi	r2,1
    3aac:	10b5b204 	addi	r2,r2,-10552
    3ab0:	10c00c15 	stw	r3,48(r2)
    3ab4:	00800074 	movhi	r2,1
    3ab8:	10b5b204 	addi	r2,r2,-10552
    3abc:	10800a17 	ldw	r2,40(r2)
    3ac0:	10800104 	addi	r2,r2,4
    3ac4:	10800017 	ldw	r2,0(r2)
    3ac8:	1005d43a 	srai	r2,r2,16
    3acc:	10ffffcc 	andi	r3,r2,65535
    3ad0:	00800074 	movhi	r2,1
    3ad4:	10b5b204 	addi	r2,r2,-10552
    3ad8:	10c00d15 	stw	r3,52(r2)
    3adc:	00800074 	movhi	r2,1
    3ae0:	10b5b204 	addi	r2,r2,-10552
    3ae4:	10800c17 	ldw	r2,48(r2)
    3ae8:	10801068 	cmpgeui	r2,r2,65
    3aec:	1000081e 	bne	r2,zero,3b10 <alt_sys_init+0x1ac>
    3af0:	00c00074 	movhi	r3,1
    3af4:	18f5b204 	addi	r3,r3,-10552
    3af8:	00800fc4 	movi	r2,63
    3afc:	18800f15 	stw	r2,60(r3)
    3b00:	00c00074 	movhi	r3,1
    3b04:	18f5b204 	addi	r3,r3,-10552
    3b08:	00800184 	movi	r2,6
    3b0c:	18801015 	stw	r2,64(r3)
    3b10:	00800074 	movhi	r2,1
    3b14:	10b5b204 	addi	r2,r2,-10552
    3b18:	10800d17 	ldw	r2,52(r2)
    3b1c:	10800868 	cmpgeui	r2,r2,33
    3b20:	1000041e 	bne	r2,zero,3b34 <alt_sys_init+0x1d0>
    3b24:	00c00074 	movhi	r3,1
    3b28:	18f5b204 	addi	r3,r3,-10552
    3b2c:	008007c4 	movi	r2,31
    3b30:	18801115 	stw	r2,68(r3)
    3b34:	01000074 	movhi	r4,1
    3b38:	2135b204 	addi	r4,r4,-10552
    3b3c:	00068700 	call	6870 <alt_up_char_buffer_init>
    3b40:	01000074 	movhi	r4,1
    3b44:	2135b204 	addi	r4,r4,-10552
    3b48:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    3b4c:	00800074 	movhi	r2,1
    3b50:	10b5c404 	addi	r2,r2,-10480
    3b54:	10800a17 	ldw	r2,40(r2)
    3b58:	10800017 	ldw	r2,0(r2)
    3b5c:	1007883a 	mov	r3,r2
    3b60:	00800074 	movhi	r2,1
    3b64:	10b5c404 	addi	r2,r2,-10480
    3b68:	10c00b15 	stw	r3,44(r2)
    3b6c:	00800074 	movhi	r2,1
    3b70:	10b5c404 	addi	r2,r2,-10480
    3b74:	10800a17 	ldw	r2,40(r2)
    3b78:	10800104 	addi	r2,r2,4
    3b7c:	10800017 	ldw	r2,0(r2)
    3b80:	1007883a 	mov	r3,r2
    3b84:	00800074 	movhi	r2,1
    3b88:	10b5c404 	addi	r2,r2,-10480
    3b8c:	10c00c15 	stw	r3,48(r2)
    3b90:	00800074 	movhi	r2,1
    3b94:	10b5c404 	addi	r2,r2,-10480
    3b98:	10800a17 	ldw	r2,40(r2)
    3b9c:	10800204 	addi	r2,r2,8
    3ba0:	10800017 	ldw	r2,0(r2)
    3ba4:	10ffffcc 	andi	r3,r2,65535
    3ba8:	00800074 	movhi	r2,1
    3bac:	10b5c404 	addi	r2,r2,-10480
    3bb0:	10c00f15 	stw	r3,60(r2)
    3bb4:	00800074 	movhi	r2,1
    3bb8:	10b5c404 	addi	r2,r2,-10480
    3bbc:	10800a17 	ldw	r2,40(r2)
    3bc0:	10800204 	addi	r2,r2,8
    3bc4:	10800017 	ldw	r2,0(r2)
    3bc8:	1005d43a 	srai	r2,r2,16
    3bcc:	10ffffcc 	andi	r3,r2,65535
    3bd0:	00800074 	movhi	r2,1
    3bd4:	10b5c404 	addi	r2,r2,-10480
    3bd8:	10c01015 	stw	r3,64(r2)
    3bdc:	00800074 	movhi	r2,1
    3be0:	10b5c404 	addi	r2,r2,-10480
    3be4:	10800a17 	ldw	r2,40(r2)
    3be8:	10800304 	addi	r2,r2,12
    3bec:	10800017 	ldw	r2,0(r2)
    3bf0:	1005d07a 	srai	r2,r2,1
    3bf4:	10c0004c 	andi	r3,r2,1
    3bf8:	00800074 	movhi	r2,1
    3bfc:	10b5c404 	addi	r2,r2,-10480
    3c00:	10c00d15 	stw	r3,52(r2)
    3c04:	00800074 	movhi	r2,1
    3c08:	10b5c404 	addi	r2,r2,-10480
    3c0c:	10800a17 	ldw	r2,40(r2)
    3c10:	10800304 	addi	r2,r2,12
    3c14:	10800017 	ldw	r2,0(r2)
    3c18:	1005d13a 	srai	r2,r2,4
    3c1c:	10c003cc 	andi	r3,r2,15
    3c20:	00800074 	movhi	r2,1
    3c24:	10b5c404 	addi	r2,r2,-10480
    3c28:	10c00e15 	stw	r3,56(r2)
    3c2c:	00800074 	movhi	r2,1
    3c30:	10b5c404 	addi	r2,r2,-10480
    3c34:	10800a17 	ldw	r2,40(r2)
    3c38:	10800304 	addi	r2,r2,12
    3c3c:	10800017 	ldw	r2,0(r2)
    3c40:	1005d43a 	srai	r2,r2,16
    3c44:	1007883a 	mov	r3,r2
    3c48:	00bfffc4 	movi	r2,-1
    3c4c:	1884703a 	and	r2,r3,r2
    3c50:	e0bfff45 	stb	r2,-3(fp)
    3c54:	00800074 	movhi	r2,1
    3c58:	10b5c404 	addi	r2,r2,-10480
    3c5c:	10800a17 	ldw	r2,40(r2)
    3c60:	10800304 	addi	r2,r2,12
    3c64:	10800017 	ldw	r2,0(r2)
    3c68:	1005d63a 	srai	r2,r2,24
    3c6c:	1007883a 	mov	r3,r2
    3c70:	00bfffc4 	movi	r2,-1
    3c74:	1884703a 	and	r2,r3,r2
    3c78:	e0bfff05 	stb	r2,-4(fp)
    3c7c:	00800074 	movhi	r2,1
    3c80:	10b5c404 	addi	r2,r2,-10480
    3c84:	10800e17 	ldw	r2,56(r2)
    3c88:	10800058 	cmpnei	r2,r2,1
    3c8c:	1000041e 	bne	r2,zero,3ca0 <alt_sys_init+0x33c>
    3c90:	00800074 	movhi	r2,1
    3c94:	10b5c404 	addi	r2,r2,-10480
    3c98:	10001115 	stw	zero,68(r2)
    3c9c:	00000e06 	br	3cd8 <alt_sys_init+0x374>
    3ca0:	00800074 	movhi	r2,1
    3ca4:	10b5c404 	addi	r2,r2,-10480
    3ca8:	10800e17 	ldw	r2,56(r2)
    3cac:	10800098 	cmpnei	r2,r2,2
    3cb0:	1000051e 	bne	r2,zero,3cc8 <alt_sys_init+0x364>
    3cb4:	00c00074 	movhi	r3,1
    3cb8:	18f5c404 	addi	r3,r3,-10480
    3cbc:	00800044 	movi	r2,1
    3cc0:	18801115 	stw	r2,68(r3)
    3cc4:	00000406 	br	3cd8 <alt_sys_init+0x374>
    3cc8:	00c00074 	movhi	r3,1
    3ccc:	18f5c404 	addi	r3,r3,-10480
    3cd0:	00800084 	movi	r2,2
    3cd4:	18801115 	stw	r2,68(r3)
    3cd8:	e0ffff43 	ldbu	r3,-3(fp)
    3cdc:	00800804 	movi	r2,32
    3ce0:	10c7c83a 	sub	r3,r2,r3
    3ce4:	00bfffc4 	movi	r2,-1
    3ce8:	10c6d83a 	srl	r3,r2,r3
    3cec:	00800074 	movhi	r2,1
    3cf0:	10b5c404 	addi	r2,r2,-10480
    3cf4:	10c01215 	stw	r3,72(r2)
    3cf8:	e0ffff43 	ldbu	r3,-3(fp)
    3cfc:	00800074 	movhi	r2,1
    3d00:	10b5c404 	addi	r2,r2,-10480
    3d04:	10801117 	ldw	r2,68(r2)
    3d08:	1887883a 	add	r3,r3,r2
    3d0c:	00800074 	movhi	r2,1
    3d10:	10b5c404 	addi	r2,r2,-10480
    3d14:	10c01315 	stw	r3,76(r2)
    3d18:	e0ffff03 	ldbu	r3,-4(fp)
    3d1c:	00800804 	movi	r2,32
    3d20:	10c7c83a 	sub	r3,r2,r3
    3d24:	00bfffc4 	movi	r2,-1
    3d28:	10c6d83a 	srl	r3,r2,r3
    3d2c:	00800074 	movhi	r2,1
    3d30:	10b5c404 	addi	r2,r2,-10480
    3d34:	10c01415 	stw	r3,80(r2)
    3d38:	01000074 	movhi	r4,1
    3d3c:	2135c404 	addi	r4,r4,-10480
    3d40:	0003d640 	call	3d64 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    3d44:	01000074 	movhi	r4,1
    3d48:	2135d904 	addi	r4,r4,-10396
    3d4c:	0003d640 	call	3d64 <alt_dev_reg>
}
    3d50:	e037883a 	mov	sp,fp
    3d54:	dfc00117 	ldw	ra,4(sp)
    3d58:	df000017 	ldw	fp,0(sp)
    3d5c:	dec00204 	addi	sp,sp,8
    3d60:	f800283a 	ret

00003d64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3d64:	defffd04 	addi	sp,sp,-12
    3d68:	dfc00215 	stw	ra,8(sp)
    3d6c:	df000115 	stw	fp,4(sp)
    3d70:	df000104 	addi	fp,sp,4
    3d74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3d78:	e13fff17 	ldw	r4,-4(fp)
    3d7c:	01400074 	movhi	r5,1
    3d80:	29785304 	addi	r5,r5,-7860
    3d84:	00083d80 	call	83d8 <alt_dev_llist_insert>
}
    3d88:	e037883a 	mov	sp,fp
    3d8c:	dfc00117 	ldw	ra,4(sp)
    3d90:	df000017 	ldw	fp,0(sp)
    3d94:	dec00204 	addi	sp,sp,8
    3d98:	f800283a 	ret

00003d9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3d9c:	defffa04 	addi	sp,sp,-24
    3da0:	dfc00515 	stw	ra,20(sp)
    3da4:	df000415 	stw	fp,16(sp)
    3da8:	df000404 	addi	fp,sp,16
    3dac:	e13ffd15 	stw	r4,-12(fp)
    3db0:	e17ffe15 	stw	r5,-8(fp)
    3db4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3db8:	e0bffd17 	ldw	r2,-12(fp)
    3dbc:	10800017 	ldw	r2,0(r2)
    3dc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3dc4:	e0bffc17 	ldw	r2,-16(fp)
    3dc8:	11000a04 	addi	r4,r2,40
    3dcc:	e0bffd17 	ldw	r2,-12(fp)
    3dd0:	11c00217 	ldw	r7,8(r2)
    3dd4:	e17ffe17 	ldw	r5,-8(fp)
    3dd8:	e1bfff17 	ldw	r6,-4(fp)
    3ddc:	00043e00 	call	43e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3de0:	e037883a 	mov	sp,fp
    3de4:	dfc00117 	ldw	ra,4(sp)
    3de8:	df000017 	ldw	fp,0(sp)
    3dec:	dec00204 	addi	sp,sp,8
    3df0:	f800283a 	ret

00003df4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3df4:	defffa04 	addi	sp,sp,-24
    3df8:	dfc00515 	stw	ra,20(sp)
    3dfc:	df000415 	stw	fp,16(sp)
    3e00:	df000404 	addi	fp,sp,16
    3e04:	e13ffd15 	stw	r4,-12(fp)
    3e08:	e17ffe15 	stw	r5,-8(fp)
    3e0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3e10:	e0bffd17 	ldw	r2,-12(fp)
    3e14:	10800017 	ldw	r2,0(r2)
    3e18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3e1c:	e0bffc17 	ldw	r2,-16(fp)
    3e20:	11000a04 	addi	r4,r2,40
    3e24:	e0bffd17 	ldw	r2,-12(fp)
    3e28:	11c00217 	ldw	r7,8(r2)
    3e2c:	e17ffe17 	ldw	r5,-8(fp)
    3e30:	e1bfff17 	ldw	r6,-4(fp)
    3e34:	00046040 	call	4604 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3e38:	e037883a 	mov	sp,fp
    3e3c:	dfc00117 	ldw	ra,4(sp)
    3e40:	df000017 	ldw	fp,0(sp)
    3e44:	dec00204 	addi	sp,sp,8
    3e48:	f800283a 	ret

00003e4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3e4c:	defffc04 	addi	sp,sp,-16
    3e50:	dfc00315 	stw	ra,12(sp)
    3e54:	df000215 	stw	fp,8(sp)
    3e58:	df000204 	addi	fp,sp,8
    3e5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3e60:	e0bfff17 	ldw	r2,-4(fp)
    3e64:	10800017 	ldw	r2,0(r2)
    3e68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3e6c:	e0bffe17 	ldw	r2,-8(fp)
    3e70:	11000a04 	addi	r4,r2,40
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	11400217 	ldw	r5,8(r2)
    3e7c:	00042780 	call	4278 <altera_avalon_jtag_uart_close>
}
    3e80:	e037883a 	mov	sp,fp
    3e84:	dfc00117 	ldw	ra,4(sp)
    3e88:	df000017 	ldw	fp,0(sp)
    3e8c:	dec00204 	addi	sp,sp,8
    3e90:	f800283a 	ret

00003e94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3e94:	defffa04 	addi	sp,sp,-24
    3e98:	dfc00515 	stw	ra,20(sp)
    3e9c:	df000415 	stw	fp,16(sp)
    3ea0:	df000404 	addi	fp,sp,16
    3ea4:	e13ffd15 	stw	r4,-12(fp)
    3ea8:	e17ffe15 	stw	r5,-8(fp)
    3eac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3eb0:	e0bffd17 	ldw	r2,-12(fp)
    3eb4:	10800017 	ldw	r2,0(r2)
    3eb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3ebc:	e0bffc17 	ldw	r2,-16(fp)
    3ec0:	11000a04 	addi	r4,r2,40
    3ec4:	e17ffe17 	ldw	r5,-8(fp)
    3ec8:	e1bfff17 	ldw	r6,-4(fp)
    3ecc:	00042ec0 	call	42ec <altera_avalon_jtag_uart_ioctl>
}
    3ed0:	e037883a 	mov	sp,fp
    3ed4:	dfc00117 	ldw	ra,4(sp)
    3ed8:	df000017 	ldw	fp,0(sp)
    3edc:	dec00204 	addi	sp,sp,8
    3ee0:	f800283a 	ret

00003ee4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3ee4:	defffb04 	addi	sp,sp,-20
    3ee8:	dfc00415 	stw	ra,16(sp)
    3eec:	df000315 	stw	fp,12(sp)
    3ef0:	df000304 	addi	fp,sp,12
    3ef4:	e13ffd15 	stw	r4,-12(fp)
    3ef8:	e17ffe15 	stw	r5,-8(fp)
    3efc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3f00:	e0fffd17 	ldw	r3,-12(fp)
    3f04:	00800044 	movi	r2,1
    3f08:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3f0c:	e0bffd17 	ldw	r2,-12(fp)
    3f10:	10800017 	ldw	r2,0(r2)
    3f14:	11000104 	addi	r4,r2,4
    3f18:	e0bffd17 	ldw	r2,-12(fp)
    3f1c:	10800817 	ldw	r2,32(r2)
    3f20:	1007883a 	mov	r3,r2
    3f24:	2005883a 	mov	r2,r4
    3f28:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    3f2c:	e13fff17 	ldw	r4,-4(fp)
    3f30:	e17ffd17 	ldw	r5,-12(fp)
    3f34:	01800034 	movhi	r6,0
    3f38:	318fe704 	addi	r6,r6,16284
    3f3c:	00033800 	call	3380 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3f40:	e0bffd17 	ldw	r2,-12(fp)
    3f44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3f48:	e0bffd17 	ldw	r2,-12(fp)
    3f4c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3f50:	00800074 	movhi	r2,1
    3f54:	1080a204 	addi	r2,r2,648
    3f58:	10800017 	ldw	r2,0(r2)
    3f5c:	100b883a 	mov	r5,r2
    3f60:	01800034 	movhi	r6,0
    3f64:	31907204 	addi	r6,r6,16840
    3f68:	e1fffd17 	ldw	r7,-12(fp)
    3f6c:	00080e00 	call	80e0 <alt_alarm_start>
    3f70:	1004403a 	cmpge	r2,r2,zero
    3f74:	1000041e 	bne	r2,zero,3f88 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3f78:	e0fffd17 	ldw	r3,-12(fp)
    3f7c:	00a00034 	movhi	r2,32768
    3f80:	10bfffc4 	addi	r2,r2,-1
    3f84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3f88:	e037883a 	mov	sp,fp
    3f8c:	dfc00117 	ldw	ra,4(sp)
    3f90:	df000017 	ldw	fp,0(sp)
    3f94:	dec00204 	addi	sp,sp,8
    3f98:	f800283a 	ret

00003f9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3f9c:	defff704 	addi	sp,sp,-36
    3fa0:	df000815 	stw	fp,32(sp)
    3fa4:	df000804 	addi	fp,sp,32
    3fa8:	e13ffe15 	stw	r4,-8(fp)
    3fac:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3fb0:	e0bffe17 	ldw	r2,-8(fp)
    3fb4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    3fb8:	e0bffd17 	ldw	r2,-12(fp)
    3fbc:	10800017 	ldw	r2,0(r2)
    3fc0:	e0bffc15 	stw	r2,-16(fp)
    3fc4:	00000006 	br	3fc8 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3fc8:	e0bffc17 	ldw	r2,-16(fp)
    3fcc:	10800104 	addi	r2,r2,4
    3fd0:	10800037 	ldwio	r2,0(r2)
    3fd4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3fd8:	e0bffb17 	ldw	r2,-20(fp)
    3fdc:	1080c00c 	andi	r2,r2,768
    3fe0:	1005003a 	cmpeq	r2,r2,zero
    3fe4:	1000741e 	bne	r2,zero,41b8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3fe8:	e0bffb17 	ldw	r2,-20(fp)
    3fec:	1080400c 	andi	r2,r2,256
    3ff0:	1005003a 	cmpeq	r2,r2,zero
    3ff4:	1000351e 	bne	r2,zero,40cc <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3ff8:	00800074 	movhi	r2,1
    3ffc:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4000:	e0bffd17 	ldw	r2,-12(fp)
    4004:	10800a17 	ldw	r2,40(r2)
    4008:	10800044 	addi	r2,r2,1
    400c:	1081ffcc 	andi	r2,r2,2047
    4010:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    4014:	e0bffd17 	ldw	r2,-12(fp)
    4018:	10c00b17 	ldw	r3,44(r2)
    401c:	e0bff917 	ldw	r2,-28(fp)
    4020:	18801626 	beq	r3,r2,407c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4024:	e0bffc17 	ldw	r2,-16(fp)
    4028:	10800037 	ldwio	r2,0(r2)
    402c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4030:	e0bffa17 	ldw	r2,-24(fp)
    4034:	10a0000c 	andi	r2,r2,32768
    4038:	1005003a 	cmpeq	r2,r2,zero
    403c:	10000f1e 	bne	r2,zero,407c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4040:	e0bffd17 	ldw	r2,-12(fp)
    4044:	10c00a17 	ldw	r3,40(r2)
    4048:	e0bffa17 	ldw	r2,-24(fp)
    404c:	1009883a 	mov	r4,r2
    4050:	e0bffd17 	ldw	r2,-12(fp)
    4054:	1885883a 	add	r2,r3,r2
    4058:	10800e04 	addi	r2,r2,56
    405c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4060:	e0bffd17 	ldw	r2,-12(fp)
    4064:	10800a17 	ldw	r2,40(r2)
    4068:	10800044 	addi	r2,r2,1
    406c:	10c1ffcc 	andi	r3,r2,2047
    4070:	e0bffd17 	ldw	r2,-12(fp)
    4074:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4078:	003fe106 	br	4000 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    407c:	e0bffa17 	ldw	r2,-24(fp)
    4080:	10bfffec 	andhi	r2,r2,65535
    4084:	1005003a 	cmpeq	r2,r2,zero
    4088:	1000101e 	bne	r2,zero,40cc <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    408c:	e0bffd17 	ldw	r2,-12(fp)
    4090:	10c00817 	ldw	r3,32(r2)
    4094:	00bfff84 	movi	r2,-2
    4098:	1886703a 	and	r3,r3,r2
    409c:	e0bffd17 	ldw	r2,-12(fp)
    40a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    40a4:	e0bffc17 	ldw	r2,-16(fp)
    40a8:	11000104 	addi	r4,r2,4
    40ac:	e0bffd17 	ldw	r2,-12(fp)
    40b0:	10800817 	ldw	r2,32(r2)
    40b4:	1007883a 	mov	r3,r2
    40b8:	2005883a 	mov	r2,r4
    40bc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    40c0:	e0bffc17 	ldw	r2,-16(fp)
    40c4:	10800104 	addi	r2,r2,4
    40c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    40cc:	e0bffb17 	ldw	r2,-20(fp)
    40d0:	1080800c 	andi	r2,r2,512
    40d4:	1005003a 	cmpeq	r2,r2,zero
    40d8:	103fbb1e 	bne	r2,zero,3fc8 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    40dc:	e0bffb17 	ldw	r2,-20(fp)
    40e0:	10bfffec 	andhi	r2,r2,65535
    40e4:	1004d43a 	srli	r2,r2,16
    40e8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    40ec:	00001506 	br	4144 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    40f0:	e13ffc17 	ldw	r4,-16(fp)
    40f4:	e0bffd17 	ldw	r2,-12(fp)
    40f8:	10c00d17 	ldw	r3,52(r2)
    40fc:	e0bffd17 	ldw	r2,-12(fp)
    4100:	1885883a 	add	r2,r3,r2
    4104:	10820e04 	addi	r2,r2,2104
    4108:	10800003 	ldbu	r2,0(r2)
    410c:	10c03fcc 	andi	r3,r2,255
    4110:	18c0201c 	xori	r3,r3,128
    4114:	18ffe004 	addi	r3,r3,-128
    4118:	2005883a 	mov	r2,r4
    411c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4120:	e0bffd17 	ldw	r2,-12(fp)
    4124:	10800d17 	ldw	r2,52(r2)
    4128:	10800044 	addi	r2,r2,1
    412c:	10c1ffcc 	andi	r3,r2,2047
    4130:	e0bffd17 	ldw	r2,-12(fp)
    4134:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4138:	e0bff817 	ldw	r2,-32(fp)
    413c:	10bfffc4 	addi	r2,r2,-1
    4140:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4144:	e0bff817 	ldw	r2,-32(fp)
    4148:	1005003a 	cmpeq	r2,r2,zero
    414c:	1000051e 	bne	r2,zero,4164 <altera_avalon_jtag_uart_irq+0x1c8>
    4150:	e0bffd17 	ldw	r2,-12(fp)
    4154:	10c00d17 	ldw	r3,52(r2)
    4158:	e0bffd17 	ldw	r2,-12(fp)
    415c:	10800c17 	ldw	r2,48(r2)
    4160:	18bfe31e 	bne	r3,r2,40f0 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    4164:	e0bff817 	ldw	r2,-32(fp)
    4168:	1005003a 	cmpeq	r2,r2,zero
    416c:	103f961e 	bne	r2,zero,3fc8 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4170:	e0bffd17 	ldw	r2,-12(fp)
    4174:	10c00817 	ldw	r3,32(r2)
    4178:	00bfff44 	movi	r2,-3
    417c:	1886703a 	and	r3,r3,r2
    4180:	e0bffd17 	ldw	r2,-12(fp)
    4184:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4188:	e0bffd17 	ldw	r2,-12(fp)
    418c:	10800017 	ldw	r2,0(r2)
    4190:	11000104 	addi	r4,r2,4
    4194:	e0bffd17 	ldw	r2,-12(fp)
    4198:	10800817 	ldw	r2,32(r2)
    419c:	1007883a 	mov	r3,r2
    41a0:	2005883a 	mov	r2,r4
    41a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    41a8:	e0bffc17 	ldw	r2,-16(fp)
    41ac:	10800104 	addi	r2,r2,4
    41b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    41b4:	003f8406 	br	3fc8 <altera_avalon_jtag_uart_irq+0x2c>
}
    41b8:	e037883a 	mov	sp,fp
    41bc:	df000017 	ldw	fp,0(sp)
    41c0:	dec00104 	addi	sp,sp,4
    41c4:	f800283a 	ret

000041c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    41c8:	defffc04 	addi	sp,sp,-16
    41cc:	df000315 	stw	fp,12(sp)
    41d0:	df000304 	addi	fp,sp,12
    41d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    41d8:	e0bfff17 	ldw	r2,-4(fp)
    41dc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    41e0:	e0bffe17 	ldw	r2,-8(fp)
    41e4:	10800017 	ldw	r2,0(r2)
    41e8:	10800104 	addi	r2,r2,4
    41ec:	10800037 	ldwio	r2,0(r2)
    41f0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    41f4:	e0bffd17 	ldw	r2,-12(fp)
    41f8:	1081000c 	andi	r2,r2,1024
    41fc:	1005003a 	cmpeq	r2,r2,zero
    4200:	10000c1e 	bne	r2,zero,4234 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4204:	e0bffe17 	ldw	r2,-8(fp)
    4208:	10800017 	ldw	r2,0(r2)
    420c:	11000104 	addi	r4,r2,4
    4210:	e0bffe17 	ldw	r2,-8(fp)
    4214:	10800817 	ldw	r2,32(r2)
    4218:	10810014 	ori	r2,r2,1024
    421c:	1007883a 	mov	r3,r2
    4220:	2005883a 	mov	r2,r4
    4224:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    4228:	e0bffe17 	ldw	r2,-8(fp)
    422c:	10000915 	stw	zero,36(r2)
    4230:	00000a06 	br	425c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4234:	e0bffe17 	ldw	r2,-8(fp)
    4238:	10c00917 	ldw	r3,36(r2)
    423c:	00a00034 	movhi	r2,32768
    4240:	10bfff04 	addi	r2,r2,-4
    4244:	10c00536 	bltu	r2,r3,425c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    4248:	e0bffe17 	ldw	r2,-8(fp)
    424c:	10800917 	ldw	r2,36(r2)
    4250:	10c00044 	addi	r3,r2,1
    4254:	e0bffe17 	ldw	r2,-8(fp)
    4258:	10c00915 	stw	r3,36(r2)
    425c:	00800074 	movhi	r2,1
    4260:	1080a204 	addi	r2,r2,648
    4264:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4268:	e037883a 	mov	sp,fp
    426c:	df000017 	ldw	fp,0(sp)
    4270:	dec00104 	addi	sp,sp,4
    4274:	f800283a 	ret

00004278 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4278:	defffc04 	addi	sp,sp,-16
    427c:	df000315 	stw	fp,12(sp)
    4280:	df000304 	addi	fp,sp,12
    4284:	e13ffd15 	stw	r4,-12(fp)
    4288:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    428c:	00000706 	br	42ac <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    4290:	e0bffe17 	ldw	r2,-8(fp)
    4294:	1090000c 	andi	r2,r2,16384
    4298:	1005003a 	cmpeq	r2,r2,zero
    429c:	1000031e 	bne	r2,zero,42ac <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    42a0:	00bffd44 	movi	r2,-11
    42a4:	e0bfff15 	stw	r2,-4(fp)
    42a8:	00000b06 	br	42d8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    42ac:	e0bffd17 	ldw	r2,-12(fp)
    42b0:	10c00d17 	ldw	r3,52(r2)
    42b4:	e0bffd17 	ldw	r2,-12(fp)
    42b8:	10800c17 	ldw	r2,48(r2)
    42bc:	18800526 	beq	r3,r2,42d4 <altera_avalon_jtag_uart_close+0x5c>
    42c0:	e0bffd17 	ldw	r2,-12(fp)
    42c4:	10c00917 	ldw	r3,36(r2)
    42c8:	e0bffd17 	ldw	r2,-12(fp)
    42cc:	10800117 	ldw	r2,4(r2)
    42d0:	18bfef36 	bltu	r3,r2,4290 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    42d4:	e03fff15 	stw	zero,-4(fp)
    42d8:	e0bfff17 	ldw	r2,-4(fp)
}
    42dc:	e037883a 	mov	sp,fp
    42e0:	df000017 	ldw	fp,0(sp)
    42e4:	dec00104 	addi	sp,sp,4
    42e8:	f800283a 	ret

000042ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    42ec:	defff804 	addi	sp,sp,-32
    42f0:	df000715 	stw	fp,28(sp)
    42f4:	df000704 	addi	fp,sp,28
    42f8:	e13ffb15 	stw	r4,-20(fp)
    42fc:	e17ffc15 	stw	r5,-16(fp)
    4300:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4304:	00bff9c4 	movi	r2,-25
    4308:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    430c:	e0bffc17 	ldw	r2,-16(fp)
    4310:	e0bfff15 	stw	r2,-4(fp)
    4314:	e0ffff17 	ldw	r3,-4(fp)
    4318:	189a8060 	cmpeqi	r2,r3,27137
    431c:	1000041e 	bne	r2,zero,4330 <altera_avalon_jtag_uart_ioctl+0x44>
    4320:	e0ffff17 	ldw	r3,-4(fp)
    4324:	189a80a0 	cmpeqi	r2,r3,27138
    4328:	10001b1e 	bne	r2,zero,4398 <altera_avalon_jtag_uart_ioctl+0xac>
    432c:	00002706 	br	43cc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4330:	e0bffb17 	ldw	r2,-20(fp)
    4334:	10c00117 	ldw	r3,4(r2)
    4338:	00a00034 	movhi	r2,32768
    433c:	10bfffc4 	addi	r2,r2,-1
    4340:	18802226 	beq	r3,r2,43cc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    4344:	e0bffd17 	ldw	r2,-12(fp)
    4348:	10800017 	ldw	r2,0(r2)
    434c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4350:	e0bff917 	ldw	r2,-28(fp)
    4354:	10800090 	cmplti	r2,r2,2
    4358:	1000071e 	bne	r2,zero,4378 <altera_avalon_jtag_uart_ioctl+0x8c>
    435c:	e0fff917 	ldw	r3,-28(fp)
    4360:	00a00034 	movhi	r2,32768
    4364:	10bfffc4 	addi	r2,r2,-1
    4368:	18800326 	beq	r3,r2,4378 <altera_avalon_jtag_uart_ioctl+0x8c>
    436c:	e0bff917 	ldw	r2,-28(fp)
    4370:	e0bffe15 	stw	r2,-8(fp)
    4374:	00000306 	br	4384 <altera_avalon_jtag_uart_ioctl+0x98>
    4378:	00e00034 	movhi	r3,32768
    437c:	18ffff84 	addi	r3,r3,-2
    4380:	e0fffe15 	stw	r3,-8(fp)
    4384:	e0bffb17 	ldw	r2,-20(fp)
    4388:	e0fffe17 	ldw	r3,-8(fp)
    438c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    4390:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    4394:	00000d06 	br	43cc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4398:	e0bffb17 	ldw	r2,-20(fp)
    439c:	10c00117 	ldw	r3,4(r2)
    43a0:	00a00034 	movhi	r2,32768
    43a4:	10bfffc4 	addi	r2,r2,-1
    43a8:	18800826 	beq	r3,r2,43cc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    43ac:	e13ffd17 	ldw	r4,-12(fp)
    43b0:	e0bffb17 	ldw	r2,-20(fp)
    43b4:	10c00917 	ldw	r3,36(r2)
    43b8:	e0bffb17 	ldw	r2,-20(fp)
    43bc:	10800117 	ldw	r2,4(r2)
    43c0:	1885803a 	cmpltu	r2,r3,r2
    43c4:	20800015 	stw	r2,0(r4)
      rc = 0;
    43c8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    43cc:	e0bffa17 	ldw	r2,-24(fp)
}
    43d0:	e037883a 	mov	sp,fp
    43d4:	df000017 	ldw	fp,0(sp)
    43d8:	dec00104 	addi	sp,sp,4
    43dc:	f800283a 	ret

000043e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    43e0:	defff204 	addi	sp,sp,-56
    43e4:	dfc00d15 	stw	ra,52(sp)
    43e8:	df000c15 	stw	fp,48(sp)
    43ec:	df000c04 	addi	fp,sp,48
    43f0:	e13ffb15 	stw	r4,-20(fp)
    43f4:	e17ffc15 	stw	r5,-16(fp)
    43f8:	e1bffd15 	stw	r6,-12(fp)
    43fc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    4400:	e0bffc17 	ldw	r2,-16(fp)
    4404:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4408:	00004806 	br	452c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    440c:	e0bffb17 	ldw	r2,-20(fp)
    4410:	10800a17 	ldw	r2,40(r2)
    4414:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4418:	e0bffb17 	ldw	r2,-20(fp)
    441c:	10800b17 	ldw	r2,44(r2)
    4420:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    4424:	e0fff717 	ldw	r3,-36(fp)
    4428:	e0bff617 	ldw	r2,-40(fp)
    442c:	18800536 	bltu	r3,r2,4444 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4430:	e0bff717 	ldw	r2,-36(fp)
    4434:	e0fff617 	ldw	r3,-40(fp)
    4438:	10c5c83a 	sub	r2,r2,r3
    443c:	e0bff815 	stw	r2,-32(fp)
    4440:	00000406 	br	4454 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4444:	00820004 	movi	r2,2048
    4448:	e0fff617 	ldw	r3,-40(fp)
    444c:	10c5c83a 	sub	r2,r2,r3
    4450:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    4454:	e0bff817 	ldw	r2,-32(fp)
    4458:	1005003a 	cmpeq	r2,r2,zero
    445c:	10001f1e 	bne	r2,zero,44dc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    4460:	e0fffd17 	ldw	r3,-12(fp)
    4464:	e0bff817 	ldw	r2,-32(fp)
    4468:	1880022e 	bgeu	r3,r2,4474 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    446c:	e0bffd17 	ldw	r2,-12(fp)
    4470:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4474:	e0bffb17 	ldw	r2,-20(fp)
    4478:	10c00e04 	addi	r3,r2,56
    447c:	e0bff617 	ldw	r2,-40(fp)
    4480:	1887883a 	add	r3,r3,r2
    4484:	e0bffa17 	ldw	r2,-24(fp)
    4488:	1009883a 	mov	r4,r2
    448c:	180b883a 	mov	r5,r3
    4490:	e1bff817 	ldw	r6,-32(fp)
    4494:	00032480 	call	3248 <memcpy>
      ptr   += n;
    4498:	e0fff817 	ldw	r3,-32(fp)
    449c:	e0bffa17 	ldw	r2,-24(fp)
    44a0:	10c5883a 	add	r2,r2,r3
    44a4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    44a8:	e0fffd17 	ldw	r3,-12(fp)
    44ac:	e0bff817 	ldw	r2,-32(fp)
    44b0:	1885c83a 	sub	r2,r3,r2
    44b4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    44b8:	e0fff617 	ldw	r3,-40(fp)
    44bc:	e0bff817 	ldw	r2,-32(fp)
    44c0:	1885883a 	add	r2,r3,r2
    44c4:	10c1ffcc 	andi	r3,r2,2047
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	10800048 	cmpgei	r2,r2,1
    44d8:	103fcc1e 	bne	r2,zero,440c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    44dc:	e0fffa17 	ldw	r3,-24(fp)
    44e0:	e0bffc17 	ldw	r2,-16(fp)
    44e4:	1880141e 	bne	r3,r2,4538 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    44e8:	e0bffe17 	ldw	r2,-8(fp)
    44ec:	1090000c 	andi	r2,r2,16384
    44f0:	1004c03a 	cmpne	r2,r2,zero
    44f4:	1000101e 	bne	r2,zero,4538 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    44f8:	e0bffb17 	ldw	r2,-20(fp)
    44fc:	10c00a17 	ldw	r3,40(r2)
    4500:	e0bff717 	ldw	r2,-36(fp)
    4504:	1880051e 	bne	r3,r2,451c <altera_avalon_jtag_uart_read+0x13c>
    4508:	e0bffb17 	ldw	r2,-20(fp)
    450c:	10c00917 	ldw	r3,36(r2)
    4510:	e0bffb17 	ldw	r2,-20(fp)
    4514:	10800117 	ldw	r2,4(r2)
    4518:	18bff736 	bltu	r3,r2,44f8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    451c:	e0bffb17 	ldw	r2,-20(fp)
    4520:	10c00a17 	ldw	r3,40(r2)
    4524:	e0bff717 	ldw	r2,-36(fp)
    4528:	18800326 	beq	r3,r2,4538 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    452c:	e0bffd17 	ldw	r2,-12(fp)
    4530:	10800048 	cmpgei	r2,r2,1
    4534:	103fb51e 	bne	r2,zero,440c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4538:	e0fffa17 	ldw	r3,-24(fp)
    453c:	e0bffc17 	ldw	r2,-16(fp)
    4540:	18801926 	beq	r3,r2,45a8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4544:	0005303a 	rdctl	r2,status
    4548:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    454c:	e0fff517 	ldw	r3,-44(fp)
    4550:	00bfff84 	movi	r2,-2
    4554:	1884703a 	and	r2,r3,r2
    4558:	1001703a 	wrctl	status,r2
  
  return context;
    455c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4560:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4564:	e0bffb17 	ldw	r2,-20(fp)
    4568:	10800817 	ldw	r2,32(r2)
    456c:	10c00054 	ori	r3,r2,1
    4570:	e0bffb17 	ldw	r2,-20(fp)
    4574:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4578:	e0bffb17 	ldw	r2,-20(fp)
    457c:	10800017 	ldw	r2,0(r2)
    4580:	11000104 	addi	r4,r2,4
    4584:	e0bffb17 	ldw	r2,-20(fp)
    4588:	10800817 	ldw	r2,32(r2)
    458c:	1007883a 	mov	r3,r2
    4590:	2005883a 	mov	r2,r4
    4594:	10c00035 	stwio	r3,0(r2)
    4598:	e0bff917 	ldw	r2,-28(fp)
    459c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45a0:	e0bff417 	ldw	r2,-48(fp)
    45a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    45a8:	e0fffa17 	ldw	r3,-24(fp)
    45ac:	e0bffc17 	ldw	r2,-16(fp)
    45b0:	18800526 	beq	r3,r2,45c8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    45b4:	e0fffa17 	ldw	r3,-24(fp)
    45b8:	e0bffc17 	ldw	r2,-16(fp)
    45bc:	1887c83a 	sub	r3,r3,r2
    45c0:	e0ffff15 	stw	r3,-4(fp)
    45c4:	00000906 	br	45ec <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    45c8:	e0bffe17 	ldw	r2,-8(fp)
    45cc:	1090000c 	andi	r2,r2,16384
    45d0:	1005003a 	cmpeq	r2,r2,zero
    45d4:	1000031e 	bne	r2,zero,45e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    45d8:	00bffd44 	movi	r2,-11
    45dc:	e0bfff15 	stw	r2,-4(fp)
    45e0:	00000206 	br	45ec <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    45e4:	00bffec4 	movi	r2,-5
    45e8:	e0bfff15 	stw	r2,-4(fp)
    45ec:	e0bfff17 	ldw	r2,-4(fp)
}
    45f0:	e037883a 	mov	sp,fp
    45f4:	dfc00117 	ldw	ra,4(sp)
    45f8:	df000017 	ldw	fp,0(sp)
    45fc:	dec00204 	addi	sp,sp,8
    4600:	f800283a 	ret

00004604 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4604:	defff204 	addi	sp,sp,-56
    4608:	dfc00d15 	stw	ra,52(sp)
    460c:	df000c15 	stw	fp,48(sp)
    4610:	df000c04 	addi	fp,sp,48
    4614:	e13ffb15 	stw	r4,-20(fp)
    4618:	e17ffc15 	stw	r5,-16(fp)
    461c:	e1bffd15 	stw	r6,-12(fp)
    4620:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4624:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4628:	e0bffc17 	ldw	r2,-16(fp)
    462c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4630:	00003a06 	br	471c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4634:	e0bffb17 	ldw	r2,-20(fp)
    4638:	10800c17 	ldw	r2,48(r2)
    463c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    4640:	e0bffb17 	ldw	r2,-20(fp)
    4644:	10800d17 	ldw	r2,52(r2)
    4648:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    464c:	e0fffa17 	ldw	r3,-24(fp)
    4650:	e0bff917 	ldw	r2,-28(fp)
    4654:	1880062e 	bgeu	r3,r2,4670 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4658:	e0fff917 	ldw	r3,-28(fp)
    465c:	e0bffa17 	ldw	r2,-24(fp)
    4660:	1885c83a 	sub	r2,r3,r2
    4664:	10bfffc4 	addi	r2,r2,-1
    4668:	e0bff815 	stw	r2,-32(fp)
    466c:	00000c06 	br	46a0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    4670:	e0bff917 	ldw	r2,-28(fp)
    4674:	1005003a 	cmpeq	r2,r2,zero
    4678:	1000051e 	bne	r2,zero,4690 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    467c:	00820004 	movi	r2,2048
    4680:	e0fffa17 	ldw	r3,-24(fp)
    4684:	10c5c83a 	sub	r2,r2,r3
    4688:	e0bff815 	stw	r2,-32(fp)
    468c:	00000406 	br	46a0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4690:	0081ffc4 	movi	r2,2047
    4694:	e0fffa17 	ldw	r3,-24(fp)
    4698:	10c5c83a 	sub	r2,r2,r3
    469c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    46a0:	e0bff817 	ldw	r2,-32(fp)
    46a4:	1005003a 	cmpeq	r2,r2,zero
    46a8:	10001f1e 	bne	r2,zero,4728 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    46ac:	e0fffd17 	ldw	r3,-12(fp)
    46b0:	e0bff817 	ldw	r2,-32(fp)
    46b4:	1880022e 	bgeu	r3,r2,46c0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    46b8:	e0bffd17 	ldw	r2,-12(fp)
    46bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    46c0:	e0bffb17 	ldw	r2,-20(fp)
    46c4:	10c20e04 	addi	r3,r2,2104
    46c8:	e0bffa17 	ldw	r2,-24(fp)
    46cc:	1885883a 	add	r2,r3,r2
    46d0:	e0fffc17 	ldw	r3,-16(fp)
    46d4:	1009883a 	mov	r4,r2
    46d8:	180b883a 	mov	r5,r3
    46dc:	e1bff817 	ldw	r6,-32(fp)
    46e0:	00032480 	call	3248 <memcpy>
      ptr   += n;
    46e4:	e0fff817 	ldw	r3,-32(fp)
    46e8:	e0bffc17 	ldw	r2,-16(fp)
    46ec:	10c5883a 	add	r2,r2,r3
    46f0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    46f4:	e0fffd17 	ldw	r3,-12(fp)
    46f8:	e0bff817 	ldw	r2,-32(fp)
    46fc:	1885c83a 	sub	r2,r3,r2
    4700:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4704:	e0fffa17 	ldw	r3,-24(fp)
    4708:	e0bff817 	ldw	r2,-32(fp)
    470c:	1885883a 	add	r2,r3,r2
    4710:	10c1ffcc 	andi	r3,r2,2047
    4714:	e0bffb17 	ldw	r2,-20(fp)
    4718:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    471c:	e0bffd17 	ldw	r2,-12(fp)
    4720:	10800048 	cmpgei	r2,r2,1
    4724:	103fc31e 	bne	r2,zero,4634 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4728:	0005303a 	rdctl	r2,status
    472c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4730:	e0fff517 	ldw	r3,-44(fp)
    4734:	00bfff84 	movi	r2,-2
    4738:	1884703a 	and	r2,r3,r2
    473c:	1001703a 	wrctl	status,r2
  
  return context;
    4740:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4744:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4748:	e0bffb17 	ldw	r2,-20(fp)
    474c:	10800817 	ldw	r2,32(r2)
    4750:	10c00094 	ori	r3,r2,2
    4754:	e0bffb17 	ldw	r2,-20(fp)
    4758:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    475c:	e0bffb17 	ldw	r2,-20(fp)
    4760:	10800017 	ldw	r2,0(r2)
    4764:	11000104 	addi	r4,r2,4
    4768:	e0bffb17 	ldw	r2,-20(fp)
    476c:	10800817 	ldw	r2,32(r2)
    4770:	1007883a 	mov	r3,r2
    4774:	2005883a 	mov	r2,r4
    4778:	10c00035 	stwio	r3,0(r2)
    477c:	e0bff717 	ldw	r2,-36(fp)
    4780:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4784:	e0bff417 	ldw	r2,-48(fp)
    4788:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    478c:	e0bffd17 	ldw	r2,-12(fp)
    4790:	10800050 	cmplti	r2,r2,1
    4794:	1000111e 	bne	r2,zero,47dc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    4798:	e0bffe17 	ldw	r2,-8(fp)
    479c:	1090000c 	andi	r2,r2,16384
    47a0:	1004c03a 	cmpne	r2,r2,zero
    47a4:	1000101e 	bne	r2,zero,47e8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    47a8:	e0bffb17 	ldw	r2,-20(fp)
    47ac:	10c00d17 	ldw	r3,52(r2)
    47b0:	e0bff917 	ldw	r2,-28(fp)
    47b4:	1880051e 	bne	r3,r2,47cc <altera_avalon_jtag_uart_write+0x1c8>
    47b8:	e0bffb17 	ldw	r2,-20(fp)
    47bc:	10c00917 	ldw	r3,36(r2)
    47c0:	e0bffb17 	ldw	r2,-20(fp)
    47c4:	10800117 	ldw	r2,4(r2)
    47c8:	18bff736 	bltu	r3,r2,47a8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    47cc:	e0bffb17 	ldw	r2,-20(fp)
    47d0:	10c00d17 	ldw	r3,52(r2)
    47d4:	e0bff917 	ldw	r2,-28(fp)
    47d8:	18800326 	beq	r3,r2,47e8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    47dc:	e0bffd17 	ldw	r2,-12(fp)
    47e0:	10800048 	cmpgei	r2,r2,1
    47e4:	103fcd1e 	bne	r2,zero,471c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    47e8:	e0fffc17 	ldw	r3,-16(fp)
    47ec:	e0bff617 	ldw	r2,-40(fp)
    47f0:	18800526 	beq	r3,r2,4808 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    47f4:	e0fffc17 	ldw	r3,-16(fp)
    47f8:	e0bff617 	ldw	r2,-40(fp)
    47fc:	1887c83a 	sub	r3,r3,r2
    4800:	e0ffff15 	stw	r3,-4(fp)
    4804:	00000906 	br	482c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    4808:	e0bffe17 	ldw	r2,-8(fp)
    480c:	1090000c 	andi	r2,r2,16384
    4810:	1005003a 	cmpeq	r2,r2,zero
    4814:	1000031e 	bne	r2,zero,4824 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    4818:	00bffd44 	movi	r2,-11
    481c:	e0bfff15 	stw	r2,-4(fp)
    4820:	00000206 	br	482c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4824:	00bffec4 	movi	r2,-5
    4828:	e0bfff15 	stw	r2,-4(fp)
    482c:	e0bfff17 	ldw	r2,-4(fp)
}
    4830:	e037883a 	mov	sp,fp
    4834:	dfc00117 	ldw	ra,4(sp)
    4838:	df000017 	ldw	fp,0(sp)
    483c:	dec00204 	addi	sp,sp,8
    4840:	f800283a 	ret

00004844 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4844:	defff904 	addi	sp,sp,-28
    4848:	dfc00615 	stw	ra,24(sp)
    484c:	df000515 	stw	fp,20(sp)
    4850:	df000504 	addi	fp,sp,20
    4854:	e13ffe15 	stw	r4,-8(fp)
    4858:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    485c:	e0bffe17 	ldw	r2,-8(fp)
    4860:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4864:	e0bffe17 	ldw	r2,-8(fp)
    4868:	10800104 	addi	r2,r2,4
    486c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4870:	0005303a 	rdctl	r2,status
    4874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4878:	e0fffc17 	ldw	r3,-16(fp)
    487c:	00bfff84 	movi	r2,-2
    4880:	1884703a 	and	r2,r3,r2
    4884:	1001703a 	wrctl	status,r2
  
  return context;
    4888:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    488c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    4890:	0008b700 	call	8b70 <alt_tick>
    4894:	e0bffd17 	ldw	r2,-12(fp)
    4898:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    489c:	e0bffb17 	ldw	r2,-20(fp)
    48a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    48a4:	e037883a 	mov	sp,fp
    48a8:	dfc00117 	ldw	ra,4(sp)
    48ac:	df000017 	ldw	fp,0(sp)
    48b0:	dec00204 	addi	sp,sp,8
    48b4:	f800283a 	ret

000048b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    48b8:	defff904 	addi	sp,sp,-28
    48bc:	dfc00615 	stw	ra,24(sp)
    48c0:	df000515 	stw	fp,20(sp)
    48c4:	df000504 	addi	fp,sp,20
    48c8:	e13ffc15 	stw	r4,-16(fp)
    48cc:	e17ffd15 	stw	r5,-12(fp)
    48d0:	e1bffe15 	stw	r6,-8(fp)
    48d4:	e1ffff15 	stw	r7,-4(fp)
    48d8:	e0bfff17 	ldw	r2,-4(fp)
    48dc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    48e0:	00800074 	movhi	r2,1
    48e4:	1080a204 	addi	r2,r2,648
    48e8:	10800017 	ldw	r2,0(r2)
    48ec:	1004c03a 	cmpne	r2,r2,zero
    48f0:	1000041e 	bne	r2,zero,4904 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    48f4:	00c00074 	movhi	r3,1
    48f8:	18c0a204 	addi	r3,r3,648
    48fc:	e0bffb17 	ldw	r2,-20(fp)
    4900:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4904:	e0bffc17 	ldw	r2,-16(fp)
    4908:	10800104 	addi	r2,r2,4
    490c:	1007883a 	mov	r3,r2
    4910:	008001c4 	movi	r2,7
    4914:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    4918:	e13ffe17 	ldw	r4,-8(fp)
    491c:	e17ffc17 	ldw	r5,-16(fp)
    4920:	01800034 	movhi	r6,0
    4924:	31921104 	addi	r6,r6,18500
    4928:	00033800 	call	3380 <alt_irq_register>
#endif  
}
    492c:	e037883a 	mov	sp,fp
    4930:	dfc00117 	ldw	ra,4(sp)
    4934:	df000017 	ldw	fp,0(sp)
    4938:	dec00204 	addi	sp,sp,8
    493c:	f800283a 	ret

00004940 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    4940:	defffc04 	addi	sp,sp,-16
    4944:	dfc00315 	stw	ra,12(sp)
    4948:	df000215 	stw	fp,8(sp)
    494c:	df000204 	addi	fp,sp,8
    4950:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    4954:	e13fff17 	ldw	r4,-4(fp)
    4958:	01400074 	movhi	r5,1
    495c:	29785304 	addi	r5,r5,-7860
    4960:	00085b40 	call	85b4 <alt_find_dev>
    4964:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    4968:	e0bffe17 	ldw	r2,-8(fp)
}
    496c:	e037883a 	mov	sp,fp
    4970:	dfc00117 	ldw	ra,4(sp)
    4974:	df000017 	ldw	fp,0(sp)
    4978:	dec00204 	addi	sp,sp,8
    497c:	f800283a 	ret

00004980 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    4980:	defffd04 	addi	sp,sp,-12
    4984:	df000215 	stw	fp,8(sp)
    4988:	df000204 	addi	fp,sp,8
    498c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    4990:	e0bfff17 	ldw	r2,-4(fp)
    4994:	10800a17 	ldw	r2,40(r2)
    4998:	10800037 	ldwio	r2,0(r2)
    499c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    49a0:	e0bffe17 	ldw	r2,-8(fp)
    49a4:	10800054 	ori	r2,r2,1
    49a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    49ac:	e0bfff17 	ldw	r2,-4(fp)
    49b0:	10800a17 	ldw	r2,40(r2)
    49b4:	e0fffe17 	ldw	r3,-8(fp)
    49b8:	10c00035 	stwio	r3,0(r2)
}
    49bc:	e037883a 	mov	sp,fp
    49c0:	df000017 	ldw	fp,0(sp)
    49c4:	dec00104 	addi	sp,sp,4
    49c8:	f800283a 	ret

000049cc <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    49cc:	defffd04 	addi	sp,sp,-12
    49d0:	df000215 	stw	fp,8(sp)
    49d4:	df000204 	addi	fp,sp,8
    49d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    49dc:	e0bfff17 	ldw	r2,-4(fp)
    49e0:	10800a17 	ldw	r2,40(r2)
    49e4:	10800037 	ldwio	r2,0(r2)
    49e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    49ec:	e0fffe17 	ldw	r3,-8(fp)
    49f0:	00bfff84 	movi	r2,-2
    49f4:	1884703a 	and	r2,r3,r2
    49f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    49fc:	e0bfff17 	ldw	r2,-4(fp)
    4a00:	10800a17 	ldw	r2,40(r2)
    4a04:	e0fffe17 	ldw	r3,-8(fp)
    4a08:	10c00035 	stwio	r3,0(r2)
}
    4a0c:	e037883a 	mov	sp,fp
    4a10:	df000017 	ldw	fp,0(sp)
    4a14:	dec00104 	addi	sp,sp,4
    4a18:	f800283a 	ret

00004a1c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    4a1c:	defffd04 	addi	sp,sp,-12
    4a20:	df000215 	stw	fp,8(sp)
    4a24:	df000204 	addi	fp,sp,8
    4a28:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    4a2c:	e0bfff17 	ldw	r2,-4(fp)
    4a30:	10800a17 	ldw	r2,40(r2)
    4a34:	10800037 	ldwio	r2,0(r2)
    4a38:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    4a3c:	e0bffe17 	ldw	r2,-8(fp)
    4a40:	10800094 	ori	r2,r2,2
    4a44:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    4a48:	e0bfff17 	ldw	r2,-4(fp)
    4a4c:	10800a17 	ldw	r2,40(r2)
    4a50:	e0fffe17 	ldw	r3,-8(fp)
    4a54:	10c00035 	stwio	r3,0(r2)
}
    4a58:	e037883a 	mov	sp,fp
    4a5c:	df000017 	ldw	fp,0(sp)
    4a60:	dec00104 	addi	sp,sp,4
    4a64:	f800283a 	ret

00004a68 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    4a68:	defffd04 	addi	sp,sp,-12
    4a6c:	df000215 	stw	fp,8(sp)
    4a70:	df000204 	addi	fp,sp,8
    4a74:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    4a78:	e0bfff17 	ldw	r2,-4(fp)
    4a7c:	10800a17 	ldw	r2,40(r2)
    4a80:	10800037 	ldwio	r2,0(r2)
    4a84:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    4a88:	e0fffe17 	ldw	r3,-8(fp)
    4a8c:	00bfff44 	movi	r2,-3
    4a90:	1884703a 	and	r2,r3,r2
    4a94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    4a98:	e0bfff17 	ldw	r2,-4(fp)
    4a9c:	10800a17 	ldw	r2,40(r2)
    4aa0:	e0fffe17 	ldw	r3,-8(fp)
    4aa4:	10c00035 	stwio	r3,0(r2)
}
    4aa8:	e037883a 	mov	sp,fp
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00104 	addi	sp,sp,4
    4ab4:	f800283a 	ret

00004ab8 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    4ab8:	defffd04 	addi	sp,sp,-12
    4abc:	df000215 	stw	fp,8(sp)
    4ac0:	df000204 	addi	fp,sp,8
    4ac4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    4ac8:	e0bfff17 	ldw	r2,-4(fp)
    4acc:	10800a17 	ldw	r2,40(r2)
    4ad0:	10800037 	ldwio	r2,0(r2)
    4ad4:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    4ad8:	e0bffe17 	ldw	r2,-8(fp)
    4adc:	1080400c 	andi	r2,r2,256
    4ae0:	1004c03a 	cmpne	r2,r2,zero
}
    4ae4:	e037883a 	mov	sp,fp
    4ae8:	df000017 	ldw	fp,0(sp)
    4aec:	dec00104 	addi	sp,sp,4
    4af0:	f800283a 	ret

00004af4 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    4af4:	defffd04 	addi	sp,sp,-12
    4af8:	df000215 	stw	fp,8(sp)
    4afc:	df000204 	addi	fp,sp,8
    4b00:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    4b04:	e0bfff17 	ldw	r2,-4(fp)
    4b08:	10800a17 	ldw	r2,40(r2)
    4b0c:	10800037 	ldwio	r2,0(r2)
    4b10:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    4b14:	e0bffe17 	ldw	r2,-8(fp)
    4b18:	1080800c 	andi	r2,r2,512
    4b1c:	1004c03a 	cmpne	r2,r2,zero
}
    4b20:	e037883a 	mov	sp,fp
    4b24:	df000017 	ldw	fp,0(sp)
    4b28:	dec00104 	addi	sp,sp,4
    4b2c:	f800283a 	ret

00004b30 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    4b30:	defffd04 	addi	sp,sp,-12
    4b34:	df000215 	stw	fp,8(sp)
    4b38:	df000204 	addi	fp,sp,8
    4b3c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    4b40:	e0bfff17 	ldw	r2,-4(fp)
    4b44:	10800a17 	ldw	r2,40(r2)
    4b48:	10800037 	ldwio	r2,0(r2)
    4b4c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    4b50:	e0bffe17 	ldw	r2,-8(fp)
    4b54:	10800114 	ori	r2,r2,4
    4b58:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    4b5c:	e0bffe17 	ldw	r2,-8(fp)
    4b60:	10800214 	ori	r2,r2,8
    4b64:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    4b68:	e0bfff17 	ldw	r2,-4(fp)
    4b6c:	10800a17 	ldw	r2,40(r2)
    4b70:	e0fffe17 	ldw	r3,-8(fp)
    4b74:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    4b78:	e0fffe17 	ldw	r3,-8(fp)
    4b7c:	00bffec4 	movi	r2,-5
    4b80:	1884703a 	and	r2,r3,r2
    4b84:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    4b88:	e0fffe17 	ldw	r3,-8(fp)
    4b8c:	00bffdc4 	movi	r2,-9
    4b90:	1884703a 	and	r2,r3,r2
    4b94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    4b98:	e0bfff17 	ldw	r2,-4(fp)
    4b9c:	10800a17 	ldw	r2,40(r2)
    4ba0:	e0fffe17 	ldw	r3,-8(fp)
    4ba4:	10c00035 	stwio	r3,0(r2)
}
    4ba8:	e037883a 	mov	sp,fp
    4bac:	df000017 	ldw	fp,0(sp)
    4bb0:	dec00104 	addi	sp,sp,4
    4bb4:	f800283a 	ret

00004bb8 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    4bb8:	defffb04 	addi	sp,sp,-20
    4bbc:	df000415 	stw	fp,16(sp)
    4bc0:	df000404 	addi	fp,sp,16
    4bc4:	e13ffd15 	stw	r4,-12(fp)
    4bc8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    4bcc:	e0bffd17 	ldw	r2,-12(fp)
    4bd0:	10800a17 	ldw	r2,40(r2)
    4bd4:	10800104 	addi	r2,r2,4
    4bd8:	10800037 	ldwio	r2,0(r2)
    4bdc:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    4be0:	e0bffe17 	ldw	r2,-8(fp)
    4be4:	1004c03a 	cmpne	r2,r2,zero
    4be8:	1000051e 	bne	r2,zero,4c00 <alt_up_audio_read_fifo_avail+0x48>
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	10bfc00c 	andi	r2,r2,65280
    4bf4:	1004d23a 	srli	r2,r2,8
    4bf8:	e0bfff15 	stw	r2,-4(fp)
    4bfc:	00000306 	br	4c0c <alt_up_audio_read_fifo_avail+0x54>
    4c00:	e0bffc17 	ldw	r2,-16(fp)
    4c04:	10803fcc 	andi	r2,r2,255
    4c08:	e0bfff15 	stw	r2,-4(fp)
    4c0c:	e0bfff17 	ldw	r2,-4(fp)
    4c10:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    4c14:	e0bffc17 	ldw	r2,-16(fp)
}
    4c18:	e037883a 	mov	sp,fp
    4c1c:	df000017 	ldw	fp,0(sp)
    4c20:	dec00104 	addi	sp,sp,4
    4c24:	f800283a 	ret

00004c28 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    4c28:	defff904 	addi	sp,sp,-28
    4c2c:	dfc00615 	stw	ra,24(sp)
    4c30:	df000515 	stw	fp,20(sp)
    4c34:	df000504 	addi	fp,sp,20
    4c38:	e13ffc15 	stw	r4,-16(fp)
    4c3c:	e17ffd15 	stw	r5,-12(fp)
    4c40:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    4c44:	e13ffc17 	ldw	r4,-16(fp)
    4c48:	01400044 	movi	r5,1
    4c4c:	0004bb80 	call	4bb8 <alt_up_audio_read_fifo_avail>
    4c50:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    4c54:	e0bffb17 	ldw	r2,-20(fp)
    4c58:	10801868 	cmpgeui	r2,r2,97
    4c5c:	1000021e 	bne	r2,zero,4c68 <alt_up_audio_record_r+0x40>
		return 0;
    4c60:	e03fff15 	stw	zero,-4(fp)
    4c64:	00000606 	br	4c80 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    4c68:	e13ffc17 	ldw	r4,-16(fp)
    4c6c:	e17ffd17 	ldw	r5,-12(fp)
    4c70:	e1bffe17 	ldw	r6,-8(fp)
    4c74:	01c00044 	movi	r7,1
    4c78:	0004e5c0 	call	4e5c <alt_up_audio_read_fifo>
    4c7c:	e0bfff15 	stw	r2,-4(fp)
    4c80:	e0bfff17 	ldw	r2,-4(fp)
}
    4c84:	e037883a 	mov	sp,fp
    4c88:	dfc00117 	ldw	ra,4(sp)
    4c8c:	df000017 	ldw	fp,0(sp)
    4c90:	dec00204 	addi	sp,sp,8
    4c94:	f800283a 	ret

00004c98 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    4c98:	defff904 	addi	sp,sp,-28
    4c9c:	dfc00615 	stw	ra,24(sp)
    4ca0:	df000515 	stw	fp,20(sp)
    4ca4:	df000504 	addi	fp,sp,20
    4ca8:	e13ffc15 	stw	r4,-16(fp)
    4cac:	e17ffd15 	stw	r5,-12(fp)
    4cb0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    4cb4:	e13ffc17 	ldw	r4,-16(fp)
    4cb8:	000b883a 	mov	r5,zero
    4cbc:	0004bb80 	call	4bb8 <alt_up_audio_read_fifo_avail>
    4cc0:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    4cc4:	e0bffb17 	ldw	r2,-20(fp)
    4cc8:	10801868 	cmpgeui	r2,r2,97
    4ccc:	1000021e 	bne	r2,zero,4cd8 <alt_up_audio_record_l+0x40>
		return 0;
    4cd0:	e03fff15 	stw	zero,-4(fp)
    4cd4:	00000606 	br	4cf0 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    4cd8:	e13ffc17 	ldw	r4,-16(fp)
    4cdc:	e17ffd17 	ldw	r5,-12(fp)
    4ce0:	e1bffe17 	ldw	r6,-8(fp)
    4ce4:	000f883a 	mov	r7,zero
    4ce8:	0004e5c0 	call	4e5c <alt_up_audio_read_fifo>
    4cec:	e0bfff15 	stw	r2,-4(fp)
    4cf0:	e0bfff17 	ldw	r2,-4(fp)
}
    4cf4:	e037883a 	mov	sp,fp
    4cf8:	dfc00117 	ldw	ra,4(sp)
    4cfc:	df000017 	ldw	fp,0(sp)
    4d00:	dec00204 	addi	sp,sp,8
    4d04:	f800283a 	ret

00004d08 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    4d08:	defffb04 	addi	sp,sp,-20
    4d0c:	df000415 	stw	fp,16(sp)
    4d10:	df000404 	addi	fp,sp,16
    4d14:	e13ffd15 	stw	r4,-12(fp)
    4d18:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    4d1c:	e0bffd17 	ldw	r2,-12(fp)
    4d20:	10800a17 	ldw	r2,40(r2)
    4d24:	10800104 	addi	r2,r2,4
    4d28:	10800037 	ldwio	r2,0(r2)
    4d2c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    4d30:	e0bffe17 	ldw	r2,-8(fp)
    4d34:	1004c03a 	cmpne	r2,r2,zero
    4d38:	1000051e 	bne	r2,zero,4d50 <alt_up_audio_write_fifo_space+0x48>
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	10bfc02c 	andhi	r2,r2,65280
    4d44:	1004d63a 	srli	r2,r2,24
    4d48:	e0bfff15 	stw	r2,-4(fp)
    4d4c:	00000406 	br	4d60 <alt_up_audio_write_fifo_space+0x58>
    4d50:	e0bffc17 	ldw	r2,-16(fp)
    4d54:	10803fec 	andhi	r2,r2,255
    4d58:	1004d43a 	srli	r2,r2,16
    4d5c:	e0bfff15 	stw	r2,-4(fp)
    4d60:	e0bfff17 	ldw	r2,-4(fp)
    4d64:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    4d68:	e0bffc17 	ldw	r2,-16(fp)
}
    4d6c:	e037883a 	mov	sp,fp
    4d70:	df000017 	ldw	fp,0(sp)
    4d74:	dec00104 	addi	sp,sp,4
    4d78:	f800283a 	ret

00004d7c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    4d7c:	defff904 	addi	sp,sp,-28
    4d80:	dfc00615 	stw	ra,24(sp)
    4d84:	df000515 	stw	fp,20(sp)
    4d88:	df000504 	addi	fp,sp,20
    4d8c:	e13ffc15 	stw	r4,-16(fp)
    4d90:	e17ffd15 	stw	r5,-12(fp)
    4d94:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    4d98:	e13ffc17 	ldw	r4,-16(fp)
    4d9c:	01400044 	movi	r5,1
    4da0:	0004d080 	call	4d08 <alt_up_audio_write_fifo_space>
    4da4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    4da8:	e0bffb17 	ldw	r2,-20(fp)
    4dac:	10801868 	cmpgeui	r2,r2,97
    4db0:	1000021e 	bne	r2,zero,4dbc <alt_up_audio_play_r+0x40>
		return 0;
    4db4:	e03fff15 	stw	zero,-4(fp)
    4db8:	00000606 	br	4dd4 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    4dbc:	e13ffc17 	ldw	r4,-16(fp)
    4dc0:	e17ffd17 	ldw	r5,-12(fp)
    4dc4:	e1bffe17 	ldw	r6,-8(fp)
    4dc8:	01c00044 	movi	r7,1
    4dcc:	0004f600 	call	4f60 <alt_up_audio_write_fifo>
    4dd0:	e0bfff15 	stw	r2,-4(fp)
    4dd4:	e0bfff17 	ldw	r2,-4(fp)
}
    4dd8:	e037883a 	mov	sp,fp
    4ddc:	dfc00117 	ldw	ra,4(sp)
    4de0:	df000017 	ldw	fp,0(sp)
    4de4:	dec00204 	addi	sp,sp,8
    4de8:	f800283a 	ret

00004dec <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    4dec:	defff904 	addi	sp,sp,-28
    4df0:	dfc00615 	stw	ra,24(sp)
    4df4:	df000515 	stw	fp,20(sp)
    4df8:	df000504 	addi	fp,sp,20
    4dfc:	e13ffc15 	stw	r4,-16(fp)
    4e00:	e17ffd15 	stw	r5,-12(fp)
    4e04:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    4e08:	e13ffc17 	ldw	r4,-16(fp)
    4e0c:	000b883a 	mov	r5,zero
    4e10:	0004d080 	call	4d08 <alt_up_audio_write_fifo_space>
    4e14:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    4e18:	e0bffb17 	ldw	r2,-20(fp)
    4e1c:	10801868 	cmpgeui	r2,r2,97
    4e20:	1000021e 	bne	r2,zero,4e2c <alt_up_audio_play_l+0x40>
		return 0;
    4e24:	e03fff15 	stw	zero,-4(fp)
    4e28:	00000606 	br	4e44 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    4e2c:	e13ffc17 	ldw	r4,-16(fp)
    4e30:	e17ffd17 	ldw	r5,-12(fp)
    4e34:	e1bffe17 	ldw	r6,-8(fp)
    4e38:	000f883a 	mov	r7,zero
    4e3c:	0004f600 	call	4f60 <alt_up_audio_write_fifo>
    4e40:	e0bfff15 	stw	r2,-4(fp)
    4e44:	e0bfff17 	ldw	r2,-4(fp)
}
    4e48:	e037883a 	mov	sp,fp
    4e4c:	dfc00117 	ldw	ra,4(sp)
    4e50:	df000017 	ldw	fp,0(sp)
    4e54:	dec00204 	addi	sp,sp,8
    4e58:	f800283a 	ret

00004e5c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    4e5c:	defff604 	addi	sp,sp,-40
    4e60:	df000915 	stw	fp,36(sp)
    4e64:	df000904 	addi	fp,sp,36
    4e68:	e13ff915 	stw	r4,-28(fp)
    4e6c:	e17ffa15 	stw	r5,-24(fp)
    4e70:	e1bffb15 	stw	r6,-20(fp)
    4e74:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    4e78:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    4e7c:	00003006 	br	4f40 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    4e80:	e0bff917 	ldw	r2,-28(fp)
    4e84:	10800a17 	ldw	r2,40(r2)
    4e88:	10800104 	addi	r2,r2,4
    4e8c:	10800037 	ldwio	r2,0(r2)
    4e90:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    4e94:	e0bffc17 	ldw	r2,-16(fp)
    4e98:	1004c03a 	cmpne	r2,r2,zero
    4e9c:	1000051e 	bne	r2,zero,4eb4 <alt_up_audio_read_fifo+0x58>
    4ea0:	e0bff817 	ldw	r2,-32(fp)
    4ea4:	10bfc00c 	andi	r2,r2,65280
    4ea8:	1004d23a 	srli	r2,r2,8
    4eac:	e0bfff15 	stw	r2,-4(fp)
    4eb0:	00000306 	br	4ec0 <alt_up_audio_read_fifo+0x64>
    4eb4:	e0bff817 	ldw	r2,-32(fp)
    4eb8:	10803fcc 	andi	r2,r2,255
    4ebc:	e0bfff15 	stw	r2,-4(fp)
    4ec0:	e0bfff17 	ldw	r2,-4(fp)
    4ec4:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    4ec8:	e0bff817 	ldw	r2,-32(fp)
    4ecc:	1005003a 	cmpeq	r2,r2,zero
    4ed0:	10001e1e 	bne	r2,zero,4f4c <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    4ed4:	e0bff717 	ldw	r2,-36(fp)
    4ed8:	1085883a 	add	r2,r2,r2
    4edc:	1085883a 	add	r2,r2,r2
    4ee0:	1007883a 	mov	r3,r2
    4ee4:	e0bffa17 	ldw	r2,-24(fp)
    4ee8:	1887883a 	add	r3,r3,r2
    4eec:	e0fffe15 	stw	r3,-8(fp)
    4ef0:	e0bffc17 	ldw	r2,-16(fp)
    4ef4:	1004c03a 	cmpne	r2,r2,zero
    4ef8:	1000061e 	bne	r2,zero,4f14 <alt_up_audio_read_fifo+0xb8>
    4efc:	e0bff917 	ldw	r2,-28(fp)
    4f00:	10800a17 	ldw	r2,40(r2)
    4f04:	10800204 	addi	r2,r2,8
    4f08:	10800037 	ldwio	r2,0(r2)
    4f0c:	e0bffd15 	stw	r2,-12(fp)
    4f10:	00000506 	br	4f28 <alt_up_audio_read_fifo+0xcc>
    4f14:	e0bff917 	ldw	r2,-28(fp)
    4f18:	10800a17 	ldw	r2,40(r2)
    4f1c:	10800304 	addi	r2,r2,12
    4f20:	10800037 	ldwio	r2,0(r2)
    4f24:	e0bffd15 	stw	r2,-12(fp)
    4f28:	e0fffd17 	ldw	r3,-12(fp)
    4f2c:	e0bffe17 	ldw	r2,-8(fp)
    4f30:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    4f34:	e0bff717 	ldw	r2,-36(fp)
    4f38:	10800044 	addi	r2,r2,1
    4f3c:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    4f40:	e0fff717 	ldw	r3,-36(fp)
    4f44:	e0bffb17 	ldw	r2,-20(fp)
    4f48:	18bfcd16 	blt	r3,r2,4e80 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    4f4c:	e0bff717 	ldw	r2,-36(fp)
}
    4f50:	e037883a 	mov	sp,fp
    4f54:	df000017 	ldw	fp,0(sp)
    4f58:	dec00104 	addi	sp,sp,4
    4f5c:	f800283a 	ret

00004f60 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    4f60:	defff804 	addi	sp,sp,-32
    4f64:	df000715 	stw	fp,28(sp)
    4f68:	df000704 	addi	fp,sp,28
    4f6c:	e13ffb15 	stw	r4,-20(fp)
    4f70:	e17ffc15 	stw	r5,-16(fp)
    4f74:	e1bffd15 	stw	r6,-12(fp)
    4f78:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    4f7c:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    4f80:	00003a06 	br	506c <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    4f84:	e0bffb17 	ldw	r2,-20(fp)
    4f88:	10800a17 	ldw	r2,40(r2)
    4f8c:	10800104 	addi	r2,r2,4
    4f90:	10800037 	ldwio	r2,0(r2)
    4f94:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    4f98:	e0bffe17 	ldw	r2,-8(fp)
    4f9c:	1004c03a 	cmpne	r2,r2,zero
    4fa0:	1000051e 	bne	r2,zero,4fb8 <alt_up_audio_write_fifo+0x58>
    4fa4:	e0bffa17 	ldw	r2,-24(fp)
    4fa8:	10bfc02c 	andhi	r2,r2,65280
    4fac:	1004d63a 	srli	r2,r2,24
    4fb0:	e0bfff15 	stw	r2,-4(fp)
    4fb4:	00000406 	br	4fc8 <alt_up_audio_write_fifo+0x68>
    4fb8:	e0bffa17 	ldw	r2,-24(fp)
    4fbc:	10803fec 	andhi	r2,r2,255
    4fc0:	1004d43a 	srli	r2,r2,16
    4fc4:	e0bfff15 	stw	r2,-4(fp)
    4fc8:	e0bfff17 	ldw	r2,-4(fp)
    4fcc:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    4fd0:	e0bffa17 	ldw	r2,-24(fp)
    4fd4:	1005003a 	cmpeq	r2,r2,zero
    4fd8:	1000271e 	bne	r2,zero,5078 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    4fdc:	e0bffe17 	ldw	r2,-8(fp)
    4fe0:	1004c03a 	cmpne	r2,r2,zero
    4fe4:	1000111e 	bne	r2,zero,502c <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	10800a17 	ldw	r2,40(r2)
    4ff0:	11000204 	addi	r4,r2,8
    4ff4:	e0bff917 	ldw	r2,-28(fp)
    4ff8:	1085883a 	add	r2,r2,r2
    4ffc:	1085883a 	add	r2,r2,r2
    5000:	1007883a 	mov	r3,r2
    5004:	e0bffc17 	ldw	r2,-16(fp)
    5008:	1885883a 	add	r2,r3,r2
    500c:	10800017 	ldw	r2,0(r2)
    5010:	1007883a 	mov	r3,r2
    5014:	e0bff917 	ldw	r2,-28(fp)
    5018:	10800044 	addi	r2,r2,1
    501c:	e0bff915 	stw	r2,-28(fp)
    5020:	2005883a 	mov	r2,r4
    5024:	10c00035 	stwio	r3,0(r2)
    5028:	00001006 	br	506c <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    502c:	e0bffb17 	ldw	r2,-20(fp)
    5030:	10800a17 	ldw	r2,40(r2)
    5034:	11000304 	addi	r4,r2,12
    5038:	e0bff917 	ldw	r2,-28(fp)
    503c:	1085883a 	add	r2,r2,r2
    5040:	1085883a 	add	r2,r2,r2
    5044:	1007883a 	mov	r3,r2
    5048:	e0bffc17 	ldw	r2,-16(fp)
    504c:	1885883a 	add	r2,r3,r2
    5050:	10800017 	ldw	r2,0(r2)
    5054:	1007883a 	mov	r3,r2
    5058:	e0bff917 	ldw	r2,-28(fp)
    505c:	10800044 	addi	r2,r2,1
    5060:	e0bff915 	stw	r2,-28(fp)
    5064:	2005883a 	mov	r2,r4
    5068:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    506c:	e0fff917 	ldw	r3,-28(fp)
    5070:	e0bffd17 	ldw	r2,-12(fp)
    5074:	18bfc316 	blt	r3,r2,4f84 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    5078:	e0bff917 	ldw	r2,-28(fp)
}
    507c:	e037883a 	mov	sp,fp
    5080:	df000017 	ldw	fp,0(sp)
    5084:	dec00104 	addi	sp,sp,4
    5088:	f800283a 	ret

0000508c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    508c:	defffc04 	addi	sp,sp,-16
    5090:	df000315 	stw	fp,12(sp)
    5094:	df000304 	addi	fp,sp,12
    5098:	e13ffd15 	stw	r4,-12(fp)
    509c:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    50a0:	e0bffe17 	ldw	r2,-8(fp)
    50a4:	1004c03a 	cmpne	r2,r2,zero
    50a8:	1000061e 	bne	r2,zero,50c4 <alt_up_audio_read_fifo_head+0x38>
    50ac:	e0bffd17 	ldw	r2,-12(fp)
    50b0:	10800a17 	ldw	r2,40(r2)
    50b4:	10800204 	addi	r2,r2,8
    50b8:	10800037 	ldwio	r2,0(r2)
    50bc:	e0bfff15 	stw	r2,-4(fp)
    50c0:	00000506 	br	50d8 <alt_up_audio_read_fifo_head+0x4c>
    50c4:	e0bffd17 	ldw	r2,-12(fp)
    50c8:	10800a17 	ldw	r2,40(r2)
    50cc:	10800304 	addi	r2,r2,12
    50d0:	10800037 	ldwio	r2,0(r2)
    50d4:	e0bfff15 	stw	r2,-4(fp)
    50d8:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    50dc:	e037883a 	mov	sp,fp
    50e0:	df000017 	ldw	fp,0(sp)
    50e4:	dec00104 	addi	sp,sp,4
    50e8:	f800283a 	ret

000050ec <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    50ec:	defffc04 	addi	sp,sp,-16
    50f0:	df000315 	stw	fp,12(sp)
    50f4:	df000304 	addi	fp,sp,12
    50f8:	e13ffd15 	stw	r4,-12(fp)
    50fc:	e17ffe15 	stw	r5,-8(fp)
    5100:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    5104:	e0bfff17 	ldw	r2,-4(fp)
    5108:	1004c03a 	cmpne	r2,r2,zero
    510c:	1000061e 	bne	r2,zero,5128 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    5110:	e0bffd17 	ldw	r2,-12(fp)
    5114:	10800a17 	ldw	r2,40(r2)
    5118:	10800204 	addi	r2,r2,8
    511c:	e0fffe17 	ldw	r3,-8(fp)
    5120:	10c00035 	stwio	r3,0(r2)
    5124:	00000506 	br	513c <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    5128:	e0bffd17 	ldw	r2,-12(fp)
    512c:	10800a17 	ldw	r2,40(r2)
    5130:	10800304 	addi	r2,r2,12
    5134:	e0fffe17 	ldw	r3,-8(fp)
    5138:	10c00035 	stwio	r3,0(r2)
}
    513c:	e037883a 	mov	sp,fp
    5140:	df000017 	ldw	fp,0(sp)
    5144:	dec00104 	addi	sp,sp,4
    5148:	f800283a 	ret

0000514c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    514c:	defffc04 	addi	sp,sp,-16
    5150:	df000315 	stw	fp,12(sp)
    5154:	df000304 	addi	fp,sp,12
    5158:	e13ffe15 	stw	r4,-8(fp)
    515c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    5160:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    5164:	e0bfff17 	ldw	r2,-4(fp)
    5168:	1004c03a 	cmpne	r2,r2,zero
    516c:	1000061e 	bne	r2,zero,5188 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    5170:	e0bffe17 	ldw	r2,-8(fp)
    5174:	1007883a 	mov	r3,r2
    5178:	e0bffd03 	ldbu	r2,-12(fp)
    517c:	10c4b03a 	or	r2,r2,r3
    5180:	e0bffd05 	stb	r2,-12(fp)
    5184:	00000806 	br	51a8 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    5188:	e0bffe17 	ldw	r2,-8(fp)
    518c:	1007883a 	mov	r3,r2
    5190:	e0bffd03 	ldbu	r2,-12(fp)
    5194:	10c4b03a 	or	r2,r2,r3
    5198:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    519c:	e0bffd03 	ldbu	r2,-12(fp)
    51a0:	10801014 	ori	r2,r2,64
    51a4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    51a8:	e0fffd03 	ldbu	r3,-12(fp)
    51ac:	00bfe004 	movi	r2,-128
    51b0:	1884b03a 	or	r2,r3,r2
    51b4:	10803fcc 	andi	r2,r2,255
}
    51b8:	e037883a 	mov	sp,fp
    51bc:	df000017 	ldw	fp,0(sp)
    51c0:	dec00104 	addi	sp,sp,4
    51c4:	f800283a 	ret

000051c8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    51c8:	defffd04 	addi	sp,sp,-12
    51cc:	df000215 	stw	fp,8(sp)
    51d0:	df000204 	addi	fp,sp,8
    51d4:	e13ffe15 	stw	r4,-8(fp)
    51d8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    51dc:	e0bffe17 	ldw	r2,-8(fp)
    51e0:	10800a17 	ldw	r2,40(r2)
    51e4:	e0ffff03 	ldbu	r3,-4(fp)
    51e8:	10c00025 	stbio	r3,0(r2)
}
    51ec:	e037883a 	mov	sp,fp
    51f0:	df000017 	ldw	fp,0(sp)
    51f4:	dec00104 	addi	sp,sp,4
    51f8:	f800283a 	ret

000051fc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    51fc:	defffe04 	addi	sp,sp,-8
    5200:	df000115 	stw	fp,4(sp)
    5204:	df000104 	addi	fp,sp,4
    5208:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    520c:	e0bfff17 	ldw	r2,-4(fp)
    5210:	10800a17 	ldw	r2,40(r2)
    5214:	1007883a 	mov	r3,r2
    5218:	00800044 	movi	r2,1
    521c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    5220:	e037883a 	mov	sp,fp
    5224:	df000017 	ldw	fp,0(sp)
    5228:	dec00104 	addi	sp,sp,4
    522c:	f800283a 	ret

00005230 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    5230:	defffc04 	addi	sp,sp,-16
    5234:	dfc00315 	stw	ra,12(sp)
    5238:	df000215 	stw	fp,8(sp)
    523c:	df000204 	addi	fp,sp,8
    5240:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    5244:	e13fff17 	ldw	r4,-4(fp)
    5248:	01400074 	movhi	r5,1
    524c:	29785304 	addi	r5,r5,-7860
    5250:	00085b40 	call	85b4 <alt_find_dev>
    5254:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5258:	e0bffe17 	ldw	r2,-8(fp)
}
    525c:	e037883a 	mov	sp,fp
    5260:	dfc00117 	ldw	ra,4(sp)
    5264:	df000017 	ldw	fp,0(sp)
    5268:	dec00204 	addi	sp,sp,8
    526c:	f800283a 	ret

00005270 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    5270:	defffb04 	addi	sp,sp,-20
    5274:	df000415 	stw	fp,16(sp)
    5278:	df000404 	addi	fp,sp,16
    527c:	e13ffd15 	stw	r4,-12(fp)
    5280:	e17ffe15 	stw	r5,-8(fp)
    5284:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    5288:	e03ffc15 	stw	zero,-16(fp)
    528c:	00000f06 	br	52cc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    5290:	e0bffd17 	ldw	r2,-12(fp)
    5294:	10800a17 	ldw	r2,40(r2)
    5298:	11000044 	addi	r4,r2,1
    529c:	e0fffc17 	ldw	r3,-16(fp)
    52a0:	e0bffe17 	ldw	r2,-8(fp)
    52a4:	1885883a 	add	r2,r3,r2
    52a8:	10800003 	ldbu	r2,0(r2)
    52ac:	10c03fcc 	andi	r3,r2,255
    52b0:	18c0201c 	xori	r3,r3,128
    52b4:	18ffe004 	addi	r3,r3,-128
    52b8:	2005883a 	mov	r2,r4
    52bc:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    52c0:	e0bffc17 	ldw	r2,-16(fp)
    52c4:	10800044 	addi	r2,r2,1
    52c8:	e0bffc15 	stw	r2,-16(fp)
    52cc:	e0fffc17 	ldw	r3,-16(fp)
    52d0:	e0bfff17 	ldw	r2,-4(fp)
    52d4:	18bfee36 	bltu	r3,r2,5290 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    52d8:	e037883a 	mov	sp,fp
    52dc:	df000017 	ldw	fp,0(sp)
    52e0:	dec00104 	addi	sp,sp,4
    52e4:	f800283a 	ret

000052e8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    52e8:	defffd04 	addi	sp,sp,-12
    52ec:	df000215 	stw	fp,8(sp)
    52f0:	df000204 	addi	fp,sp,8
    52f4:	e13ffe15 	stw	r4,-8(fp)
    52f8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    52fc:	00000d06 	br	5334 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    5300:	e0bffe17 	ldw	r2,-8(fp)
    5304:	10800a17 	ldw	r2,40(r2)
    5308:	11000044 	addi	r4,r2,1
    530c:	e0bfff17 	ldw	r2,-4(fp)
    5310:	10800003 	ldbu	r2,0(r2)
    5314:	10c03fcc 	andi	r3,r2,255
    5318:	18c0201c 	xori	r3,r3,128
    531c:	18ffe004 	addi	r3,r3,-128
    5320:	2005883a 	mov	r2,r4
    5324:	10c00025 	stbio	r3,0(r2)
		++ptr;
    5328:	e0bfff17 	ldw	r2,-4(fp)
    532c:	10800044 	addi	r2,r2,1
    5330:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    5334:	e0bfff17 	ldw	r2,-4(fp)
    5338:	10800003 	ldbu	r2,0(r2)
    533c:	10803fcc 	andi	r2,r2,255
    5340:	1080201c 	xori	r2,r2,128
    5344:	10bfe004 	addi	r2,r2,-128
    5348:	1004c03a 	cmpne	r2,r2,zero
    534c:	103fec1e 	bne	r2,zero,5300 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    5350:	e037883a 	mov	sp,fp
    5354:	df000017 	ldw	fp,0(sp)
    5358:	dec00104 	addi	sp,sp,4
    535c:	f800283a 	ret

00005360 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    5360:	defffb04 	addi	sp,sp,-20
    5364:	dfc00415 	stw	ra,16(sp)
    5368:	df000315 	stw	fp,12(sp)
    536c:	df000304 	addi	fp,sp,12
    5370:	e13ffd15 	stw	r4,-12(fp)
    5374:	e17ffe15 	stw	r5,-8(fp)
    5378:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    537c:	e0bffd17 	ldw	r2,-12(fp)
    5380:	10800017 	ldw	r2,0(r2)
    5384:	1009883a 	mov	r4,r2
    5388:	e1bfff17 	ldw	r6,-4(fp)
    538c:	e17ffe17 	ldw	r5,-8(fp)
    5390:	00052700 	call	5270 <alt_up_character_lcd_write>
	return 0;
    5394:	0005883a 	mov	r2,zero
}
    5398:	e037883a 	mov	sp,fp
    539c:	dfc00117 	ldw	ra,4(sp)
    53a0:	df000017 	ldw	fp,0(sp)
    53a4:	dec00204 	addi	sp,sp,8
    53a8:	f800283a 	ret

000053ac <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    53ac:	defff904 	addi	sp,sp,-28
    53b0:	dfc00615 	stw	ra,24(sp)
    53b4:	df000515 	stw	fp,20(sp)
    53b8:	df000504 	addi	fp,sp,20
    53bc:	e13ffc15 	stw	r4,-16(fp)
    53c0:	e17ffd15 	stw	r5,-12(fp)
    53c4:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    53c8:	e0bffd17 	ldw	r2,-12(fp)
    53cc:	10800a28 	cmpgeui	r2,r2,40
    53d0:	1000031e 	bne	r2,zero,53e0 <alt_up_character_lcd_set_cursor_pos+0x34>
    53d4:	e0bffe17 	ldw	r2,-8(fp)
    53d8:	108000b0 	cmpltui	r2,r2,2
    53dc:	1000031e 	bne	r2,zero,53ec <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    53e0:	00bfffc4 	movi	r2,-1
    53e4:	e0bfff15 	stw	r2,-4(fp)
    53e8:	00000806 	br	540c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    53ec:	e13ffd17 	ldw	r4,-12(fp)
    53f0:	e17ffe17 	ldw	r5,-8(fp)
    53f4:	000514c0 	call	514c <get_DDRAM_addr>
    53f8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    53fc:	e17ffb03 	ldbu	r5,-20(fp)
    5400:	e13ffc17 	ldw	r4,-16(fp)
    5404:	00051c80 	call	51c8 <alt_up_character_lcd_send_cmd>
	return 0;
    5408:	e03fff15 	stw	zero,-4(fp)
    540c:	e0bfff17 	ldw	r2,-4(fp)
}
    5410:	e037883a 	mov	sp,fp
    5414:	dfc00117 	ldw	ra,4(sp)
    5418:	df000017 	ldw	fp,0(sp)
    541c:	dec00204 	addi	sp,sp,8
    5420:	f800283a 	ret

00005424 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    5424:	defff904 	addi	sp,sp,-28
    5428:	dfc00615 	stw	ra,24(sp)
    542c:	df000515 	stw	fp,20(sp)
    5430:	df000504 	addi	fp,sp,20
    5434:	e13ffc15 	stw	r4,-16(fp)
    5438:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    543c:	e0bffd17 	ldw	r2,-12(fp)
    5440:	1005003a 	cmpeq	r2,r2,zero
    5444:	10001e1e 	bne	r2,zero,54c0 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    5448:	e0bffd17 	ldw	r2,-12(fp)
    544c:	10800050 	cmplti	r2,r2,1
    5450:	1000031e 	bne	r2,zero,5460 <alt_up_character_lcd_shift_cursor+0x3c>
    5454:	00800504 	movi	r2,20
    5458:	e0bfff05 	stb	r2,-4(fp)
    545c:	00000206 	br	5468 <alt_up_character_lcd_shift_cursor+0x44>
    5460:	00c00404 	movi	r3,16
    5464:	e0ffff05 	stb	r3,-4(fp)
    5468:	e0bfff03 	ldbu	r2,-4(fp)
    546c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    5470:	e0fffd17 	ldw	r3,-12(fp)
    5474:	e0fffe15 	stw	r3,-8(fp)
    5478:	e0fffe17 	ldw	r3,-8(fp)
    547c:	1804403a 	cmpge	r2,r3,zero
    5480:	1000031e 	bne	r2,zero,5490 <alt_up_character_lcd_shift_cursor+0x6c>
    5484:	e0bffe17 	ldw	r2,-8(fp)
    5488:	0085c83a 	sub	r2,zero,r2
    548c:	e0bffe15 	stw	r2,-8(fp)
    5490:	e0fffe17 	ldw	r3,-8(fp)
    5494:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    5498:	00000306 	br	54a8 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    549c:	e17ffb43 	ldbu	r5,-19(fp)
    54a0:	e13ffc17 	ldw	r4,-16(fp)
    54a4:	00051c80 	call	51c8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    54a8:	e0bffb03 	ldbu	r2,-20(fp)
    54ac:	10bfffc4 	addi	r2,r2,-1
    54b0:	e0bffb05 	stb	r2,-20(fp)
    54b4:	e0bffb03 	ldbu	r2,-20(fp)
    54b8:	10803fd8 	cmpnei	r2,r2,255
    54bc:	103ff71e 	bne	r2,zero,549c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    54c0:	e037883a 	mov	sp,fp
    54c4:	dfc00117 	ldw	ra,4(sp)
    54c8:	df000017 	ldw	fp,0(sp)
    54cc:	dec00204 	addi	sp,sp,8
    54d0:	f800283a 	ret

000054d4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    54d4:	defff904 	addi	sp,sp,-28
    54d8:	dfc00615 	stw	ra,24(sp)
    54dc:	df000515 	stw	fp,20(sp)
    54e0:	df000504 	addi	fp,sp,20
    54e4:	e13ffc15 	stw	r4,-16(fp)
    54e8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    54ec:	e0bffd17 	ldw	r2,-12(fp)
    54f0:	1005003a 	cmpeq	r2,r2,zero
    54f4:	10001e1e 	bne	r2,zero,5570 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    54f8:	e0bffd17 	ldw	r2,-12(fp)
    54fc:	10800050 	cmplti	r2,r2,1
    5500:	1000031e 	bne	r2,zero,5510 <alt_up_character_lcd_shift_display+0x3c>
    5504:	00800704 	movi	r2,28
    5508:	e0bfff05 	stb	r2,-4(fp)
    550c:	00000206 	br	5518 <alt_up_character_lcd_shift_display+0x44>
    5510:	00c00604 	movi	r3,24
    5514:	e0ffff05 	stb	r3,-4(fp)
    5518:	e0bfff03 	ldbu	r2,-4(fp)
    551c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    5520:	e0fffd17 	ldw	r3,-12(fp)
    5524:	e0fffe15 	stw	r3,-8(fp)
    5528:	e0fffe17 	ldw	r3,-8(fp)
    552c:	1804403a 	cmpge	r2,r3,zero
    5530:	1000031e 	bne	r2,zero,5540 <alt_up_character_lcd_shift_display+0x6c>
    5534:	e0bffe17 	ldw	r2,-8(fp)
    5538:	0085c83a 	sub	r2,zero,r2
    553c:	e0bffe15 	stw	r2,-8(fp)
    5540:	e0fffe17 	ldw	r3,-8(fp)
    5544:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    5548:	00000306 	br	5558 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    554c:	e17ffb43 	ldbu	r5,-19(fp)
    5550:	e13ffc17 	ldw	r4,-16(fp)
    5554:	00051c80 	call	51c8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5558:	e0bffb03 	ldbu	r2,-20(fp)
    555c:	10bfffc4 	addi	r2,r2,-1
    5560:	e0bffb05 	stb	r2,-20(fp)
    5564:	e0bffb03 	ldbu	r2,-20(fp)
    5568:	10803fd8 	cmpnei	r2,r2,255
    556c:	103ff71e 	bne	r2,zero,554c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    5570:	e037883a 	mov	sp,fp
    5574:	dfc00117 	ldw	ra,4(sp)
    5578:	df000017 	ldw	fp,0(sp)
    557c:	dec00204 	addi	sp,sp,8
    5580:	f800283a 	ret

00005584 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    5584:	defff904 	addi	sp,sp,-28
    5588:	dfc00615 	stw	ra,24(sp)
    558c:	df000515 	stw	fp,20(sp)
    5590:	df000504 	addi	fp,sp,20
    5594:	e13ffc15 	stw	r4,-16(fp)
    5598:	e17ffd15 	stw	r5,-12(fp)
    559c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    55a0:	e0bffd17 	ldw	r2,-12(fp)
    55a4:	10800a28 	cmpgeui	r2,r2,40
    55a8:	1000031e 	bne	r2,zero,55b8 <alt_up_character_lcd_erase_pos+0x34>
    55ac:	e0bffe17 	ldw	r2,-8(fp)
    55b0:	108000b0 	cmpltui	r2,r2,2
    55b4:	1000031e 	bne	r2,zero,55c4 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    55b8:	00bfffc4 	movi	r2,-1
    55bc:	e0bfff15 	stw	r2,-4(fp)
    55c0:	00000e06 	br	55fc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    55c4:	e13ffd17 	ldw	r4,-12(fp)
    55c8:	e17ffe17 	ldw	r5,-8(fp)
    55cc:	000514c0 	call	514c <get_DDRAM_addr>
    55d0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    55d4:	e17ffb03 	ldbu	r5,-20(fp)
    55d8:	e13ffc17 	ldw	r4,-16(fp)
    55dc:	00051c80 	call	51c8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    55e0:	e0bffc17 	ldw	r2,-16(fp)
    55e4:	10800a17 	ldw	r2,40(r2)
    55e8:	10800044 	addi	r2,r2,1
    55ec:	1007883a 	mov	r3,r2
    55f0:	00800084 	movi	r2,2
    55f4:	18800025 	stbio	r2,0(r3)
	return 0;
    55f8:	e03fff15 	stw	zero,-4(fp)
    55fc:	e0bfff17 	ldw	r2,-4(fp)
}
    5600:	e037883a 	mov	sp,fp
    5604:	dfc00117 	ldw	ra,4(sp)
    5608:	df000017 	ldw	fp,0(sp)
    560c:	dec00204 	addi	sp,sp,8
    5610:	f800283a 	ret

00005614 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    5614:	defffd04 	addi	sp,sp,-12
    5618:	dfc00215 	stw	ra,8(sp)
    561c:	df000115 	stw	fp,4(sp)
    5620:	df000104 	addi	fp,sp,4
    5624:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    5628:	e13fff17 	ldw	r4,-4(fp)
    562c:	01400304 	movi	r5,12
    5630:	00051c80 	call	51c8 <alt_up_character_lcd_send_cmd>
}
    5634:	e037883a 	mov	sp,fp
    5638:	dfc00117 	ldw	ra,4(sp)
    563c:	df000017 	ldw	fp,0(sp)
    5640:	dec00204 	addi	sp,sp,8
    5644:	f800283a 	ret

00005648 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    5648:	defffd04 	addi	sp,sp,-12
    564c:	dfc00215 	stw	ra,8(sp)
    5650:	df000115 	stw	fp,4(sp)
    5654:	df000104 	addi	fp,sp,4
    5658:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    565c:	e13fff17 	ldw	r4,-4(fp)
    5660:	014003c4 	movi	r5,15
    5664:	00051c80 	call	51c8 <alt_up_character_lcd_send_cmd>
}
    5668:	e037883a 	mov	sp,fp
    566c:	dfc00117 	ldw	ra,4(sp)
    5670:	df000017 	ldw	fp,0(sp)
    5674:	dec00204 	addi	sp,sp,8
    5678:	f800283a 	ret

0000567c <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    567c:	defffb04 	addi	sp,sp,-20
    5680:	dfc00415 	stw	ra,16(sp)
    5684:	df000315 	stw	fp,12(sp)
    5688:	df000304 	addi	fp,sp,12
    568c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    5690:	e0bfff17 	ldw	r2,-4(fp)
    5694:	10800a17 	ldw	r2,40(r2)
    5698:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    569c:	e13ffe17 	ldw	r4,-8(fp)
    56a0:	014007c4 	movi	r5,31
    56a4:	000d883a 	mov	r6,zero
    56a8:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    56ac:	e13ffe17 	ldw	r4,-8(fp)
    56b0:	000b883a 	mov	r5,zero
    56b4:	01800044 	movi	r6,1
    56b8:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	usleep(10);
    56bc:	01000284 	movi	r4,10
    56c0:	0008c7c0 	call	8c7c <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    56c4:	e13ffe17 	ldw	r4,-8(fp)
    56c8:	000b883a 	mov	r5,zero
    56cc:	000d883a 	mov	r6,zero
    56d0:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	usleep(1);
    56d4:	01000044 	movi	r4,1
    56d8:	0008c7c0 	call	8c7c <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    56dc:	e03ffd15 	stw	zero,-12(fp)
    56e0:	00000e06 	br	571c <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    56e4:	e0bffd17 	ldw	r2,-12(fp)
    56e8:	10800404 	addi	r2,r2,16
    56ec:	100b883a 	mov	r5,r2
    56f0:	e0fffd17 	ldw	r3,-12(fp)
    56f4:	e0bfff17 	ldw	r2,-4(fp)
    56f8:	1885883a 	add	r2,r3,r2
    56fc:	10800d04 	addi	r2,r2,52
    5700:	10800003 	ldbu	r2,0(r2)
    5704:	11803fcc 	andi	r6,r2,255
    5708:	e13ffe17 	ldw	r4,-8(fp)
    570c:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    5710:	e0bffd17 	ldw	r2,-12(fp)
    5714:	10800044 	addi	r2,r2,1
    5718:	e0bffd15 	stw	r2,-12(fp)
    571c:	e0bffd17 	ldw	r2,-12(fp)
    5720:	10800190 	cmplti	r2,r2,6
    5724:	103fef1e 	bne	r2,zero,56e4 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    5728:	e13ffe17 	ldw	r4,-8(fp)
    572c:	01403f84 	movi	r5,254
    5730:	01800fc4 	movi	r6,63
    5734:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    5738:	e13ffe17 	ldw	r4,-8(fp)
    573c:	01400044 	movi	r5,1
    5740:	01800b04 	movi	r6,44
    5744:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    5748:	e13ffe17 	ldw	r4,-8(fp)
    574c:	01403fc4 	movi	r5,255
    5750:	01802004 	movi	r6,128
    5754:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    5758:	e13ffe17 	ldw	r4,-8(fp)
    575c:	01400144 	movi	r5,5
    5760:	01800e44 	movi	r6,57
    5764:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    5768:	e13ffe17 	ldw	r4,-8(fp)
    576c:	01400c04 	movi	r5,48
    5770:	018000c4 	movi	r6,3
    5774:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	return;
}
    5778:	e037883a 	mov	sp,fp
    577c:	dfc00117 	ldw	ra,4(sp)
    5780:	df000017 	ldw	fp,0(sp)
    5784:	dec00204 	addi	sp,sp,8
    5788:	f800283a 	ret

0000578c <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    578c:	defffc04 	addi	sp,sp,-16
    5790:	dfc00315 	stw	ra,12(sp)
    5794:	df000215 	stw	fp,8(sp)
    5798:	df000204 	addi	fp,sp,8
    579c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    57a0:	e13fff17 	ldw	r4,-4(fp)
    57a4:	01400074 	movhi	r5,1
    57a8:	29785304 	addi	r5,r5,-7860
    57ac:	00085b40 	call	85b4 <alt_find_dev>
    57b0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    57b4:	e0bffe17 	ldw	r2,-8(fp)
}
    57b8:	e037883a 	mov	sp,fp
    57bc:	dfc00117 	ldw	ra,4(sp)
    57c0:	df000017 	ldw	fp,0(sp)
    57c4:	dec00204 	addi	sp,sp,8
    57c8:	f800283a 	ret

000057cc <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    57cc:	defffd04 	addi	sp,sp,-12
    57d0:	df000215 	stw	fp,8(sp)
    57d4:	df000204 	addi	fp,sp,8
    57d8:	e13ffe15 	stw	r4,-8(fp)
    57dc:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    57e0:	e0bffe17 	ldw	r2,-8(fp)
    57e4:	e0ffff17 	ldw	r3,-4(fp)
    57e8:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    57ec:	e0bffe17 	ldw	r2,-8(fp)
    57f0:	10800104 	addi	r2,r2,4
    57f4:	10800037 	ldwio	r2,0(r2)
}
    57f8:	e037883a 	mov	sp,fp
    57fc:	df000017 	ldw	fp,0(sp)
    5800:	dec00104 	addi	sp,sp,4
    5804:	f800283a 	ret

00005808 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    5808:	defffc04 	addi	sp,sp,-16
    580c:	df000315 	stw	fp,12(sp)
    5810:	df000304 	addi	fp,sp,12
    5814:	e13ffd15 	stw	r4,-12(fp)
    5818:	e17ffe15 	stw	r5,-8(fp)
    581c:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    5820:	e0bffd17 	ldw	r2,-12(fp)
    5824:	e0fffe17 	ldw	r3,-8(fp)
    5828:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    582c:	e0bffd17 	ldw	r2,-12(fp)
    5830:	10800104 	addi	r2,r2,4
    5834:	e0ffff17 	ldw	r3,-4(fp)
    5838:	10c00035 	stwio	r3,0(r2)
}
    583c:	e037883a 	mov	sp,fp
    5840:	df000017 	ldw	fp,0(sp)
    5844:	dec00104 	addi	sp,sp,4
    5848:	f800283a 	ret

0000584c <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    584c:	defffa04 	addi	sp,sp,-24
    5850:	dfc00515 	stw	ra,20(sp)
    5854:	df000415 	stw	fp,16(sp)
    5858:	df000404 	addi	fp,sp,16
    585c:	e13ffe15 	stw	r4,-8(fp)
    5860:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    5864:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    5868:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    586c:	e0bfff17 	ldw	r2,-4(fp)
    5870:	11801014 	ori	r6,r2,64
    5874:	e13ffe17 	ldw	r4,-8(fp)
    5878:	01400304 	movi	r5,12
    587c:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    5880:	e13ffe17 	ldw	r4,-8(fp)
    5884:	014002c4 	movi	r5,11
    5888:	01800304 	movi	r6,12
    588c:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    5890:	01000044 	movi	r4,1
    5894:	0008c7c0 	call	8c7c <usleep>
		timeout++;
    5898:	e0bffc17 	ldw	r2,-16(fp)
    589c:	10800044 	addi	r2,r2,1
    58a0:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    58a4:	e0bffc17 	ldw	r2,-16(fp)
    58a8:	10800ca8 	cmpgeui	r2,r2,50
    58ac:	1000071e 	bne	r2,zero,58cc <alt_up_ethernet_phy_reg_read+0x80>
    58b0:	e13ffe17 	ldw	r4,-8(fp)
    58b4:	014002c4 	movi	r5,11
    58b8:	00057cc0 	call	57cc <alt_up_ethernet_reg_read>
    58bc:	1080004c 	andi	r2,r2,1
    58c0:	10803fcc 	andi	r2,r2,255
    58c4:	1004c03a 	cmpne	r2,r2,zero
    58c8:	103ff11e 	bne	r2,zero,5890 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    58cc:	01000044 	movi	r4,1
    58d0:	0008c7c0 	call	8c7c <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    58d4:	e13ffe17 	ldw	r4,-8(fp)
    58d8:	014002c4 	movi	r5,11
    58dc:	01800204 	movi	r6,8
    58e0:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    58e4:	e13ffe17 	ldw	r4,-8(fp)
    58e8:	01400384 	movi	r5,14
    58ec:	00057cc0 	call	57cc <alt_up_ethernet_reg_read>
    58f0:	1004923a 	slli	r2,r2,8
    58f4:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    58f8:	e13ffe17 	ldw	r4,-8(fp)
    58fc:	01400344 	movi	r5,13
    5900:	00057cc0 	call	57cc <alt_up_ethernet_reg_read>
    5904:	1007883a 	mov	r3,r2
    5908:	e0bffd17 	ldw	r2,-12(fp)
    590c:	10c4b03a 	or	r2,r2,r3
    5910:	e0bffd15 	stw	r2,-12(fp)

	return result;
    5914:	e0bffd17 	ldw	r2,-12(fp)
}
    5918:	e037883a 	mov	sp,fp
    591c:	dfc00117 	ldw	ra,4(sp)
    5920:	df000017 	ldw	fp,0(sp)
    5924:	dec00204 	addi	sp,sp,8
    5928:	f800283a 	ret

0000592c <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    592c:	defffa04 	addi	sp,sp,-24
    5930:	dfc00515 	stw	ra,20(sp)
    5934:	df000415 	stw	fp,16(sp)
    5938:	df000404 	addi	fp,sp,16
    593c:	e13ffd15 	stw	r4,-12(fp)
    5940:	e17ffe15 	stw	r5,-8(fp)
    5944:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    5948:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    594c:	e0bffe17 	ldw	r2,-8(fp)
    5950:	11801014 	ori	r6,r2,64
    5954:	e13ffd17 	ldw	r4,-12(fp)
    5958:	01400304 	movi	r5,12
    595c:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    5960:	e0bfff17 	ldw	r2,-4(fp)
    5964:	1004d23a 	srli	r2,r2,8
    5968:	11803fcc 	andi	r6,r2,255
    596c:	e13ffd17 	ldw	r4,-12(fp)
    5970:	01400384 	movi	r5,14
    5974:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    5978:	e0bfff17 	ldw	r2,-4(fp)
    597c:	11803fcc 	andi	r6,r2,255
    5980:	e13ffd17 	ldw	r4,-12(fp)
    5984:	01400344 	movi	r5,13
    5988:	00058080 	call	5808 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    598c:	e13ffd17 	ldw	r4,-12(fp)
    5990:	014002c4 	movi	r5,11
    5994:	01800284 	movi	r6,10
    5998:	00058080 	call	5808 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    599c:	01000044 	movi	r4,1
    59a0:	0008c7c0 	call	8c7c <usleep>
		timeout++;
    59a4:	e0bffc17 	ldw	r2,-16(fp)
    59a8:	10800044 	addi	r2,r2,1
    59ac:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    59b0:	e0bffc17 	ldw	r2,-16(fp)
    59b4:	10800ca8 	cmpgeui	r2,r2,50
    59b8:	1000071e 	bne	r2,zero,59d8 <alt_up_ethernet_phy_reg_write+0xac>
    59bc:	e13ffd17 	ldw	r4,-12(fp)
    59c0:	014002c4 	movi	r5,11
    59c4:	00057cc0 	call	57cc <alt_up_ethernet_reg_read>
    59c8:	1080004c 	andi	r2,r2,1
    59cc:	10803fcc 	andi	r2,r2,255
    59d0:	1004c03a 	cmpne	r2,r2,zero
    59d4:	103ff11e 	bne	r2,zero,599c <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    59d8:	01000044 	movi	r4,1
    59dc:	0008c7c0 	call	8c7c <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    59e0:	e13ffd17 	ldw	r4,-12(fp)
    59e4:	014002c4 	movi	r5,11
    59e8:	01800204 	movi	r6,8
    59ec:	00058080 	call	5808 <alt_up_ethernet_reg_write>
}
    59f0:	e037883a 	mov	sp,fp
    59f4:	dfc00117 	ldw	ra,4(sp)
    59f8:	df000017 	ldw	fp,0(sp)
    59fc:	dec00204 	addi	sp,sp,8
    5a00:	f800283a 	ret

00005a04 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    5a04:	defffd04 	addi	sp,sp,-12
    5a08:	df000215 	stw	fp,8(sp)
    5a0c:	df000204 	addi	fp,sp,8
    5a10:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5a14:	e0bfff17 	ldw	r2,-4(fp)
    5a18:	10800a17 	ldw	r2,40(r2)
    5a1c:	10800104 	addi	r2,r2,4
    5a20:	10800037 	ldwio	r2,0(r2)
    5a24:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    5a28:	e0bffe17 	ldw	r2,-8(fp)
    5a2c:	10800054 	ori	r2,r2,1
    5a30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    5a34:	e0bfff17 	ldw	r2,-4(fp)
    5a38:	10800a17 	ldw	r2,40(r2)
    5a3c:	10800104 	addi	r2,r2,4
    5a40:	e0fffe17 	ldw	r3,-8(fp)
    5a44:	10c00035 	stwio	r3,0(r2)
}
    5a48:	e037883a 	mov	sp,fp
    5a4c:	df000017 	ldw	fp,0(sp)
    5a50:	dec00104 	addi	sp,sp,4
    5a54:	f800283a 	ret

00005a58 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    5a58:	defffd04 	addi	sp,sp,-12
    5a5c:	df000215 	stw	fp,8(sp)
    5a60:	df000204 	addi	fp,sp,8
    5a64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5a68:	e0bfff17 	ldw	r2,-4(fp)
    5a6c:	10800a17 	ldw	r2,40(r2)
    5a70:	10800104 	addi	r2,r2,4
    5a74:	10800037 	ldwio	r2,0(r2)
    5a78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    5a7c:	e0fffe17 	ldw	r3,-8(fp)
    5a80:	00bfff84 	movi	r2,-2
    5a84:	1884703a 	and	r2,r3,r2
    5a88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    5a8c:	e0bfff17 	ldw	r2,-4(fp)
    5a90:	10800a17 	ldw	r2,40(r2)
    5a94:	10800104 	addi	r2,r2,4
    5a98:	e0fffe17 	ldw	r3,-8(fp)
    5a9c:	10c00035 	stwio	r3,0(r2)
}
    5aa0:	e037883a 	mov	sp,fp
    5aa4:	df000017 	ldw	fp,0(sp)
    5aa8:	dec00104 	addi	sp,sp,4
    5aac:	f800283a 	ret

00005ab0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    5ab0:	defffd04 	addi	sp,sp,-12
    5ab4:	df000215 	stw	fp,8(sp)
    5ab8:	df000204 	addi	fp,sp,8
    5abc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    5ac0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    5ac4:	e0bfff17 	ldw	r2,-4(fp)
    5ac8:	10800a17 	ldw	r2,40(r2)
    5acc:	10800084 	addi	r2,r2,2
    5ad0:	1080002b 	ldhuio	r2,0(r2)
    5ad4:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    5ad8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5adc:	e037883a 	mov	sp,fp
    5ae0:	df000017 	ldw	fp,0(sp)
    5ae4:	dec00104 	addi	sp,sp,4
    5ae8:	f800283a 	ret

00005aec <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    5aec:	defffd04 	addi	sp,sp,-12
    5af0:	df000215 	stw	fp,8(sp)
    5af4:	df000204 	addi	fp,sp,8
    5af8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5afc:	e0bfff17 	ldw	r2,-4(fp)
    5b00:	10800a17 	ldw	r2,40(r2)
    5b04:	10800104 	addi	r2,r2,4
    5b08:	10800037 	ldwio	r2,0(r2)
    5b0c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    5b10:	e0bffe17 	ldw	r2,-8(fp)
    5b14:	10bfffec 	andhi	r2,r2,65535
    5b18:	1004d43a 	srli	r2,r2,16
}
    5b1c:	e037883a 	mov	sp,fp
    5b20:	df000017 	ldw	fp,0(sp)
    5b24:	dec00104 	addi	sp,sp,4
    5b28:	f800283a 	ret

00005b2c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    5b2c:	defffc04 	addi	sp,sp,-16
    5b30:	df000315 	stw	fp,12(sp)
    5b34:	df000304 	addi	fp,sp,12
    5b38:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    5b3c:	e0bffe17 	ldw	r2,-8(fp)
    5b40:	1080800c 	andi	r2,r2,512
    5b44:	1004d27a 	srli	r2,r2,9
    5b48:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    5b4c:	e0bffd17 	ldw	r2,-12(fp)
    5b50:	1005003a 	cmpeq	r2,r2,zero
    5b54:	1000031e 	bne	r2,zero,5b64 <alt_up_irda_check_parity+0x38>
    5b58:	00bfffc4 	movi	r2,-1
    5b5c:	e0bfff15 	stw	r2,-4(fp)
    5b60:	00000106 	br	5b68 <alt_up_irda_check_parity+0x3c>
    5b64:	e03fff15 	stw	zero,-4(fp)
    5b68:	e0bfff17 	ldw	r2,-4(fp)
}
    5b6c:	e037883a 	mov	sp,fp
    5b70:	df000017 	ldw	fp,0(sp)
    5b74:	dec00104 	addi	sp,sp,4
    5b78:	f800283a 	ret

00005b7c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    5b7c:	defffc04 	addi	sp,sp,-16
    5b80:	df000315 	stw	fp,12(sp)
    5b84:	df000304 	addi	fp,sp,12
    5b88:	e13ffe15 	stw	r4,-8(fp)
    5b8c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    5b90:	e0bffe17 	ldw	r2,-8(fp)
    5b94:	10800a17 	ldw	r2,40(r2)
    5b98:	10800037 	ldwio	r2,0(r2)
    5b9c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    5ba0:	e0bffe17 	ldw	r2,-8(fp)
    5ba4:	10800a17 	ldw	r2,40(r2)
    5ba8:	e0ffff03 	ldbu	r3,-4(fp)
    5bac:	10c00035 	stwio	r3,0(r2)
	return 0;
    5bb0:	0005883a 	mov	r2,zero
}
    5bb4:	e037883a 	mov	sp,fp
    5bb8:	df000017 	ldw	fp,0(sp)
    5bbc:	dec00104 	addi	sp,sp,4
    5bc0:	f800283a 	ret

00005bc4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    5bc4:	defffa04 	addi	sp,sp,-24
    5bc8:	dfc00515 	stw	ra,20(sp)
    5bcc:	df000415 	stw	fp,16(sp)
    5bd0:	df000404 	addi	fp,sp,16
    5bd4:	e13ffd15 	stw	r4,-12(fp)
    5bd8:	e17ffe15 	stw	r5,-8(fp)
    5bdc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    5be0:	e0bffd17 	ldw	r2,-12(fp)
    5be4:	10800a17 	ldw	r2,40(r2)
    5be8:	10800037 	ldwio	r2,0(r2)
    5bec:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    5bf0:	e0bffc17 	ldw	r2,-16(fp)
    5bf4:	1007883a 	mov	r3,r2
    5bf8:	e0bffe17 	ldw	r2,-8(fp)
    5bfc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    5c00:	e13ffc17 	ldw	r4,-16(fp)
    5c04:	0005b2c0 	call	5b2c <alt_up_irda_check_parity>
    5c08:	1007883a 	mov	r3,r2
    5c0c:	e0bfff17 	ldw	r2,-4(fp)
    5c10:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    5c14:	e0bffc17 	ldw	r2,-16(fp)
    5c18:	10a0000c 	andi	r2,r2,32768
    5c1c:	1004d3fa 	srli	r2,r2,15
    5c20:	10bfffc4 	addi	r2,r2,-1
}
    5c24:	e037883a 	mov	sp,fp
    5c28:	dfc00117 	ldw	ra,4(sp)
    5c2c:	df000017 	ldw	fp,0(sp)
    5c30:	dec00204 	addi	sp,sp,8
    5c34:	f800283a 	ret

00005c38 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    5c38:	defff804 	addi	sp,sp,-32
    5c3c:	dfc00715 	stw	ra,28(sp)
    5c40:	df000615 	stw	fp,24(sp)
    5c44:	df000604 	addi	fp,sp,24
    5c48:	e13ffd15 	stw	r4,-12(fp)
    5c4c:	e17ffe15 	stw	r5,-8(fp)
    5c50:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5c54:	e0bffd17 	ldw	r2,-12(fp)
    5c58:	10800017 	ldw	r2,0(r2)
    5c5c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    5c60:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    5c64:	00000c06 	br	5c98 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    5c68:	e17ffe17 	ldw	r5,-8(fp)
    5c6c:	e0bffe17 	ldw	r2,-8(fp)
    5c70:	10800044 	addi	r2,r2,1
    5c74:	e0bffe15 	stw	r2,-8(fp)
    5c78:	e1bffc04 	addi	r6,fp,-16
    5c7c:	e13ffb17 	ldw	r4,-20(fp)
    5c80:	0005bc40 	call	5bc4 <alt_up_irda_read_data>
    5c84:	1004c03a 	cmpne	r2,r2,zero
    5c88:	1000091e 	bne	r2,zero,5cb0 <alt_up_irda_read_fd+0x78>
			count++;
    5c8c:	e0bffa17 	ldw	r2,-24(fp)
    5c90:	10800044 	addi	r2,r2,1
    5c94:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5c98:	e0bfff17 	ldw	r2,-4(fp)
    5c9c:	10bfffc4 	addi	r2,r2,-1
    5ca0:	e0bfff15 	stw	r2,-4(fp)
    5ca4:	e0bfff17 	ldw	r2,-4(fp)
    5ca8:	10bfffd8 	cmpnei	r2,r2,-1
    5cac:	103fee1e 	bne	r2,zero,5c68 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    5cb0:	e0bffa17 	ldw	r2,-24(fp)
}
    5cb4:	e037883a 	mov	sp,fp
    5cb8:	dfc00117 	ldw	ra,4(sp)
    5cbc:	df000017 	ldw	fp,0(sp)
    5cc0:	dec00204 	addi	sp,sp,8
    5cc4:	f800283a 	ret

00005cc8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    5cc8:	defff904 	addi	sp,sp,-28
    5ccc:	dfc00615 	stw	ra,24(sp)
    5cd0:	df000515 	stw	fp,20(sp)
    5cd4:	df000504 	addi	fp,sp,20
    5cd8:	e13ffd15 	stw	r4,-12(fp)
    5cdc:	e17ffe15 	stw	r5,-8(fp)
    5ce0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5ce4:	e0bffd17 	ldw	r2,-12(fp)
    5ce8:	10800017 	ldw	r2,0(r2)
    5cec:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    5cf0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    5cf4:	00000c06 	br	5d28 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    5cf8:	e0bffe17 	ldw	r2,-8(fp)
    5cfc:	11403fcc 	andi	r5,r2,255
    5d00:	e0bffe17 	ldw	r2,-8(fp)
    5d04:	10800044 	addi	r2,r2,1
    5d08:	e0bffe15 	stw	r2,-8(fp)
    5d0c:	e13ffc17 	ldw	r4,-16(fp)
    5d10:	0005b7c0 	call	5b7c <alt_up_irda_write_data>
    5d14:	1004c03a 	cmpne	r2,r2,zero
    5d18:	1000091e 	bne	r2,zero,5d40 <alt_up_irda_write_fd+0x78>
			count++;
    5d1c:	e0bffb17 	ldw	r2,-20(fp)
    5d20:	10800044 	addi	r2,r2,1
    5d24:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    5d28:	e0bfff17 	ldw	r2,-4(fp)
    5d2c:	10bfffc4 	addi	r2,r2,-1
    5d30:	e0bfff15 	stw	r2,-4(fp)
    5d34:	e0bfff17 	ldw	r2,-4(fp)
    5d38:	10bfffd8 	cmpnei	r2,r2,-1
    5d3c:	103fee1e 	bne	r2,zero,5cf8 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    5d40:	e0bffb17 	ldw	r2,-20(fp)
}
    5d44:	e037883a 	mov	sp,fp
    5d48:	dfc00117 	ldw	ra,4(sp)
    5d4c:	df000017 	ldw	fp,0(sp)
    5d50:	dec00204 	addi	sp,sp,8
    5d54:	f800283a 	ret

00005d58 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    5d58:	defffc04 	addi	sp,sp,-16
    5d5c:	dfc00315 	stw	ra,12(sp)
    5d60:	df000215 	stw	fp,8(sp)
    5d64:	df000204 	addi	fp,sp,8
    5d68:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    5d6c:	e13fff17 	ldw	r4,-4(fp)
    5d70:	01400074 	movhi	r5,1
    5d74:	29785304 	addi	r5,r5,-7860
    5d78:	00085b40 	call	85b4 <alt_find_dev>
    5d7c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5d80:	e0bffe17 	ldw	r2,-8(fp)
}
    5d84:	e037883a 	mov	sp,fp
    5d88:	dfc00117 	ldw	ra,4(sp)
    5d8c:	df000017 	ldw	fp,0(sp)
    5d90:	dec00204 	addi	sp,sp,8
    5d94:	f800283a 	ret

00005d98 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    5d98:	defffc04 	addi	sp,sp,-16
    5d9c:	dfc00315 	stw	ra,12(sp)
    5da0:	df000215 	stw	fp,8(sp)
    5da4:	df000204 	addi	fp,sp,8
    5da8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    5dac:	e13fff17 	ldw	r4,-4(fp)
    5db0:	01400074 	movhi	r5,1
    5db4:	29785304 	addi	r5,r5,-7860
    5db8:	00085b40 	call	85b4 <alt_find_dev>
    5dbc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5dc0:	e0bffe17 	ldw	r2,-8(fp)
}
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	dfc00117 	ldw	ra,4(sp)
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00204 	addi	sp,sp,8
    5dd4:	f800283a 	ret

00005dd8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    5dd8:	defffd04 	addi	sp,sp,-12
    5ddc:	df000215 	stw	fp,8(sp)
    5de0:	df000204 	addi	fp,sp,8
    5de4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    5de8:	e0bfff17 	ldw	r2,-4(fp)
    5dec:	1080400c 	andi	r2,r2,256
    5df0:	1004d23a 	srli	r2,r2,8
    5df4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    5df8:	e0bffe03 	ldbu	r2,-8(fp)
}
    5dfc:	e037883a 	mov	sp,fp
    5e00:	df000017 	ldw	fp,0(sp)
    5e04:	dec00104 	addi	sp,sp,4
    5e08:	f800283a 	ret

00005e0c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    5e0c:	defffd04 	addi	sp,sp,-12
    5e10:	df000215 	stw	fp,8(sp)
    5e14:	df000204 	addi	fp,sp,8
    5e18:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    5e1c:	e0bfff17 	ldw	r2,-4(fp)
    5e20:	1080004c 	andi	r2,r2,1
    5e24:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5e28:	e0bffe03 	ldbu	r2,-8(fp)
}
    5e2c:	e037883a 	mov	sp,fp
    5e30:	df000017 	ldw	fp,0(sp)
    5e34:	dec00104 	addi	sp,sp,4
    5e38:	f800283a 	ret

00005e3c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    5e3c:	defffd04 	addi	sp,sp,-12
    5e40:	df000215 	stw	fp,8(sp)
    5e44:	df000204 	addi	fp,sp,8
    5e48:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    5e4c:	e0bfff17 	ldw	r2,-4(fp)
    5e50:	1081000c 	andi	r2,r2,1024
    5e54:	1004d2ba 	srli	r2,r2,10
    5e58:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5e5c:	e0bffe03 	ldbu	r2,-8(fp)
}
    5e60:	e037883a 	mov	sp,fp
    5e64:	df000017 	ldw	fp,0(sp)
    5e68:	dec00104 	addi	sp,sp,4
    5e6c:	f800283a 	ret

00005e70 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    5e70:	defffd04 	addi	sp,sp,-12
    5e74:	df000215 	stw	fp,8(sp)
    5e78:	df000204 	addi	fp,sp,8
    5e7c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    5e80:	e0bfff17 	ldw	r2,-4(fp)
    5e84:	10bfffec 	andhi	r2,r2,65535
    5e88:	1004d43a 	srli	r2,r2,16
    5e8c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    5e90:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5e94:	e037883a 	mov	sp,fp
    5e98:	df000017 	ldw	fp,0(sp)
    5e9c:	dec00104 	addi	sp,sp,4
    5ea0:	f800283a 	ret

00005ea4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    5ea4:	defffd04 	addi	sp,sp,-12
    5ea8:	df000215 	stw	fp,8(sp)
    5eac:	df000204 	addi	fp,sp,8
    5eb0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    5eb4:	e0bfff17 	ldw	r2,-4(fp)
    5eb8:	10a0000c 	andi	r2,r2,32768
    5ebc:	1004d3fa 	srli	r2,r2,15
    5ec0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    5ec4:	e0bffe03 	ldbu	r2,-8(fp)
}
    5ec8:	e037883a 	mov	sp,fp
    5ecc:	df000017 	ldw	fp,0(sp)
    5ed0:	dec00104 	addi	sp,sp,4
    5ed4:	f800283a 	ret

00005ed8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    5ed8:	defffd04 	addi	sp,sp,-12
    5edc:	df000215 	stw	fp,8(sp)
    5ee0:	df000204 	addi	fp,sp,8
    5ee4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    5ee8:	e0bfff17 	ldw	r2,-4(fp)
    5eec:	e0bffe05 	stb	r2,-8(fp)
	return data;
    5ef0:	e0bffe03 	ldbu	r2,-8(fp)
}
    5ef4:	e037883a 	mov	sp,fp
    5ef8:	df000017 	ldw	fp,0(sp)
    5efc:	dec00104 	addi	sp,sp,4
    5f00:	f800283a 	ret

00005f04 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    5f04:	defffb04 	addi	sp,sp,-20
    5f08:	dfc00415 	stw	ra,16(sp)
    5f0c:	df000315 	stw	fp,12(sp)
    5f10:	df000304 	addi	fp,sp,12
    5f14:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    5f18:	e13fff17 	ldw	r4,-4(fp)
    5f1c:	01403fc4 	movi	r5,255
    5f20:	00061640 	call	6164 <alt_up_ps2_write_data_byte_with_ack>
    5f24:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    5f28:	e0bffd17 	ldw	r2,-12(fp)
    5f2c:	1004c03a 	cmpne	r2,r2,zero
    5f30:	1000221e 	bne	r2,zero,5fbc <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5f34:	e17ffe04 	addi	r5,fp,-8
    5f38:	e13fff17 	ldw	r4,-4(fp)
    5f3c:	00061d00 	call	61d0 <alt_up_ps2_read_data_byte_timeout>
    5f40:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    5f44:	e0bffd17 	ldw	r2,-12(fp)
    5f48:	1004c03a 	cmpne	r2,r2,zero
    5f4c:	10001b1e 	bne	r2,zero,5fbc <alt_up_ps2_init+0xb8>
    5f50:	e0bffe03 	ldbu	r2,-8(fp)
    5f54:	10803fcc 	andi	r2,r2,255
    5f58:	10802a98 	cmpnei	r2,r2,170
    5f5c:	1000171e 	bne	r2,zero,5fbc <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5f60:	e17ffe04 	addi	r5,fp,-8
    5f64:	e13fff17 	ldw	r4,-4(fp)
    5f68:	00061d00 	call	61d0 <alt_up_ps2_read_data_byte_timeout>
    5f6c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    5f70:	e0bffd17 	ldw	r2,-12(fp)
    5f74:	10bfe318 	cmpnei	r2,r2,-116
    5f78:	1000041e 	bne	r2,zero,5f8c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    5f7c:	e0ffff17 	ldw	r3,-4(fp)
    5f80:	00800044 	movi	r2,1
    5f84:	18800d15 	stw	r2,52(r3)
    5f88:	00000c06 	br	5fbc <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    5f8c:	e0bffd17 	ldw	r2,-12(fp)
    5f90:	1004c03a 	cmpne	r2,r2,zero
    5f94:	1000091e 	bne	r2,zero,5fbc <alt_up_ps2_init+0xb8>
    5f98:	e0bffe03 	ldbu	r2,-8(fp)
    5f9c:	10803fcc 	andi	r2,r2,255
    5fa0:	1004c03a 	cmpne	r2,r2,zero
    5fa4:	1000051e 	bne	r2,zero,5fbc <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    5fa8:	e0bfff17 	ldw	r2,-4(fp)
    5fac:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    5fb0:	e13fff17 	ldw	r4,-4(fp)
    5fb4:	01403d04 	movi	r5,244
    5fb8:	000607c0 	call	607c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    5fbc:	e037883a 	mov	sp,fp
    5fc0:	dfc00117 	ldw	ra,4(sp)
    5fc4:	df000017 	ldw	fp,0(sp)
    5fc8:	dec00204 	addi	sp,sp,8
    5fcc:	f800283a 	ret

00005fd0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    5fd0:	defffd04 	addi	sp,sp,-12
    5fd4:	df000215 	stw	fp,8(sp)
    5fd8:	df000204 	addi	fp,sp,8
    5fdc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    5fe0:	e0bfff17 	ldw	r2,-4(fp)
    5fe4:	10800a17 	ldw	r2,40(r2)
    5fe8:	10800104 	addi	r2,r2,4
    5fec:	10800037 	ldwio	r2,0(r2)
    5ff0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    5ff4:	e0bffe17 	ldw	r2,-8(fp)
    5ff8:	10800054 	ori	r2,r2,1
    5ffc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    6000:	e0bfff17 	ldw	r2,-4(fp)
    6004:	10800a17 	ldw	r2,40(r2)
    6008:	10800104 	addi	r2,r2,4
    600c:	e0fffe17 	ldw	r3,-8(fp)
    6010:	10c00035 	stwio	r3,0(r2)
}
    6014:	e037883a 	mov	sp,fp
    6018:	df000017 	ldw	fp,0(sp)
    601c:	dec00104 	addi	sp,sp,4
    6020:	f800283a 	ret

00006024 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    6024:	defffd04 	addi	sp,sp,-12
    6028:	df000215 	stw	fp,8(sp)
    602c:	df000204 	addi	fp,sp,8
    6030:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    6034:	e0bfff17 	ldw	r2,-4(fp)
    6038:	10800a17 	ldw	r2,40(r2)
    603c:	10800104 	addi	r2,r2,4
    6040:	10800037 	ldwio	r2,0(r2)
    6044:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    6048:	e0fffe17 	ldw	r3,-8(fp)
    604c:	00bfff84 	movi	r2,-2
    6050:	1884703a 	and	r2,r3,r2
    6054:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    6058:	e0bfff17 	ldw	r2,-4(fp)
    605c:	10800a17 	ldw	r2,40(r2)
    6060:	10800104 	addi	r2,r2,4
    6064:	e0fffe17 	ldw	r3,-8(fp)
    6068:	10c00035 	stwio	r3,0(r2)
}
    606c:	e037883a 	mov	sp,fp
    6070:	df000017 	ldw	fp,0(sp)
    6074:	dec00104 	addi	sp,sp,4
    6078:	f800283a 	ret

0000607c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    607c:	defffa04 	addi	sp,sp,-24
    6080:	dfc00515 	stw	ra,20(sp)
    6084:	df000415 	stw	fp,16(sp)
    6088:	df000404 	addi	fp,sp,16
    608c:	e13ffd15 	stw	r4,-12(fp)
    6090:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    6094:	e0bffd17 	ldw	r2,-12(fp)
    6098:	10800a17 	ldw	r2,40(r2)
    609c:	e0fffe03 	ldbu	r3,-8(fp)
    60a0:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    60a4:	e0bffd17 	ldw	r2,-12(fp)
    60a8:	10800a17 	ldw	r2,40(r2)
    60ac:	10800104 	addi	r2,r2,4
    60b0:	10800037 	ldwio	r2,0(r2)
    60b4:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    60b8:	e13ffc17 	ldw	r4,-16(fp)
    60bc:	0005e3c0 	call	5e3c <read_CE_bit>
    60c0:	10803fcc 	andi	r2,r2,255
    60c4:	1005003a 	cmpeq	r2,r2,zero
    60c8:	1000031e 	bne	r2,zero,60d8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    60cc:	00bffec4 	movi	r2,-5
    60d0:	e0bfff15 	stw	r2,-4(fp)
    60d4:	00000106 	br	60dc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    60d8:	e03fff15 	stw	zero,-4(fp)
    60dc:	e0bfff17 	ldw	r2,-4(fp)
}
    60e0:	e037883a 	mov	sp,fp
    60e4:	dfc00117 	ldw	ra,4(sp)
    60e8:	df000017 	ldw	fp,0(sp)
    60ec:	dec00204 	addi	sp,sp,8
    60f0:	f800283a 	ret

000060f4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    60f4:	defffb04 	addi	sp,sp,-20
    60f8:	dfc00415 	stw	ra,16(sp)
    60fc:	df000315 	stw	fp,12(sp)
    6100:	df000304 	addi	fp,sp,12
    6104:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    6108:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    610c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    6110:	e17ffd44 	addi	r5,fp,-11
    6114:	e13ffe17 	ldw	r4,-8(fp)
    6118:	00061d00 	call	61d0 <alt_up_ps2_read_data_byte_timeout>
    611c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    6120:	e0bffd03 	ldbu	r2,-12(fp)
    6124:	1004c03a 	cmpne	r2,r2,zero
    6128:	1000061e 	bne	r2,zero,6144 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    612c:	e0bffd43 	ldbu	r2,-11(fp)
    6130:	10803fcc 	andi	r2,r2,255
    6134:	10803e98 	cmpnei	r2,r2,250
    6138:	103ff51e 	bne	r2,zero,6110 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    613c:	e03fff15 	stw	zero,-4(fp)
    6140:	00000206 	br	614c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    6144:	e0bffd03 	ldbu	r2,-12(fp)
    6148:	e0bfff15 	stw	r2,-4(fp)
    614c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    6150:	e037883a 	mov	sp,fp
    6154:	dfc00117 	ldw	ra,4(sp)
    6158:	df000017 	ldw	fp,0(sp)
    615c:	dec00204 	addi	sp,sp,8
    6160:	f800283a 	ret

00006164 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    6164:	defff904 	addi	sp,sp,-28
    6168:	dfc00615 	stw	ra,24(sp)
    616c:	df000515 	stw	fp,20(sp)
    6170:	df000504 	addi	fp,sp,20
    6174:	e13ffd15 	stw	r4,-12(fp)
    6178:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    617c:	e17ffe03 	ldbu	r5,-8(fp)
    6180:	e13ffd17 	ldw	r4,-12(fp)
    6184:	000607c0 	call	607c <alt_up_ps2_write_data_byte>
    6188:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    618c:	e0bffc17 	ldw	r2,-16(fp)
    6190:	1005003a 	cmpeq	r2,r2,zero
    6194:	1000031e 	bne	r2,zero,61a4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    6198:	e0bffc17 	ldw	r2,-16(fp)
    619c:	e0bfff15 	stw	r2,-4(fp)
    61a0:	00000506 	br	61b8 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    61a4:	e13ffd17 	ldw	r4,-12(fp)
    61a8:	00060f40 	call	60f4 <alt_up_ps2_wait_for_ack>
    61ac:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    61b0:	e0bffb17 	ldw	r2,-20(fp)
    61b4:	e0bfff15 	stw	r2,-4(fp)
    61b8:	e0bfff17 	ldw	r2,-4(fp)
}
    61bc:	e037883a 	mov	sp,fp
    61c0:	dfc00117 	ldw	ra,4(sp)
    61c4:	df000017 	ldw	fp,0(sp)
    61c8:	dec00204 	addi	sp,sp,8
    61cc:	f800283a 	ret

000061d0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    61d0:	defff904 	addi	sp,sp,-28
    61d4:	dfc00615 	stw	ra,24(sp)
    61d8:	df000515 	stw	fp,20(sp)
    61dc:	df000504 	addi	fp,sp,20
    61e0:	e13ffd15 	stw	r4,-12(fp)
    61e4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    61e8:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    61ec:	e03ffb15 	stw	zero,-20(fp)
    61f0:	00000006 	br	61f4 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    61f4:	e0bffb17 	ldw	r2,-20(fp)
    61f8:	10800044 	addi	r2,r2,1
    61fc:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6200:	e0bffd17 	ldw	r2,-12(fp)
    6204:	10800a17 	ldw	r2,40(r2)
    6208:	10800037 	ldwio	r2,0(r2)
    620c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    6210:	e13ffc17 	ldw	r4,-16(fp)
    6214:	0005ea40 	call	5ea4 <read_data_valid>
    6218:	10803fcc 	andi	r2,r2,255
    621c:	1005003a 	cmpeq	r2,r2,zero
    6220:	1000071e 	bne	r2,zero,6240 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    6224:	e13ffc17 	ldw	r4,-16(fp)
    6228:	0005ed80 	call	5ed8 <read_data_byte>
    622c:	1007883a 	mov	r3,r2
    6230:	e0bffe17 	ldw	r2,-8(fp)
    6234:	10c00005 	stb	r3,0(r2)
			return 0;
    6238:	e03fff15 	stw	zero,-4(fp)
    623c:	00000a06 	br	6268 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    6240:	e0bffd17 	ldw	r2,-12(fp)
    6244:	10800c17 	ldw	r2,48(r2)
    6248:	1005003a 	cmpeq	r2,r2,zero
    624c:	103fe91e 	bne	r2,zero,61f4 <alt_up_ps2_read_data_byte_timeout+0x24>
    6250:	e0bffd17 	ldw	r2,-12(fp)
    6254:	10c00c17 	ldw	r3,48(r2)
    6258:	e0bffb17 	ldw	r2,-20(fp)
    625c:	18bfe52e 	bgeu	r3,r2,61f4 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    6260:	00bfe304 	movi	r2,-116
    6264:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    6268:	e0bfff17 	ldw	r2,-4(fp)
}
    626c:	e037883a 	mov	sp,fp
    6270:	dfc00117 	ldw	ra,4(sp)
    6274:	df000017 	ldw	fp,0(sp)
    6278:	dec00204 	addi	sp,sp,8
    627c:	f800283a 	ret

00006280 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    6280:	defffa04 	addi	sp,sp,-24
    6284:	dfc00515 	stw	ra,20(sp)
    6288:	df000415 	stw	fp,16(sp)
    628c:	df000404 	addi	fp,sp,16
    6290:	e13ffd15 	stw	r4,-12(fp)
    6294:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    6298:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    629c:	e0bffd17 	ldw	r2,-12(fp)
    62a0:	10800a17 	ldw	r2,40(r2)
    62a4:	10800037 	ldwio	r2,0(r2)
    62a8:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    62ac:	e13ffc17 	ldw	r4,-16(fp)
    62b0:	0005ea40 	call	5ea4 <read_data_valid>
    62b4:	10803fcc 	andi	r2,r2,255
    62b8:	1005003a 	cmpeq	r2,r2,zero
    62bc:	1000071e 	bne	r2,zero,62dc <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    62c0:	e13ffc17 	ldw	r4,-16(fp)
    62c4:	0005ed80 	call	5ed8 <read_data_byte>
    62c8:	1007883a 	mov	r3,r2
    62cc:	e0bffe17 	ldw	r2,-8(fp)
    62d0:	10c00005 	stb	r3,0(r2)
		return 0;
    62d4:	e03fff15 	stw	zero,-4(fp)
    62d8:	00000206 	br	62e4 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    62dc:	00bfffc4 	movi	r2,-1
    62e0:	e0bfff15 	stw	r2,-4(fp)
    62e4:	e0bfff17 	ldw	r2,-4(fp)
}
    62e8:	e037883a 	mov	sp,fp
    62ec:	dfc00117 	ldw	ra,4(sp)
    62f0:	df000017 	ldw	fp,0(sp)
    62f4:	dec00204 	addi	sp,sp,8
    62f8:	f800283a 	ret

000062fc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    62fc:	defffb04 	addi	sp,sp,-20
    6300:	dfc00415 	stw	ra,16(sp)
    6304:	df000315 	stw	fp,12(sp)
    6308:	df000304 	addi	fp,sp,12
    630c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    6310:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    6314:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6318:	e0bfff17 	ldw	r2,-4(fp)
    631c:	10800a17 	ldw	r2,40(r2)
    6320:	10800037 	ldwio	r2,0(r2)
    6324:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    6328:	e13ffd17 	ldw	r4,-12(fp)
    632c:	0005e700 	call	5e70 <read_num_bytes_available>
    6330:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    6334:	e0bffe0b 	ldhu	r2,-8(fp)
    6338:	1004c03a 	cmpne	r2,r2,zero
    633c:	103ff61e 	bne	r2,zero,6318 <alt_up_ps2_clear_fifo+0x1c>
}
    6340:	e037883a 	mov	sp,fp
    6344:	dfc00117 	ldw	ra,4(sp)
    6348:	df000017 	ldw	fp,0(sp)
    634c:	dec00204 	addi	sp,sp,8
    6350:	f800283a 	ret

00006354 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    6354:	defff704 	addi	sp,sp,-36
    6358:	dfc00815 	stw	ra,32(sp)
    635c:	df000715 	stw	fp,28(sp)
    6360:	df000704 	addi	fp,sp,28
    6364:	e13ffc15 	stw	r4,-16(fp)
    6368:	e17ffd15 	stw	r5,-12(fp)
    636c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    6370:	e0bffc17 	ldw	r2,-16(fp)
    6374:	10800017 	ldw	r2,0(r2)
    6378:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    637c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    6380:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    6384:	e0fff917 	ldw	r3,-28(fp)
    6388:	e0bffe17 	ldw	r2,-8(fp)
    638c:	18bffd16 	blt	r3,r2,6384 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    6390:	e17ffd17 	ldw	r5,-12(fp)
    6394:	e0bffd17 	ldw	r2,-12(fp)
    6398:	10800044 	addi	r2,r2,1
    639c:	e0bffd15 	stw	r2,-12(fp)
    63a0:	e13ffb17 	ldw	r4,-20(fp)
    63a4:	00061d00 	call	61d0 <alt_up_ps2_read_data_byte_timeout>
    63a8:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    63ac:	e0bffa17 	ldw	r2,-24(fp)
    63b0:	1005003a 	cmpeq	r2,r2,zero
    63b4:	1000031e 	bne	r2,zero,63c4 <alt_up_ps2_read_fd+0x70>
			return count;
    63b8:	e0bff917 	ldw	r2,-28(fp)
    63bc:	e0bfff15 	stw	r2,-4(fp)
    63c0:	00000506 	br	63d8 <alt_up_ps2_read_fd+0x84>
		count++;
    63c4:	e0bff917 	ldw	r2,-28(fp)
    63c8:	10800044 	addi	r2,r2,1
    63cc:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    63d0:	e0bff917 	ldw	r2,-28(fp)
    63d4:	e0bfff15 	stw	r2,-4(fp)
    63d8:	e0bfff17 	ldw	r2,-4(fp)
}
    63dc:	e037883a 	mov	sp,fp
    63e0:	dfc00117 	ldw	ra,4(sp)
    63e4:	df000017 	ldw	fp,0(sp)
    63e8:	dec00204 	addi	sp,sp,8
    63ec:	f800283a 	ret

000063f0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    63f0:	defff704 	addi	sp,sp,-36
    63f4:	dfc00815 	stw	ra,32(sp)
    63f8:	df000715 	stw	fp,28(sp)
    63fc:	df000704 	addi	fp,sp,28
    6400:	e13ffc15 	stw	r4,-16(fp)
    6404:	e17ffd15 	stw	r5,-12(fp)
    6408:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    640c:	e0bffc17 	ldw	r2,-16(fp)
    6410:	10800017 	ldw	r2,0(r2)
    6414:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    6418:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    641c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    6420:	00001206 	br	646c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    6424:	e0bffd17 	ldw	r2,-12(fp)
    6428:	10800003 	ldbu	r2,0(r2)
    642c:	11403fcc 	andi	r5,r2,255
    6430:	e0bffd17 	ldw	r2,-12(fp)
    6434:	10800044 	addi	r2,r2,1
    6438:	e0bffd15 	stw	r2,-12(fp)
    643c:	e13ffb17 	ldw	r4,-20(fp)
    6440:	000607c0 	call	607c <alt_up_ps2_write_data_byte>
    6444:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    6448:	e0bffa17 	ldw	r2,-24(fp)
    644c:	1005003a 	cmpeq	r2,r2,zero
    6450:	1000031e 	bne	r2,zero,6460 <alt_up_ps2_write_fd+0x70>
			return count;
    6454:	e0bff917 	ldw	r2,-28(fp)
    6458:	e0bfff15 	stw	r2,-4(fp)
    645c:	00000806 	br	6480 <alt_up_ps2_write_fd+0x90>
		count++;
    6460:	e0bff917 	ldw	r2,-28(fp)
    6464:	10800044 	addi	r2,r2,1
    6468:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    646c:	e0fff917 	ldw	r3,-28(fp)
    6470:	e0bffe17 	ldw	r2,-8(fp)
    6474:	18bfeb16 	blt	r3,r2,6424 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    6478:	e0bff917 	ldw	r2,-28(fp)
    647c:	e0bfff15 	stw	r2,-4(fp)
    6480:	e0bfff17 	ldw	r2,-4(fp)
}
    6484:	e037883a 	mov	sp,fp
    6488:	dfc00117 	ldw	ra,4(sp)
    648c:	df000017 	ldw	fp,0(sp)
    6490:	dec00204 	addi	sp,sp,8
    6494:	f800283a 	ret

00006498 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    6498:	defffc04 	addi	sp,sp,-16
    649c:	dfc00315 	stw	ra,12(sp)
    64a0:	df000215 	stw	fp,8(sp)
    64a4:	df000204 	addi	fp,sp,8
    64a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    64ac:	e13fff17 	ldw	r4,-4(fp)
    64b0:	01400074 	movhi	r5,1
    64b4:	29785304 	addi	r5,r5,-7860
    64b8:	00085b40 	call	85b4 <alt_find_dev>
    64bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    64c0:	e0bffe17 	ldw	r2,-8(fp)
}
    64c4:	e037883a 	mov	sp,fp
    64c8:	dfc00117 	ldw	ra,4(sp)
    64cc:	df000017 	ldw	fp,0(sp)
    64d0:	dec00204 	addi	sp,sp,8
    64d4:	f800283a 	ret

000064d8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    64d8:	defffd04 	addi	sp,sp,-12
    64dc:	df000215 	stw	fp,8(sp)
    64e0:	df000204 	addi	fp,sp,8
    64e4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    64e8:	e0bfff17 	ldw	r2,-4(fp)
    64ec:	10800a17 	ldw	r2,40(r2)
    64f0:	10800104 	addi	r2,r2,4
    64f4:	10800037 	ldwio	r2,0(r2)
    64f8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    64fc:	e0bffe17 	ldw	r2,-8(fp)
    6500:	10800054 	ori	r2,r2,1
    6504:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    6508:	e0bfff17 	ldw	r2,-4(fp)
    650c:	10800a17 	ldw	r2,40(r2)
    6510:	10800104 	addi	r2,r2,4
    6514:	e0fffe17 	ldw	r3,-8(fp)
    6518:	10c00035 	stwio	r3,0(r2)
}
    651c:	e037883a 	mov	sp,fp
    6520:	df000017 	ldw	fp,0(sp)
    6524:	dec00104 	addi	sp,sp,4
    6528:	f800283a 	ret

0000652c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    652c:	defffd04 	addi	sp,sp,-12
    6530:	df000215 	stw	fp,8(sp)
    6534:	df000204 	addi	fp,sp,8
    6538:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    653c:	e0bfff17 	ldw	r2,-4(fp)
    6540:	10800a17 	ldw	r2,40(r2)
    6544:	10800104 	addi	r2,r2,4
    6548:	10800037 	ldwio	r2,0(r2)
    654c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    6550:	e0fffe17 	ldw	r3,-8(fp)
    6554:	00bfff84 	movi	r2,-2
    6558:	1884703a 	and	r2,r3,r2
    655c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    6560:	e0bfff17 	ldw	r2,-4(fp)
    6564:	10800a17 	ldw	r2,40(r2)
    6568:	10800104 	addi	r2,r2,4
    656c:	e0fffe17 	ldw	r3,-8(fp)
    6570:	10c00035 	stwio	r3,0(r2)
}
    6574:	e037883a 	mov	sp,fp
    6578:	df000017 	ldw	fp,0(sp)
    657c:	dec00104 	addi	sp,sp,4
    6580:	f800283a 	ret

00006584 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    6584:	defffd04 	addi	sp,sp,-12
    6588:	df000215 	stw	fp,8(sp)
    658c:	df000204 	addi	fp,sp,8
    6590:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    6594:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    6598:	e0bfff17 	ldw	r2,-4(fp)
    659c:	10800a17 	ldw	r2,40(r2)
    65a0:	10800084 	addi	r2,r2,2
    65a4:	1080002b 	ldhuio	r2,0(r2)
    65a8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    65ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
    65b0:	e037883a 	mov	sp,fp
    65b4:	df000017 	ldw	fp,0(sp)
    65b8:	dec00104 	addi	sp,sp,4
    65bc:	f800283a 	ret

000065c0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    65c0:	defffd04 	addi	sp,sp,-12
    65c4:	df000215 	stw	fp,8(sp)
    65c8:	df000204 	addi	fp,sp,8
    65cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    65d0:	e0bfff17 	ldw	r2,-4(fp)
    65d4:	10800a17 	ldw	r2,40(r2)
    65d8:	10800104 	addi	r2,r2,4
    65dc:	10800037 	ldwio	r2,0(r2)
    65e0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    65e4:	e0bffe17 	ldw	r2,-8(fp)
    65e8:	10bfffec 	andhi	r2,r2,65535
    65ec:	1004d43a 	srli	r2,r2,16
}
    65f0:	e037883a 	mov	sp,fp
    65f4:	df000017 	ldw	fp,0(sp)
    65f8:	dec00104 	addi	sp,sp,4
    65fc:	f800283a 	ret

00006600 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    6600:	defffc04 	addi	sp,sp,-16
    6604:	df000315 	stw	fp,12(sp)
    6608:	df000304 	addi	fp,sp,12
    660c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    6610:	e0bffe17 	ldw	r2,-8(fp)
    6614:	1080800c 	andi	r2,r2,512
    6618:	1004d27a 	srli	r2,r2,9
    661c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    6620:	e0bffd17 	ldw	r2,-12(fp)
    6624:	1005003a 	cmpeq	r2,r2,zero
    6628:	1000031e 	bne	r2,zero,6638 <alt_up_rs232_check_parity+0x38>
    662c:	00bfffc4 	movi	r2,-1
    6630:	e0bfff15 	stw	r2,-4(fp)
    6634:	00000106 	br	663c <alt_up_rs232_check_parity+0x3c>
    6638:	e03fff15 	stw	zero,-4(fp)
    663c:	e0bfff17 	ldw	r2,-4(fp)
}
    6640:	e037883a 	mov	sp,fp
    6644:	df000017 	ldw	fp,0(sp)
    6648:	dec00104 	addi	sp,sp,4
    664c:	f800283a 	ret

00006650 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    6650:	defffc04 	addi	sp,sp,-16
    6654:	df000315 	stw	fp,12(sp)
    6658:	df000304 	addi	fp,sp,12
    665c:	e13ffe15 	stw	r4,-8(fp)
    6660:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    6664:	e0bffe17 	ldw	r2,-8(fp)
    6668:	10800a17 	ldw	r2,40(r2)
    666c:	10800037 	ldwio	r2,0(r2)
    6670:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    6674:	e0bffe17 	ldw	r2,-8(fp)
    6678:	10800a17 	ldw	r2,40(r2)
    667c:	e0ffff03 	ldbu	r3,-4(fp)
    6680:	10c00035 	stwio	r3,0(r2)
	return 0;
    6684:	0005883a 	mov	r2,zero
}
    6688:	e037883a 	mov	sp,fp
    668c:	df000017 	ldw	fp,0(sp)
    6690:	dec00104 	addi	sp,sp,4
    6694:	f800283a 	ret

00006698 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    6698:	defffa04 	addi	sp,sp,-24
    669c:	dfc00515 	stw	ra,20(sp)
    66a0:	df000415 	stw	fp,16(sp)
    66a4:	df000404 	addi	fp,sp,16
    66a8:	e13ffd15 	stw	r4,-12(fp)
    66ac:	e17ffe15 	stw	r5,-8(fp)
    66b0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    66b4:	e0bffd17 	ldw	r2,-12(fp)
    66b8:	10800a17 	ldw	r2,40(r2)
    66bc:	10800037 	ldwio	r2,0(r2)
    66c0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    66c4:	e0bffc17 	ldw	r2,-16(fp)
    66c8:	1007883a 	mov	r3,r2
    66cc:	e0bffe17 	ldw	r2,-8(fp)
    66d0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    66d4:	e13ffc17 	ldw	r4,-16(fp)
    66d8:	00066000 	call	6600 <alt_up_rs232_check_parity>
    66dc:	1007883a 	mov	r3,r2
    66e0:	e0bfff17 	ldw	r2,-4(fp)
    66e4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    66e8:	e0bffc17 	ldw	r2,-16(fp)
    66ec:	10a0000c 	andi	r2,r2,32768
    66f0:	1004d3fa 	srli	r2,r2,15
    66f4:	10bfffc4 	addi	r2,r2,-1
}
    66f8:	e037883a 	mov	sp,fp
    66fc:	dfc00117 	ldw	ra,4(sp)
    6700:	df000017 	ldw	fp,0(sp)
    6704:	dec00204 	addi	sp,sp,8
    6708:	f800283a 	ret

0000670c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    670c:	defff804 	addi	sp,sp,-32
    6710:	dfc00715 	stw	ra,28(sp)
    6714:	df000615 	stw	fp,24(sp)
    6718:	df000604 	addi	fp,sp,24
    671c:	e13ffd15 	stw	r4,-12(fp)
    6720:	e17ffe15 	stw	r5,-8(fp)
    6724:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    6728:	e0bffd17 	ldw	r2,-12(fp)
    672c:	10800017 	ldw	r2,0(r2)
    6730:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    6734:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    6738:	00000c06 	br	676c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    673c:	e17ffe17 	ldw	r5,-8(fp)
    6740:	e0bffe17 	ldw	r2,-8(fp)
    6744:	10800044 	addi	r2,r2,1
    6748:	e0bffe15 	stw	r2,-8(fp)
    674c:	e1bffc04 	addi	r6,fp,-16
    6750:	e13ffb17 	ldw	r4,-20(fp)
    6754:	00066980 	call	6698 <alt_up_rs232_read_data>
    6758:	1004c03a 	cmpne	r2,r2,zero
    675c:	1000091e 	bne	r2,zero,6784 <alt_up_rs232_read_fd+0x78>
			count++;
    6760:	e0bffa17 	ldw	r2,-24(fp)
    6764:	10800044 	addi	r2,r2,1
    6768:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    676c:	e0bfff17 	ldw	r2,-4(fp)
    6770:	10bfffc4 	addi	r2,r2,-1
    6774:	e0bfff15 	stw	r2,-4(fp)
    6778:	e0bfff17 	ldw	r2,-4(fp)
    677c:	10bfffd8 	cmpnei	r2,r2,-1
    6780:	103fee1e 	bne	r2,zero,673c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    6784:	e0bffa17 	ldw	r2,-24(fp)
}
    6788:	e037883a 	mov	sp,fp
    678c:	dfc00117 	ldw	ra,4(sp)
    6790:	df000017 	ldw	fp,0(sp)
    6794:	dec00204 	addi	sp,sp,8
    6798:	f800283a 	ret

0000679c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    679c:	defff904 	addi	sp,sp,-28
    67a0:	dfc00615 	stw	ra,24(sp)
    67a4:	df000515 	stw	fp,20(sp)
    67a8:	df000504 	addi	fp,sp,20
    67ac:	e13ffd15 	stw	r4,-12(fp)
    67b0:	e17ffe15 	stw	r5,-8(fp)
    67b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    67b8:	e0bffd17 	ldw	r2,-12(fp)
    67bc:	10800017 	ldw	r2,0(r2)
    67c0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    67c4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    67c8:	00000d06 	br	6800 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    67cc:	e0bffe17 	ldw	r2,-8(fp)
    67d0:	10800003 	ldbu	r2,0(r2)
    67d4:	11403fcc 	andi	r5,r2,255
    67d8:	e13ffc17 	ldw	r4,-16(fp)
    67dc:	00066500 	call	6650 <alt_up_rs232_write_data>
    67e0:	1004c03a 	cmpne	r2,r2,zero
    67e4:	10000c1e 	bne	r2,zero,6818 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    67e8:	e0bffb17 	ldw	r2,-20(fp)
    67ec:	10800044 	addi	r2,r2,1
    67f0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    67f4:	e0bffe17 	ldw	r2,-8(fp)
    67f8:	10800044 	addi	r2,r2,1
    67fc:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    6800:	e0bfff17 	ldw	r2,-4(fp)
    6804:	10bfffc4 	addi	r2,r2,-1
    6808:	e0bfff15 	stw	r2,-4(fp)
    680c:	e0bfff17 	ldw	r2,-4(fp)
    6810:	10bfffd8 	cmpnei	r2,r2,-1
    6814:	103fed1e 	bne	r2,zero,67cc <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    6818:	e0bffb17 	ldw	r2,-20(fp)
}
    681c:	e037883a 	mov	sp,fp
    6820:	dfc00117 	ldw	ra,4(sp)
    6824:	df000017 	ldw	fp,0(sp)
    6828:	dec00204 	addi	sp,sp,8
    682c:	f800283a 	ret

00006830 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    6830:	defffc04 	addi	sp,sp,-16
    6834:	dfc00315 	stw	ra,12(sp)
    6838:	df000215 	stw	fp,8(sp)
    683c:	df000204 	addi	fp,sp,8
    6840:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    6844:	e13fff17 	ldw	r4,-4(fp)
    6848:	01400074 	movhi	r5,1
    684c:	29785304 	addi	r5,r5,-7860
    6850:	00085b40 	call	85b4 <alt_find_dev>
    6854:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    6858:	e0bffe17 	ldw	r2,-8(fp)
}
    685c:	e037883a 	mov	sp,fp
    6860:	dfc00117 	ldw	ra,4(sp)
    6864:	df000017 	ldw	fp,0(sp)
    6868:	dec00204 	addi	sp,sp,8
    686c:	f800283a 	ret

00006870 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    6870:	defffc04 	addi	sp,sp,-16
    6874:	dfc00315 	stw	ra,12(sp)
    6878:	df000215 	stw	fp,8(sp)
    687c:	df000204 	addi	fp,sp,8
    6880:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    6884:	e0bfff17 	ldw	r2,-4(fp)
    6888:	10800217 	ldw	r2,8(r2)
    688c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    6890:	00000c06 	br	68c4 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    6894:	e13ffe17 	ldw	r4,-8(fp)
    6898:	01400074 	movhi	r5,1
    689c:	29703404 	addi	r5,r5,-16176
    68a0:	000930c0 	call	930c <strcmp>
    68a4:	1004c03a 	cmpne	r2,r2,zero
    68a8:	1000031e 	bne	r2,zero,68b8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    68ac:	e0bffe17 	ldw	r2,-8(fp)
    68b0:	10000005 	stb	zero,0(r2)
			break;
    68b4:	00000a06 	br	68e0 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    68b8:	e0bffe17 	ldw	r2,-8(fp)
    68bc:	10800044 	addi	r2,r2,1
    68c0:	e0bffe15 	stw	r2,-8(fp)
    68c4:	e0bffe17 	ldw	r2,-8(fp)
    68c8:	10800003 	ldbu	r2,0(r2)
    68cc:	10803fcc 	andi	r2,r2,255
    68d0:	1080201c 	xori	r2,r2,128
    68d4:	10bfe004 	addi	r2,r2,-128
    68d8:	1004c03a 	cmpne	r2,r2,zero
    68dc:	103fed1e 	bne	r2,zero,6894 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    68e0:	e037883a 	mov	sp,fp
    68e4:	dfc00117 	ldw	ra,4(sp)
    68e8:	df000017 	ldw	fp,0(sp)
    68ec:	dec00204 	addi	sp,sp,8
    68f0:	f800283a 	ret

000068f4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    68f4:	defffc04 	addi	sp,sp,-16
    68f8:	dfc00315 	stw	ra,12(sp)
    68fc:	df000215 	stw	fp,8(sp)
    6900:	df000204 	addi	fp,sp,8
    6904:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    6908:	e13fff17 	ldw	r4,-4(fp)
    690c:	01400074 	movhi	r5,1
    6910:	29785304 	addi	r5,r5,-7860
    6914:	00085b40 	call	85b4 <alt_find_dev>
    6918:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    691c:	e0bffe17 	ldw	r2,-8(fp)
}
    6920:	e037883a 	mov	sp,fp
    6924:	dfc00117 	ldw	ra,4(sp)
    6928:	df000017 	ldw	fp,0(sp)
    692c:	dec00204 	addi	sp,sp,8
    6930:	f800283a 	ret

00006934 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    6934:	defff904 	addi	sp,sp,-28
    6938:	df000615 	stw	fp,24(sp)
    693c:	df000604 	addi	fp,sp,24
    6940:	e13ffb15 	stw	r4,-20(fp)
    6944:	e1bffd15 	stw	r6,-12(fp)
    6948:	e1fffe15 	stw	r7,-8(fp)
    694c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    6950:	e0bffb17 	ldw	r2,-20(fp)
    6954:	10c00c17 	ldw	r3,48(r2)
    6958:	e0bffd17 	ldw	r2,-12(fp)
    695c:	10c0042e 	bgeu	r2,r3,6970 <alt_up_char_buffer_draw+0x3c>
    6960:	e0bffb17 	ldw	r2,-20(fp)
    6964:	10c00d17 	ldw	r3,52(r2)
    6968:	e0bffe17 	ldw	r2,-8(fp)
    696c:	10c00336 	bltu	r2,r3,697c <alt_up_char_buffer_draw+0x48>
		return -1;
    6970:	00bfffc4 	movi	r2,-1
    6974:	e0bfff15 	stw	r2,-4(fp)
    6978:	00001d06 	br	69f0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    697c:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    6980:	e0bffb17 	ldw	r2,-20(fp)
    6984:	10c00f17 	ldw	r3,60(r2)
    6988:	e0bffd17 	ldw	r2,-12(fp)
    698c:	1886703a 	and	r3,r3,r2
    6990:	e0bffb17 	ldw	r2,-20(fp)
    6994:	10800e17 	ldw	r2,56(r2)
    6998:	1886983a 	sll	r3,r3,r2
    699c:	e0bffa17 	ldw	r2,-24(fp)
    69a0:	10c4b03a 	or	r2,r2,r3
    69a4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    69a8:	e0bffb17 	ldw	r2,-20(fp)
    69ac:	10c01117 	ldw	r3,68(r2)
    69b0:	e0bffe17 	ldw	r2,-8(fp)
    69b4:	1886703a 	and	r3,r3,r2
    69b8:	e0bffb17 	ldw	r2,-20(fp)
    69bc:	10801017 	ldw	r2,64(r2)
    69c0:	1886983a 	sll	r3,r3,r2
    69c4:	e0bffa17 	ldw	r2,-24(fp)
    69c8:	10c4b03a 	or	r2,r2,r3
    69cc:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    69d0:	e0bffb17 	ldw	r2,-20(fp)
    69d4:	10800b17 	ldw	r2,44(r2)
    69d8:	1007883a 	mov	r3,r2
    69dc:	e0bffa17 	ldw	r2,-24(fp)
    69e0:	1885883a 	add	r2,r3,r2
    69e4:	e0fffc03 	ldbu	r3,-16(fp)
    69e8:	10c00025 	stbio	r3,0(r2)

	return 0;
    69ec:	e03fff15 	stw	zero,-4(fp)
    69f0:	e0bfff17 	ldw	r2,-4(fp)
}
    69f4:	e037883a 	mov	sp,fp
    69f8:	df000017 	ldw	fp,0(sp)
    69fc:	dec00104 	addi	sp,sp,4
    6a00:	f800283a 	ret

00006a04 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    6a04:	defff904 	addi	sp,sp,-28
    6a08:	df000615 	stw	fp,24(sp)
    6a0c:	df000604 	addi	fp,sp,24
    6a10:	e13ffb15 	stw	r4,-20(fp)
    6a14:	e17ffc15 	stw	r5,-16(fp)
    6a18:	e1bffd15 	stw	r6,-12(fp)
    6a1c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    6a20:	e0bffb17 	ldw	r2,-20(fp)
    6a24:	10c00c17 	ldw	r3,48(r2)
    6a28:	e0bffd17 	ldw	r2,-12(fp)
    6a2c:	10c0042e 	bgeu	r2,r3,6a40 <alt_up_char_buffer_string+0x3c>
    6a30:	e0bffb17 	ldw	r2,-20(fp)
    6a34:	10c00d17 	ldw	r3,52(r2)
    6a38:	e0bffe17 	ldw	r2,-8(fp)
    6a3c:	10c00336 	bltu	r2,r3,6a4c <alt_up_char_buffer_string+0x48>
		return -1;
    6a40:	00bfffc4 	movi	r2,-1
    6a44:	e0bfff15 	stw	r2,-4(fp)
    6a48:	00002e06 	br	6b04 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    6a4c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    6a50:	e0bffb17 	ldw	r2,-20(fp)
    6a54:	10801017 	ldw	r2,64(r2)
    6a58:	1007883a 	mov	r3,r2
    6a5c:	e0bffe17 	ldw	r2,-8(fp)
    6a60:	10c6983a 	sll	r3,r2,r3
    6a64:	e0bffd17 	ldw	r2,-12(fp)
    6a68:	1885883a 	add	r2,r3,r2
    6a6c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    6a70:	00001c06 	br	6ae4 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    6a74:	e0bffb17 	ldw	r2,-20(fp)
    6a78:	10800b17 	ldw	r2,44(r2)
    6a7c:	1007883a 	mov	r3,r2
    6a80:	e0bffa17 	ldw	r2,-24(fp)
    6a84:	1889883a 	add	r4,r3,r2
    6a88:	e0bffc17 	ldw	r2,-16(fp)
    6a8c:	10800003 	ldbu	r2,0(r2)
    6a90:	10c03fcc 	andi	r3,r2,255
    6a94:	18c0201c 	xori	r3,r3,128
    6a98:	18ffe004 	addi	r3,r3,-128
    6a9c:	2005883a 	mov	r2,r4
    6aa0:	10c00025 	stbio	r3,0(r2)
		++ptr;
    6aa4:	e0bffc17 	ldw	r2,-16(fp)
    6aa8:	10800044 	addi	r2,r2,1
    6aac:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    6ab0:	e0bffd17 	ldw	r2,-12(fp)
    6ab4:	10800044 	addi	r2,r2,1
    6ab8:	e0bffd15 	stw	r2,-12(fp)
    6abc:	e0bffb17 	ldw	r2,-20(fp)
    6ac0:	10c00c17 	ldw	r3,48(r2)
    6ac4:	e0bffd17 	ldw	r2,-12(fp)
    6ac8:	10c00336 	bltu	r2,r3,6ad8 <alt_up_char_buffer_string+0xd4>
			return -1;
    6acc:	00bfffc4 	movi	r2,-1
    6ad0:	e0bfff15 	stw	r2,-4(fp)
    6ad4:	00000b06 	br	6b04 <alt_up_char_buffer_string+0x100>
		++offset;
    6ad8:	e0bffa17 	ldw	r2,-24(fp)
    6adc:	10800044 	addi	r2,r2,1
    6ae0:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    6ae4:	e0bffc17 	ldw	r2,-16(fp)
    6ae8:	10800003 	ldbu	r2,0(r2)
    6aec:	10803fcc 	andi	r2,r2,255
    6af0:	1080201c 	xori	r2,r2,128
    6af4:	10bfe004 	addi	r2,r2,-128
    6af8:	1004c03a 	cmpne	r2,r2,zero
    6afc:	103fdd1e 	bne	r2,zero,6a74 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    6b00:	e03fff15 	stw	zero,-4(fp)
    6b04:	e0bfff17 	ldw	r2,-4(fp)
}
    6b08:	e037883a 	mov	sp,fp
    6b0c:	df000017 	ldw	fp,0(sp)
    6b10:	dec00104 	addi	sp,sp,4
    6b14:	f800283a 	ret

00006b18 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    6b18:	defffe04 	addi	sp,sp,-8
    6b1c:	df000115 	stw	fp,4(sp)
    6b20:	df000104 	addi	fp,sp,4
    6b24:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    6b28:	e0bfff17 	ldw	r2,-4(fp)
    6b2c:	10800a17 	ldw	r2,40(r2)
    6b30:	10800084 	addi	r2,r2,2
    6b34:	1007883a 	mov	r3,r2
    6b38:	00800044 	movi	r2,1
    6b3c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    6b40:	e0bfff17 	ldw	r2,-4(fp)
    6b44:	10800a17 	ldw	r2,40(r2)
    6b48:	10800084 	addi	r2,r2,2
    6b4c:	10800023 	ldbuio	r2,0(r2)
    6b50:	1080004c 	andi	r2,r2,1
    6b54:	10803fcc 	andi	r2,r2,255
    6b58:	1004c03a 	cmpne	r2,r2,zero
    6b5c:	103ff81e 	bne	r2,zero,6b40 <alt_up_char_buffer_clear+0x28>
	return 0;
    6b60:	0005883a 	mov	r2,zero
}
    6b64:	e037883a 	mov	sp,fp
    6b68:	df000017 	ldw	fp,0(sp)
    6b6c:	dec00104 	addi	sp,sp,4
    6b70:	f800283a 	ret

00006b74 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    6b74:	defffc04 	addi	sp,sp,-16
    6b78:	dfc00315 	stw	ra,12(sp)
    6b7c:	df000215 	stw	fp,8(sp)
    6b80:	df000204 	addi	fp,sp,8
    6b84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    6b88:	e13fff17 	ldw	r4,-4(fp)
    6b8c:	01400074 	movhi	r5,1
    6b90:	29785304 	addi	r5,r5,-7860
    6b94:	00085b40 	call	85b4 <alt_find_dev>
    6b98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    6b9c:	e0bffe17 	ldw	r2,-8(fp)
}
    6ba0:	e037883a 	mov	sp,fp
    6ba4:	dfc00117 	ldw	ra,4(sp)
    6ba8:	df000017 	ldw	fp,0(sp)
    6bac:	dec00204 	addi	sp,sp,8
    6bb0:	f800283a 	ret

00006bb4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    6bb4:	defff904 	addi	sp,sp,-28
    6bb8:	df000615 	stw	fp,24(sp)
    6bbc:	df000604 	addi	fp,sp,24
    6bc0:	e13ffb15 	stw	r4,-20(fp)
    6bc4:	e17ffc15 	stw	r5,-16(fp)
    6bc8:	e1bffd15 	stw	r6,-12(fp)
    6bcc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    6bd0:	e0bffb17 	ldw	r2,-20(fp)
    6bd4:	10c00f17 	ldw	r3,60(r2)
    6bd8:	e0bffd17 	ldw	r2,-12(fp)
    6bdc:	10c0042e 	bgeu	r2,r3,6bf0 <alt_up_pixel_buffer_dma_draw+0x3c>
    6be0:	e0bffb17 	ldw	r2,-20(fp)
    6be4:	10c01017 	ldw	r3,64(r2)
    6be8:	e0bffe17 	ldw	r2,-8(fp)
    6bec:	10c00336 	bltu	r2,r3,6bfc <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    6bf0:	00bfffc4 	movi	r2,-1
    6bf4:	e0bfff15 	stw	r2,-4(fp)
    6bf8:	00005106 	br	6d40 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    6bfc:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6c00:	e0bffb17 	ldw	r2,-20(fp)
    6c04:	10800d17 	ldw	r2,52(r2)
    6c08:	1004c03a 	cmpne	r2,r2,zero
    6c0c:	1000151e 	bne	r2,zero,6c64 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    6c10:	e0bffb17 	ldw	r2,-20(fp)
    6c14:	10c01217 	ldw	r3,72(r2)
    6c18:	e0bffd17 	ldw	r2,-12(fp)
    6c1c:	1886703a 	and	r3,r3,r2
    6c20:	e0bffb17 	ldw	r2,-20(fp)
    6c24:	10801117 	ldw	r2,68(r2)
    6c28:	1886983a 	sll	r3,r3,r2
    6c2c:	e0bffa17 	ldw	r2,-24(fp)
    6c30:	10c4b03a 	or	r2,r2,r3
    6c34:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    6c38:	e0bffb17 	ldw	r2,-20(fp)
    6c3c:	10c01417 	ldw	r3,80(r2)
    6c40:	e0bffe17 	ldw	r2,-8(fp)
    6c44:	1886703a 	and	r3,r3,r2
    6c48:	e0bffb17 	ldw	r2,-20(fp)
    6c4c:	10801317 	ldw	r2,76(r2)
    6c50:	1886983a 	sll	r3,r3,r2
    6c54:	e0bffa17 	ldw	r2,-24(fp)
    6c58:	10c4b03a 	or	r2,r2,r3
    6c5c:	e0bffa15 	stw	r2,-24(fp)
    6c60:	00001706 	br	6cc0 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    6c64:	e0bffb17 	ldw	r2,-20(fp)
    6c68:	10c01217 	ldw	r3,72(r2)
    6c6c:	e0bffd17 	ldw	r2,-12(fp)
    6c70:	1886703a 	and	r3,r3,r2
    6c74:	e0bffb17 	ldw	r2,-20(fp)
    6c78:	10801117 	ldw	r2,68(r2)
    6c7c:	1886983a 	sll	r3,r3,r2
    6c80:	e0bffa17 	ldw	r2,-24(fp)
    6c84:	10c5883a 	add	r2,r2,r3
    6c88:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    6c8c:	e0bffb17 	ldw	r2,-20(fp)
    6c90:	10c01417 	ldw	r3,80(r2)
    6c94:	e0bffe17 	ldw	r2,-8(fp)
    6c98:	1886703a 	and	r3,r3,r2
    6c9c:	e0bffb17 	ldw	r2,-20(fp)
    6ca0:	10800f17 	ldw	r2,60(r2)
    6ca4:	1887383a 	mul	r3,r3,r2
    6ca8:	e0bffb17 	ldw	r2,-20(fp)
    6cac:	10801117 	ldw	r2,68(r2)
    6cb0:	1886983a 	sll	r3,r3,r2
    6cb4:	e0bffa17 	ldw	r2,-24(fp)
    6cb8:	10c5883a 	add	r2,r2,r3
    6cbc:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    6cc0:	e0bffb17 	ldw	r2,-20(fp)
    6cc4:	10800e17 	ldw	r2,56(r2)
    6cc8:	10800058 	cmpnei	r2,r2,1
    6ccc:	1000081e 	bne	r2,zero,6cf0 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    6cd0:	e0bffb17 	ldw	r2,-20(fp)
    6cd4:	10800c17 	ldw	r2,48(r2)
    6cd8:	1007883a 	mov	r3,r2
    6cdc:	e0bffa17 	ldw	r2,-24(fp)
    6ce0:	1885883a 	add	r2,r3,r2
    6ce4:	e0fffc17 	ldw	r3,-16(fp)
    6ce8:	10c00025 	stbio	r3,0(r2)
    6cec:	00001306 	br	6d3c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6cf0:	e0bffb17 	ldw	r2,-20(fp)
    6cf4:	10800e17 	ldw	r2,56(r2)
    6cf8:	10800098 	cmpnei	r2,r2,2
    6cfc:	1000081e 	bne	r2,zero,6d20 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    6d00:	e0bffb17 	ldw	r2,-20(fp)
    6d04:	10800c17 	ldw	r2,48(r2)
    6d08:	1007883a 	mov	r3,r2
    6d0c:	e0bffa17 	ldw	r2,-24(fp)
    6d10:	1885883a 	add	r2,r3,r2
    6d14:	e0fffc17 	ldw	r3,-16(fp)
    6d18:	10c0002d 	sthio	r3,0(r2)
    6d1c:	00000706 	br	6d3c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    6d20:	e0bffb17 	ldw	r2,-20(fp)
    6d24:	10800c17 	ldw	r2,48(r2)
    6d28:	1007883a 	mov	r3,r2
    6d2c:	e0bffa17 	ldw	r2,-24(fp)
    6d30:	1885883a 	add	r2,r3,r2
    6d34:	e0fffc17 	ldw	r3,-16(fp)
    6d38:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    6d3c:	e03fff15 	stw	zero,-4(fp)
    6d40:	e0bfff17 	ldw	r2,-4(fp)
}
    6d44:	e037883a 	mov	sp,fp
    6d48:	df000017 	ldw	fp,0(sp)
    6d4c:	dec00104 	addi	sp,sp,4
    6d50:	f800283a 	ret

00006d54 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    6d54:	defffd04 	addi	sp,sp,-12
    6d58:	df000215 	stw	fp,8(sp)
    6d5c:	df000204 	addi	fp,sp,8
    6d60:	e13ffe15 	stw	r4,-8(fp)
    6d64:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    6d68:	e0bffe17 	ldw	r2,-8(fp)
    6d6c:	10800a17 	ldw	r2,40(r2)
    6d70:	10800104 	addi	r2,r2,4
    6d74:	e0ffff17 	ldw	r3,-4(fp)
    6d78:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    6d7c:	e0bffe17 	ldw	r2,-8(fp)
    6d80:	10800a17 	ldw	r2,40(r2)
    6d84:	10800104 	addi	r2,r2,4
    6d88:	10800037 	ldwio	r2,0(r2)
    6d8c:	1007883a 	mov	r3,r2
    6d90:	e0bffe17 	ldw	r2,-8(fp)
    6d94:	10c00c15 	stw	r3,48(r2)
	return 0;
    6d98:	0005883a 	mov	r2,zero
}
    6d9c:	e037883a 	mov	sp,fp
    6da0:	df000017 	ldw	fp,0(sp)
    6da4:	dec00104 	addi	sp,sp,4
    6da8:	f800283a 	ret

00006dac <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    6dac:	defffe04 	addi	sp,sp,-8
    6db0:	df000115 	stw	fp,4(sp)
    6db4:	df000104 	addi	fp,sp,4
    6db8:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    6dbc:	e0bfff17 	ldw	r2,-4(fp)
    6dc0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    6dc4:	e0bfff17 	ldw	r2,-4(fp)
    6dc8:	10800a17 	ldw	r2,40(r2)
    6dcc:	1007883a 	mov	r3,r2
    6dd0:	00800044 	movi	r2,1
    6dd4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    6dd8:	e0bfff17 	ldw	r2,-4(fp)
    6ddc:	10c00b17 	ldw	r3,44(r2)
    6de0:	e0bfff17 	ldw	r2,-4(fp)
    6de4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    6de8:	e0bfff17 	ldw	r2,-4(fp)
    6dec:	11000b15 	stw	r4,44(r2)
	return 0;
    6df0:	0005883a 	mov	r2,zero
}
    6df4:	e037883a 	mov	sp,fp
    6df8:	df000017 	ldw	fp,0(sp)
    6dfc:	dec00104 	addi	sp,sp,4
    6e00:	f800283a 	ret

00006e04 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    6e04:	defffe04 	addi	sp,sp,-8
    6e08:	df000115 	stw	fp,4(sp)
    6e0c:	df000104 	addi	fp,sp,4
    6e10:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    6e14:	e0bfff17 	ldw	r2,-4(fp)
    6e18:	10800a17 	ldw	r2,40(r2)
    6e1c:	10800304 	addi	r2,r2,12
    6e20:	10800037 	ldwio	r2,0(r2)
    6e24:	1080004c 	andi	r2,r2,1
}
    6e28:	e037883a 	mov	sp,fp
    6e2c:	df000017 	ldw	fp,0(sp)
    6e30:	dec00104 	addi	sp,sp,4
    6e34:	f800283a 	ret

00006e38 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    6e38:	defff604 	addi	sp,sp,-40
    6e3c:	df000915 	stw	fp,36(sp)
    6e40:	df000904 	addi	fp,sp,36
    6e44:	e13ff715 	stw	r4,-36(fp)
    6e48:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    6e4c:	e0bff817 	ldw	r2,-32(fp)
    6e50:	10800058 	cmpnei	r2,r2,1
    6e54:	1000041e 	bne	r2,zero,6e68 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    6e58:	e0bff717 	ldw	r2,-36(fp)
    6e5c:	10800c17 	ldw	r2,48(r2)
    6e60:	e0bfff15 	stw	r2,-4(fp)
    6e64:	00000306 	br	6e74 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    6e68:	e0bff717 	ldw	r2,-36(fp)
    6e6c:	10800b17 	ldw	r2,44(r2)
    6e70:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    6e74:	e0bff717 	ldw	r2,-36(fp)
    6e78:	10800f17 	ldw	r2,60(r2)
    6e7c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    6e80:	e0bff717 	ldw	r2,-36(fp)
    6e84:	10800e17 	ldw	r2,56(r2)
    6e88:	10800098 	cmpnei	r2,r2,2
    6e8c:	1000051e 	bne	r2,zero,6ea4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    6e90:	e0fffe17 	ldw	r3,-8(fp)
    6e94:	e0fffe17 	ldw	r3,-8(fp)
    6e98:	18c5883a 	add	r2,r3,r3
    6e9c:	e0bffe15 	stw	r2,-8(fp)
    6ea0:	00000506 	br	6eb8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    6ea4:	e13ffe17 	ldw	r4,-8(fp)
    6ea8:	e13ffe17 	ldw	r4,-8(fp)
    6eac:	2105883a 	add	r2,r4,r4
    6eb0:	1085883a 	add	r2,r2,r2
    6eb4:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    6eb8:	e0bff717 	ldw	r2,-36(fp)
    6ebc:	10801017 	ldw	r2,64(r2)
    6ec0:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    6ec4:	e0bff717 	ldw	r2,-36(fp)
    6ec8:	10800d17 	ldw	r2,52(r2)
    6ecc:	1004c03a 	cmpne	r2,r2,zero
    6ed0:	10001e1e 	bne	r2,zero,6f4c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    6ed4:	e0bff717 	ldw	r2,-36(fp)
    6ed8:	10801317 	ldw	r2,76(r2)
    6edc:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    6ee0:	e03ffb15 	stw	zero,-20(fp)
    6ee4:	00001506 	br	6f3c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    6ee8:	e03ffc15 	stw	zero,-16(fp)
    6eec:	00000706 	br	6f0c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    6ef0:	e0ffff17 	ldw	r3,-4(fp)
    6ef4:	e0bffc17 	ldw	r2,-16(fp)
    6ef8:	1885883a 	add	r2,r3,r2
    6efc:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    6f00:	e0bffc17 	ldw	r2,-16(fp)
    6f04:	10800104 	addi	r2,r2,4
    6f08:	e0bffc15 	stw	r2,-16(fp)
    6f0c:	e0fffc17 	ldw	r3,-16(fp)
    6f10:	e13ffe17 	ldw	r4,-8(fp)
    6f14:	193ff636 	bltu	r3,r4,6ef0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    6f18:	e0fffa17 	ldw	r3,-24(fp)
    6f1c:	00800044 	movi	r2,1
    6f20:	10c4983a 	sll	r2,r2,r3
    6f24:	e0ffff17 	ldw	r3,-4(fp)
    6f28:	1887883a 	add	r3,r3,r2
    6f2c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    6f30:	e13ffb17 	ldw	r4,-20(fp)
    6f34:	21000044 	addi	r4,r4,1
    6f38:	e13ffb15 	stw	r4,-20(fp)
    6f3c:	e0bffb17 	ldw	r2,-20(fp)
    6f40:	e0fffd17 	ldw	r3,-12(fp)
    6f44:	10ffe836 	bltu	r2,r3,6ee8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    6f48:	00001006 	br	6f8c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    6f4c:	e13ffd17 	ldw	r4,-12(fp)
    6f50:	e0bffe17 	ldw	r2,-8(fp)
    6f54:	2089383a 	mul	r4,r4,r2
    6f58:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    6f5c:	e03ff915 	stw	zero,-28(fp)
    6f60:	00000706 	br	6f80 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    6f64:	e0ffff17 	ldw	r3,-4(fp)
    6f68:	e0bff917 	ldw	r2,-28(fp)
    6f6c:	1885883a 	add	r2,r3,r2
    6f70:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    6f74:	e0fff917 	ldw	r3,-28(fp)
    6f78:	18c00104 	addi	r3,r3,4
    6f7c:	e0fff915 	stw	r3,-28(fp)
    6f80:	e0bff917 	ldw	r2,-28(fp)
    6f84:	e13ffd17 	ldw	r4,-12(fp)
    6f88:	113ff636 	bltu	r2,r4,6f64 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    6f8c:	e037883a 	mov	sp,fp
    6f90:	df000017 	ldw	fp,0(sp)
    6f94:	dec00104 	addi	sp,sp,4
    6f98:	f800283a 	ret

00006f9c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    6f9c:	deffed04 	addi	sp,sp,-76
    6fa0:	df001215 	stw	fp,72(sp)
    6fa4:	df001204 	addi	fp,sp,72
    6fa8:	e13fee15 	stw	r4,-72(fp)
    6fac:	e17fef15 	stw	r5,-68(fp)
    6fb0:	e1bff015 	stw	r6,-64(fp)
    6fb4:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    6fb8:	e0bfee17 	ldw	r2,-72(fp)
    6fbc:	10800f17 	ldw	r2,60(r2)
    6fc0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    6fc4:	e0bfee17 	ldw	r2,-72(fp)
    6fc8:	10801017 	ldw	r2,64(r2)
    6fcc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    6fd0:	e0bfef17 	ldw	r2,-68(fp)
    6fd4:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    6fd8:	e0fff117 	ldw	r3,-60(fp)
    6fdc:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    6fe0:	e13ff017 	ldw	r4,-64(fp)
    6fe4:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    6fe8:	e0800117 	ldw	r2,4(fp)
    6fec:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    6ff0:	e0c00217 	ldw	r3,8(fp)
    6ff4:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    6ff8:	e13ffa17 	ldw	r4,-24(fp)
    6ffc:	e0bffb17 	ldw	r2,-20(fp)
    7000:	2080062e 	bgeu	r4,r2,701c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    7004:	e0fffb17 	ldw	r3,-20(fp)
    7008:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    700c:	e13ffa17 	ldw	r4,-24(fp)
    7010:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    7014:	e0bffc17 	ldw	r2,-16(fp)
    7018:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    701c:	e0fff817 	ldw	r3,-32(fp)
    7020:	e13ff917 	ldw	r4,-28(fp)
    7024:	1900062e 	bgeu	r3,r4,7040 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    7028:	e0bff917 	ldw	r2,-28(fp)
    702c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    7030:	e0fff817 	ldw	r3,-32(fp)
    7034:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    7038:	e13ffc17 	ldw	r4,-16(fp)
    703c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    7040:	e0bffb17 	ldw	r2,-20(fp)
    7044:	e0fffe17 	ldw	r3,-8(fp)
    7048:	10c10d2e 	bgeu	r2,r3,7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    704c:	e13ff917 	ldw	r4,-28(fp)
    7050:	e0bffd17 	ldw	r2,-12(fp)
    7054:	20800136 	bltu	r4,r2,705c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    7058:	00010906 	br	7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    705c:	e0fffa17 	ldw	r3,-24(fp)
    7060:	e13ffe17 	ldw	r4,-8(fp)
    7064:	19000336 	bltu	r3,r4,7074 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    7068:	e0bffe17 	ldw	r2,-8(fp)
    706c:	10bfffc4 	addi	r2,r2,-1
    7070:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    7074:	e0fff817 	ldw	r3,-32(fp)
    7078:	e13ffd17 	ldw	r4,-12(fp)
    707c:	19000336 	bltu	r3,r4,708c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    7080:	e0bffd17 	ldw	r2,-12(fp)
    7084:	10bfffc4 	addi	r2,r2,-1
    7088:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    708c:	e0800317 	ldw	r2,12(fp)
    7090:	10800058 	cmpnei	r2,r2,1
    7094:	1000041e 	bne	r2,zero,70a8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    7098:	e0bfee17 	ldw	r2,-72(fp)
    709c:	10800c17 	ldw	r2,48(r2)
    70a0:	e0bfff15 	stw	r2,-4(fp)
    70a4:	00000306 	br	70b4 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    70a8:	e0bfee17 	ldw	r2,-72(fp)
    70ac:	10800b17 	ldw	r2,44(r2)
    70b0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    70b4:	e0bfee17 	ldw	r2,-72(fp)
    70b8:	10800d17 	ldw	r2,52(r2)
    70bc:	1004c03a 	cmpne	r2,r2,zero
    70c0:	1000721e 	bne	r2,zero,728c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    70c4:	e0bfee17 	ldw	r2,-72(fp)
    70c8:	10801317 	ldw	r2,76(r2)
    70cc:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    70d0:	e0bff417 	ldw	r2,-48(fp)
    70d4:	e0fff917 	ldw	r3,-28(fp)
    70d8:	1884983a 	sll	r2,r3,r2
    70dc:	e13fff17 	ldw	r4,-4(fp)
    70e0:	2089883a 	add	r4,r4,r2
    70e4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    70e8:	e0bfee17 	ldw	r2,-72(fp)
    70ec:	10800e17 	ldw	r2,56(r2)
    70f0:	10800058 	cmpnei	r2,r2,1
    70f4:	10001e1e 	bne	r2,zero,7170 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    70f8:	e0bff917 	ldw	r2,-28(fp)
    70fc:	e0bff515 	stw	r2,-44(fp)
    7100:	00001706 	br	7160 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    7104:	e0fffb17 	ldw	r3,-20(fp)
    7108:	e0fff615 	stw	r3,-40(fp)
    710c:	00000806 	br	7130 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    7110:	e0ffff17 	ldw	r3,-4(fp)
    7114:	e0bff617 	ldw	r2,-40(fp)
    7118:	1885883a 	add	r2,r3,r2
    711c:	e0fff717 	ldw	r3,-36(fp)
    7120:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7124:	e13ff617 	ldw	r4,-40(fp)
    7128:	21000044 	addi	r4,r4,1
    712c:	e13ff615 	stw	r4,-40(fp)
    7130:	e0bffa17 	ldw	r2,-24(fp)
    7134:	e0fff617 	ldw	r3,-40(fp)
    7138:	10fff52e 	bgeu	r2,r3,7110 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    713c:	e0fff417 	ldw	r3,-48(fp)
    7140:	00800044 	movi	r2,1
    7144:	10c4983a 	sll	r2,r2,r3
    7148:	e13fff17 	ldw	r4,-4(fp)
    714c:	2089883a 	add	r4,r4,r2
    7150:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    7154:	e0bff517 	ldw	r2,-44(fp)
    7158:	10800044 	addi	r2,r2,1
    715c:	e0bff515 	stw	r2,-44(fp)
    7160:	e0fff817 	ldw	r3,-32(fp)
    7164:	e13ff517 	ldw	r4,-44(fp)
    7168:	193fe62e 	bgeu	r3,r4,7104 <alt_up_pixel_buffer_dma_draw_box+0x168>
    716c:	0000c406 	br	7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7170:	e0bfee17 	ldw	r2,-72(fp)
    7174:	10800e17 	ldw	r2,56(r2)
    7178:	10800098 	cmpnei	r2,r2,2
    717c:	1000211e 	bne	r2,zero,7204 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    7180:	e0bff917 	ldw	r2,-28(fp)
    7184:	e0bff515 	stw	r2,-44(fp)
    7188:	00001a06 	br	71f4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    718c:	e0fffb17 	ldw	r3,-20(fp)
    7190:	e0fff615 	stw	r3,-40(fp)
    7194:	00000b06 	br	71c4 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    7198:	e13ff617 	ldw	r4,-40(fp)
    719c:	e13ff617 	ldw	r4,-40(fp)
    71a0:	2105883a 	add	r2,r4,r4
    71a4:	1007883a 	mov	r3,r2
    71a8:	e0bfff17 	ldw	r2,-4(fp)
    71ac:	1885883a 	add	r2,r3,r2
    71b0:	e0fff717 	ldw	r3,-36(fp)
    71b4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    71b8:	e0bff617 	ldw	r2,-40(fp)
    71bc:	10800044 	addi	r2,r2,1
    71c0:	e0bff615 	stw	r2,-40(fp)
    71c4:	e0fffa17 	ldw	r3,-24(fp)
    71c8:	e13ff617 	ldw	r4,-40(fp)
    71cc:	193ff22e 	bgeu	r3,r4,7198 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    71d0:	e0fff417 	ldw	r3,-48(fp)
    71d4:	00800044 	movi	r2,1
    71d8:	10c4983a 	sll	r2,r2,r3
    71dc:	e0ffff17 	ldw	r3,-4(fp)
    71e0:	1887883a 	add	r3,r3,r2
    71e4:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    71e8:	e13ff517 	ldw	r4,-44(fp)
    71ec:	21000044 	addi	r4,r4,1
    71f0:	e13ff515 	stw	r4,-44(fp)
    71f4:	e0bff817 	ldw	r2,-32(fp)
    71f8:	e0fff517 	ldw	r3,-44(fp)
    71fc:	10ffe32e 	bgeu	r2,r3,718c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    7200:	00009f06 	br	7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    7204:	e13ff917 	ldw	r4,-28(fp)
    7208:	e13ff515 	stw	r4,-44(fp)
    720c:	00001b06 	br	727c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    7210:	e0bffb17 	ldw	r2,-20(fp)
    7214:	e0bff615 	stw	r2,-40(fp)
    7218:	00000c06 	br	724c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    721c:	e0fff617 	ldw	r3,-40(fp)
    7220:	e0fff617 	ldw	r3,-40(fp)
    7224:	18c5883a 	add	r2,r3,r3
    7228:	1085883a 	add	r2,r2,r2
    722c:	1007883a 	mov	r3,r2
    7230:	e0bfff17 	ldw	r2,-4(fp)
    7234:	1885883a 	add	r2,r3,r2
    7238:	e0fff717 	ldw	r3,-36(fp)
    723c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7240:	e13ff617 	ldw	r4,-40(fp)
    7244:	21000044 	addi	r4,r4,1
    7248:	e13ff615 	stw	r4,-40(fp)
    724c:	e0bffa17 	ldw	r2,-24(fp)
    7250:	e0fff617 	ldw	r3,-40(fp)
    7254:	10fff12e 	bgeu	r2,r3,721c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    7258:	e0fff417 	ldw	r3,-48(fp)
    725c:	00800044 	movi	r2,1
    7260:	10c4983a 	sll	r2,r2,r3
    7264:	e13fff17 	ldw	r4,-4(fp)
    7268:	2089883a 	add	r4,r4,r2
    726c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    7270:	e0bff517 	ldw	r2,-44(fp)
    7274:	10800044 	addi	r2,r2,1
    7278:	e0bff515 	stw	r2,-44(fp)
    727c:	e0fff817 	ldw	r3,-32(fp)
    7280:	e13ff517 	ldw	r4,-44(fp)
    7284:	193fe22e 	bgeu	r3,r4,7210 <alt_up_pixel_buffer_dma_draw_box+0x274>
    7288:	00007d06 	br	7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    728c:	e0bfee17 	ldw	r2,-72(fp)
    7290:	10800e17 	ldw	r2,56(r2)
    7294:	10800058 	cmpnei	r2,r2,1
    7298:	1000221e 	bne	r2,zero,7324 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    729c:	e0fff917 	ldw	r3,-28(fp)
    72a0:	e13ffe17 	ldw	r4,-8(fp)
    72a4:	1905383a 	mul	r2,r3,r4
    72a8:	e0ffff17 	ldw	r3,-4(fp)
    72ac:	1887883a 	add	r3,r3,r2
    72b0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    72b4:	e13ff917 	ldw	r4,-28(fp)
    72b8:	e13ff215 	stw	r4,-56(fp)
    72bc:	00001506 	br	7314 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    72c0:	e0bffb17 	ldw	r2,-20(fp)
    72c4:	e0bff315 	stw	r2,-52(fp)
    72c8:	00000806 	br	72ec <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    72cc:	e0ffff17 	ldw	r3,-4(fp)
    72d0:	e0bff317 	ldw	r2,-52(fp)
    72d4:	1885883a 	add	r2,r3,r2
    72d8:	e0fff717 	ldw	r3,-36(fp)
    72dc:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    72e0:	e0fff317 	ldw	r3,-52(fp)
    72e4:	18c00044 	addi	r3,r3,1
    72e8:	e0fff315 	stw	r3,-52(fp)
    72ec:	e13ffa17 	ldw	r4,-24(fp)
    72f0:	e0bff317 	ldw	r2,-52(fp)
    72f4:	20bff52e 	bgeu	r4,r2,72cc <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    72f8:	e0ffff17 	ldw	r3,-4(fp)
    72fc:	e13ffe17 	ldw	r4,-8(fp)
    7300:	1907883a 	add	r3,r3,r4
    7304:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    7308:	e0bff217 	ldw	r2,-56(fp)
    730c:	10800044 	addi	r2,r2,1
    7310:	e0bff215 	stw	r2,-56(fp)
    7314:	e0fff817 	ldw	r3,-32(fp)
    7318:	e13ff217 	ldw	r4,-56(fp)
    731c:	193fe82e 	bgeu	r3,r4,72c0 <alt_up_pixel_buffer_dma_draw_box+0x324>
    7320:	00005706 	br	7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7324:	e0bfee17 	ldw	r2,-72(fp)
    7328:	10800e17 	ldw	r2,56(r2)
    732c:	10800098 	cmpnei	r2,r2,2
    7330:	1000291e 	bne	r2,zero,73d8 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    7334:	e0fffe17 	ldw	r3,-8(fp)
    7338:	e0fffe17 	ldw	r3,-8(fp)
    733c:	18c5883a 	add	r2,r3,r3
    7340:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    7344:	e13ff917 	ldw	r4,-28(fp)
    7348:	e0fffe17 	ldw	r3,-8(fp)
    734c:	20c5383a 	mul	r2,r4,r3
    7350:	e13fff17 	ldw	r4,-4(fp)
    7354:	2089883a 	add	r4,r4,r2
    7358:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    735c:	e0bff917 	ldw	r2,-28(fp)
    7360:	e0bff215 	stw	r2,-56(fp)
    7364:	00001806 	br	73c8 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    7368:	e0fffb17 	ldw	r3,-20(fp)
    736c:	e0fff315 	stw	r3,-52(fp)
    7370:	00000b06 	br	73a0 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    7374:	e13ff317 	ldw	r4,-52(fp)
    7378:	e13ff317 	ldw	r4,-52(fp)
    737c:	2105883a 	add	r2,r4,r4
    7380:	1007883a 	mov	r3,r2
    7384:	e0bfff17 	ldw	r2,-4(fp)
    7388:	1885883a 	add	r2,r3,r2
    738c:	e0fff717 	ldw	r3,-36(fp)
    7390:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7394:	e0bff317 	ldw	r2,-52(fp)
    7398:	10800044 	addi	r2,r2,1
    739c:	e0bff315 	stw	r2,-52(fp)
    73a0:	e0fffa17 	ldw	r3,-24(fp)
    73a4:	e13ff317 	ldw	r4,-52(fp)
    73a8:	193ff22e 	bgeu	r3,r4,7374 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    73ac:	e0bfff17 	ldw	r2,-4(fp)
    73b0:	e0fffe17 	ldw	r3,-8(fp)
    73b4:	10c5883a 	add	r2,r2,r3
    73b8:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    73bc:	e13ff217 	ldw	r4,-56(fp)
    73c0:	21000044 	addi	r4,r4,1
    73c4:	e13ff215 	stw	r4,-56(fp)
    73c8:	e0bff817 	ldw	r2,-32(fp)
    73cc:	e0fff217 	ldw	r3,-56(fp)
    73d0:	10ffe52e 	bgeu	r2,r3,7368 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    73d4:	00002a06 	br	7480 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    73d8:	e13ffe17 	ldw	r4,-8(fp)
    73dc:	e13ffe17 	ldw	r4,-8(fp)
    73e0:	2105883a 	add	r2,r4,r4
    73e4:	1085883a 	add	r2,r2,r2
    73e8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    73ec:	e0fff917 	ldw	r3,-28(fp)
    73f0:	e13ffe17 	ldw	r4,-8(fp)
    73f4:	1905383a 	mul	r2,r3,r4
    73f8:	e0ffff17 	ldw	r3,-4(fp)
    73fc:	1887883a 	add	r3,r3,r2
    7400:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    7404:	e13ff917 	ldw	r4,-28(fp)
    7408:	e13ff215 	stw	r4,-56(fp)
    740c:	00001906 	br	7474 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    7410:	e0bffb17 	ldw	r2,-20(fp)
    7414:	e0bff315 	stw	r2,-52(fp)
    7418:	00000c06 	br	744c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    741c:	e0fff317 	ldw	r3,-52(fp)
    7420:	e0fff317 	ldw	r3,-52(fp)
    7424:	18c5883a 	add	r2,r3,r3
    7428:	1085883a 	add	r2,r2,r2
    742c:	1007883a 	mov	r3,r2
    7430:	e0bfff17 	ldw	r2,-4(fp)
    7434:	1885883a 	add	r2,r3,r2
    7438:	e0fff717 	ldw	r3,-36(fp)
    743c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7440:	e13ff317 	ldw	r4,-52(fp)
    7444:	21000044 	addi	r4,r4,1
    7448:	e13ff315 	stw	r4,-52(fp)
    744c:	e0bffa17 	ldw	r2,-24(fp)
    7450:	e0fff317 	ldw	r3,-52(fp)
    7454:	10fff12e 	bgeu	r2,r3,741c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    7458:	e13fff17 	ldw	r4,-4(fp)
    745c:	e0bffe17 	ldw	r2,-8(fp)
    7460:	2089883a 	add	r4,r4,r2
    7464:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    7468:	e0fff217 	ldw	r3,-56(fp)
    746c:	18c00044 	addi	r3,r3,1
    7470:	e0fff215 	stw	r3,-56(fp)
    7474:	e13ff817 	ldw	r4,-32(fp)
    7478:	e0bff217 	ldw	r2,-56(fp)
    747c:	20bfe42e 	bgeu	r4,r2,7410 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    7480:	e037883a 	mov	sp,fp
    7484:	df000017 	ldw	fp,0(sp)
    7488:	dec00104 	addi	sp,sp,4
    748c:	f800283a 	ret

00007490 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    7490:	defff204 	addi	sp,sp,-56
    7494:	df000d15 	stw	fp,52(sp)
    7498:	df000d04 	addi	fp,sp,52
    749c:	e13ff315 	stw	r4,-52(fp)
    74a0:	e17ff415 	stw	r5,-48(fp)
    74a4:	e1bff515 	stw	r6,-44(fp)
    74a8:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    74ac:	e0bff317 	ldw	r2,-52(fp)
    74b0:	10800f17 	ldw	r2,60(r2)
    74b4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    74b8:	e0bff317 	ldw	r2,-52(fp)
    74bc:	10801017 	ldw	r2,64(r2)
    74c0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    74c4:	e0bff417 	ldw	r2,-48(fp)
    74c8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    74cc:	e0fff517 	ldw	r3,-44(fp)
    74d0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    74d4:	e13ff617 	ldw	r4,-40(fp)
    74d8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    74dc:	e0800117 	ldw	r2,4(fp)
    74e0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    74e4:	e0fffb17 	ldw	r3,-20(fp)
    74e8:	e13ffc17 	ldw	r4,-16(fp)
    74ec:	1900042e 	bgeu	r3,r4,7500 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    74f0:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    74f4:	e0fffb17 	ldw	r3,-20(fp)
    74f8:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    74fc:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    7500:	e13ffc17 	ldw	r4,-16(fp)
    7504:	e0bffe17 	ldw	r2,-8(fp)
    7508:	2080b12e 	bgeu	r4,r2,77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
    750c:	e0fffa17 	ldw	r3,-24(fp)
    7510:	e13ffd17 	ldw	r4,-12(fp)
    7514:	19000136 	bltu	r3,r4,751c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    7518:	0000ad06 	br	77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    751c:	e0bffb17 	ldw	r2,-20(fp)
    7520:	e0fffe17 	ldw	r3,-8(fp)
    7524:	10c00336 	bltu	r2,r3,7534 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    7528:	e13ffe17 	ldw	r4,-8(fp)
    752c:	213fffc4 	addi	r4,r4,-1
    7530:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    7534:	e0800217 	ldw	r2,8(fp)
    7538:	10800058 	cmpnei	r2,r2,1
    753c:	1000041e 	bne	r2,zero,7550 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    7540:	e0bff317 	ldw	r2,-52(fp)
    7544:	10800c17 	ldw	r2,48(r2)
    7548:	e0bfff15 	stw	r2,-4(fp)
    754c:	00000306 	br	755c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    7550:	e0bff317 	ldw	r2,-52(fp)
    7554:	10800b17 	ldw	r2,44(r2)
    7558:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    755c:	e0bff317 	ldw	r2,-52(fp)
    7560:	10800d17 	ldw	r2,52(r2)
    7564:	1004c03a 	cmpne	r2,r2,zero
    7568:	1000431e 	bne	r2,zero,7678 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    756c:	e0bff317 	ldw	r2,-52(fp)
    7570:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    7574:	e0fffa17 	ldw	r3,-24(fp)
    7578:	1884983a 	sll	r2,r3,r2
    757c:	e13fff17 	ldw	r4,-4(fp)
    7580:	2089883a 	add	r4,r4,r2
    7584:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7588:	e0bff317 	ldw	r2,-52(fp)
    758c:	10800e17 	ldw	r2,56(r2)
    7590:	10800058 	cmpnei	r2,r2,1
    7594:	10000f1e 	bne	r2,zero,75d4 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    7598:	e0bffc17 	ldw	r2,-16(fp)
    759c:	e0bff815 	stw	r2,-32(fp)
    75a0:	00000806 	br	75c4 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    75a4:	e0ffff17 	ldw	r3,-4(fp)
    75a8:	e0bff817 	ldw	r2,-32(fp)
    75ac:	1885883a 	add	r2,r3,r2
    75b0:	e0fff917 	ldw	r3,-28(fp)
    75b4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    75b8:	e0fff817 	ldw	r3,-32(fp)
    75bc:	18c00044 	addi	r3,r3,1
    75c0:	e0fff815 	stw	r3,-32(fp)
    75c4:	e13ffb17 	ldw	r4,-20(fp)
    75c8:	e0bff817 	ldw	r2,-32(fp)
    75cc:	20bff52e 	bgeu	r4,r2,75a4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
    75d0:	00007f06 	br	77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    75d4:	e0bff317 	ldw	r2,-52(fp)
    75d8:	10800e17 	ldw	r2,56(r2)
    75dc:	10800098 	cmpnei	r2,r2,2
    75e0:	1000121e 	bne	r2,zero,762c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    75e4:	e0fffc17 	ldw	r3,-16(fp)
    75e8:	e0fff815 	stw	r3,-32(fp)
    75ec:	00000b06 	br	761c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    75f0:	e13ff817 	ldw	r4,-32(fp)
    75f4:	e13ff817 	ldw	r4,-32(fp)
    75f8:	2105883a 	add	r2,r4,r4
    75fc:	1007883a 	mov	r3,r2
    7600:	e0bfff17 	ldw	r2,-4(fp)
    7604:	1885883a 	add	r2,r3,r2
    7608:	e0fff917 	ldw	r3,-28(fp)
    760c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    7610:	e0bff817 	ldw	r2,-32(fp)
    7614:	10800044 	addi	r2,r2,1
    7618:	e0bff815 	stw	r2,-32(fp)
    761c:	e0fffb17 	ldw	r3,-20(fp)
    7620:	e13ff817 	ldw	r4,-32(fp)
    7624:	193ff22e 	bgeu	r3,r4,75f0 <alt_up_pixel_buffer_dma_draw_hline+0x160>
    7628:	00006906 	br	77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    762c:	e0bffc17 	ldw	r2,-16(fp)
    7630:	e0bff815 	stw	r2,-32(fp)
    7634:	00000c06 	br	7668 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    7638:	e0fff817 	ldw	r3,-32(fp)
    763c:	e0fff817 	ldw	r3,-32(fp)
    7640:	18c5883a 	add	r2,r3,r3
    7644:	1085883a 	add	r2,r2,r2
    7648:	1007883a 	mov	r3,r2
    764c:	e0bfff17 	ldw	r2,-4(fp)
    7650:	1885883a 	add	r2,r3,r2
    7654:	e0fff917 	ldw	r3,-28(fp)
    7658:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    765c:	e13ff817 	ldw	r4,-32(fp)
    7660:	21000044 	addi	r4,r4,1
    7664:	e13ff815 	stw	r4,-32(fp)
    7668:	e0bffb17 	ldw	r2,-20(fp)
    766c:	e0fff817 	ldw	r3,-32(fp)
    7670:	10fff12e 	bgeu	r2,r3,7638 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    7674:	00005606 	br	77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7678:	e0bff317 	ldw	r2,-52(fp)
    767c:	10800e17 	ldw	r2,56(r2)
    7680:	10800058 	cmpnei	r2,r2,1
    7684:	1000151e 	bne	r2,zero,76dc <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    7688:	e13ffa17 	ldw	r4,-24(fp)
    768c:	e0fffe17 	ldw	r3,-8(fp)
    7690:	20c5383a 	mul	r2,r4,r3
    7694:	e13fff17 	ldw	r4,-4(fp)
    7698:	2089883a 	add	r4,r4,r2
    769c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    76a0:	e0bffc17 	ldw	r2,-16(fp)
    76a4:	e0bff715 	stw	r2,-36(fp)
    76a8:	00000806 	br	76cc <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    76ac:	e0ffff17 	ldw	r3,-4(fp)
    76b0:	e0bff717 	ldw	r2,-36(fp)
    76b4:	1885883a 	add	r2,r3,r2
    76b8:	e0fff917 	ldw	r3,-28(fp)
    76bc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    76c0:	e0fff717 	ldw	r3,-36(fp)
    76c4:	18c00044 	addi	r3,r3,1
    76c8:	e0fff715 	stw	r3,-36(fp)
    76cc:	e13ffb17 	ldw	r4,-20(fp)
    76d0:	e0bff717 	ldw	r2,-36(fp)
    76d4:	20bff52e 	bgeu	r4,r2,76ac <alt_up_pixel_buffer_dma_draw_hline+0x21c>
    76d8:	00003d06 	br	77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    76dc:	e0bff317 	ldw	r2,-52(fp)
    76e0:	10800e17 	ldw	r2,56(r2)
    76e4:	10800098 	cmpnei	r2,r2,2
    76e8:	10001c1e 	bne	r2,zero,775c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
    76ec:	e0fffe17 	ldw	r3,-8(fp)
    76f0:	e0fffe17 	ldw	r3,-8(fp)
    76f4:	18c5883a 	add	r2,r3,r3
    76f8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    76fc:	e13ffa17 	ldw	r4,-24(fp)
    7700:	e0fffe17 	ldw	r3,-8(fp)
    7704:	20c5383a 	mul	r2,r4,r3
    7708:	e13fff17 	ldw	r4,-4(fp)
    770c:	2089883a 	add	r4,r4,r2
    7710:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    7714:	e0bffc17 	ldw	r2,-16(fp)
    7718:	e0bff715 	stw	r2,-36(fp)
    771c:	00000b06 	br	774c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    7720:	e0fff717 	ldw	r3,-36(fp)
    7724:	e0fff717 	ldw	r3,-36(fp)
    7728:	18c5883a 	add	r2,r3,r3
    772c:	1007883a 	mov	r3,r2
    7730:	e0bfff17 	ldw	r2,-4(fp)
    7734:	1885883a 	add	r2,r3,r2
    7738:	e0fff917 	ldw	r3,-28(fp)
    773c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    7740:	e13ff717 	ldw	r4,-36(fp)
    7744:	21000044 	addi	r4,r4,1
    7748:	e13ff715 	stw	r4,-36(fp)
    774c:	e0bffb17 	ldw	r2,-20(fp)
    7750:	e0fff717 	ldw	r3,-36(fp)
    7754:	10fff22e 	bgeu	r2,r3,7720 <alt_up_pixel_buffer_dma_draw_hline+0x290>
    7758:	00001d06 	br	77d0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    775c:	e13ffe17 	ldw	r4,-8(fp)
    7760:	e13ffe17 	ldw	r4,-8(fp)
    7764:	2105883a 	add	r2,r4,r4
    7768:	1085883a 	add	r2,r2,r2
    776c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    7770:	e0fffa17 	ldw	r3,-24(fp)
    7774:	e13ffe17 	ldw	r4,-8(fp)
    7778:	1905383a 	mul	r2,r3,r4
    777c:	e0ffff17 	ldw	r3,-4(fp)
    7780:	1887883a 	add	r3,r3,r2
    7784:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
    7788:	e13ffc17 	ldw	r4,-16(fp)
    778c:	e13ff715 	stw	r4,-36(fp)
    7790:	00000c06 	br	77c4 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    7794:	e0fff717 	ldw	r3,-36(fp)
    7798:	e0fff717 	ldw	r3,-36(fp)
    779c:	18c5883a 	add	r2,r3,r3
    77a0:	1085883a 	add	r2,r2,r2
    77a4:	1007883a 	mov	r3,r2
    77a8:	e0bfff17 	ldw	r2,-4(fp)
    77ac:	1885883a 	add	r2,r3,r2
    77b0:	e0fff917 	ldw	r3,-28(fp)
    77b4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    77b8:	e13ff717 	ldw	r4,-36(fp)
    77bc:	21000044 	addi	r4,r4,1
    77c0:	e13ff715 	stw	r4,-36(fp)
    77c4:	e0bffb17 	ldw	r2,-20(fp)
    77c8:	e0fff717 	ldw	r3,-36(fp)
    77cc:	10fff12e 	bgeu	r2,r3,7794 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    77d0:	e037883a 	mov	sp,fp
    77d4:	df000017 	ldw	fp,0(sp)
    77d8:	dec00104 	addi	sp,sp,4
    77dc:	f800283a 	ret

000077e0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    77e0:	defff104 	addi	sp,sp,-60
    77e4:	df000e15 	stw	fp,56(sp)
    77e8:	df000e04 	addi	fp,sp,56
    77ec:	e13ff215 	stw	r4,-56(fp)
    77f0:	e17ff315 	stw	r5,-52(fp)
    77f4:	e1bff415 	stw	r6,-48(fp)
    77f8:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    77fc:	e0bff217 	ldw	r2,-56(fp)
    7800:	10800f17 	ldw	r2,60(r2)
    7804:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    7808:	e0bff217 	ldw	r2,-56(fp)
    780c:	10801017 	ldw	r2,64(r2)
    7810:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
    7814:	e0bff317 	ldw	r2,-52(fp)
    7818:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
    781c:	e0fff417 	ldw	r3,-48(fp)
    7820:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
    7824:	e13ff517 	ldw	r4,-44(fp)
    7828:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    782c:	e0800117 	ldw	r2,4(fp)
    7830:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    7834:	e0fffa17 	ldw	r3,-24(fp)
    7838:	e13ffb17 	ldw	r4,-20(fp)
    783c:	1900042e 	bgeu	r3,r4,7850 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
    7840:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
    7844:	e0fffa17 	ldw	r3,-24(fp)
    7848:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
    784c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    7850:	e13ffc17 	ldw	r4,-16(fp)
    7854:	e0bffe17 	ldw	r2,-8(fp)
    7858:	2080d12e 	bgeu	r4,r2,7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
    785c:	e0fffb17 	ldw	r3,-20(fp)
    7860:	e13ffd17 	ldw	r4,-12(fp)
    7864:	19000136 	bltu	r3,r4,786c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    7868:	0000cd06 	br	7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    786c:	e0bffa17 	ldw	r2,-24(fp)
    7870:	e0fffd17 	ldw	r3,-12(fp)
    7874:	10c00336 	bltu	r2,r3,7884 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
    7878:	e13ffd17 	ldw	r4,-12(fp)
    787c:	213fffc4 	addi	r4,r4,-1
    7880:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    7884:	e0800217 	ldw	r2,8(fp)
    7888:	10800058 	cmpnei	r2,r2,1
    788c:	1000041e 	bne	r2,zero,78a0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    7890:	e0bff217 	ldw	r2,-56(fp)
    7894:	10800c17 	ldw	r2,48(r2)
    7898:	e0bfff15 	stw	r2,-4(fp)
    789c:	00000306 	br	78ac <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    78a0:	e0bff217 	ldw	r2,-56(fp)
    78a4:	10800b17 	ldw	r2,44(r2)
    78a8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    78ac:	e0bff217 	ldw	r2,-56(fp)
    78b0:	10800d17 	ldw	r2,52(r2)
    78b4:	1004c03a 	cmpne	r2,r2,zero
    78b8:	1000571e 	bne	r2,zero,7a18 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    78bc:	e0bff217 	ldw	r2,-56(fp)
    78c0:	10801317 	ldw	r2,76(r2)
    78c4:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
    78c8:	e0bff717 	ldw	r2,-36(fp)
    78cc:	e0fffb17 	ldw	r3,-20(fp)
    78d0:	1884983a 	sll	r2,r3,r2
    78d4:	e13fff17 	ldw	r4,-4(fp)
    78d8:	2089883a 	add	r4,r4,r2
    78dc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    78e0:	e0bff217 	ldw	r2,-56(fp)
    78e4:	10800e17 	ldw	r2,56(r2)
    78e8:	10800058 	cmpnei	r2,r2,1
    78ec:	1000151e 	bne	r2,zero,7944 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
    78f0:	e0bffb17 	ldw	r2,-20(fp)
    78f4:	e0bff815 	stw	r2,-32(fp)
    78f8:	00000e06 	br	7934 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    78fc:	e0ffff17 	ldw	r3,-4(fp)
    7900:	e0bffc17 	ldw	r2,-16(fp)
    7904:	1885883a 	add	r2,r3,r2
    7908:	e0fff917 	ldw	r3,-28(fp)
    790c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    7910:	e0fff717 	ldw	r3,-36(fp)
    7914:	00800044 	movi	r2,1
    7918:	10c4983a 	sll	r2,r2,r3
    791c:	e0ffff17 	ldw	r3,-4(fp)
    7920:	1887883a 	add	r3,r3,r2
    7924:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    7928:	e13ff817 	ldw	r4,-32(fp)
    792c:	21000044 	addi	r4,r4,1
    7930:	e13ff815 	stw	r4,-32(fp)
    7934:	e0bffa17 	ldw	r2,-24(fp)
    7938:	e0fff817 	ldw	r3,-32(fp)
    793c:	10ffef2e 	bgeu	r2,r3,78fc <alt_up_pixel_buffer_dma_draw_vline+0x11c>
    7940:	00009706 	br	7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7944:	e0bff217 	ldw	r2,-56(fp)
    7948:	10800e17 	ldw	r2,56(r2)
    794c:	10800098 	cmpnei	r2,r2,2
    7950:	1000181e 	bne	r2,zero,79b4 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
    7954:	e13ffb17 	ldw	r4,-20(fp)
    7958:	e13ff815 	stw	r4,-32(fp)
    795c:	00001106 	br	79a4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    7960:	e0fffc17 	ldw	r3,-16(fp)
    7964:	e0fffc17 	ldw	r3,-16(fp)
    7968:	18c5883a 	add	r2,r3,r3
    796c:	1007883a 	mov	r3,r2
    7970:	e0bfff17 	ldw	r2,-4(fp)
    7974:	1885883a 	add	r2,r3,r2
    7978:	e0fff917 	ldw	r3,-28(fp)
    797c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    7980:	e0fff717 	ldw	r3,-36(fp)
    7984:	00800044 	movi	r2,1
    7988:	10c4983a 	sll	r2,r2,r3
    798c:	e13fff17 	ldw	r4,-4(fp)
    7990:	2089883a 	add	r4,r4,r2
    7994:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    7998:	e0bff817 	ldw	r2,-32(fp)
    799c:	10800044 	addi	r2,r2,1
    79a0:	e0bff815 	stw	r2,-32(fp)
    79a4:	e0fffa17 	ldw	r3,-24(fp)
    79a8:	e13ff817 	ldw	r4,-32(fp)
    79ac:	193fec2e 	bgeu	r3,r4,7960 <alt_up_pixel_buffer_dma_draw_vline+0x180>
    79b0:	00007b06 	br	7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    79b4:	e0bffb17 	ldw	r2,-20(fp)
    79b8:	e0bff815 	stw	r2,-32(fp)
    79bc:	00001206 	br	7a08 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    79c0:	e0fffc17 	ldw	r3,-16(fp)
    79c4:	e0fffc17 	ldw	r3,-16(fp)
    79c8:	18c5883a 	add	r2,r3,r3
    79cc:	1085883a 	add	r2,r2,r2
    79d0:	1007883a 	mov	r3,r2
    79d4:	e0bfff17 	ldw	r2,-4(fp)
    79d8:	1885883a 	add	r2,r3,r2
    79dc:	e0fff917 	ldw	r3,-28(fp)
    79e0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    79e4:	e0fff717 	ldw	r3,-36(fp)
    79e8:	00800044 	movi	r2,1
    79ec:	10c4983a 	sll	r2,r2,r3
    79f0:	e13fff17 	ldw	r4,-4(fp)
    79f4:	2089883a 	add	r4,r4,r2
    79f8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    79fc:	e0bff817 	ldw	r2,-32(fp)
    7a00:	10800044 	addi	r2,r2,1
    7a04:	e0bff815 	stw	r2,-32(fp)
    7a08:	e0fffa17 	ldw	r3,-24(fp)
    7a0c:	e13ff817 	ldw	r4,-32(fp)
    7a10:	193feb2e 	bgeu	r3,r4,79c0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
    7a14:	00006206 	br	7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7a18:	e0bff217 	ldw	r2,-56(fp)
    7a1c:	10800e17 	ldw	r2,56(r2)
    7a20:	10800058 	cmpnei	r2,r2,1
    7a24:	1000191e 	bne	r2,zero,7a8c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
    7a28:	e0fffb17 	ldw	r3,-20(fp)
    7a2c:	e13ffe17 	ldw	r4,-8(fp)
    7a30:	1905383a 	mul	r2,r3,r4
    7a34:	e0ffff17 	ldw	r3,-4(fp)
    7a38:	1887883a 	add	r3,r3,r2
    7a3c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    7a40:	e13ffb17 	ldw	r4,-20(fp)
    7a44:	e13ff615 	stw	r4,-40(fp)
    7a48:	00000c06 	br	7a7c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    7a4c:	e0ffff17 	ldw	r3,-4(fp)
    7a50:	e0bffc17 	ldw	r2,-16(fp)
    7a54:	1885883a 	add	r2,r3,r2
    7a58:	e0fff917 	ldw	r3,-28(fp)
    7a5c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    7a60:	e0bfff17 	ldw	r2,-4(fp)
    7a64:	e0fffe17 	ldw	r3,-8(fp)
    7a68:	10c5883a 	add	r2,r2,r3
    7a6c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    7a70:	e13ff617 	ldw	r4,-40(fp)
    7a74:	21000044 	addi	r4,r4,1
    7a78:	e13ff615 	stw	r4,-40(fp)
    7a7c:	e0bffa17 	ldw	r2,-24(fp)
    7a80:	e0fff617 	ldw	r3,-40(fp)
    7a84:	10fff12e 	bgeu	r2,r3,7a4c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
    7a88:	00004506 	br	7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7a8c:	e0bff217 	ldw	r2,-56(fp)
    7a90:	10800e17 	ldw	r2,56(r2)
    7a94:	10800098 	cmpnei	r2,r2,2
    7a98:	1000201e 	bne	r2,zero,7b1c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
    7a9c:	e13ffe17 	ldw	r4,-8(fp)
    7aa0:	e13ffe17 	ldw	r4,-8(fp)
    7aa4:	2105883a 	add	r2,r4,r4
    7aa8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    7aac:	e0fffb17 	ldw	r3,-20(fp)
    7ab0:	e13ffe17 	ldw	r4,-8(fp)
    7ab4:	1905383a 	mul	r2,r3,r4
    7ab8:	e0ffff17 	ldw	r3,-4(fp)
    7abc:	1887883a 	add	r3,r3,r2
    7ac0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    7ac4:	e13ffb17 	ldw	r4,-20(fp)
    7ac8:	e13ff615 	stw	r4,-40(fp)
    7acc:	00000f06 	br	7b0c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    7ad0:	e0fffc17 	ldw	r3,-16(fp)
    7ad4:	e0fffc17 	ldw	r3,-16(fp)
    7ad8:	18c5883a 	add	r2,r3,r3
    7adc:	1007883a 	mov	r3,r2
    7ae0:	e0bfff17 	ldw	r2,-4(fp)
    7ae4:	1885883a 	add	r2,r3,r2
    7ae8:	e0fff917 	ldw	r3,-28(fp)
    7aec:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    7af0:	e13fff17 	ldw	r4,-4(fp)
    7af4:	e0bffe17 	ldw	r2,-8(fp)
    7af8:	2089883a 	add	r4,r4,r2
    7afc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    7b00:	e0fff617 	ldw	r3,-40(fp)
    7b04:	18c00044 	addi	r3,r3,1
    7b08:	e0fff615 	stw	r3,-40(fp)
    7b0c:	e13ffa17 	ldw	r4,-24(fp)
    7b10:	e0bff617 	ldw	r2,-40(fp)
    7b14:	20bfee2e 	bgeu	r4,r2,7ad0 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
    7b18:	00002106 	br	7ba0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    7b1c:	e0fffe17 	ldw	r3,-8(fp)
    7b20:	e0fffe17 	ldw	r3,-8(fp)
    7b24:	18c5883a 	add	r2,r3,r3
    7b28:	1085883a 	add	r2,r2,r2
    7b2c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    7b30:	e13ffb17 	ldw	r4,-20(fp)
    7b34:	e0fffe17 	ldw	r3,-8(fp)
    7b38:	20c5383a 	mul	r2,r4,r3
    7b3c:	e13fff17 	ldw	r4,-4(fp)
    7b40:	2089883a 	add	r4,r4,r2
    7b44:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    7b48:	e0bffb17 	ldw	r2,-20(fp)
    7b4c:	e0bff615 	stw	r2,-40(fp)
    7b50:	00001006 	br	7b94 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    7b54:	e0fffc17 	ldw	r3,-16(fp)
    7b58:	e0fffc17 	ldw	r3,-16(fp)
    7b5c:	18c5883a 	add	r2,r3,r3
    7b60:	1085883a 	add	r2,r2,r2
    7b64:	1007883a 	mov	r3,r2
    7b68:	e0bfff17 	ldw	r2,-4(fp)
    7b6c:	1885883a 	add	r2,r3,r2
    7b70:	e0fff917 	ldw	r3,-28(fp)
    7b74:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    7b78:	e13fff17 	ldw	r4,-4(fp)
    7b7c:	e0bffe17 	ldw	r2,-8(fp)
    7b80:	2089883a 	add	r4,r4,r2
    7b84:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    7b88:	e0fff617 	ldw	r3,-40(fp)
    7b8c:	18c00044 	addi	r3,r3,1
    7b90:	e0fff615 	stw	r3,-40(fp)
    7b94:	e13ffa17 	ldw	r4,-24(fp)
    7b98:	e0bff617 	ldw	r2,-40(fp)
    7b9c:	20bfed2e 	bgeu	r4,r2,7b54 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    7ba0:	e037883a 	mov	sp,fp
    7ba4:	df000017 	ldw	fp,0(sp)
    7ba8:	dec00104 	addi	sp,sp,4
    7bac:	f800283a 	ret

00007bb0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    7bb0:	defff804 	addi	sp,sp,-32
    7bb4:	dfc00715 	stw	ra,28(sp)
    7bb8:	df000615 	stw	fp,24(sp)
    7bbc:	df000604 	addi	fp,sp,24
    7bc0:	e13ffc15 	stw	r4,-16(fp)
    7bc4:	e17ffd15 	stw	r5,-12(fp)
    7bc8:	e1bffe15 	stw	r6,-8(fp)
    7bcc:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    7bd0:	e0800317 	ldw	r2,12(fp)
    7bd4:	d8800015 	stw	r2,0(sp)
    7bd8:	e0800417 	ldw	r2,16(fp)
    7bdc:	d8800115 	stw	r2,4(sp)
    7be0:	e13ffc17 	ldw	r4,-16(fp)
    7be4:	e17ffd17 	ldw	r5,-12(fp)
    7be8:	e1bfff17 	ldw	r6,-4(fp)
    7bec:	e1fffe17 	ldw	r7,-8(fp)
    7bf0:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    7bf4:	e0800317 	ldw	r2,12(fp)
    7bf8:	d8800015 	stw	r2,0(sp)
    7bfc:	e0800417 	ldw	r2,16(fp)
    7c00:	d8800115 	stw	r2,4(sp)
    7c04:	e13ffc17 	ldw	r4,-16(fp)
    7c08:	e17ffd17 	ldw	r5,-12(fp)
    7c0c:	e1bfff17 	ldw	r6,-4(fp)
    7c10:	e1c00217 	ldw	r7,8(fp)
    7c14:	00074900 	call	7490 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    7c18:	e0800317 	ldw	r2,12(fp)
    7c1c:	d8800015 	stw	r2,0(sp)
    7c20:	e0800417 	ldw	r2,16(fp)
    7c24:	d8800115 	stw	r2,4(sp)
    7c28:	e13ffc17 	ldw	r4,-16(fp)
    7c2c:	e17ffd17 	ldw	r5,-12(fp)
    7c30:	e1bffe17 	ldw	r6,-8(fp)
    7c34:	e1c00217 	ldw	r7,8(fp)
    7c38:	00077e00 	call	77e0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    7c3c:	e0800317 	ldw	r2,12(fp)
    7c40:	d8800015 	stw	r2,0(sp)
    7c44:	e0800417 	ldw	r2,16(fp)
    7c48:	d8800115 	stw	r2,4(sp)
    7c4c:	e13ffc17 	ldw	r4,-16(fp)
    7c50:	e17fff17 	ldw	r5,-4(fp)
    7c54:	e1bffe17 	ldw	r6,-8(fp)
    7c58:	e1c00217 	ldw	r7,8(fp)
    7c5c:	00077e00 	call	77e0 <alt_up_pixel_buffer_dma_draw_vline>
}
    7c60:	e037883a 	mov	sp,fp
    7c64:	dfc00117 	ldw	ra,4(sp)
    7c68:	df000017 	ldw	fp,0(sp)
    7c6c:	dec00204 	addi	sp,sp,8
    7c70:	f800283a 	ret

00007c74 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    7c74:	defffb04 	addi	sp,sp,-20
    7c78:	df000415 	stw	fp,16(sp)
    7c7c:	df000404 	addi	fp,sp,16
    7c80:	e13ffc15 	stw	r4,-16(fp)
    7c84:	e17ffd15 	stw	r5,-12(fp)
    7c88:	e1bffe15 	stw	r6,-8(fp)
    7c8c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
    7c90:	e0c00217 	ldw	r3,8(fp)
    7c94:	1804c03a 	cmpne	r2,r3,zero
    7c98:	10000b1e 	bne	r2,zero,7cc8 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    7c9c:	e13ffd17 	ldw	r4,-12(fp)
    7ca0:	e0ffff17 	ldw	r3,-4(fp)
    7ca4:	20c5383a 	mul	r2,r4,r3
    7ca8:	e13ffe17 	ldw	r4,-8(fp)
    7cac:	1105883a 	add	r2,r2,r4
    7cb0:	1007883a 	mov	r3,r2
    7cb4:	e0bffc17 	ldw	r2,-16(fp)
    7cb8:	1885883a 	add	r2,r3,r2
    7cbc:	e0c00117 	ldw	r3,4(fp)
    7cc0:	10c00025 	stbio	r3,0(r2)
    7cc4:	00001b06 	br	7d34 <helper_plot_pixel+0xc0>
	else if (mode == 1)
    7cc8:	e1000217 	ldw	r4,8(fp)
    7ccc:	20800058 	cmpnei	r2,r4,1
    7cd0:	10000c1e 	bne	r2,zero,7d04 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    7cd4:	e0fffd17 	ldw	r3,-12(fp)
    7cd8:	e13fff17 	ldw	r4,-4(fp)
    7cdc:	1905383a 	mul	r2,r3,r4
    7ce0:	e0fffe17 	ldw	r3,-8(fp)
    7ce4:	10c5883a 	add	r2,r2,r3
    7ce8:	1085883a 	add	r2,r2,r2
    7cec:	1007883a 	mov	r3,r2
    7cf0:	e0bffc17 	ldw	r2,-16(fp)
    7cf4:	1885883a 	add	r2,r3,r2
    7cf8:	e1000117 	ldw	r4,4(fp)
    7cfc:	1100002d 	sthio	r4,0(r2)
    7d00:	00000c06 	br	7d34 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    7d04:	e0fffd17 	ldw	r3,-12(fp)
    7d08:	e13fff17 	ldw	r4,-4(fp)
    7d0c:	1905383a 	mul	r2,r3,r4
    7d10:	e0fffe17 	ldw	r3,-8(fp)
    7d14:	10c5883a 	add	r2,r2,r3
    7d18:	1085883a 	add	r2,r2,r2
    7d1c:	1085883a 	add	r2,r2,r2
    7d20:	1007883a 	mov	r3,r2
    7d24:	e0bffc17 	ldw	r2,-16(fp)
    7d28:	1885883a 	add	r2,r3,r2
    7d2c:	e1000117 	ldw	r4,4(fp)
    7d30:	11000035 	stwio	r4,0(r2)
}
    7d34:	e037883a 	mov	sp,fp
    7d38:	df000017 	ldw	fp,0(sp)
    7d3c:	dec00104 	addi	sp,sp,4
    7d40:	f800283a 	ret

00007d44 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    7d44:	deffe404 	addi	sp,sp,-112
    7d48:	dfc01b15 	stw	ra,108(sp)
    7d4c:	df001a15 	stw	fp,104(sp)
    7d50:	df001a04 	addi	fp,sp,104
    7d54:	e13fe815 	stw	r4,-96(fp)
    7d58:	e17fe915 	stw	r5,-92(fp)
    7d5c:	e1bfea15 	stw	r6,-88(fp)
    7d60:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
    7d64:	e0bfe917 	ldw	r2,-92(fp)
    7d68:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
    7d6c:	e0ffea17 	ldw	r3,-88(fp)
    7d70:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
    7d74:	e13feb17 	ldw	r4,-84(fp)
    7d78:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
    7d7c:	e0800217 	ldw	r2,8(fp)
    7d80:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    7d84:	e0fff717 	ldw	r3,-36(fp)
    7d88:	e13ff917 	ldw	r4,-28(fp)
    7d8c:	1905c83a 	sub	r2,r3,r4
    7d90:	e0bfff15 	stw	r2,-4(fp)
    7d94:	e0ffff17 	ldw	r3,-4(fp)
    7d98:	1804403a 	cmpge	r2,r3,zero
    7d9c:	1000031e 	bne	r2,zero,7dac <alt_up_pixel_buffer_dma_draw_line+0x68>
    7da0:	e13fff17 	ldw	r4,-4(fp)
    7da4:	0109c83a 	sub	r4,zero,r4
    7da8:	e13fff15 	stw	r4,-4(fp)
    7dac:	e0fff817 	ldw	r3,-32(fp)
    7db0:	e13ffa17 	ldw	r4,-24(fp)
    7db4:	1905c83a 	sub	r2,r3,r4
    7db8:	e0bffe15 	stw	r2,-8(fp)
    7dbc:	e0fffe17 	ldw	r3,-8(fp)
    7dc0:	1804403a 	cmpge	r2,r3,zero
    7dc4:	1000031e 	bne	r2,zero,7dd4 <alt_up_pixel_buffer_dma_draw_line+0x90>
    7dc8:	e13ffe17 	ldw	r4,-8(fp)
    7dcc:	0109c83a 	sub	r4,zero,r4
    7dd0:	e13ffe15 	stw	r4,-8(fp)
    7dd4:	e0fffe17 	ldw	r3,-8(fp)
    7dd8:	e13fff17 	ldw	r4,-4(fp)
    7ddc:	1904803a 	cmplt	r2,r3,r4
    7de0:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    7de4:	e0bfe817 	ldw	r2,-96(fp)
    7de8:	10800e17 	ldw	r2,56(r2)
    7dec:	10800060 	cmpeqi	r2,r2,1
    7df0:	10000c1e 	bne	r2,zero,7e24 <alt_up_pixel_buffer_dma_draw_line+0xe0>
    7df4:	e0bfe817 	ldw	r2,-96(fp)
    7df8:	10800e17 	ldw	r2,56(r2)
    7dfc:	10800098 	cmpnei	r2,r2,2
    7e00:	1000031e 	bne	r2,zero,7e10 <alt_up_pixel_buffer_dma_draw_line+0xcc>
    7e04:	00800044 	movi	r2,1
    7e08:	e0bffc15 	stw	r2,-16(fp)
    7e0c:	00000206 	br	7e18 <alt_up_pixel_buffer_dma_draw_line+0xd4>
    7e10:	00c00084 	movi	r3,2
    7e14:	e0fffc15 	stw	r3,-16(fp)
    7e18:	e13ffc17 	ldw	r4,-16(fp)
    7e1c:	e13ffd15 	stw	r4,-12(fp)
    7e20:	00000106 	br	7e28 <alt_up_pixel_buffer_dma_draw_line+0xe4>
    7e24:	e03ffd15 	stw	zero,-12(fp)
    7e28:	e0bffd17 	ldw	r2,-12(fp)
    7e2c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
    7e30:	e0c00317 	ldw	r3,12(fp)
    7e34:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    7e38:	e0bfe817 	ldw	r2,-96(fp)
    7e3c:	10800d17 	ldw	r2,52(r2)
    7e40:	1004c03a 	cmpne	r2,r2,zero
    7e44:	1000091e 	bne	r2,zero,7e6c <alt_up_pixel_buffer_dma_draw_line+0x128>
    7e48:	e0bfe817 	ldw	r2,-96(fp)
    7e4c:	10c01317 	ldw	r3,76(r2)
    7e50:	e0bfef17 	ldw	r2,-68(fp)
    7e54:	1885c83a 	sub	r2,r3,r2
    7e58:	1007883a 	mov	r3,r2
    7e5c:	00800044 	movi	r2,1
    7e60:	10c4983a 	sll	r2,r2,r3
    7e64:	e0bffb15 	stw	r2,-20(fp)
    7e68:	00000306 	br	7e78 <alt_up_pixel_buffer_dma_draw_line+0x134>
    7e6c:	e0bfe817 	ldw	r2,-96(fp)
    7e70:	10800f17 	ldw	r2,60(r2)
    7e74:	e0bffb15 	stw	r2,-20(fp)
    7e78:	e13ffb17 	ldw	r4,-20(fp)
    7e7c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
    7e80:	e0800417 	ldw	r2,16(fp)
    7e84:	10800058 	cmpnei	r2,r2,1
    7e88:	1000041e 	bne	r2,zero,7e9c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
    7e8c:	e0bfe817 	ldw	r2,-96(fp)
    7e90:	10800c17 	ldw	r2,48(r2)
    7e94:	e0bfed15 	stw	r2,-76(fp)
    7e98:	00000306 	br	7ea8 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    7e9c:	e0bfe817 	ldw	r2,-96(fp)
    7ea0:	10800b17 	ldw	r2,44(r2)
    7ea4:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
    7ea8:	e0fff603 	ldbu	r3,-40(fp)
    7eac:	18803fcc 	andi	r2,r3,255
    7eb0:	1080201c 	xori	r2,r2,128
    7eb4:	10bfe004 	addi	r2,r2,-128
    7eb8:	10800050 	cmplti	r2,r2,1
    7ebc:	10000c1e 	bne	r2,zero,7ef0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
    7ec0:	e13ffa17 	ldw	r4,-24(fp)
    7ec4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
    7ec8:	e0bff917 	ldw	r2,-28(fp)
    7ecc:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
    7ed0:	e0fff317 	ldw	r3,-52(fp)
    7ed4:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
    7ed8:	e13ff817 	ldw	r4,-32(fp)
    7edc:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
    7ee0:	e0bff717 	ldw	r2,-36(fp)
    7ee4:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
    7ee8:	e0fff317 	ldw	r3,-52(fp)
    7eec:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
    7ef0:	e13ff817 	ldw	r4,-32(fp)
    7ef4:	e0bffa17 	ldw	r2,-24(fp)
    7ef8:	20800c0e 	bge	r4,r2,7f2c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
    7efc:	e0fffa17 	ldw	r3,-24(fp)
    7f00:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
    7f04:	e13ff817 	ldw	r4,-32(fp)
    7f08:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
    7f0c:	e0bff317 	ldw	r2,-52(fp)
    7f10:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
    7f14:	e0fff917 	ldw	r3,-28(fp)
    7f18:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
    7f1c:	e13ff717 	ldw	r4,-36(fp)
    7f20:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
    7f24:	e0bff317 	ldw	r2,-52(fp)
    7f28:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    7f2c:	e0fff817 	ldw	r3,-32(fp)
    7f30:	e13ffa17 	ldw	r4,-24(fp)
    7f34:	1907c83a 	sub	r3,r3,r4
    7f38:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
    7f3c:	e0fff717 	ldw	r3,-36(fp)
    7f40:	e13ff917 	ldw	r4,-28(fp)
    7f44:	1905c83a 	sub	r2,r3,r4
    7f48:	e0bff415 	stw	r2,-48(fp)
    7f4c:	e0fff417 	ldw	r3,-48(fp)
    7f50:	1804403a 	cmpge	r2,r3,zero
    7f54:	1000031e 	bne	r2,zero,7f64 <alt_up_pixel_buffer_dma_draw_line+0x220>
    7f58:	e13ff417 	ldw	r4,-48(fp)
    7f5c:	0109c83a 	sub	r4,zero,r4
    7f60:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
    7f64:	e0fff517 	ldw	r3,-44(fp)
    7f68:	1804d7fa 	srli	r2,r3,31
    7f6c:	e13ff517 	ldw	r4,-44(fp)
    7f70:	1105883a 	add	r2,r2,r4
    7f74:	1005d07a 	srai	r2,r2,1
    7f78:	0085c83a 	sub	r2,zero,r2
    7f7c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
    7f80:	e0bff917 	ldw	r2,-28(fp)
    7f84:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
    7f88:	e0fff917 	ldw	r3,-28(fp)
    7f8c:	e13ff717 	ldw	r4,-36(fp)
    7f90:	1900030e 	bge	r3,r4,7fa0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
    7f94:	00800044 	movi	r2,1
    7f98:	e0bff215 	stw	r2,-56(fp)
    7f9c:	00000206 	br	7fa8 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
    7fa0:	00ffffc4 	movi	r3,-1
    7fa4:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    7fa8:	e13ff603 	ldbu	r4,-40(fp)
    7fac:	20803fcc 	andi	r2,r4,255
    7fb0:	1080201c 	xori	r2,r2,128
    7fb4:	10bfe004 	addi	r2,r2,-128
    7fb8:	10800058 	cmpnei	r2,r2,1
    7fbc:	1000221e 	bne	r2,zero,8048 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
    7fc0:	e0bffa17 	ldw	r2,-24(fp)
    7fc4:	e0bff115 	stw	r2,-60(fp)
    7fc8:	00001b06 	br	8038 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    7fcc:	e0ffee17 	ldw	r3,-72(fp)
    7fd0:	d8c00015 	stw	r3,0(sp)
    7fd4:	e13fef17 	ldw	r4,-68(fp)
    7fd8:	d9000115 	stw	r4,4(sp)
    7fdc:	e13fed17 	ldw	r4,-76(fp)
    7fe0:	e17fec17 	ldw	r5,-80(fp)
    7fe4:	e1bff017 	ldw	r6,-64(fp)
    7fe8:	e1fff117 	ldw	r7,-60(fp)
    7fec:	0007c740 	call	7c74 <helper_plot_pixel>
			error = error + deltay;
    7ff0:	e0bff317 	ldw	r2,-52(fp)
    7ff4:	e0fff417 	ldw	r3,-48(fp)
    7ff8:	10c5883a 	add	r2,r2,r3
    7ffc:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
    8000:	e13ff317 	ldw	r4,-52(fp)
    8004:	20800050 	cmplti	r2,r4,1
    8008:	1000081e 	bne	r2,zero,802c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
    800c:	e0bff017 	ldw	r2,-64(fp)
    8010:	e0fff217 	ldw	r3,-56(fp)
    8014:	10c5883a 	add	r2,r2,r3
    8018:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
    801c:	e13ff317 	ldw	r4,-52(fp)
    8020:	e0bff517 	ldw	r2,-44(fp)
    8024:	2089c83a 	sub	r4,r4,r2
    8028:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    802c:	e0fff117 	ldw	r3,-60(fp)
    8030:	18c00044 	addi	r3,r3,1
    8034:	e0fff115 	stw	r3,-60(fp)
    8038:	e13ff817 	ldw	r4,-32(fp)
    803c:	e0bff117 	ldw	r2,-60(fp)
    8040:	20bfe20e 	bge	r4,r2,7fcc <alt_up_pixel_buffer_dma_draw_line+0x288>
    8044:	00002106 	br	80cc <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    8048:	e0fffa17 	ldw	r3,-24(fp)
    804c:	e0fff115 	stw	r3,-60(fp)
    8050:	00001b06 	br	80c0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    8054:	e13fee17 	ldw	r4,-72(fp)
    8058:	d9000015 	stw	r4,0(sp)
    805c:	e0bfef17 	ldw	r2,-68(fp)
    8060:	d8800115 	stw	r2,4(sp)
    8064:	e13fed17 	ldw	r4,-76(fp)
    8068:	e17fec17 	ldw	r5,-80(fp)
    806c:	e1bff117 	ldw	r6,-60(fp)
    8070:	e1fff017 	ldw	r7,-64(fp)
    8074:	0007c740 	call	7c74 <helper_plot_pixel>
			error = error + deltay;
    8078:	e0fff317 	ldw	r3,-52(fp)
    807c:	e13ff417 	ldw	r4,-48(fp)
    8080:	1907883a 	add	r3,r3,r4
    8084:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
    8088:	e0fff317 	ldw	r3,-52(fp)
    808c:	18800050 	cmplti	r2,r3,1
    8090:	1000081e 	bne	r2,zero,80b4 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
    8094:	e13ff017 	ldw	r4,-64(fp)
    8098:	e0bff217 	ldw	r2,-56(fp)
    809c:	2089883a 	add	r4,r4,r2
    80a0:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
    80a4:	e0fff317 	ldw	r3,-52(fp)
    80a8:	e13ff517 	ldw	r4,-44(fp)
    80ac:	1907c83a 	sub	r3,r3,r4
    80b0:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    80b4:	e0bff117 	ldw	r2,-60(fp)
    80b8:	10800044 	addi	r2,r2,1
    80bc:	e0bff115 	stw	r2,-60(fp)
    80c0:	e0fff817 	ldw	r3,-32(fp)
    80c4:	e13ff117 	ldw	r4,-60(fp)
    80c8:	193fe20e 	bge	r3,r4,8054 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    80cc:	e037883a 	mov	sp,fp
    80d0:	dfc00117 	ldw	ra,4(sp)
    80d4:	df000017 	ldw	fp,0(sp)
    80d8:	dec00204 	addi	sp,sp,8
    80dc:	f800283a 	ret

000080e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    80e0:	defff404 	addi	sp,sp,-48
    80e4:	df000b15 	stw	fp,44(sp)
    80e8:	df000b04 	addi	fp,sp,44
    80ec:	e13ffb15 	stw	r4,-20(fp)
    80f0:	e17ffc15 	stw	r5,-16(fp)
    80f4:	e1bffd15 	stw	r6,-12(fp)
    80f8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    80fc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8100:	00800074 	movhi	r2,1
    8104:	1080a204 	addi	r2,r2,648
    8108:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    810c:	1005003a 	cmpeq	r2,r2,zero
    8110:	1000411e 	bne	r2,zero,8218 <alt_alarm_start+0x138>
  {
    if (alarm)
    8114:	e0bffb17 	ldw	r2,-20(fp)
    8118:	1005003a 	cmpeq	r2,r2,zero
    811c:	10003b1e 	bne	r2,zero,820c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    8120:	e0fffb17 	ldw	r3,-20(fp)
    8124:	e0bffd17 	ldw	r2,-12(fp)
    8128:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8138:	0005303a 	rdctl	r2,status
    813c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8140:	e0fff817 	ldw	r3,-32(fp)
    8144:	00bfff84 	movi	r2,-2
    8148:	1884703a 	and	r2,r3,r2
    814c:	1001703a 	wrctl	status,r2
  
  return context;
    8150:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    8154:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    8158:	00800074 	movhi	r2,1
    815c:	1080a304 	addi	r2,r2,652
    8160:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    8164:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    8168:	e0fffc17 	ldw	r3,-16(fp)
    816c:	e0bff917 	ldw	r2,-28(fp)
    8170:	1885883a 	add	r2,r3,r2
    8174:	10c00044 	addi	r3,r2,1
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    8180:	e0bffb17 	ldw	r2,-20(fp)
    8184:	10c00217 	ldw	r3,8(r2)
    8188:	e0bff917 	ldw	r2,-28(fp)
    818c:	1880042e 	bgeu	r3,r2,81a0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    8190:	e0fffb17 	ldw	r3,-20(fp)
    8194:	00800044 	movi	r2,1
    8198:	18800405 	stb	r2,16(r3)
    819c:	00000206 	br	81a8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    81a0:	e0bffb17 	ldw	r2,-20(fp)
    81a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    81a8:	e0fffb17 	ldw	r3,-20(fp)
    81ac:	00800074 	movhi	r2,1
    81b0:	10b85704 	addi	r2,r2,-7844
    81b4:	e0bff615 	stw	r2,-40(fp)
    81b8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    81bc:	e0fff717 	ldw	r3,-36(fp)
    81c0:	e0bff617 	ldw	r2,-40(fp)
    81c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    81c8:	e0bff617 	ldw	r2,-40(fp)
    81cc:	10c00017 	ldw	r3,0(r2)
    81d0:	e0bff717 	ldw	r2,-36(fp)
    81d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    81d8:	e0bff617 	ldw	r2,-40(fp)
    81dc:	10c00017 	ldw	r3,0(r2)
    81e0:	e0bff717 	ldw	r2,-36(fp)
    81e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    81e8:	e0fff617 	ldw	r3,-40(fp)
    81ec:	e0bff717 	ldw	r2,-36(fp)
    81f0:	18800015 	stw	r2,0(r3)
    81f4:	e0bffa17 	ldw	r2,-24(fp)
    81f8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    81fc:	e0bff517 	ldw	r2,-44(fp)
    8200:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    8204:	e03fff15 	stw	zero,-4(fp)
    8208:	00000506 	br	8220 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    820c:	00bffa84 	movi	r2,-22
    8210:	e0bfff15 	stw	r2,-4(fp)
    8214:	00000206 	br	8220 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    8218:	00bfde84 	movi	r2,-134
    821c:	e0bfff15 	stw	r2,-4(fp)
    8220:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    8224:	e037883a 	mov	sp,fp
    8228:	df000017 	ldw	fp,0(sp)
    822c:	dec00104 	addi	sp,sp,4
    8230:	f800283a 	ret

00008234 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8234:	defff804 	addi	sp,sp,-32
    8238:	dfc00715 	stw	ra,28(sp)
    823c:	df000615 	stw	fp,24(sp)
    8240:	df000604 	addi	fp,sp,24
    8244:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8248:	e0bffc17 	ldw	r2,-16(fp)
    824c:	1004803a 	cmplt	r2,r2,zero
    8250:	1000081e 	bne	r2,zero,8274 <close+0x40>
    8254:	e0bffc17 	ldw	r2,-16(fp)
    8258:	10800324 	muli	r2,r2,12
    825c:	1007883a 	mov	r3,r2
    8260:	00800074 	movhi	r2,1
    8264:	10b5ee04 	addi	r2,r2,-10312
    8268:	1887883a 	add	r3,r3,r2
    826c:	e0ffff15 	stw	r3,-4(fp)
    8270:	00000106 	br	8278 <close+0x44>
    8274:	e03fff15 	stw	zero,-4(fp)
    8278:	e0bfff17 	ldw	r2,-4(fp)
    827c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    8280:	e0bffb17 	ldw	r2,-20(fp)
    8284:	1005003a 	cmpeq	r2,r2,zero
    8288:	10001d1e 	bne	r2,zero,8300 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    828c:	e0bffb17 	ldw	r2,-20(fp)
    8290:	10800017 	ldw	r2,0(r2)
    8294:	10800417 	ldw	r2,16(r2)
    8298:	1005003a 	cmpeq	r2,r2,zero
    829c:	1000071e 	bne	r2,zero,82bc <close+0x88>
    82a0:	e0bffb17 	ldw	r2,-20(fp)
    82a4:	10800017 	ldw	r2,0(r2)
    82a8:	10800417 	ldw	r2,16(r2)
    82ac:	e13ffb17 	ldw	r4,-20(fp)
    82b0:	103ee83a 	callr	r2
    82b4:	e0bffe15 	stw	r2,-8(fp)
    82b8:	00000106 	br	82c0 <close+0x8c>
    82bc:	e03ffe15 	stw	zero,-8(fp)
    82c0:	e0bffe17 	ldw	r2,-8(fp)
    82c4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    82c8:	e13ffc17 	ldw	r4,-16(fp)
    82cc:	0008a780 	call	8a78 <alt_release_fd>
    if (rval < 0)
    82d0:	e0bffa17 	ldw	r2,-24(fp)
    82d4:	1004403a 	cmpge	r2,r2,zero
    82d8:	1000071e 	bne	r2,zero,82f8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    82dc:	00083300 	call	8330 <alt_get_errno>
    82e0:	e0fffa17 	ldw	r3,-24(fp)
    82e4:	00c7c83a 	sub	r3,zero,r3
    82e8:	10c00015 	stw	r3,0(r2)
      return -1;
    82ec:	00bfffc4 	movi	r2,-1
    82f0:	e0bffd15 	stw	r2,-12(fp)
    82f4:	00000806 	br	8318 <close+0xe4>
    }
    return 0;
    82f8:	e03ffd15 	stw	zero,-12(fp)
    82fc:	00000606 	br	8318 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8300:	00083300 	call	8330 <alt_get_errno>
    8304:	1007883a 	mov	r3,r2
    8308:	00801444 	movi	r2,81
    830c:	18800015 	stw	r2,0(r3)
    return -1;
    8310:	00bfffc4 	movi	r2,-1
    8314:	e0bffd15 	stw	r2,-12(fp)
    8318:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    831c:	e037883a 	mov	sp,fp
    8320:	dfc00117 	ldw	ra,4(sp)
    8324:	df000017 	ldw	fp,0(sp)
    8328:	dec00204 	addi	sp,sp,8
    832c:	f800283a 	ret

00008330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8330:	defffd04 	addi	sp,sp,-12
    8334:	dfc00215 	stw	ra,8(sp)
    8338:	df000115 	stw	fp,4(sp)
    833c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8340:	00800074 	movhi	r2,1
    8344:	10b85604 	addi	r2,r2,-7848
    8348:	10800017 	ldw	r2,0(r2)
    834c:	1005003a 	cmpeq	r2,r2,zero
    8350:	1000061e 	bne	r2,zero,836c <alt_get_errno+0x3c>
    8354:	00800074 	movhi	r2,1
    8358:	10b85604 	addi	r2,r2,-7848
    835c:	10800017 	ldw	r2,0(r2)
    8360:	103ee83a 	callr	r2
    8364:	e0bfff15 	stw	r2,-4(fp)
    8368:	00000306 	br	8378 <alt_get_errno+0x48>
    836c:	00800074 	movhi	r2,1
    8370:	1080a404 	addi	r2,r2,656
    8374:	e0bfff15 	stw	r2,-4(fp)
    8378:	e0bfff17 	ldw	r2,-4(fp)
}
    837c:	e037883a 	mov	sp,fp
    8380:	dfc00117 	ldw	ra,4(sp)
    8384:	df000017 	ldw	fp,0(sp)
    8388:	dec00204 	addi	sp,sp,8
    838c:	f800283a 	ret

00008390 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8390:	deffff04 	addi	sp,sp,-4
    8394:	df000015 	stw	fp,0(sp)
    8398:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    839c:	e037883a 	mov	sp,fp
    83a0:	df000017 	ldw	fp,0(sp)
    83a4:	dec00104 	addi	sp,sp,4
    83a8:	f800283a 	ret

000083ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    83ac:	defffc04 	addi	sp,sp,-16
    83b0:	df000315 	stw	fp,12(sp)
    83b4:	df000304 	addi	fp,sp,12
    83b8:	e13ffd15 	stw	r4,-12(fp)
    83bc:	e17ffe15 	stw	r5,-8(fp)
    83c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    83c4:	e0bfff17 	ldw	r2,-4(fp)
}
    83c8:	e037883a 	mov	sp,fp
    83cc:	df000017 	ldw	fp,0(sp)
    83d0:	dec00104 	addi	sp,sp,4
    83d4:	f800283a 	ret

000083d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    83d8:	defff904 	addi	sp,sp,-28
    83dc:	dfc00615 	stw	ra,24(sp)
    83e0:	df000515 	stw	fp,20(sp)
    83e4:	df000504 	addi	fp,sp,20
    83e8:	e13ffd15 	stw	r4,-12(fp)
    83ec:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    83f0:	e0bffd17 	ldw	r2,-12(fp)
    83f4:	1005003a 	cmpeq	r2,r2,zero
    83f8:	1000041e 	bne	r2,zero,840c <alt_dev_llist_insert+0x34>
    83fc:	e0bffd17 	ldw	r2,-12(fp)
    8400:	10800217 	ldw	r2,8(r2)
    8404:	1004c03a 	cmpne	r2,r2,zero
    8408:	1000071e 	bne	r2,zero,8428 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    840c:	000848c0 	call	848c <alt_get_errno>
    8410:	1007883a 	mov	r3,r2
    8414:	00800584 	movi	r2,22
    8418:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    841c:	00bffa84 	movi	r2,-22
    8420:	e0bfff15 	stw	r2,-4(fp)
    8424:	00001306 	br	8474 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8428:	e0fffd17 	ldw	r3,-12(fp)
    842c:	e0bffe17 	ldw	r2,-8(fp)
    8430:	e0bffb15 	stw	r2,-20(fp)
    8434:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8438:	e0fffc17 	ldw	r3,-16(fp)
    843c:	e0bffb17 	ldw	r2,-20(fp)
    8440:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    8444:	e0bffb17 	ldw	r2,-20(fp)
    8448:	10c00017 	ldw	r3,0(r2)
    844c:	e0bffc17 	ldw	r2,-16(fp)
    8450:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8454:	e0bffb17 	ldw	r2,-20(fp)
    8458:	10c00017 	ldw	r3,0(r2)
    845c:	e0bffc17 	ldw	r2,-16(fp)
    8460:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    8464:	e0fffb17 	ldw	r3,-20(fp)
    8468:	e0bffc17 	ldw	r2,-16(fp)
    846c:	18800015 	stw	r2,0(r3)

  return 0;  
    8470:	e03fff15 	stw	zero,-4(fp)
    8474:	e0bfff17 	ldw	r2,-4(fp)
}
    8478:	e037883a 	mov	sp,fp
    847c:	dfc00117 	ldw	ra,4(sp)
    8480:	df000017 	ldw	fp,0(sp)
    8484:	dec00204 	addi	sp,sp,8
    8488:	f800283a 	ret

0000848c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    848c:	defffd04 	addi	sp,sp,-12
    8490:	dfc00215 	stw	ra,8(sp)
    8494:	df000115 	stw	fp,4(sp)
    8498:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    849c:	00800074 	movhi	r2,1
    84a0:	10b85604 	addi	r2,r2,-7848
    84a4:	10800017 	ldw	r2,0(r2)
    84a8:	1005003a 	cmpeq	r2,r2,zero
    84ac:	1000061e 	bne	r2,zero,84c8 <alt_get_errno+0x3c>
    84b0:	00800074 	movhi	r2,1
    84b4:	10b85604 	addi	r2,r2,-7848
    84b8:	10800017 	ldw	r2,0(r2)
    84bc:	103ee83a 	callr	r2
    84c0:	e0bfff15 	stw	r2,-4(fp)
    84c4:	00000306 	br	84d4 <alt_get_errno+0x48>
    84c8:	00800074 	movhi	r2,1
    84cc:	1080a404 	addi	r2,r2,656
    84d0:	e0bfff15 	stw	r2,-4(fp)
    84d4:	e0bfff17 	ldw	r2,-4(fp)
}
    84d8:	e037883a 	mov	sp,fp
    84dc:	dfc00117 	ldw	ra,4(sp)
    84e0:	df000017 	ldw	fp,0(sp)
    84e4:	dec00204 	addi	sp,sp,8
    84e8:	f800283a 	ret

000084ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    84ec:	defffd04 	addi	sp,sp,-12
    84f0:	dfc00215 	stw	ra,8(sp)
    84f4:	df000115 	stw	fp,4(sp)
    84f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    84fc:	00bfff04 	movi	r2,-4
    8500:	00c00074 	movhi	r3,1
    8504:	18eeb404 	addi	r3,r3,-17712
    8508:	1885883a 	add	r2,r3,r2
    850c:	e0bfff15 	stw	r2,-4(fp)
    8510:	00000606 	br	852c <_do_ctors+0x40>
        (*ctor) (); 
    8514:	e0bfff17 	ldw	r2,-4(fp)
    8518:	10800017 	ldw	r2,0(r2)
    851c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    8520:	e0bfff17 	ldw	r2,-4(fp)
    8524:	10bfff04 	addi	r2,r2,-4
    8528:	e0bfff15 	stw	r2,-4(fp)
    852c:	e0ffff17 	ldw	r3,-4(fp)
    8530:	00800074 	movhi	r2,1
    8534:	10aeb304 	addi	r2,r2,-17716
    8538:	18bff62e 	bgeu	r3,r2,8514 <_do_ctors+0x28>
        (*ctor) (); 
}
    853c:	e037883a 	mov	sp,fp
    8540:	dfc00117 	ldw	ra,4(sp)
    8544:	df000017 	ldw	fp,0(sp)
    8548:	dec00204 	addi	sp,sp,8
    854c:	f800283a 	ret

00008550 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    8550:	defffd04 	addi	sp,sp,-12
    8554:	dfc00215 	stw	ra,8(sp)
    8558:	df000115 	stw	fp,4(sp)
    855c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8560:	00bfff04 	movi	r2,-4
    8564:	00c00074 	movhi	r3,1
    8568:	18eeb404 	addi	r3,r3,-17712
    856c:	1885883a 	add	r2,r3,r2
    8570:	e0bfff15 	stw	r2,-4(fp)
    8574:	00000606 	br	8590 <_do_dtors+0x40>
        (*dtor) (); 
    8578:	e0bfff17 	ldw	r2,-4(fp)
    857c:	10800017 	ldw	r2,0(r2)
    8580:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8584:	e0bfff17 	ldw	r2,-4(fp)
    8588:	10bfff04 	addi	r2,r2,-4
    858c:	e0bfff15 	stw	r2,-4(fp)
    8590:	e0ffff17 	ldw	r3,-4(fp)
    8594:	00800074 	movhi	r2,1
    8598:	10aeb404 	addi	r2,r2,-17712
    859c:	18bff62e 	bgeu	r3,r2,8578 <_do_dtors+0x28>
        (*dtor) (); 
}
    85a0:	e037883a 	mov	sp,fp
    85a4:	dfc00117 	ldw	ra,4(sp)
    85a8:	df000017 	ldw	fp,0(sp)
    85ac:	dec00204 	addi	sp,sp,8
    85b0:	f800283a 	ret

000085b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    85b4:	defff904 	addi	sp,sp,-28
    85b8:	dfc00615 	stw	ra,24(sp)
    85bc:	df000515 	stw	fp,20(sp)
    85c0:	df000504 	addi	fp,sp,20
    85c4:	e13ffd15 	stw	r4,-12(fp)
    85c8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    85cc:	e0bffe17 	ldw	r2,-8(fp)
    85d0:	10800017 	ldw	r2,0(r2)
    85d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    85d8:	e13ffd17 	ldw	r4,-12(fp)
    85dc:	00093c80 	call	93c8 <strlen>
    85e0:	10800044 	addi	r2,r2,1
    85e4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    85e8:	00000d06 	br	8620 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    85ec:	e0bffc17 	ldw	r2,-16(fp)
    85f0:	11000217 	ldw	r4,8(r2)
    85f4:	e1bffb17 	ldw	r6,-20(fp)
    85f8:	e17ffd17 	ldw	r5,-12(fp)
    85fc:	00090ac0 	call	90ac <memcmp>
    8600:	1004c03a 	cmpne	r2,r2,zero
    8604:	1000031e 	bne	r2,zero,8614 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8608:	e0bffc17 	ldw	r2,-16(fp)
    860c:	e0bfff15 	stw	r2,-4(fp)
    8610:	00000706 	br	8630 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8614:	e0bffc17 	ldw	r2,-16(fp)
    8618:	10800017 	ldw	r2,0(r2)
    861c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8620:	e0fffe17 	ldw	r3,-8(fp)
    8624:	e0bffc17 	ldw	r2,-16(fp)
    8628:	10fff01e 	bne	r2,r3,85ec <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    862c:	e03fff15 	stw	zero,-4(fp)
    8630:	e0bfff17 	ldw	r2,-4(fp)
}
    8634:	e037883a 	mov	sp,fp
    8638:	dfc00117 	ldw	ra,4(sp)
    863c:	df000017 	ldw	fp,0(sp)
    8640:	dec00204 	addi	sp,sp,8
    8644:	f800283a 	ret

00008648 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8648:	defffe04 	addi	sp,sp,-8
    864c:	dfc00115 	stw	ra,4(sp)
    8650:	df000015 	stw	fp,0(sp)
    8654:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8658:	0009883a 	mov	r4,zero
    865c:	01440004 	movi	r5,4096
    8660:	0008fd00 	call	8fd0 <alt_icache_flush>
#endif
}
    8664:	e037883a 	mov	sp,fp
    8668:	dfc00117 	ldw	ra,4(sp)
    866c:	df000017 	ldw	fp,0(sp)
    8670:	dec00204 	addi	sp,sp,8
    8674:	f800283a 	ret

00008678 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8678:	defff904 	addi	sp,sp,-28
    867c:	dfc00615 	stw	ra,24(sp)
    8680:	df000515 	stw	fp,20(sp)
    8684:	df000504 	addi	fp,sp,20
    8688:	e13ffc15 	stw	r4,-16(fp)
    868c:	e17ffd15 	stw	r5,-12(fp)
    8690:	e1bffe15 	stw	r6,-8(fp)
    8694:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8698:	e13ffd17 	ldw	r4,-12(fp)
    869c:	e17ffe17 	ldw	r5,-8(fp)
    86a0:	e1bfff17 	ldw	r6,-4(fp)
    86a4:	00088900 	call	8890 <open>
    86a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    86ac:	e0bffb17 	ldw	r2,-20(fp)
    86b0:	1004803a 	cmplt	r2,r2,zero
    86b4:	10001c1e 	bne	r2,zero,8728 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    86b8:	e0bffb17 	ldw	r2,-20(fp)
    86bc:	00c00074 	movhi	r3,1
    86c0:	18f5ee04 	addi	r3,r3,-10312
    86c4:	10800324 	muli	r2,r2,12
    86c8:	10c5883a 	add	r2,r2,r3
    86cc:	10c00017 	ldw	r3,0(r2)
    86d0:	e0bffc17 	ldw	r2,-16(fp)
    86d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    86d8:	e0bffb17 	ldw	r2,-20(fp)
    86dc:	00c00074 	movhi	r3,1
    86e0:	18f5ee04 	addi	r3,r3,-10312
    86e4:	10800324 	muli	r2,r2,12
    86e8:	10c5883a 	add	r2,r2,r3
    86ec:	10800104 	addi	r2,r2,4
    86f0:	10c00017 	ldw	r3,0(r2)
    86f4:	e0bffc17 	ldw	r2,-16(fp)
    86f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    86fc:	e0bffb17 	ldw	r2,-20(fp)
    8700:	00c00074 	movhi	r3,1
    8704:	18f5ee04 	addi	r3,r3,-10312
    8708:	10800324 	muli	r2,r2,12
    870c:	10c5883a 	add	r2,r2,r3
    8710:	10800204 	addi	r2,r2,8
    8714:	10c00017 	ldw	r3,0(r2)
    8718:	e0bffc17 	ldw	r2,-16(fp)
    871c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8720:	e13ffb17 	ldw	r4,-20(fp)
    8724:	0008a780 	call	8a78 <alt_release_fd>
  }
} 
    8728:	e037883a 	mov	sp,fp
    872c:	dfc00117 	ldw	ra,4(sp)
    8730:	df000017 	ldw	fp,0(sp)
    8734:	dec00204 	addi	sp,sp,8
    8738:	f800283a 	ret

0000873c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    873c:	defffb04 	addi	sp,sp,-20
    8740:	dfc00415 	stw	ra,16(sp)
    8744:	df000315 	stw	fp,12(sp)
    8748:	df000304 	addi	fp,sp,12
    874c:	e13ffd15 	stw	r4,-12(fp)
    8750:	e17ffe15 	stw	r5,-8(fp)
    8754:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8758:	01000074 	movhi	r4,1
    875c:	2135f104 	addi	r4,r4,-10300
    8760:	e17ffd17 	ldw	r5,-12(fp)
    8764:	01800044 	movi	r6,1
    8768:	01c07fc4 	movi	r7,511
    876c:	00086780 	call	8678 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8770:	01000074 	movhi	r4,1
    8774:	2135ee04 	addi	r4,r4,-10312
    8778:	e17ffe17 	ldw	r5,-8(fp)
    877c:	000d883a 	mov	r6,zero
    8780:	01c07fc4 	movi	r7,511
    8784:	00086780 	call	8678 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8788:	01000074 	movhi	r4,1
    878c:	2135f404 	addi	r4,r4,-10288
    8790:	e17fff17 	ldw	r5,-4(fp)
    8794:	01800044 	movi	r6,1
    8798:	01c07fc4 	movi	r7,511
    879c:	00086780 	call	8678 <alt_open_fd>
}  
    87a0:	e037883a 	mov	sp,fp
    87a4:	dfc00117 	ldw	ra,4(sp)
    87a8:	df000017 	ldw	fp,0(sp)
    87ac:	dec00204 	addi	sp,sp,8
    87b0:	f800283a 	ret

000087b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    87b4:	defffc04 	addi	sp,sp,-16
    87b8:	df000315 	stw	fp,12(sp)
    87bc:	df000304 	addi	fp,sp,12
    87c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    87c4:	e0bffe17 	ldw	r2,-8(fp)
    87c8:	10800217 	ldw	r2,8(r2)
    87cc:	10d00034 	orhi	r3,r2,16384
    87d0:	e0bffe17 	ldw	r2,-8(fp)
    87d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    87d8:	e03ffd15 	stw	zero,-12(fp)
    87dc:	00002006 	br	8860 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    87e0:	e0bffd17 	ldw	r2,-12(fp)
    87e4:	00c00074 	movhi	r3,1
    87e8:	18f5ee04 	addi	r3,r3,-10312
    87ec:	10800324 	muli	r2,r2,12
    87f0:	10c5883a 	add	r2,r2,r3
    87f4:	10c00017 	ldw	r3,0(r2)
    87f8:	e0bffe17 	ldw	r2,-8(fp)
    87fc:	10800017 	ldw	r2,0(r2)
    8800:	1880141e 	bne	r3,r2,8854 <alt_file_locked+0xa0>
    8804:	e0bffd17 	ldw	r2,-12(fp)
    8808:	00c00074 	movhi	r3,1
    880c:	18f5ee04 	addi	r3,r3,-10312
    8810:	10800324 	muli	r2,r2,12
    8814:	10c5883a 	add	r2,r2,r3
    8818:	10800204 	addi	r2,r2,8
    881c:	10800017 	ldw	r2,0(r2)
    8820:	1004403a 	cmpge	r2,r2,zero
    8824:	10000b1e 	bne	r2,zero,8854 <alt_file_locked+0xa0>
    8828:	e0bffd17 	ldw	r2,-12(fp)
    882c:	10800324 	muli	r2,r2,12
    8830:	1007883a 	mov	r3,r2
    8834:	00800074 	movhi	r2,1
    8838:	10b5ee04 	addi	r2,r2,-10312
    883c:	1887883a 	add	r3,r3,r2
    8840:	e0bffe17 	ldw	r2,-8(fp)
    8844:	18800326 	beq	r3,r2,8854 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8848:	00bffcc4 	movi	r2,-13
    884c:	e0bfff15 	stw	r2,-4(fp)
    8850:	00000a06 	br	887c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8854:	e0bffd17 	ldw	r2,-12(fp)
    8858:	10800044 	addi	r2,r2,1
    885c:	e0bffd15 	stw	r2,-12(fp)
    8860:	00800074 	movhi	r2,1
    8864:	10b85504 	addi	r2,r2,-7852
    8868:	10800017 	ldw	r2,0(r2)
    886c:	1007883a 	mov	r3,r2
    8870:	e0bffd17 	ldw	r2,-12(fp)
    8874:	18bfda2e 	bgeu	r3,r2,87e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8878:	e03fff15 	stw	zero,-4(fp)
    887c:	e0bfff17 	ldw	r2,-4(fp)
}
    8880:	e037883a 	mov	sp,fp
    8884:	df000017 	ldw	fp,0(sp)
    8888:	dec00104 	addi	sp,sp,4
    888c:	f800283a 	ret

00008890 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8890:	defff404 	addi	sp,sp,-48
    8894:	dfc00b15 	stw	ra,44(sp)
    8898:	df000a15 	stw	fp,40(sp)
    889c:	df000a04 	addi	fp,sp,40
    88a0:	e13ffb15 	stw	r4,-20(fp)
    88a4:	e17ffc15 	stw	r5,-16(fp)
    88a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    88ac:	00bfffc4 	movi	r2,-1
    88b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    88b4:	00bffb44 	movi	r2,-19
    88b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    88bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    88c0:	e13ffb17 	ldw	r4,-20(fp)
    88c4:	01400074 	movhi	r5,1
    88c8:	29785304 	addi	r5,r5,-7860
    88cc:	00085b40 	call	85b4 <alt_find_dev>
    88d0:	e0bffa15 	stw	r2,-24(fp)
    88d4:	e0bffa17 	ldw	r2,-24(fp)
    88d8:	1004c03a 	cmpne	r2,r2,zero
    88dc:	1000051e 	bne	r2,zero,88f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    88e0:	e13ffb17 	ldw	r4,-20(fp)
    88e4:	0008df80 	call	8df8 <alt_find_file>
    88e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    88ec:	00800044 	movi	r2,1
    88f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    88f4:	e0bffa17 	ldw	r2,-24(fp)
    88f8:	1005003a 	cmpeq	r2,r2,zero
    88fc:	1000301e 	bne	r2,zero,89c0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8900:	e13ffa17 	ldw	r4,-24(fp)
    8904:	0008f180 	call	8f18 <alt_get_fd>
    8908:	e0bff815 	stw	r2,-32(fp)
    890c:	e0bff817 	ldw	r2,-32(fp)
    8910:	1004403a 	cmpge	r2,r2,zero
    8914:	1000031e 	bne	r2,zero,8924 <open+0x94>
    {
      status = index;
    8918:	e0bff817 	ldw	r2,-32(fp)
    891c:	e0bff715 	stw	r2,-36(fp)
    8920:	00002906 	br	89c8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    8924:	e0bff817 	ldw	r2,-32(fp)
    8928:	10800324 	muli	r2,r2,12
    892c:	1007883a 	mov	r3,r2
    8930:	00800074 	movhi	r2,1
    8934:	10b5ee04 	addi	r2,r2,-10312
    8938:	1885883a 	add	r2,r3,r2
    893c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8940:	e0fffc17 	ldw	r3,-16(fp)
    8944:	00900034 	movhi	r2,16384
    8948:	10bfffc4 	addi	r2,r2,-1
    894c:	1886703a 	and	r3,r3,r2
    8950:	e0bff917 	ldw	r2,-28(fp)
    8954:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8958:	e0bff617 	ldw	r2,-40(fp)
    895c:	1004c03a 	cmpne	r2,r2,zero
    8960:	1000061e 	bne	r2,zero,897c <open+0xec>
    8964:	e13ff917 	ldw	r4,-28(fp)
    8968:	00087b40 	call	87b4 <alt_file_locked>
    896c:	e0bff715 	stw	r2,-36(fp)
    8970:	e0bff717 	ldw	r2,-36(fp)
    8974:	1004803a 	cmplt	r2,r2,zero
    8978:	1000131e 	bne	r2,zero,89c8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    897c:	e0bffa17 	ldw	r2,-24(fp)
    8980:	10800317 	ldw	r2,12(r2)
    8984:	1005003a 	cmpeq	r2,r2,zero
    8988:	1000091e 	bne	r2,zero,89b0 <open+0x120>
    898c:	e0bffa17 	ldw	r2,-24(fp)
    8990:	10800317 	ldw	r2,12(r2)
    8994:	e13ff917 	ldw	r4,-28(fp)
    8998:	e17ffb17 	ldw	r5,-20(fp)
    899c:	e1bffc17 	ldw	r6,-16(fp)
    89a0:	e1fffd17 	ldw	r7,-12(fp)
    89a4:	103ee83a 	callr	r2
    89a8:	e0bfff15 	stw	r2,-4(fp)
    89ac:	00000106 	br	89b4 <open+0x124>
    89b0:	e03fff15 	stw	zero,-4(fp)
    89b4:	e0bfff17 	ldw	r2,-4(fp)
    89b8:	e0bff715 	stw	r2,-36(fp)
    89bc:	00000206 	br	89c8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    89c0:	00bffb44 	movi	r2,-19
    89c4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    89c8:	e0bff717 	ldw	r2,-36(fp)
    89cc:	1004403a 	cmpge	r2,r2,zero
    89d0:	1000091e 	bne	r2,zero,89f8 <open+0x168>
  {
    alt_release_fd (index);  
    89d4:	e13ff817 	ldw	r4,-32(fp)
    89d8:	0008a780 	call	8a78 <alt_release_fd>
    ALT_ERRNO = -status;
    89dc:	0008a180 	call	8a18 <alt_get_errno>
    89e0:	e0fff717 	ldw	r3,-36(fp)
    89e4:	00c7c83a 	sub	r3,zero,r3
    89e8:	10c00015 	stw	r3,0(r2)
    return -1;
    89ec:	00bfffc4 	movi	r2,-1
    89f0:	e0bffe15 	stw	r2,-8(fp)
    89f4:	00000206 	br	8a00 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    89f8:	e0bff817 	ldw	r2,-32(fp)
    89fc:	e0bffe15 	stw	r2,-8(fp)
    8a00:	e0bffe17 	ldw	r2,-8(fp)
}
    8a04:	e037883a 	mov	sp,fp
    8a08:	dfc00117 	ldw	ra,4(sp)
    8a0c:	df000017 	ldw	fp,0(sp)
    8a10:	dec00204 	addi	sp,sp,8
    8a14:	f800283a 	ret

00008a18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8a18:	defffd04 	addi	sp,sp,-12
    8a1c:	dfc00215 	stw	ra,8(sp)
    8a20:	df000115 	stw	fp,4(sp)
    8a24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8a28:	00800074 	movhi	r2,1
    8a2c:	10b85604 	addi	r2,r2,-7848
    8a30:	10800017 	ldw	r2,0(r2)
    8a34:	1005003a 	cmpeq	r2,r2,zero
    8a38:	1000061e 	bne	r2,zero,8a54 <alt_get_errno+0x3c>
    8a3c:	00800074 	movhi	r2,1
    8a40:	10b85604 	addi	r2,r2,-7848
    8a44:	10800017 	ldw	r2,0(r2)
    8a48:	103ee83a 	callr	r2
    8a4c:	e0bfff15 	stw	r2,-4(fp)
    8a50:	00000306 	br	8a60 <alt_get_errno+0x48>
    8a54:	00800074 	movhi	r2,1
    8a58:	1080a404 	addi	r2,r2,656
    8a5c:	e0bfff15 	stw	r2,-4(fp)
    8a60:	e0bfff17 	ldw	r2,-4(fp)
}
    8a64:	e037883a 	mov	sp,fp
    8a68:	dfc00117 	ldw	ra,4(sp)
    8a6c:	df000017 	ldw	fp,0(sp)
    8a70:	dec00204 	addi	sp,sp,8
    8a74:	f800283a 	ret

00008a78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8a78:	defffe04 	addi	sp,sp,-8
    8a7c:	df000115 	stw	fp,4(sp)
    8a80:	df000104 	addi	fp,sp,4
    8a84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8a88:	e0bfff17 	ldw	r2,-4(fp)
    8a8c:	108000d0 	cmplti	r2,r2,3
    8a90:	10000d1e 	bne	r2,zero,8ac8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    8a94:	e0bfff17 	ldw	r2,-4(fp)
    8a98:	00c00074 	movhi	r3,1
    8a9c:	18f5ee04 	addi	r3,r3,-10312
    8aa0:	10800324 	muli	r2,r2,12
    8aa4:	10c5883a 	add	r2,r2,r3
    8aa8:	10800204 	addi	r2,r2,8
    8aac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8ab0:	e0bfff17 	ldw	r2,-4(fp)
    8ab4:	00c00074 	movhi	r3,1
    8ab8:	18f5ee04 	addi	r3,r3,-10312
    8abc:	10800324 	muli	r2,r2,12
    8ac0:	10c5883a 	add	r2,r2,r3
    8ac4:	10000015 	stw	zero,0(r2)
  }
}
    8ac8:	e037883a 	mov	sp,fp
    8acc:	df000017 	ldw	fp,0(sp)
    8ad0:	dec00104 	addi	sp,sp,4
    8ad4:	f800283a 	ret

00008ad8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    8ad8:	defffa04 	addi	sp,sp,-24
    8adc:	df000515 	stw	fp,20(sp)
    8ae0:	df000504 	addi	fp,sp,20
    8ae4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ae8:	0005303a 	rdctl	r2,status
    8aec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8af0:	e0fffd17 	ldw	r3,-12(fp)
    8af4:	00bfff84 	movi	r2,-2
    8af8:	1884703a 	and	r2,r3,r2
    8afc:	1001703a 	wrctl	status,r2
  
  return context;
    8b00:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    8b04:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    8b08:	e0bfff17 	ldw	r2,-4(fp)
    8b0c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    8b10:	e0bffc17 	ldw	r2,-16(fp)
    8b14:	10c00017 	ldw	r3,0(r2)
    8b18:	e0bffc17 	ldw	r2,-16(fp)
    8b1c:	10800117 	ldw	r2,4(r2)
    8b20:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    8b24:	e0bffc17 	ldw	r2,-16(fp)
    8b28:	10c00117 	ldw	r3,4(r2)
    8b2c:	e0bffc17 	ldw	r2,-16(fp)
    8b30:	10800017 	ldw	r2,0(r2)
    8b34:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    8b38:	e0fffc17 	ldw	r3,-16(fp)
    8b3c:	e0bffc17 	ldw	r2,-16(fp)
    8b40:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    8b44:	e0fffc17 	ldw	r3,-16(fp)
    8b48:	e0bffc17 	ldw	r2,-16(fp)
    8b4c:	18800015 	stw	r2,0(r3)
    8b50:	e0bffe17 	ldw	r2,-8(fp)
    8b54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b58:	e0bffb17 	ldw	r2,-20(fp)
    8b5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    8b60:	e037883a 	mov	sp,fp
    8b64:	df000017 	ldw	fp,0(sp)
    8b68:	dec00104 	addi	sp,sp,4
    8b6c:	f800283a 	ret

00008b70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    8b70:	defffb04 	addi	sp,sp,-20
    8b74:	dfc00415 	stw	ra,16(sp)
    8b78:	df000315 	stw	fp,12(sp)
    8b7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    8b80:	d0a00717 	ldw	r2,-32740(gp)
    8b84:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    8b88:	d0a85317 	ldw	r2,-24244(gp)
    8b8c:	10800044 	addi	r2,r2,1
    8b90:	d0a85315 	stw	r2,-24244(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8b94:	00003106 	br	8c5c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    8b98:	e0bffe17 	ldw	r2,-8(fp)
    8b9c:	10800017 	ldw	r2,0(r2)
    8ba0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    8ba4:	e0bffe17 	ldw	r2,-8(fp)
    8ba8:	10800403 	ldbu	r2,16(r2)
    8bac:	10803fcc 	andi	r2,r2,255
    8bb0:	1005003a 	cmpeq	r2,r2,zero
    8bb4:	1000051e 	bne	r2,zero,8bcc <alt_tick+0x5c>
    8bb8:	d0a85317 	ldw	r2,-24244(gp)
    8bbc:	1004c03a 	cmpne	r2,r2,zero
    8bc0:	1000021e 	bne	r2,zero,8bcc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    8bc4:	e0bffe17 	ldw	r2,-8(fp)
    8bc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    8bcc:	e0bffe17 	ldw	r2,-8(fp)
    8bd0:	10c00217 	ldw	r3,8(r2)
    8bd4:	d0a85317 	ldw	r2,-24244(gp)
    8bd8:	10c01e36 	bltu	r2,r3,8c54 <alt_tick+0xe4>
    8bdc:	e0bffe17 	ldw	r2,-8(fp)
    8be0:	10800403 	ldbu	r2,16(r2)
    8be4:	10803fcc 	andi	r2,r2,255
    8be8:	1004c03a 	cmpne	r2,r2,zero
    8bec:	1000191e 	bne	r2,zero,8c54 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    8bf0:	e0bffe17 	ldw	r2,-8(fp)
    8bf4:	10c00317 	ldw	r3,12(r2)
    8bf8:	e0bffe17 	ldw	r2,-8(fp)
    8bfc:	11000517 	ldw	r4,20(r2)
    8c00:	183ee83a 	callr	r3
    8c04:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    8c08:	e0bffd17 	ldw	r2,-12(fp)
    8c0c:	1004c03a 	cmpne	r2,r2,zero
    8c10:	1000031e 	bne	r2,zero,8c20 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    8c14:	e13ffe17 	ldw	r4,-8(fp)
    8c18:	0008ad80 	call	8ad8 <alt_alarm_stop>
    8c1c:	00000d06 	br	8c54 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    8c20:	e0bffe17 	ldw	r2,-8(fp)
    8c24:	10c00217 	ldw	r3,8(r2)
    8c28:	e0bffd17 	ldw	r2,-12(fp)
    8c2c:	1887883a 	add	r3,r3,r2
    8c30:	e0bffe17 	ldw	r2,-8(fp)
    8c34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    8c38:	e0bffe17 	ldw	r2,-8(fp)
    8c3c:	10c00217 	ldw	r3,8(r2)
    8c40:	d0a85317 	ldw	r2,-24244(gp)
    8c44:	1880032e 	bgeu	r3,r2,8c54 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    8c48:	e0fffe17 	ldw	r3,-8(fp)
    8c4c:	00800044 	movi	r2,1
    8c50:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    8c54:	e0bfff17 	ldw	r2,-4(fp)
    8c58:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8c5c:	d0e00704 	addi	r3,gp,-32740
    8c60:	e0bffe17 	ldw	r2,-8(fp)
    8c64:	10ffcc1e 	bne	r2,r3,8b98 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    8c68:	e037883a 	mov	sp,fp
    8c6c:	dfc00117 	ldw	ra,4(sp)
    8c70:	df000017 	ldw	fp,0(sp)
    8c74:	dec00204 	addi	sp,sp,8
    8c78:	f800283a 	ret

00008c7c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    8c7c:	defffd04 	addi	sp,sp,-12
    8c80:	dfc00215 	stw	ra,8(sp)
    8c84:	df000115 	stw	fp,4(sp)
    8c88:	df000104 	addi	fp,sp,4
    8c8c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    8c90:	e13fff17 	ldw	r4,-4(fp)
    8c94:	0008ccc0 	call	8ccc <alt_busy_sleep>
}
    8c98:	e037883a 	mov	sp,fp
    8c9c:	dfc00117 	ldw	ra,4(sp)
    8ca0:	df000017 	ldw	fp,0(sp)
    8ca4:	dec00204 	addi	sp,sp,8
    8ca8:	f800283a 	ret

00008cac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    8cac:	deffff04 	addi	sp,sp,-4
    8cb0:	df000015 	stw	fp,0(sp)
    8cb4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8cb8:	000170fa 	wrctl	ienable,zero
}
    8cbc:	e037883a 	mov	sp,fp
    8cc0:	df000017 	ldw	fp,0(sp)
    8cc4:	dec00104 	addi	sp,sp,4
    8cc8:	f800283a 	ret

00008ccc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8ccc:	defffb04 	addi	sp,sp,-20
    8cd0:	df000415 	stw	fp,16(sp)
    8cd4:	df000404 	addi	fp,sp,16
    8cd8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    8cdc:	008000c4 	movi	r2,3
    8ce0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    8ce4:	e0fffc17 	ldw	r3,-16(fp)
    8ce8:	008003f4 	movhi	r2,15
    8cec:	10909004 	addi	r2,r2,16960
    8cf0:	1887383a 	mul	r3,r3,r2
    8cf4:	0080bef4 	movhi	r2,763
    8cf8:	10bc2004 	addi	r2,r2,-3968
    8cfc:	10c7203a 	divu	r3,r2,r3
    8d00:	00a00034 	movhi	r2,32768
    8d04:	10bfffc4 	addi	r2,r2,-1
    8d08:	10c7203a 	divu	r3,r2,r3
    8d0c:	e0bfff17 	ldw	r2,-4(fp)
    8d10:	10c5203a 	divu	r2,r2,r3
    8d14:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8d18:	e0bffd17 	ldw	r2,-12(fp)
    8d1c:	1005003a 	cmpeq	r2,r2,zero
    8d20:	1000251e 	bne	r2,zero,8db8 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
    8d24:	e03ffe15 	stw	zero,-8(fp)
    8d28:	00001406 	br	8d7c <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8d2c:	00a00034 	movhi	r2,32768
    8d30:	10bfffc4 	addi	r2,r2,-1
    8d34:	10bfffc4 	addi	r2,r2,-1
    8d38:	103ffe1e 	bne	r2,zero,8d34 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8d3c:	e0fffc17 	ldw	r3,-16(fp)
    8d40:	008003f4 	movhi	r2,15
    8d44:	10909004 	addi	r2,r2,16960
    8d48:	1887383a 	mul	r3,r3,r2
    8d4c:	0080bef4 	movhi	r2,763
    8d50:	10bc2004 	addi	r2,r2,-3968
    8d54:	10c7203a 	divu	r3,r2,r3
    8d58:	00a00034 	movhi	r2,32768
    8d5c:	10bfffc4 	addi	r2,r2,-1
    8d60:	10c7203a 	divu	r3,r2,r3
    8d64:	e0bfff17 	ldw	r2,-4(fp)
    8d68:	10c5c83a 	sub	r2,r2,r3
    8d6c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8d70:	e0bffe17 	ldw	r2,-8(fp)
    8d74:	10800044 	addi	r2,r2,1
    8d78:	e0bffe15 	stw	r2,-8(fp)
    8d7c:	e0fffe17 	ldw	r3,-8(fp)
    8d80:	e0bffd17 	ldw	r2,-12(fp)
    8d84:	18bfe916 	blt	r3,r2,8d2c <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8d88:	e0fffc17 	ldw	r3,-16(fp)
    8d8c:	008003f4 	movhi	r2,15
    8d90:	10909004 	addi	r2,r2,16960
    8d94:	1887383a 	mul	r3,r3,r2
    8d98:	0080bef4 	movhi	r2,763
    8d9c:	10bc2004 	addi	r2,r2,-3968
    8da0:	10c7203a 	divu	r3,r2,r3
    8da4:	e0bfff17 	ldw	r2,-4(fp)
    8da8:	1885383a 	mul	r2,r3,r2
    8dac:	10bfffc4 	addi	r2,r2,-1
    8db0:	103ffe1e 	bne	r2,zero,8dac <alt_busy_sleep+0xe0>
    8db4:	00000b06 	br	8de4 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8db8:	e0fffc17 	ldw	r3,-16(fp)
    8dbc:	008003f4 	movhi	r2,15
    8dc0:	10909004 	addi	r2,r2,16960
    8dc4:	1887383a 	mul	r3,r3,r2
    8dc8:	0080bef4 	movhi	r2,763
    8dcc:	10bc2004 	addi	r2,r2,-3968
    8dd0:	10c7203a 	divu	r3,r2,r3
    8dd4:	e0bfff17 	ldw	r2,-4(fp)
    8dd8:	1885383a 	mul	r2,r3,r2
    8ddc:	10bfffc4 	addi	r2,r2,-1
    8de0:	00bffe16 	blt	zero,r2,8ddc <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    8de4:	0005883a 	mov	r2,zero
}
    8de8:	e037883a 	mov	sp,fp
    8dec:	df000017 	ldw	fp,0(sp)
    8df0:	dec00104 	addi	sp,sp,4
    8df4:	f800283a 	ret

00008df8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8df8:	defffa04 	addi	sp,sp,-24
    8dfc:	dfc00515 	stw	ra,20(sp)
    8e00:	df000415 	stw	fp,16(sp)
    8e04:	df000404 	addi	fp,sp,16
    8e08:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8e0c:	00800074 	movhi	r2,1
    8e10:	10b85104 	addi	r2,r2,-7868
    8e14:	10800017 	ldw	r2,0(r2)
    8e18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8e1c:	00003306 	br	8eec <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    8e20:	e0bffd17 	ldw	r2,-12(fp)
    8e24:	11000217 	ldw	r4,8(r2)
    8e28:	00093c80 	call	93c8 <strlen>
    8e2c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    8e30:	e0bffd17 	ldw	r2,-12(fp)
    8e34:	10c00217 	ldw	r3,8(r2)
    8e38:	e0bffc17 	ldw	r2,-16(fp)
    8e3c:	1885883a 	add	r2,r3,r2
    8e40:	10bfffc4 	addi	r2,r2,-1
    8e44:	10800003 	ldbu	r2,0(r2)
    8e48:	10803fcc 	andi	r2,r2,255
    8e4c:	1080201c 	xori	r2,r2,128
    8e50:	10bfe004 	addi	r2,r2,-128
    8e54:	10800bd8 	cmpnei	r2,r2,47
    8e58:	1000031e 	bne	r2,zero,8e68 <alt_find_file+0x70>
    {
      len -= 1;
    8e5c:	e0bffc17 	ldw	r2,-16(fp)
    8e60:	10bfffc4 	addi	r2,r2,-1
    8e64:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    8e68:	e0bffc17 	ldw	r2,-16(fp)
    8e6c:	1007883a 	mov	r3,r2
    8e70:	e0bffe17 	ldw	r2,-8(fp)
    8e74:	1885883a 	add	r2,r3,r2
    8e78:	10800003 	ldbu	r2,0(r2)
    8e7c:	10803fcc 	andi	r2,r2,255
    8e80:	1080201c 	xori	r2,r2,128
    8e84:	10bfe004 	addi	r2,r2,-128
    8e88:	10800be0 	cmpeqi	r2,r2,47
    8e8c:	10000a1e 	bne	r2,zero,8eb8 <alt_find_file+0xc0>
    8e90:	e0bffc17 	ldw	r2,-16(fp)
    8e94:	1007883a 	mov	r3,r2
    8e98:	e0bffe17 	ldw	r2,-8(fp)
    8e9c:	1885883a 	add	r2,r3,r2
    8ea0:	10800003 	ldbu	r2,0(r2)
    8ea4:	10803fcc 	andi	r2,r2,255
    8ea8:	1080201c 	xori	r2,r2,128
    8eac:	10bfe004 	addi	r2,r2,-128
    8eb0:	1004c03a 	cmpne	r2,r2,zero
    8eb4:	10000a1e 	bne	r2,zero,8ee0 <alt_find_file+0xe8>
    8eb8:	e0bffd17 	ldw	r2,-12(fp)
    8ebc:	11000217 	ldw	r4,8(r2)
    8ec0:	e1bffc17 	ldw	r6,-16(fp)
    8ec4:	e17ffe17 	ldw	r5,-8(fp)
    8ec8:	00090ac0 	call	90ac <memcmp>
    8ecc:	1004c03a 	cmpne	r2,r2,zero
    8ed0:	1000031e 	bne	r2,zero,8ee0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    8ed4:	e0bffd17 	ldw	r2,-12(fp)
    8ed8:	e0bfff15 	stw	r2,-4(fp)
    8edc:	00000806 	br	8f00 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    8ee0:	e0bffd17 	ldw	r2,-12(fp)
    8ee4:	10800017 	ldw	r2,0(r2)
    8ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8eec:	00c00074 	movhi	r3,1
    8ef0:	18f85104 	addi	r3,r3,-7868
    8ef4:	e0bffd17 	ldw	r2,-12(fp)
    8ef8:	10ffc91e 	bne	r2,r3,8e20 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    8efc:	e03fff15 	stw	zero,-4(fp)
    8f00:	e0bfff17 	ldw	r2,-4(fp)
}
    8f04:	e037883a 	mov	sp,fp
    8f08:	dfc00117 	ldw	ra,4(sp)
    8f0c:	df000017 	ldw	fp,0(sp)
    8f10:	dec00204 	addi	sp,sp,8
    8f14:	f800283a 	ret

00008f18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    8f18:	defffc04 	addi	sp,sp,-16
    8f1c:	df000315 	stw	fp,12(sp)
    8f20:	df000304 	addi	fp,sp,12
    8f24:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    8f28:	00bffa04 	movi	r2,-24
    8f2c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8f30:	e03ffe15 	stw	zero,-8(fp)
    8f34:	00001e06 	br	8fb0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    8f38:	e0bffe17 	ldw	r2,-8(fp)
    8f3c:	00c00074 	movhi	r3,1
    8f40:	18f5ee04 	addi	r3,r3,-10312
    8f44:	10800324 	muli	r2,r2,12
    8f48:	10c5883a 	add	r2,r2,r3
    8f4c:	10800017 	ldw	r2,0(r2)
    8f50:	1004c03a 	cmpne	r2,r2,zero
    8f54:	1000131e 	bne	r2,zero,8fa4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    8f58:	e0bffe17 	ldw	r2,-8(fp)
    8f5c:	00c00074 	movhi	r3,1
    8f60:	18f5ee04 	addi	r3,r3,-10312
    8f64:	10800324 	muli	r2,r2,12
    8f68:	10c7883a 	add	r3,r2,r3
    8f6c:	e0bfff17 	ldw	r2,-4(fp)
    8f70:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    8f74:	00800074 	movhi	r2,1
    8f78:	10b85504 	addi	r2,r2,-7852
    8f7c:	10c00017 	ldw	r3,0(r2)
    8f80:	e0bffe17 	ldw	r2,-8(fp)
    8f84:	1880040e 	bge	r3,r2,8f98 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    8f88:	00c00074 	movhi	r3,1
    8f8c:	18f85504 	addi	r3,r3,-7852
    8f90:	e0bffe17 	ldw	r2,-8(fp)
    8f94:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    8f98:	e0bffe17 	ldw	r2,-8(fp)
    8f9c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    8fa0:	00000606 	br	8fbc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    8fa4:	e0bffe17 	ldw	r2,-8(fp)
    8fa8:	10800044 	addi	r2,r2,1
    8fac:	e0bffe15 	stw	r2,-8(fp)
    8fb0:	e0bffe17 	ldw	r2,-8(fp)
    8fb4:	10800810 	cmplti	r2,r2,32
    8fb8:	103fdf1e 	bne	r2,zero,8f38 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    8fbc:	e0bffd17 	ldw	r2,-12(fp)
}
    8fc0:	e037883a 	mov	sp,fp
    8fc4:	df000017 	ldw	fp,0(sp)
    8fc8:	dec00104 	addi	sp,sp,4
    8fcc:	f800283a 	ret

00008fd0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    8fd0:	defffb04 	addi	sp,sp,-20
    8fd4:	df000415 	stw	fp,16(sp)
    8fd8:	df000404 	addi	fp,sp,16
    8fdc:	e13ffe15 	stw	r4,-8(fp)
    8fe0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    8fe4:	e0bfff17 	ldw	r2,-4(fp)
    8fe8:	10840070 	cmpltui	r2,r2,4097
    8fec:	1000021e 	bne	r2,zero,8ff8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    8ff0:	00840004 	movi	r2,4096
    8ff4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    8ff8:	e0fffe17 	ldw	r3,-8(fp)
    8ffc:	e0bfff17 	ldw	r2,-4(fp)
    9000:	1885883a 	add	r2,r3,r2
    9004:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9008:	e0bffe17 	ldw	r2,-8(fp)
    900c:	e0bffd15 	stw	r2,-12(fp)
    9010:	00000506 	br	9028 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9014:	e0bffd17 	ldw	r2,-12(fp)
    9018:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    901c:	e0bffd17 	ldw	r2,-12(fp)
    9020:	10800804 	addi	r2,r2,32
    9024:	e0bffd15 	stw	r2,-12(fp)
    9028:	e0fffd17 	ldw	r3,-12(fp)
    902c:	e0bffc17 	ldw	r2,-16(fp)
    9030:	18bff836 	bltu	r3,r2,9014 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9034:	e0bffe17 	ldw	r2,-8(fp)
    9038:	108007cc 	andi	r2,r2,31
    903c:	1005003a 	cmpeq	r2,r2,zero
    9040:	1000021e 	bne	r2,zero,904c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9044:	e0bffd17 	ldw	r2,-12(fp)
    9048:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    904c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9050:	e037883a 	mov	sp,fp
    9054:	df000017 	ldw	fp,0(sp)
    9058:	dec00104 	addi	sp,sp,4
    905c:	f800283a 	ret

00009060 <atexit>:
    9060:	200b883a 	mov	r5,r4
    9064:	000d883a 	mov	r6,zero
    9068:	0009883a 	mov	r4,zero
    906c:	000f883a 	mov	r7,zero
    9070:	00096c41 	jmpi	96c4 <__register_exitproc>

00009074 <exit>:
    9074:	defffe04 	addi	sp,sp,-8
    9078:	000b883a 	mov	r5,zero
    907c:	dc000015 	stw	r16,0(sp)
    9080:	dfc00115 	stw	ra,4(sp)
    9084:	2021883a 	mov	r16,r4
    9088:	00097fc0 	call	97fc <__call_exitprocs>
    908c:	00800074 	movhi	r2,1
    9090:	10b85a04 	addi	r2,r2,-7832
    9094:	11000017 	ldw	r4,0(r2)
    9098:	20800f17 	ldw	r2,60(r4)
    909c:	10000126 	beq	r2,zero,90a4 <exit+0x30>
    90a0:	103ee83a 	callr	r2
    90a4:	8009883a 	mov	r4,r16
    90a8:	000b30c0 	call	b30c <_exit>

000090ac <memcmp>:
    90ac:	00c000c4 	movi	r3,3
    90b0:	1980032e 	bgeu	r3,r6,90c0 <memcmp+0x14>
    90b4:	2144b03a 	or	r2,r4,r5
    90b8:	10c4703a 	and	r2,r2,r3
    90bc:	10000f26 	beq	r2,zero,90fc <memcmp+0x50>
    90c0:	31ffffc4 	addi	r7,r6,-1
    90c4:	3000061e 	bne	r6,zero,90e0 <memcmp+0x34>
    90c8:	00000a06 	br	90f4 <memcmp+0x48>
    90cc:	39ffffc4 	addi	r7,r7,-1
    90d0:	00bfffc4 	movi	r2,-1
    90d4:	21000044 	addi	r4,r4,1
    90d8:	29400044 	addi	r5,r5,1
    90dc:	38800526 	beq	r7,r2,90f4 <memcmp+0x48>
    90e0:	20c00003 	ldbu	r3,0(r4)
    90e4:	28800003 	ldbu	r2,0(r5)
    90e8:	18bff826 	beq	r3,r2,90cc <memcmp+0x20>
    90ec:	1885c83a 	sub	r2,r3,r2
    90f0:	f800283a 	ret
    90f4:	0005883a 	mov	r2,zero
    90f8:	f800283a 	ret
    90fc:	180f883a 	mov	r7,r3
    9100:	20c00017 	ldw	r3,0(r4)
    9104:	28800017 	ldw	r2,0(r5)
    9108:	18bfed1e 	bne	r3,r2,90c0 <memcmp+0x14>
    910c:	31bfff04 	addi	r6,r6,-4
    9110:	21000104 	addi	r4,r4,4
    9114:	29400104 	addi	r5,r5,4
    9118:	39bff936 	bltu	r7,r6,9100 <memcmp+0x54>
    911c:	003fe806 	br	90c0 <memcmp+0x14>

00009120 <putc>:
    9120:	defffc04 	addi	sp,sp,-16
    9124:	dc800215 	stw	r18,8(sp)
    9128:	04800074 	movhi	r18,1
    912c:	94b85904 	addi	r18,r18,-7836
    9130:	90c00017 	ldw	r3,0(r18)
    9134:	dc400115 	stw	r17,4(sp)
    9138:	dc000015 	stw	r16,0(sp)
    913c:	dfc00315 	stw	ra,12(sp)
    9140:	2023883a 	mov	r17,r4
    9144:	2821883a 	mov	r16,r5
    9148:	18000226 	beq	r3,zero,9154 <putc+0x34>
    914c:	18800e17 	ldw	r2,56(r3)
    9150:	10001126 	beq	r2,zero,9198 <putc+0x78>
    9154:	80800217 	ldw	r2,8(r16)
    9158:	10ffffc4 	addi	r3,r2,-1
    915c:	80c00215 	stw	r3,8(r16)
    9160:	18001316 	blt	r3,zero,91b0 <putc+0x90>
    9164:	80800017 	ldw	r2,0(r16)
    9168:	14400005 	stb	r17,0(r2)
    916c:	80c00017 	ldw	r3,0(r16)
    9170:	18800044 	addi	r2,r3,1
    9174:	18c00003 	ldbu	r3,0(r3)
    9178:	80800015 	stw	r2,0(r16)
    917c:	1805883a 	mov	r2,r3
    9180:	dfc00317 	ldw	ra,12(sp)
    9184:	dc800217 	ldw	r18,8(sp)
    9188:	dc400117 	ldw	r17,4(sp)
    918c:	dc000017 	ldw	r16,0(sp)
    9190:	dec00404 	addi	sp,sp,16
    9194:	f800283a 	ret
    9198:	1809883a 	mov	r4,r3
    919c:	0009c440 	call	9c44 <__sinit>
    91a0:	80800217 	ldw	r2,8(r16)
    91a4:	10ffffc4 	addi	r3,r2,-1
    91a8:	80c00215 	stw	r3,8(r16)
    91ac:	183fed0e 	bge	r3,zero,9164 <putc+0x44>
    91b0:	80800617 	ldw	r2,24(r16)
    91b4:	18800f16 	blt	r3,r2,91f4 <putc+0xd4>
    91b8:	80800017 	ldw	r2,0(r16)
    91bc:	14400005 	stb	r17,0(r2)
    91c0:	81000017 	ldw	r4,0(r16)
    91c4:	00800284 	movi	r2,10
    91c8:	20c00003 	ldbu	r3,0(r4)
    91cc:	18801226 	beq	r3,r2,9218 <putc+0xf8>
    91d0:	20800044 	addi	r2,r4,1
    91d4:	80800015 	stw	r2,0(r16)
    91d8:	1805883a 	mov	r2,r3
    91dc:	dfc00317 	ldw	ra,12(sp)
    91e0:	dc800217 	ldw	r18,8(sp)
    91e4:	dc400117 	ldw	r17,4(sp)
    91e8:	dc000017 	ldw	r16,0(sp)
    91ec:	dec00404 	addi	sp,sp,16
    91f0:	f800283a 	ret
    91f4:	91000017 	ldw	r4,0(r18)
    91f8:	880b883a 	mov	r5,r17
    91fc:	800d883a 	mov	r6,r16
    9200:	dfc00317 	ldw	ra,12(sp)
    9204:	dc800217 	ldw	r18,8(sp)
    9208:	dc400117 	ldw	r17,4(sp)
    920c:	dc000017 	ldw	r16,0(sp)
    9210:	dec00404 	addi	sp,sp,16
    9214:	000943c1 	jmpi	943c <__swbuf_r>
    9218:	91000017 	ldw	r4,0(r18)
    921c:	180b883a 	mov	r5,r3
    9220:	003ff606 	br	91fc <putc+0xdc>

00009224 <_putc_r>:
    9224:	defffc04 	addi	sp,sp,-16
    9228:	dc400215 	stw	r17,8(sp)
    922c:	dc000115 	stw	r16,4(sp)
    9230:	dfc00315 	stw	ra,12(sp)
    9234:	2021883a 	mov	r16,r4
    9238:	2823883a 	mov	r17,r5
    923c:	20000226 	beq	r4,zero,9248 <_putc_r+0x24>
    9240:	20800e17 	ldw	r2,56(r4)
    9244:	10001026 	beq	r2,zero,9288 <_putc_r+0x64>
    9248:	30800217 	ldw	r2,8(r6)
    924c:	10ffffc4 	addi	r3,r2,-1
    9250:	30c00215 	stw	r3,8(r6)
    9254:	18001316 	blt	r3,zero,92a4 <_putc_r+0x80>
    9258:	30800017 	ldw	r2,0(r6)
    925c:	14400005 	stb	r17,0(r2)
    9260:	30c00017 	ldw	r3,0(r6)
    9264:	18800044 	addi	r2,r3,1
    9268:	18c00003 	ldbu	r3,0(r3)
    926c:	30800015 	stw	r2,0(r6)
    9270:	1805883a 	mov	r2,r3
    9274:	dfc00317 	ldw	ra,12(sp)
    9278:	dc400217 	ldw	r17,8(sp)
    927c:	dc000117 	ldw	r16,4(sp)
    9280:	dec00404 	addi	sp,sp,16
    9284:	f800283a 	ret
    9288:	d9800015 	stw	r6,0(sp)
    928c:	0009c440 	call	9c44 <__sinit>
    9290:	d9800017 	ldw	r6,0(sp)
    9294:	30800217 	ldw	r2,8(r6)
    9298:	10ffffc4 	addi	r3,r2,-1
    929c:	30c00215 	stw	r3,8(r6)
    92a0:	183fed0e 	bge	r3,zero,9258 <_putc_r+0x34>
    92a4:	30800617 	ldw	r2,24(r6)
    92a8:	18800e16 	blt	r3,r2,92e4 <_putc_r+0xc0>
    92ac:	30800017 	ldw	r2,0(r6)
    92b0:	14400005 	stb	r17,0(r2)
    92b4:	31000017 	ldw	r4,0(r6)
    92b8:	00800284 	movi	r2,10
    92bc:	20c00003 	ldbu	r3,0(r4)
    92c0:	18800f26 	beq	r3,r2,9300 <_putc_r+0xdc>
    92c4:	20800044 	addi	r2,r4,1
    92c8:	30800015 	stw	r2,0(r6)
    92cc:	1805883a 	mov	r2,r3
    92d0:	dfc00317 	ldw	ra,12(sp)
    92d4:	dc400217 	ldw	r17,8(sp)
    92d8:	dc000117 	ldw	r16,4(sp)
    92dc:	dec00404 	addi	sp,sp,16
    92e0:	f800283a 	ret
    92e4:	8009883a 	mov	r4,r16
    92e8:	880b883a 	mov	r5,r17
    92ec:	dfc00317 	ldw	ra,12(sp)
    92f0:	dc400217 	ldw	r17,8(sp)
    92f4:	dc000117 	ldw	r16,4(sp)
    92f8:	dec00404 	addi	sp,sp,16
    92fc:	000943c1 	jmpi	943c <__swbuf_r>
    9300:	8009883a 	mov	r4,r16
    9304:	180b883a 	mov	r5,r3
    9308:	003ff806 	br	92ec <_putc_r+0xc8>

0000930c <strcmp>:
    930c:	2144b03a 	or	r2,r4,r5
    9310:	108000cc 	andi	r2,r2,3
    9314:	10001d1e 	bne	r2,zero,938c <strcmp+0x80>
    9318:	200f883a 	mov	r7,r4
    931c:	28800017 	ldw	r2,0(r5)
    9320:	21000017 	ldw	r4,0(r4)
    9324:	280d883a 	mov	r6,r5
    9328:	2080161e 	bne	r4,r2,9384 <strcmp+0x78>
    932c:	023fbff4 	movhi	r8,65279
    9330:	423fbfc4 	addi	r8,r8,-257
    9334:	2207883a 	add	r3,r4,r8
    9338:	01602074 	movhi	r5,32897
    933c:	29602004 	addi	r5,r5,-32640
    9340:	1946703a 	and	r3,r3,r5
    9344:	0104303a 	nor	r2,zero,r4
    9348:	10c4703a 	and	r2,r2,r3
    934c:	10001c1e 	bne	r2,zero,93c0 <strcmp+0xb4>
    9350:	4013883a 	mov	r9,r8
    9354:	2811883a 	mov	r8,r5
    9358:	00000106 	br	9360 <strcmp+0x54>
    935c:	1800181e 	bne	r3,zero,93c0 <strcmp+0xb4>
    9360:	39c00104 	addi	r7,r7,4
    9364:	39000017 	ldw	r4,0(r7)
    9368:	31800104 	addi	r6,r6,4
    936c:	31400017 	ldw	r5,0(r6)
    9370:	2245883a 	add	r2,r4,r9
    9374:	1204703a 	and	r2,r2,r8
    9378:	0106303a 	nor	r3,zero,r4
    937c:	1886703a 	and	r3,r3,r2
    9380:	217ff626 	beq	r4,r5,935c <strcmp+0x50>
    9384:	3809883a 	mov	r4,r7
    9388:	300b883a 	mov	r5,r6
    938c:	20c00007 	ldb	r3,0(r4)
    9390:	1800051e 	bne	r3,zero,93a8 <strcmp+0x9c>
    9394:	00000606 	br	93b0 <strcmp+0xa4>
    9398:	21000044 	addi	r4,r4,1
    939c:	20c00007 	ldb	r3,0(r4)
    93a0:	29400044 	addi	r5,r5,1
    93a4:	18000226 	beq	r3,zero,93b0 <strcmp+0xa4>
    93a8:	28800007 	ldb	r2,0(r5)
    93ac:	18bffa26 	beq	r3,r2,9398 <strcmp+0x8c>
    93b0:	20c00003 	ldbu	r3,0(r4)
    93b4:	28800003 	ldbu	r2,0(r5)
    93b8:	1885c83a 	sub	r2,r3,r2
    93bc:	f800283a 	ret
    93c0:	0005883a 	mov	r2,zero
    93c4:	f800283a 	ret

000093c8 <strlen>:
    93c8:	208000cc 	andi	r2,r4,3
    93cc:	2011883a 	mov	r8,r4
    93d0:	1000161e 	bne	r2,zero,942c <strlen+0x64>
    93d4:	20c00017 	ldw	r3,0(r4)
    93d8:	017fbff4 	movhi	r5,65279
    93dc:	297fbfc4 	addi	r5,r5,-257
    93e0:	01e02074 	movhi	r7,32897
    93e4:	39e02004 	addi	r7,r7,-32640
    93e8:	1945883a 	add	r2,r3,r5
    93ec:	11c4703a 	and	r2,r2,r7
    93f0:	00c6303a 	nor	r3,zero,r3
    93f4:	1886703a 	and	r3,r3,r2
    93f8:	18000c1e 	bne	r3,zero,942c <strlen+0x64>
    93fc:	280d883a 	mov	r6,r5
    9400:	380b883a 	mov	r5,r7
    9404:	21000104 	addi	r4,r4,4
    9408:	20800017 	ldw	r2,0(r4)
    940c:	1187883a 	add	r3,r2,r6
    9410:	1946703a 	and	r3,r3,r5
    9414:	0084303a 	nor	r2,zero,r2
    9418:	10c4703a 	and	r2,r2,r3
    941c:	103ff926 	beq	r2,zero,9404 <strlen+0x3c>
    9420:	20800007 	ldb	r2,0(r4)
    9424:	10000326 	beq	r2,zero,9434 <strlen+0x6c>
    9428:	21000044 	addi	r4,r4,1
    942c:	20800007 	ldb	r2,0(r4)
    9430:	103ffd1e 	bne	r2,zero,9428 <strlen+0x60>
    9434:	2205c83a 	sub	r2,r4,r8
    9438:	f800283a 	ret

0000943c <__swbuf_r>:
    943c:	defffc04 	addi	sp,sp,-16
    9440:	dc400215 	stw	r17,8(sp)
    9444:	dc000115 	stw	r16,4(sp)
    9448:	dfc00315 	stw	ra,12(sp)
    944c:	2023883a 	mov	r17,r4
    9450:	2821883a 	mov	r16,r5
    9454:	20000226 	beq	r4,zero,9460 <__swbuf_r+0x24>
    9458:	20800e17 	ldw	r2,56(r4)
    945c:	10002f26 	beq	r2,zero,951c <__swbuf_r+0xe0>
    9460:	3080030b 	ldhu	r2,12(r6)
    9464:	30c00617 	ldw	r3,24(r6)
    9468:	1080020c 	andi	r2,r2,8
    946c:	30c00215 	stw	r3,8(r6)
    9470:	10002226 	beq	r2,zero,94fc <__swbuf_r+0xc0>
    9474:	30c00417 	ldw	r3,16(r6)
    9478:	18002026 	beq	r3,zero,94fc <__swbuf_r+0xc0>
    947c:	31000017 	ldw	r4,0(r6)
    9480:	30800517 	ldw	r2,20(r6)
    9484:	20c7c83a 	sub	r3,r4,r3
    9488:	18802f0e 	bge	r3,r2,9548 <__swbuf_r+0x10c>
    948c:	19400044 	addi	r5,r3,1
    9490:	30800217 	ldw	r2,8(r6)
    9494:	84003fcc 	andi	r16,r16,255
    9498:	20c00044 	addi	r3,r4,1
    949c:	10bfffc4 	addi	r2,r2,-1
    94a0:	30800215 	stw	r2,8(r6)
    94a4:	24000005 	stb	r16,0(r4)
    94a8:	30800517 	ldw	r2,20(r6)
    94ac:	30c00015 	stw	r3,0(r6)
    94b0:	11400c26 	beq	r2,r5,94e4 <__swbuf_r+0xa8>
    94b4:	3080030b 	ldhu	r2,12(r6)
    94b8:	1080004c 	andi	r2,r2,1
    94bc:	1005003a 	cmpeq	r2,r2,zero
    94c0:	10000626 	beq	r2,zero,94dc <__swbuf_r+0xa0>
    94c4:	8005883a 	mov	r2,r16
    94c8:	dfc00317 	ldw	ra,12(sp)
    94cc:	dc400217 	ldw	r17,8(sp)
    94d0:	dc000117 	ldw	r16,4(sp)
    94d4:	dec00404 	addi	sp,sp,16
    94d8:	f800283a 	ret
    94dc:	00800284 	movi	r2,10
    94e0:	80bff81e 	bne	r16,r2,94c4 <__swbuf_r+0x88>
    94e4:	8809883a 	mov	r4,r17
    94e8:	300b883a 	mov	r5,r6
    94ec:	00099ac0 	call	99ac <_fflush_r>
    94f0:	103ff426 	beq	r2,zero,94c4 <__swbuf_r+0x88>
    94f4:	043fffc4 	movi	r16,-1
    94f8:	003ff206 	br	94c4 <__swbuf_r+0x88>
    94fc:	300b883a 	mov	r5,r6
    9500:	8809883a 	mov	r4,r17
    9504:	d9800015 	stw	r6,0(sp)
    9508:	00095880 	call	9588 <__swsetup_r>
    950c:	d9800017 	ldw	r6,0(sp)
    9510:	1000061e 	bne	r2,zero,952c <__swbuf_r+0xf0>
    9514:	30c00417 	ldw	r3,16(r6)
    9518:	003fd806 	br	947c <__swbuf_r+0x40>
    951c:	d9800015 	stw	r6,0(sp)
    9520:	0009c440 	call	9c44 <__sinit>
    9524:	d9800017 	ldw	r6,0(sp)
    9528:	003fcd06 	br	9460 <__swbuf_r+0x24>
    952c:	3080030b 	ldhu	r2,12(r6)
    9530:	00c00244 	movi	r3,9
    9534:	043fffc4 	movi	r16,-1
    9538:	10801014 	ori	r2,r2,64
    953c:	3080030d 	sth	r2,12(r6)
    9540:	88c00015 	stw	r3,0(r17)
    9544:	003fdf06 	br	94c4 <__swbuf_r+0x88>
    9548:	300b883a 	mov	r5,r6
    954c:	8809883a 	mov	r4,r17
    9550:	d9800015 	stw	r6,0(sp)
    9554:	00099ac0 	call	99ac <_fflush_r>
    9558:	d9800017 	ldw	r6,0(sp)
    955c:	103fe51e 	bne	r2,zero,94f4 <__swbuf_r+0xb8>
    9560:	31000017 	ldw	r4,0(r6)
    9564:	01400044 	movi	r5,1
    9568:	003fc906 	br	9490 <__swbuf_r+0x54>

0000956c <__swbuf>:
    956c:	01800074 	movhi	r6,1
    9570:	31b85904 	addi	r6,r6,-7836
    9574:	2007883a 	mov	r3,r4
    9578:	31000017 	ldw	r4,0(r6)
    957c:	280d883a 	mov	r6,r5
    9580:	180b883a 	mov	r5,r3
    9584:	000943c1 	jmpi	943c <__swbuf_r>

00009588 <__swsetup_r>:
    9588:	00800074 	movhi	r2,1
    958c:	10b85904 	addi	r2,r2,-7836
    9590:	10c00017 	ldw	r3,0(r2)
    9594:	defffd04 	addi	sp,sp,-12
    9598:	dc400115 	stw	r17,4(sp)
    959c:	dc000015 	stw	r16,0(sp)
    95a0:	dfc00215 	stw	ra,8(sp)
    95a4:	2023883a 	mov	r17,r4
    95a8:	2821883a 	mov	r16,r5
    95ac:	18000226 	beq	r3,zero,95b8 <__swsetup_r+0x30>
    95b0:	18800e17 	ldw	r2,56(r3)
    95b4:	10001f26 	beq	r2,zero,9634 <__swsetup_r+0xac>
    95b8:	8100030b 	ldhu	r4,12(r16)
    95bc:	2080020c 	andi	r2,r4,8
    95c0:	10002826 	beq	r2,zero,9664 <__swsetup_r+0xdc>
    95c4:	81400417 	ldw	r5,16(r16)
    95c8:	28001d26 	beq	r5,zero,9640 <__swsetup_r+0xb8>
    95cc:	2080004c 	andi	r2,r4,1
    95d0:	1005003a 	cmpeq	r2,r2,zero
    95d4:	10000b26 	beq	r2,zero,9604 <__swsetup_r+0x7c>
    95d8:	2080008c 	andi	r2,r4,2
    95dc:	10001226 	beq	r2,zero,9628 <__swsetup_r+0xa0>
    95e0:	0005883a 	mov	r2,zero
    95e4:	80800215 	stw	r2,8(r16)
    95e8:	28000b26 	beq	r5,zero,9618 <__swsetup_r+0x90>
    95ec:	0005883a 	mov	r2,zero
    95f0:	dfc00217 	ldw	ra,8(sp)
    95f4:	dc400117 	ldw	r17,4(sp)
    95f8:	dc000017 	ldw	r16,0(sp)
    95fc:	dec00304 	addi	sp,sp,12
    9600:	f800283a 	ret
    9604:	80800517 	ldw	r2,20(r16)
    9608:	80000215 	stw	zero,8(r16)
    960c:	0085c83a 	sub	r2,zero,r2
    9610:	80800615 	stw	r2,24(r16)
    9614:	283ff51e 	bne	r5,zero,95ec <__swsetup_r+0x64>
    9618:	2080200c 	andi	r2,r4,128
    961c:	103ff326 	beq	r2,zero,95ec <__swsetup_r+0x64>
    9620:	00bfffc4 	movi	r2,-1
    9624:	003ff206 	br	95f0 <__swsetup_r+0x68>
    9628:	80800517 	ldw	r2,20(r16)
    962c:	80800215 	stw	r2,8(r16)
    9630:	003fed06 	br	95e8 <__swsetup_r+0x60>
    9634:	1809883a 	mov	r4,r3
    9638:	0009c440 	call	9c44 <__sinit>
    963c:	003fde06 	br	95b8 <__swsetup_r+0x30>
    9640:	20c0a00c 	andi	r3,r4,640
    9644:	00808004 	movi	r2,512
    9648:	18bfe026 	beq	r3,r2,95cc <__swsetup_r+0x44>
    964c:	8809883a 	mov	r4,r17
    9650:	800b883a 	mov	r5,r16
    9654:	000a45c0 	call	a45c <__smakebuf_r>
    9658:	8100030b 	ldhu	r4,12(r16)
    965c:	81400417 	ldw	r5,16(r16)
    9660:	003fda06 	br	95cc <__swsetup_r+0x44>
    9664:	2080040c 	andi	r2,r4,16
    9668:	103fed26 	beq	r2,zero,9620 <__swsetup_r+0x98>
    966c:	2080010c 	andi	r2,r4,4
    9670:	10001226 	beq	r2,zero,96bc <__swsetup_r+0x134>
    9674:	81400c17 	ldw	r5,48(r16)
    9678:	28000526 	beq	r5,zero,9690 <__swsetup_r+0x108>
    967c:	80801004 	addi	r2,r16,64
    9680:	28800226 	beq	r5,r2,968c <__swsetup_r+0x104>
    9684:	8809883a 	mov	r4,r17
    9688:	0009fc80 	call	9fc8 <_free_r>
    968c:	80000c15 	stw	zero,48(r16)
    9690:	8080030b 	ldhu	r2,12(r16)
    9694:	81400417 	ldw	r5,16(r16)
    9698:	80000115 	stw	zero,4(r16)
    969c:	10bff6cc 	andi	r2,r2,65499
    96a0:	8080030d 	sth	r2,12(r16)
    96a4:	81400015 	stw	r5,0(r16)
    96a8:	8080030b 	ldhu	r2,12(r16)
    96ac:	10800214 	ori	r2,r2,8
    96b0:	113fffcc 	andi	r4,r2,65535
    96b4:	8080030d 	sth	r2,12(r16)
    96b8:	003fc306 	br	95c8 <__swsetup_r+0x40>
    96bc:	81400417 	ldw	r5,16(r16)
    96c0:	003ff906 	br	96a8 <__swsetup_r+0x120>

000096c4 <__register_exitproc>:
    96c4:	defffa04 	addi	sp,sp,-24
    96c8:	00800074 	movhi	r2,1
    96cc:	10b85a04 	addi	r2,r2,-7832
    96d0:	dc000015 	stw	r16,0(sp)
    96d4:	14000017 	ldw	r16,0(r2)
    96d8:	dd000415 	stw	r20,16(sp)
    96dc:	2829883a 	mov	r20,r5
    96e0:	81405217 	ldw	r5,328(r16)
    96e4:	dcc00315 	stw	r19,12(sp)
    96e8:	dc800215 	stw	r18,8(sp)
    96ec:	dc400115 	stw	r17,4(sp)
    96f0:	dfc00515 	stw	ra,20(sp)
    96f4:	2023883a 	mov	r17,r4
    96f8:	3027883a 	mov	r19,r6
    96fc:	3825883a 	mov	r18,r7
    9700:	28002526 	beq	r5,zero,9798 <__register_exitproc+0xd4>
    9704:	29000117 	ldw	r4,4(r5)
    9708:	008007c4 	movi	r2,31
    970c:	11002716 	blt	r2,r4,97ac <__register_exitproc+0xe8>
    9710:	8800101e 	bne	r17,zero,9754 <__register_exitproc+0x90>
    9714:	2105883a 	add	r2,r4,r4
    9718:	1085883a 	add	r2,r2,r2
    971c:	20c00044 	addi	r3,r4,1
    9720:	1145883a 	add	r2,r2,r5
    9724:	0009883a 	mov	r4,zero
    9728:	15000215 	stw	r20,8(r2)
    972c:	28c00115 	stw	r3,4(r5)
    9730:	2005883a 	mov	r2,r4
    9734:	dfc00517 	ldw	ra,20(sp)
    9738:	dd000417 	ldw	r20,16(sp)
    973c:	dcc00317 	ldw	r19,12(sp)
    9740:	dc800217 	ldw	r18,8(sp)
    9744:	dc400117 	ldw	r17,4(sp)
    9748:	dc000017 	ldw	r16,0(sp)
    974c:	dec00604 	addi	sp,sp,24
    9750:	f800283a 	ret
    9754:	29802204 	addi	r6,r5,136
    9758:	00800044 	movi	r2,1
    975c:	110e983a 	sll	r7,r2,r4
    9760:	30c04017 	ldw	r3,256(r6)
    9764:	2105883a 	add	r2,r4,r4
    9768:	1085883a 	add	r2,r2,r2
    976c:	1185883a 	add	r2,r2,r6
    9770:	19c6b03a 	or	r3,r3,r7
    9774:	14802015 	stw	r18,128(r2)
    9778:	14c00015 	stw	r19,0(r2)
    977c:	00800084 	movi	r2,2
    9780:	30c04015 	stw	r3,256(r6)
    9784:	88bfe31e 	bne	r17,r2,9714 <__register_exitproc+0x50>
    9788:	30804117 	ldw	r2,260(r6)
    978c:	11c4b03a 	or	r2,r2,r7
    9790:	30804115 	stw	r2,260(r6)
    9794:	003fdf06 	br	9714 <__register_exitproc+0x50>
    9798:	00801ef4 	movhi	r2,123
    979c:	10865204 	addi	r2,r2,6472
    97a0:	100b883a 	mov	r5,r2
    97a4:	80805215 	stw	r2,328(r16)
    97a8:	003fd606 	br	9704 <__register_exitproc+0x40>
    97ac:	00800034 	movhi	r2,0
    97b0:	10800004 	addi	r2,r2,0
    97b4:	1000021e 	bne	r2,zero,97c0 <__register_exitproc+0xfc>
    97b8:	013fffc4 	movi	r4,-1
    97bc:	003fdc06 	br	9730 <__register_exitproc+0x6c>
    97c0:	01006404 	movi	r4,400
    97c4:	103ee83a 	callr	r2
    97c8:	1007883a 	mov	r3,r2
    97cc:	103ffa26 	beq	r2,zero,97b8 <__register_exitproc+0xf4>
    97d0:	80805217 	ldw	r2,328(r16)
    97d4:	180b883a 	mov	r5,r3
    97d8:	18000115 	stw	zero,4(r3)
    97dc:	18800015 	stw	r2,0(r3)
    97e0:	80c05215 	stw	r3,328(r16)
    97e4:	18006215 	stw	zero,392(r3)
    97e8:	18006315 	stw	zero,396(r3)
    97ec:	0009883a 	mov	r4,zero
    97f0:	883fc826 	beq	r17,zero,9714 <__register_exitproc+0x50>
    97f4:	003fd706 	br	9754 <__register_exitproc+0x90>

000097f8 <register_fini>:
    97f8:	f800283a 	ret

000097fc <__call_exitprocs>:
    97fc:	00800074 	movhi	r2,1
    9800:	10b85a04 	addi	r2,r2,-7832
    9804:	10800017 	ldw	r2,0(r2)
    9808:	defff304 	addi	sp,sp,-52
    980c:	df000b15 	stw	fp,44(sp)
    9810:	d8800115 	stw	r2,4(sp)
    9814:	00800034 	movhi	r2,0
    9818:	10800004 	addi	r2,r2,0
    981c:	1005003a 	cmpeq	r2,r2,zero
    9820:	d8800215 	stw	r2,8(sp)
    9824:	d8800117 	ldw	r2,4(sp)
    9828:	dd400815 	stw	r21,32(sp)
    982c:	dd000715 	stw	r20,28(sp)
    9830:	10805204 	addi	r2,r2,328
    9834:	dfc00c15 	stw	ra,48(sp)
    9838:	ddc00a15 	stw	r23,40(sp)
    983c:	dd800915 	stw	r22,36(sp)
    9840:	dcc00615 	stw	r19,24(sp)
    9844:	dc800515 	stw	r18,20(sp)
    9848:	dc400415 	stw	r17,16(sp)
    984c:	dc000315 	stw	r16,12(sp)
    9850:	282b883a 	mov	r21,r5
    9854:	2039883a 	mov	fp,r4
    9858:	d8800015 	stw	r2,0(sp)
    985c:	2829003a 	cmpeq	r20,r5,zero
    9860:	d8800117 	ldw	r2,4(sp)
    9864:	14405217 	ldw	r17,328(r2)
    9868:	88001026 	beq	r17,zero,98ac <__call_exitprocs+0xb0>
    986c:	ddc00017 	ldw	r23,0(sp)
    9870:	88800117 	ldw	r2,4(r17)
    9874:	8c802204 	addi	r18,r17,136
    9878:	143fffc4 	addi	r16,r2,-1
    987c:	80000916 	blt	r16,zero,98a4 <__call_exitprocs+0xa8>
    9880:	05bfffc4 	movi	r22,-1
    9884:	a000151e 	bne	r20,zero,98dc <__call_exitprocs+0xe0>
    9888:	8409883a 	add	r4,r16,r16
    988c:	2105883a 	add	r2,r4,r4
    9890:	1485883a 	add	r2,r2,r18
    9894:	10c02017 	ldw	r3,128(r2)
    9898:	a8c01126 	beq	r21,r3,98e0 <__call_exitprocs+0xe4>
    989c:	843fffc4 	addi	r16,r16,-1
    98a0:	85bff81e 	bne	r16,r22,9884 <__call_exitprocs+0x88>
    98a4:	d8800217 	ldw	r2,8(sp)
    98a8:	10003126 	beq	r2,zero,9970 <__call_exitprocs+0x174>
    98ac:	dfc00c17 	ldw	ra,48(sp)
    98b0:	df000b17 	ldw	fp,44(sp)
    98b4:	ddc00a17 	ldw	r23,40(sp)
    98b8:	dd800917 	ldw	r22,36(sp)
    98bc:	dd400817 	ldw	r21,32(sp)
    98c0:	dd000717 	ldw	r20,28(sp)
    98c4:	dcc00617 	ldw	r19,24(sp)
    98c8:	dc800517 	ldw	r18,20(sp)
    98cc:	dc400417 	ldw	r17,16(sp)
    98d0:	dc000317 	ldw	r16,12(sp)
    98d4:	dec00d04 	addi	sp,sp,52
    98d8:	f800283a 	ret
    98dc:	8409883a 	add	r4,r16,r16
    98e0:	88c00117 	ldw	r3,4(r17)
    98e4:	2105883a 	add	r2,r4,r4
    98e8:	1445883a 	add	r2,r2,r17
    98ec:	18ffffc4 	addi	r3,r3,-1
    98f0:	11800217 	ldw	r6,8(r2)
    98f4:	1c001526 	beq	r3,r16,994c <__call_exitprocs+0x150>
    98f8:	10000215 	stw	zero,8(r2)
    98fc:	303fe726 	beq	r6,zero,989c <__call_exitprocs+0xa0>
    9900:	00c00044 	movi	r3,1
    9904:	1c06983a 	sll	r3,r3,r16
    9908:	90804017 	ldw	r2,256(r18)
    990c:	8cc00117 	ldw	r19,4(r17)
    9910:	1884703a 	and	r2,r3,r2
    9914:	10001426 	beq	r2,zero,9968 <__call_exitprocs+0x16c>
    9918:	90804117 	ldw	r2,260(r18)
    991c:	1884703a 	and	r2,r3,r2
    9920:	10000c1e 	bne	r2,zero,9954 <__call_exitprocs+0x158>
    9924:	2105883a 	add	r2,r4,r4
    9928:	1485883a 	add	r2,r2,r18
    992c:	11400017 	ldw	r5,0(r2)
    9930:	e009883a 	mov	r4,fp
    9934:	303ee83a 	callr	r6
    9938:	88800117 	ldw	r2,4(r17)
    993c:	98bfc81e 	bne	r19,r2,9860 <__call_exitprocs+0x64>
    9940:	b8800017 	ldw	r2,0(r23)
    9944:	147fd526 	beq	r2,r17,989c <__call_exitprocs+0xa0>
    9948:	003fc506 	br	9860 <__call_exitprocs+0x64>
    994c:	8c000115 	stw	r16,4(r17)
    9950:	003fea06 	br	98fc <__call_exitprocs+0x100>
    9954:	2105883a 	add	r2,r4,r4
    9958:	1485883a 	add	r2,r2,r18
    995c:	11000017 	ldw	r4,0(r2)
    9960:	303ee83a 	callr	r6
    9964:	003ff406 	br	9938 <__call_exitprocs+0x13c>
    9968:	303ee83a 	callr	r6
    996c:	003ff206 	br	9938 <__call_exitprocs+0x13c>
    9970:	88800117 	ldw	r2,4(r17)
    9974:	1000081e 	bne	r2,zero,9998 <__call_exitprocs+0x19c>
    9978:	89000017 	ldw	r4,0(r17)
    997c:	20000726 	beq	r4,zero,999c <__call_exitprocs+0x1a0>
    9980:	b9000015 	stw	r4,0(r23)
    9984:	8809883a 	mov	r4,r17
    9988:	00000000 	call	0 <__alt_mem_SDRAM>
    998c:	bc400017 	ldw	r17,0(r23)
    9990:	883fb71e 	bne	r17,zero,9870 <__call_exitprocs+0x74>
    9994:	003fc506 	br	98ac <__call_exitprocs+0xb0>
    9998:	89000017 	ldw	r4,0(r17)
    999c:	882f883a 	mov	r23,r17
    99a0:	2023883a 	mov	r17,r4
    99a4:	883fb21e 	bne	r17,zero,9870 <__call_exitprocs+0x74>
    99a8:	003fc006 	br	98ac <__call_exitprocs+0xb0>

000099ac <_fflush_r>:
    99ac:	defffb04 	addi	sp,sp,-20
    99b0:	dcc00315 	stw	r19,12(sp)
    99b4:	dc800215 	stw	r18,8(sp)
    99b8:	dfc00415 	stw	ra,16(sp)
    99bc:	dc400115 	stw	r17,4(sp)
    99c0:	dc000015 	stw	r16,0(sp)
    99c4:	2027883a 	mov	r19,r4
    99c8:	2825883a 	mov	r18,r5
    99cc:	20000226 	beq	r4,zero,99d8 <_fflush_r+0x2c>
    99d0:	20800e17 	ldw	r2,56(r4)
    99d4:	10005626 	beq	r2,zero,9b30 <_fflush_r+0x184>
    99d8:	9100030b 	ldhu	r4,12(r18)
    99dc:	20ffffcc 	andi	r3,r4,65535
    99e0:	18e0001c 	xori	r3,r3,32768
    99e4:	18e00004 	addi	r3,r3,-32768
    99e8:	1880020c 	andi	r2,r3,8
    99ec:	1000261e 	bne	r2,zero,9a88 <_fflush_r+0xdc>
    99f0:	90c00117 	ldw	r3,4(r18)
    99f4:	20820014 	ori	r2,r4,2048
    99f8:	9080030d 	sth	r2,12(r18)
    99fc:	1009883a 	mov	r4,r2
    9a00:	00c0400e 	bge	zero,r3,9b04 <_fflush_r+0x158>
    9a04:	92000a17 	ldw	r8,40(r18)
    9a08:	40004026 	beq	r8,zero,9b0c <_fflush_r+0x160>
    9a0c:	2084000c 	andi	r2,r4,4096
    9a10:	10005326 	beq	r2,zero,9b60 <_fflush_r+0x1b4>
    9a14:	94001417 	ldw	r16,80(r18)
    9a18:	9080030b 	ldhu	r2,12(r18)
    9a1c:	1080010c 	andi	r2,r2,4
    9a20:	1000481e 	bne	r2,zero,9b44 <_fflush_r+0x198>
    9a24:	91400717 	ldw	r5,28(r18)
    9a28:	9809883a 	mov	r4,r19
    9a2c:	800d883a 	mov	r6,r16
    9a30:	000f883a 	mov	r7,zero
    9a34:	403ee83a 	callr	r8
    9a38:	8080261e 	bne	r16,r2,9ad4 <_fflush_r+0x128>
    9a3c:	9080030b 	ldhu	r2,12(r18)
    9a40:	91000417 	ldw	r4,16(r18)
    9a44:	90000115 	stw	zero,4(r18)
    9a48:	10bdffcc 	andi	r2,r2,63487
    9a4c:	10ffffcc 	andi	r3,r2,65535
    9a50:	18c4000c 	andi	r3,r3,4096
    9a54:	9080030d 	sth	r2,12(r18)
    9a58:	91000015 	stw	r4,0(r18)
    9a5c:	18002b26 	beq	r3,zero,9b0c <_fflush_r+0x160>
    9a60:	0007883a 	mov	r3,zero
    9a64:	1805883a 	mov	r2,r3
    9a68:	94001415 	stw	r16,80(r18)
    9a6c:	dfc00417 	ldw	ra,16(sp)
    9a70:	dcc00317 	ldw	r19,12(sp)
    9a74:	dc800217 	ldw	r18,8(sp)
    9a78:	dc400117 	ldw	r17,4(sp)
    9a7c:	dc000017 	ldw	r16,0(sp)
    9a80:	dec00504 	addi	sp,sp,20
    9a84:	f800283a 	ret
    9a88:	94400417 	ldw	r17,16(r18)
    9a8c:	88001f26 	beq	r17,zero,9b0c <_fflush_r+0x160>
    9a90:	90800017 	ldw	r2,0(r18)
    9a94:	18c000cc 	andi	r3,r3,3
    9a98:	94400015 	stw	r17,0(r18)
    9a9c:	1461c83a 	sub	r16,r2,r17
    9aa0:	18002526 	beq	r3,zero,9b38 <_fflush_r+0x18c>
    9aa4:	0005883a 	mov	r2,zero
    9aa8:	90800215 	stw	r2,8(r18)
    9aac:	0400170e 	bge	zero,r16,9b0c <_fflush_r+0x160>
    9ab0:	90c00917 	ldw	r3,36(r18)
    9ab4:	91400717 	ldw	r5,28(r18)
    9ab8:	880d883a 	mov	r6,r17
    9abc:	800f883a 	mov	r7,r16
    9ac0:	9809883a 	mov	r4,r19
    9ac4:	183ee83a 	callr	r3
    9ac8:	88a3883a 	add	r17,r17,r2
    9acc:	80a1c83a 	sub	r16,r16,r2
    9ad0:	00bff616 	blt	zero,r2,9aac <_fflush_r+0x100>
    9ad4:	9080030b 	ldhu	r2,12(r18)
    9ad8:	00ffffc4 	movi	r3,-1
    9adc:	10801014 	ori	r2,r2,64
    9ae0:	9080030d 	sth	r2,12(r18)
    9ae4:	1805883a 	mov	r2,r3
    9ae8:	dfc00417 	ldw	ra,16(sp)
    9aec:	dcc00317 	ldw	r19,12(sp)
    9af0:	dc800217 	ldw	r18,8(sp)
    9af4:	dc400117 	ldw	r17,4(sp)
    9af8:	dc000017 	ldw	r16,0(sp)
    9afc:	dec00504 	addi	sp,sp,20
    9b00:	f800283a 	ret
    9b04:	90800f17 	ldw	r2,60(r18)
    9b08:	00bfbe16 	blt	zero,r2,9a04 <_fflush_r+0x58>
    9b0c:	0007883a 	mov	r3,zero
    9b10:	1805883a 	mov	r2,r3
    9b14:	dfc00417 	ldw	ra,16(sp)
    9b18:	dcc00317 	ldw	r19,12(sp)
    9b1c:	dc800217 	ldw	r18,8(sp)
    9b20:	dc400117 	ldw	r17,4(sp)
    9b24:	dc000017 	ldw	r16,0(sp)
    9b28:	dec00504 	addi	sp,sp,20
    9b2c:	f800283a 	ret
    9b30:	0009c440 	call	9c44 <__sinit>
    9b34:	003fa806 	br	99d8 <_fflush_r+0x2c>
    9b38:	90800517 	ldw	r2,20(r18)
    9b3c:	90800215 	stw	r2,8(r18)
    9b40:	003fda06 	br	9aac <_fflush_r+0x100>
    9b44:	90800117 	ldw	r2,4(r18)
    9b48:	90c00c17 	ldw	r3,48(r18)
    9b4c:	80a1c83a 	sub	r16,r16,r2
    9b50:	183fb426 	beq	r3,zero,9a24 <_fflush_r+0x78>
    9b54:	90800f17 	ldw	r2,60(r18)
    9b58:	80a1c83a 	sub	r16,r16,r2
    9b5c:	003fb106 	br	9a24 <_fflush_r+0x78>
    9b60:	91400717 	ldw	r5,28(r18)
    9b64:	9809883a 	mov	r4,r19
    9b68:	000d883a 	mov	r6,zero
    9b6c:	01c00044 	movi	r7,1
    9b70:	403ee83a 	callr	r8
    9b74:	1021883a 	mov	r16,r2
    9b78:	00bfffc4 	movi	r2,-1
    9b7c:	80800226 	beq	r16,r2,9b88 <_fflush_r+0x1dc>
    9b80:	92000a17 	ldw	r8,40(r18)
    9b84:	003fa406 	br	9a18 <_fflush_r+0x6c>
    9b88:	98c00017 	ldw	r3,0(r19)
    9b8c:	00800744 	movi	r2,29
    9b90:	18bfde26 	beq	r3,r2,9b0c <_fflush_r+0x160>
    9b94:	9080030b 	ldhu	r2,12(r18)
    9b98:	8007883a 	mov	r3,r16
    9b9c:	10801014 	ori	r2,r2,64
    9ba0:	9080030d 	sth	r2,12(r18)
    9ba4:	003fcf06 	br	9ae4 <_fflush_r+0x138>

00009ba8 <fflush>:
    9ba8:	01400074 	movhi	r5,1
    9bac:	29666b04 	addi	r5,r5,-26196
    9bb0:	2007883a 	mov	r3,r4
    9bb4:	20000526 	beq	r4,zero,9bcc <fflush+0x24>
    9bb8:	00800074 	movhi	r2,1
    9bbc:	10b85904 	addi	r2,r2,-7836
    9bc0:	11000017 	ldw	r4,0(r2)
    9bc4:	180b883a 	mov	r5,r3
    9bc8:	00099ac1 	jmpi	99ac <_fflush_r>
    9bcc:	00800074 	movhi	r2,1
    9bd0:	10b85a04 	addi	r2,r2,-7832
    9bd4:	11000017 	ldw	r4,0(r2)
    9bd8:	000a2dc1 	jmpi	a2dc <_fwalk_reent>

00009bdc <std>:
    9bdc:	00800074 	movhi	r2,1
    9be0:	10ab6804 	addi	r2,r2,-21088
    9be4:	20800b15 	stw	r2,44(r4)
    9be8:	00800074 	movhi	r2,1
    9bec:	10aba304 	addi	r2,r2,-20852
    9bf0:	20800815 	stw	r2,32(r4)
    9bf4:	00c00074 	movhi	r3,1
    9bf8:	18eb8404 	addi	r3,r3,-20976
    9bfc:	00800074 	movhi	r2,1
    9c00:	10ab6a04 	addi	r2,r2,-21080
    9c04:	2140030d 	sth	r5,12(r4)
    9c08:	2180038d 	sth	r6,14(r4)
    9c0c:	20c00915 	stw	r3,36(r4)
    9c10:	20800a15 	stw	r2,40(r4)
    9c14:	20000015 	stw	zero,0(r4)
    9c18:	20000115 	stw	zero,4(r4)
    9c1c:	20000215 	stw	zero,8(r4)
    9c20:	20000415 	stw	zero,16(r4)
    9c24:	20000515 	stw	zero,20(r4)
    9c28:	20000615 	stw	zero,24(r4)
    9c2c:	21000715 	stw	r4,28(r4)
    9c30:	f800283a 	ret

00009c34 <__sfp_lock_acquire>:
    9c34:	f800283a 	ret

00009c38 <__sfp_lock_release>:
    9c38:	f800283a 	ret

00009c3c <__sinit_lock_acquire>:
    9c3c:	f800283a 	ret

00009c40 <__sinit_lock_release>:
    9c40:	f800283a 	ret

00009c44 <__sinit>:
    9c44:	20800e17 	ldw	r2,56(r4)
    9c48:	defffd04 	addi	sp,sp,-12
    9c4c:	dc400115 	stw	r17,4(sp)
    9c50:	dc000015 	stw	r16,0(sp)
    9c54:	dfc00215 	stw	ra,8(sp)
    9c58:	04400044 	movi	r17,1
    9c5c:	01400104 	movi	r5,4
    9c60:	000d883a 	mov	r6,zero
    9c64:	2021883a 	mov	r16,r4
    9c68:	2200bb04 	addi	r8,r4,748
    9c6c:	200f883a 	mov	r7,r4
    9c70:	10000526 	beq	r2,zero,9c88 <__sinit+0x44>
    9c74:	dfc00217 	ldw	ra,8(sp)
    9c78:	dc400117 	ldw	r17,4(sp)
    9c7c:	dc000017 	ldw	r16,0(sp)
    9c80:	dec00304 	addi	sp,sp,12
    9c84:	f800283a 	ret
    9c88:	21000117 	ldw	r4,4(r4)
    9c8c:	00800074 	movhi	r2,1
    9c90:	10a74a04 	addi	r2,r2,-25304
    9c94:	00c000c4 	movi	r3,3
    9c98:	80800f15 	stw	r2,60(r16)
    9c9c:	80c0b915 	stw	r3,740(r16)
    9ca0:	8200ba15 	stw	r8,744(r16)
    9ca4:	84400e15 	stw	r17,56(r16)
    9ca8:	8000b815 	stw	zero,736(r16)
    9cac:	0009bdc0 	call	9bdc <std>
    9cb0:	81000217 	ldw	r4,8(r16)
    9cb4:	880d883a 	mov	r6,r17
    9cb8:	800f883a 	mov	r7,r16
    9cbc:	01400284 	movi	r5,10
    9cc0:	0009bdc0 	call	9bdc <std>
    9cc4:	81000317 	ldw	r4,12(r16)
    9cc8:	800f883a 	mov	r7,r16
    9ccc:	01400484 	movi	r5,18
    9cd0:	01800084 	movi	r6,2
    9cd4:	dfc00217 	ldw	ra,8(sp)
    9cd8:	dc400117 	ldw	r17,4(sp)
    9cdc:	dc000017 	ldw	r16,0(sp)
    9ce0:	dec00304 	addi	sp,sp,12
    9ce4:	0009bdc1 	jmpi	9bdc <std>

00009ce8 <__fp_lock>:
    9ce8:	0005883a 	mov	r2,zero
    9cec:	f800283a 	ret

00009cf0 <__fp_unlock>:
    9cf0:	0005883a 	mov	r2,zero
    9cf4:	f800283a 	ret

00009cf8 <__fp_unlock_all>:
    9cf8:	00800074 	movhi	r2,1
    9cfc:	10b85904 	addi	r2,r2,-7836
    9d00:	11000017 	ldw	r4,0(r2)
    9d04:	01400074 	movhi	r5,1
    9d08:	29673c04 	addi	r5,r5,-25360
    9d0c:	000a3a41 	jmpi	a3a4 <_fwalk>

00009d10 <__fp_lock_all>:
    9d10:	00800074 	movhi	r2,1
    9d14:	10b85904 	addi	r2,r2,-7836
    9d18:	11000017 	ldw	r4,0(r2)
    9d1c:	01400074 	movhi	r5,1
    9d20:	29673a04 	addi	r5,r5,-25368
    9d24:	000a3a41 	jmpi	a3a4 <_fwalk>

00009d28 <_cleanup_r>:
    9d28:	01400074 	movhi	r5,1
    9d2c:	296c3904 	addi	r5,r5,-20252
    9d30:	000a3a41 	jmpi	a3a4 <_fwalk>

00009d34 <_cleanup>:
    9d34:	00800074 	movhi	r2,1
    9d38:	10b85a04 	addi	r2,r2,-7832
    9d3c:	11000017 	ldw	r4,0(r2)
    9d40:	0009d281 	jmpi	9d28 <_cleanup_r>

00009d44 <__sfmoreglue>:
    9d44:	defffc04 	addi	sp,sp,-16
    9d48:	dc400115 	stw	r17,4(sp)
    9d4c:	2c401724 	muli	r17,r5,92
    9d50:	dc800215 	stw	r18,8(sp)
    9d54:	2825883a 	mov	r18,r5
    9d58:	89400304 	addi	r5,r17,12
    9d5c:	dc000015 	stw	r16,0(sp)
    9d60:	dfc00315 	stw	ra,12(sp)
    9d64:	000a5f00 	call	a5f0 <_malloc_r>
    9d68:	0021883a 	mov	r16,zero
    9d6c:	880d883a 	mov	r6,r17
    9d70:	000b883a 	mov	r5,zero
    9d74:	10000626 	beq	r2,zero,9d90 <__sfmoreglue+0x4c>
    9d78:	11000304 	addi	r4,r2,12
    9d7c:	14800115 	stw	r18,4(r2)
    9d80:	10000015 	stw	zero,0(r2)
    9d84:	11000215 	stw	r4,8(r2)
    9d88:	1021883a 	mov	r16,r2
    9d8c:	00032e80 	call	32e8 <memset>
    9d90:	8005883a 	mov	r2,r16
    9d94:	dfc00317 	ldw	ra,12(sp)
    9d98:	dc800217 	ldw	r18,8(sp)
    9d9c:	dc400117 	ldw	r17,4(sp)
    9da0:	dc000017 	ldw	r16,0(sp)
    9da4:	dec00404 	addi	sp,sp,16
    9da8:	f800283a 	ret

00009dac <__sfp>:
    9dac:	defffd04 	addi	sp,sp,-12
    9db0:	00800074 	movhi	r2,1
    9db4:	10b85a04 	addi	r2,r2,-7832
    9db8:	dc000015 	stw	r16,0(sp)
    9dbc:	14000017 	ldw	r16,0(r2)
    9dc0:	dc400115 	stw	r17,4(sp)
    9dc4:	dfc00215 	stw	ra,8(sp)
    9dc8:	80800e17 	ldw	r2,56(r16)
    9dcc:	2023883a 	mov	r17,r4
    9dd0:	10002626 	beq	r2,zero,9e6c <__sfp+0xc0>
    9dd4:	8400b804 	addi	r16,r16,736
    9dd8:	80800117 	ldw	r2,4(r16)
    9ddc:	81000217 	ldw	r4,8(r16)
    9de0:	10ffffc4 	addi	r3,r2,-1
    9de4:	18000916 	blt	r3,zero,9e0c <__sfp+0x60>
    9de8:	2080030f 	ldh	r2,12(r4)
    9dec:	10000b26 	beq	r2,zero,9e1c <__sfp+0x70>
    9df0:	017fffc4 	movi	r5,-1
    9df4:	00000206 	br	9e00 <__sfp+0x54>
    9df8:	2080030f 	ldh	r2,12(r4)
    9dfc:	10000726 	beq	r2,zero,9e1c <__sfp+0x70>
    9e00:	18ffffc4 	addi	r3,r3,-1
    9e04:	21001704 	addi	r4,r4,92
    9e08:	197ffb1e 	bne	r3,r5,9df8 <__sfp+0x4c>
    9e0c:	80800017 	ldw	r2,0(r16)
    9e10:	10001926 	beq	r2,zero,9e78 <__sfp+0xcc>
    9e14:	1021883a 	mov	r16,r2
    9e18:	003fef06 	br	9dd8 <__sfp+0x2c>
    9e1c:	00bfffc4 	movi	r2,-1
    9e20:	00c00044 	movi	r3,1
    9e24:	2080038d 	sth	r2,14(r4)
    9e28:	20c0030d 	sth	r3,12(r4)
    9e2c:	20000015 	stw	zero,0(r4)
    9e30:	20000215 	stw	zero,8(r4)
    9e34:	20000115 	stw	zero,4(r4)
    9e38:	20000415 	stw	zero,16(r4)
    9e3c:	20000515 	stw	zero,20(r4)
    9e40:	20000615 	stw	zero,24(r4)
    9e44:	20000c15 	stw	zero,48(r4)
    9e48:	20000d15 	stw	zero,52(r4)
    9e4c:	20001115 	stw	zero,68(r4)
    9e50:	20001215 	stw	zero,72(r4)
    9e54:	2005883a 	mov	r2,r4
    9e58:	dfc00217 	ldw	ra,8(sp)
    9e5c:	dc400117 	ldw	r17,4(sp)
    9e60:	dc000017 	ldw	r16,0(sp)
    9e64:	dec00304 	addi	sp,sp,12
    9e68:	f800283a 	ret
    9e6c:	8009883a 	mov	r4,r16
    9e70:	0009c440 	call	9c44 <__sinit>
    9e74:	003fd706 	br	9dd4 <__sfp+0x28>
    9e78:	8809883a 	mov	r4,r17
    9e7c:	01400104 	movi	r5,4
    9e80:	0009d440 	call	9d44 <__sfmoreglue>
    9e84:	80800015 	stw	r2,0(r16)
    9e88:	103fe21e 	bne	r2,zero,9e14 <__sfp+0x68>
    9e8c:	00800304 	movi	r2,12
    9e90:	0009883a 	mov	r4,zero
    9e94:	88800015 	stw	r2,0(r17)
    9e98:	003fee06 	br	9e54 <__sfp+0xa8>

00009e9c <_malloc_trim_r>:
    9e9c:	defffb04 	addi	sp,sp,-20
    9ea0:	dcc00315 	stw	r19,12(sp)
    9ea4:	04c00074 	movhi	r19,1
    9ea8:	9cf74e04 	addi	r19,r19,-8904
    9eac:	dc800215 	stw	r18,8(sp)
    9eb0:	dc400115 	stw	r17,4(sp)
    9eb4:	dc000015 	stw	r16,0(sp)
    9eb8:	2823883a 	mov	r17,r5
    9ebc:	2025883a 	mov	r18,r4
    9ec0:	dfc00415 	stw	ra,16(sp)
    9ec4:	000b6d00 	call	b6d0 <__malloc_lock>
    9ec8:	98800217 	ldw	r2,8(r19)
    9ecc:	9009883a 	mov	r4,r18
    9ed0:	000b883a 	mov	r5,zero
    9ed4:	10c00117 	ldw	r3,4(r2)
    9ed8:	00bfff04 	movi	r2,-4
    9edc:	18a0703a 	and	r16,r3,r2
    9ee0:	8463c83a 	sub	r17,r16,r17
    9ee4:	8c43fbc4 	addi	r17,r17,4079
    9ee8:	8822d33a 	srli	r17,r17,12
    9eec:	0083ffc4 	movi	r2,4095
    9ef0:	8c7fffc4 	addi	r17,r17,-1
    9ef4:	8822933a 	slli	r17,r17,12
    9ef8:	1440060e 	bge	r2,r17,9f14 <_malloc_trim_r+0x78>
    9efc:	000ad300 	call	ad30 <_sbrk_r>
    9f00:	98c00217 	ldw	r3,8(r19)
    9f04:	9009883a 	mov	r4,r18
    9f08:	044bc83a 	sub	r5,zero,r17
    9f0c:	80c7883a 	add	r3,r16,r3
    9f10:	10c00926 	beq	r2,r3,9f38 <_malloc_trim_r+0x9c>
    9f14:	000b6f00 	call	b6f0 <__malloc_unlock>
    9f18:	0005883a 	mov	r2,zero
    9f1c:	dfc00417 	ldw	ra,16(sp)
    9f20:	dcc00317 	ldw	r19,12(sp)
    9f24:	dc800217 	ldw	r18,8(sp)
    9f28:	dc400117 	ldw	r17,4(sp)
    9f2c:	dc000017 	ldw	r16,0(sp)
    9f30:	dec00504 	addi	sp,sp,20
    9f34:	f800283a 	ret
    9f38:	9009883a 	mov	r4,r18
    9f3c:	000ad300 	call	ad30 <_sbrk_r>
    9f40:	844dc83a 	sub	r6,r16,r17
    9f44:	00ffffc4 	movi	r3,-1
    9f48:	9009883a 	mov	r4,r18
    9f4c:	000b883a 	mov	r5,zero
    9f50:	01c00074 	movhi	r7,1
    9f54:	39c0a804 	addi	r7,r7,672
    9f58:	31800054 	ori	r6,r6,1
    9f5c:	10c00926 	beq	r2,r3,9f84 <_malloc_trim_r+0xe8>
    9f60:	38800017 	ldw	r2,0(r7)
    9f64:	98c00217 	ldw	r3,8(r19)
    9f68:	9009883a 	mov	r4,r18
    9f6c:	1445c83a 	sub	r2,r2,r17
    9f70:	38800015 	stw	r2,0(r7)
    9f74:	19800115 	stw	r6,4(r3)
    9f78:	000b6f00 	call	b6f0 <__malloc_unlock>
    9f7c:	00800044 	movi	r2,1
    9f80:	003fe606 	br	9f1c <_malloc_trim_r+0x80>
    9f84:	000ad300 	call	ad30 <_sbrk_r>
    9f88:	99800217 	ldw	r6,8(r19)
    9f8c:	100f883a 	mov	r7,r2
    9f90:	9009883a 	mov	r4,r18
    9f94:	1187c83a 	sub	r3,r2,r6
    9f98:	008003c4 	movi	r2,15
    9f9c:	19400054 	ori	r5,r3,1
    9fa0:	10ffdc0e 	bge	r2,r3,9f14 <_malloc_trim_r+0x78>
    9fa4:	00800074 	movhi	r2,1
    9fa8:	10b85c04 	addi	r2,r2,-7824
    9fac:	10c00017 	ldw	r3,0(r2)
    9fb0:	00800074 	movhi	r2,1
    9fb4:	1080a804 	addi	r2,r2,672
    9fb8:	31400115 	stw	r5,4(r6)
    9fbc:	38c7c83a 	sub	r3,r7,r3
    9fc0:	10c00015 	stw	r3,0(r2)
    9fc4:	003fd306 	br	9f14 <_malloc_trim_r+0x78>

00009fc8 <_free_r>:
    9fc8:	defffd04 	addi	sp,sp,-12
    9fcc:	dc400115 	stw	r17,4(sp)
    9fd0:	dc000015 	stw	r16,0(sp)
    9fd4:	dfc00215 	stw	ra,8(sp)
    9fd8:	2821883a 	mov	r16,r5
    9fdc:	2023883a 	mov	r17,r4
    9fe0:	28005a26 	beq	r5,zero,a14c <_free_r+0x184>
    9fe4:	000b6d00 	call	b6d0 <__malloc_lock>
    9fe8:	823ffe04 	addi	r8,r16,-8
    9fec:	41400117 	ldw	r5,4(r8)
    9ff0:	00bfff84 	movi	r2,-2
    9ff4:	02800074 	movhi	r10,1
    9ff8:	52b74e04 	addi	r10,r10,-8904
    9ffc:	288e703a 	and	r7,r5,r2
    a000:	41cd883a 	add	r6,r8,r7
    a004:	30c00117 	ldw	r3,4(r6)
    a008:	51000217 	ldw	r4,8(r10)
    a00c:	00bfff04 	movi	r2,-4
    a010:	1892703a 	and	r9,r3,r2
    a014:	5017883a 	mov	r11,r10
    a018:	31006726 	beq	r6,r4,a1b8 <_free_r+0x1f0>
    a01c:	2880004c 	andi	r2,r5,1
    a020:	1005003a 	cmpeq	r2,r2,zero
    a024:	32400115 	stw	r9,4(r6)
    a028:	10001a1e 	bne	r2,zero,a094 <_free_r+0xcc>
    a02c:	000b883a 	mov	r5,zero
    a030:	3247883a 	add	r3,r6,r9
    a034:	18800117 	ldw	r2,4(r3)
    a038:	1080004c 	andi	r2,r2,1
    a03c:	1000231e 	bne	r2,zero,a0cc <_free_r+0x104>
    a040:	280ac03a 	cmpne	r5,r5,zero
    a044:	3a4f883a 	add	r7,r7,r9
    a048:	2800451e 	bne	r5,zero,a160 <_free_r+0x198>
    a04c:	31000217 	ldw	r4,8(r6)
    a050:	00800074 	movhi	r2,1
    a054:	10b75004 	addi	r2,r2,-8896
    a058:	20807b26 	beq	r4,r2,a248 <_free_r+0x280>
    a05c:	30800317 	ldw	r2,12(r6)
    a060:	3a07883a 	add	r3,r7,r8
    a064:	19c00015 	stw	r7,0(r3)
    a068:	11000215 	stw	r4,8(r2)
    a06c:	20800315 	stw	r2,12(r4)
    a070:	38800054 	ori	r2,r7,1
    a074:	40800115 	stw	r2,4(r8)
    a078:	28001a26 	beq	r5,zero,a0e4 <_free_r+0x11c>
    a07c:	8809883a 	mov	r4,r17
    a080:	dfc00217 	ldw	ra,8(sp)
    a084:	dc400117 	ldw	r17,4(sp)
    a088:	dc000017 	ldw	r16,0(sp)
    a08c:	dec00304 	addi	sp,sp,12
    a090:	000b6f01 	jmpi	b6f0 <__malloc_unlock>
    a094:	80bffe17 	ldw	r2,-8(r16)
    a098:	50c00204 	addi	r3,r10,8
    a09c:	4091c83a 	sub	r8,r8,r2
    a0a0:	41000217 	ldw	r4,8(r8)
    a0a4:	388f883a 	add	r7,r7,r2
    a0a8:	20c06126 	beq	r4,r3,a230 <_free_r+0x268>
    a0ac:	40800317 	ldw	r2,12(r8)
    a0b0:	3247883a 	add	r3,r6,r9
    a0b4:	000b883a 	mov	r5,zero
    a0b8:	11000215 	stw	r4,8(r2)
    a0bc:	20800315 	stw	r2,12(r4)
    a0c0:	18800117 	ldw	r2,4(r3)
    a0c4:	1080004c 	andi	r2,r2,1
    a0c8:	103fdd26 	beq	r2,zero,a040 <_free_r+0x78>
    a0cc:	38800054 	ori	r2,r7,1
    a0d0:	3a07883a 	add	r3,r7,r8
    a0d4:	280ac03a 	cmpne	r5,r5,zero
    a0d8:	40800115 	stw	r2,4(r8)
    a0dc:	19c00015 	stw	r7,0(r3)
    a0e0:	283fe61e 	bne	r5,zero,a07c <_free_r+0xb4>
    a0e4:	00807fc4 	movi	r2,511
    a0e8:	11c01f2e 	bgeu	r2,r7,a168 <_free_r+0x1a0>
    a0ec:	3806d27a 	srli	r3,r7,9
    a0f0:	1800481e 	bne	r3,zero,a214 <_free_r+0x24c>
    a0f4:	3804d0fa 	srli	r2,r7,3
    a0f8:	100690fa 	slli	r3,r2,3
    a0fc:	1acd883a 	add	r6,r3,r11
    a100:	31400217 	ldw	r5,8(r6)
    a104:	31405926 	beq	r6,r5,a26c <_free_r+0x2a4>
    a108:	28800117 	ldw	r2,4(r5)
    a10c:	00ffff04 	movi	r3,-4
    a110:	10c4703a 	and	r2,r2,r3
    a114:	3880022e 	bgeu	r7,r2,a120 <_free_r+0x158>
    a118:	29400217 	ldw	r5,8(r5)
    a11c:	317ffa1e 	bne	r6,r5,a108 <_free_r+0x140>
    a120:	29800317 	ldw	r6,12(r5)
    a124:	41800315 	stw	r6,12(r8)
    a128:	41400215 	stw	r5,8(r8)
    a12c:	8809883a 	mov	r4,r17
    a130:	2a000315 	stw	r8,12(r5)
    a134:	32000215 	stw	r8,8(r6)
    a138:	dfc00217 	ldw	ra,8(sp)
    a13c:	dc400117 	ldw	r17,4(sp)
    a140:	dc000017 	ldw	r16,0(sp)
    a144:	dec00304 	addi	sp,sp,12
    a148:	000b6f01 	jmpi	b6f0 <__malloc_unlock>
    a14c:	dfc00217 	ldw	ra,8(sp)
    a150:	dc400117 	ldw	r17,4(sp)
    a154:	dc000017 	ldw	r16,0(sp)
    a158:	dec00304 	addi	sp,sp,12
    a15c:	f800283a 	ret
    a160:	31000217 	ldw	r4,8(r6)
    a164:	003fbd06 	br	a05c <_free_r+0x94>
    a168:	3806d0fa 	srli	r3,r7,3
    a16c:	00800044 	movi	r2,1
    a170:	51400117 	ldw	r5,4(r10)
    a174:	180890fa 	slli	r4,r3,3
    a178:	1807d0ba 	srai	r3,r3,2
    a17c:	22c9883a 	add	r4,r4,r11
    a180:	21800217 	ldw	r6,8(r4)
    a184:	10c4983a 	sll	r2,r2,r3
    a188:	41000315 	stw	r4,12(r8)
    a18c:	41800215 	stw	r6,8(r8)
    a190:	288ab03a 	or	r5,r5,r2
    a194:	22000215 	stw	r8,8(r4)
    a198:	8809883a 	mov	r4,r17
    a19c:	51400115 	stw	r5,4(r10)
    a1a0:	32000315 	stw	r8,12(r6)
    a1a4:	dfc00217 	ldw	ra,8(sp)
    a1a8:	dc400117 	ldw	r17,4(sp)
    a1ac:	dc000017 	ldw	r16,0(sp)
    a1b0:	dec00304 	addi	sp,sp,12
    a1b4:	000b6f01 	jmpi	b6f0 <__malloc_unlock>
    a1b8:	2880004c 	andi	r2,r5,1
    a1bc:	3a4d883a 	add	r6,r7,r9
    a1c0:	1000071e 	bne	r2,zero,a1e0 <_free_r+0x218>
    a1c4:	80bffe17 	ldw	r2,-8(r16)
    a1c8:	4091c83a 	sub	r8,r8,r2
    a1cc:	41000317 	ldw	r4,12(r8)
    a1d0:	40c00217 	ldw	r3,8(r8)
    a1d4:	308d883a 	add	r6,r6,r2
    a1d8:	20c00215 	stw	r3,8(r4)
    a1dc:	19000315 	stw	r4,12(r3)
    a1e0:	00800074 	movhi	r2,1
    a1e4:	10b85b04 	addi	r2,r2,-7828
    a1e8:	11000017 	ldw	r4,0(r2)
    a1ec:	30c00054 	ori	r3,r6,1
    a1f0:	52000215 	stw	r8,8(r10)
    a1f4:	40c00115 	stw	r3,4(r8)
    a1f8:	313fa036 	bltu	r6,r4,a07c <_free_r+0xb4>
    a1fc:	00800074 	movhi	r2,1
    a200:	1080a504 	addi	r2,r2,660
    a204:	11400017 	ldw	r5,0(r2)
    a208:	8809883a 	mov	r4,r17
    a20c:	0009e9c0 	call	9e9c <_malloc_trim_r>
    a210:	003f9a06 	br	a07c <_free_r+0xb4>
    a214:	00800104 	movi	r2,4
    a218:	10c0072e 	bgeu	r2,r3,a238 <_free_r+0x270>
    a21c:	00800504 	movi	r2,20
    a220:	10c01936 	bltu	r2,r3,a288 <_free_r+0x2c0>
    a224:	188016c4 	addi	r2,r3,91
    a228:	100690fa 	slli	r3,r2,3
    a22c:	003fb306 	br	a0fc <_free_r+0x134>
    a230:	01400044 	movi	r5,1
    a234:	003f7e06 	br	a030 <_free_r+0x68>
    a238:	3804d1ba 	srli	r2,r7,6
    a23c:	10800e04 	addi	r2,r2,56
    a240:	100690fa 	slli	r3,r2,3
    a244:	003fad06 	br	a0fc <_free_r+0x134>
    a248:	22000315 	stw	r8,12(r4)
    a24c:	22000215 	stw	r8,8(r4)
    a250:	3a05883a 	add	r2,r7,r8
    a254:	38c00054 	ori	r3,r7,1
    a258:	11c00015 	stw	r7,0(r2)
    a25c:	41000215 	stw	r4,8(r8)
    a260:	40c00115 	stw	r3,4(r8)
    a264:	41000315 	stw	r4,12(r8)
    a268:	003f8406 	br	a07c <_free_r+0xb4>
    a26c:	1005d0ba 	srai	r2,r2,2
    a270:	00c00044 	movi	r3,1
    a274:	51000117 	ldw	r4,4(r10)
    a278:	1886983a 	sll	r3,r3,r2
    a27c:	20c8b03a 	or	r4,r4,r3
    a280:	51000115 	stw	r4,4(r10)
    a284:	003fa706 	br	a124 <_free_r+0x15c>
    a288:	00801504 	movi	r2,84
    a28c:	10c00436 	bltu	r2,r3,a2a0 <_free_r+0x2d8>
    a290:	3804d33a 	srli	r2,r7,12
    a294:	10801b84 	addi	r2,r2,110
    a298:	100690fa 	slli	r3,r2,3
    a29c:	003f9706 	br	a0fc <_free_r+0x134>
    a2a0:	00805504 	movi	r2,340
    a2a4:	10c00436 	bltu	r2,r3,a2b8 <_free_r+0x2f0>
    a2a8:	3804d3fa 	srli	r2,r7,15
    a2ac:	10801dc4 	addi	r2,r2,119
    a2b0:	100690fa 	slli	r3,r2,3
    a2b4:	003f9106 	br	a0fc <_free_r+0x134>
    a2b8:	00815504 	movi	r2,1364
    a2bc:	10c0032e 	bgeu	r2,r3,a2cc <_free_r+0x304>
    a2c0:	00801f84 	movi	r2,126
    a2c4:	00c0fc04 	movi	r3,1008
    a2c8:	003f8c06 	br	a0fc <_free_r+0x134>
    a2cc:	3804d4ba 	srli	r2,r7,18
    a2d0:	10801f04 	addi	r2,r2,124
    a2d4:	100690fa 	slli	r3,r2,3
    a2d8:	003f8806 	br	a0fc <_free_r+0x134>

0000a2dc <_fwalk_reent>:
    a2dc:	defff704 	addi	sp,sp,-36
    a2e0:	dcc00315 	stw	r19,12(sp)
    a2e4:	24c0b804 	addi	r19,r4,736
    a2e8:	dd800615 	stw	r22,24(sp)
    a2ec:	dd400515 	stw	r21,20(sp)
    a2f0:	dfc00815 	stw	ra,32(sp)
    a2f4:	ddc00715 	stw	r23,28(sp)
    a2f8:	dd000415 	stw	r20,16(sp)
    a2fc:	dc800215 	stw	r18,8(sp)
    a300:	dc400115 	stw	r17,4(sp)
    a304:	dc000015 	stw	r16,0(sp)
    a308:	202b883a 	mov	r21,r4
    a30c:	282d883a 	mov	r22,r5
    a310:	0009c340 	call	9c34 <__sfp_lock_acquire>
    a314:	98002126 	beq	r19,zero,a39c <_fwalk_reent+0xc0>
    a318:	002f883a 	mov	r23,zero
    a31c:	9c800117 	ldw	r18,4(r19)
    a320:	9c000217 	ldw	r16,8(r19)
    a324:	90bfffc4 	addi	r2,r18,-1
    a328:	10000d16 	blt	r2,zero,a360 <_fwalk_reent+0x84>
    a32c:	0023883a 	mov	r17,zero
    a330:	053fffc4 	movi	r20,-1
    a334:	8080030f 	ldh	r2,12(r16)
    a338:	8c400044 	addi	r17,r17,1
    a33c:	10000626 	beq	r2,zero,a358 <_fwalk_reent+0x7c>
    a340:	8080038f 	ldh	r2,14(r16)
    a344:	800b883a 	mov	r5,r16
    a348:	a809883a 	mov	r4,r21
    a34c:	15000226 	beq	r2,r20,a358 <_fwalk_reent+0x7c>
    a350:	b03ee83a 	callr	r22
    a354:	b8aeb03a 	or	r23,r23,r2
    a358:	84001704 	addi	r16,r16,92
    a35c:	947ff51e 	bne	r18,r17,a334 <_fwalk_reent+0x58>
    a360:	9cc00017 	ldw	r19,0(r19)
    a364:	983fed1e 	bne	r19,zero,a31c <_fwalk_reent+0x40>
    a368:	0009c380 	call	9c38 <__sfp_lock_release>
    a36c:	b805883a 	mov	r2,r23
    a370:	dfc00817 	ldw	ra,32(sp)
    a374:	ddc00717 	ldw	r23,28(sp)
    a378:	dd800617 	ldw	r22,24(sp)
    a37c:	dd400517 	ldw	r21,20(sp)
    a380:	dd000417 	ldw	r20,16(sp)
    a384:	dcc00317 	ldw	r19,12(sp)
    a388:	dc800217 	ldw	r18,8(sp)
    a38c:	dc400117 	ldw	r17,4(sp)
    a390:	dc000017 	ldw	r16,0(sp)
    a394:	dec00904 	addi	sp,sp,36
    a398:	f800283a 	ret
    a39c:	002f883a 	mov	r23,zero
    a3a0:	003ff106 	br	a368 <_fwalk_reent+0x8c>

0000a3a4 <_fwalk>:
    a3a4:	defff804 	addi	sp,sp,-32
    a3a8:	dcc00315 	stw	r19,12(sp)
    a3ac:	24c0b804 	addi	r19,r4,736
    a3b0:	dd400515 	stw	r21,20(sp)
    a3b4:	dfc00715 	stw	ra,28(sp)
    a3b8:	dd800615 	stw	r22,24(sp)
    a3bc:	dd000415 	stw	r20,16(sp)
    a3c0:	dc800215 	stw	r18,8(sp)
    a3c4:	dc400115 	stw	r17,4(sp)
    a3c8:	dc000015 	stw	r16,0(sp)
    a3cc:	282b883a 	mov	r21,r5
    a3d0:	0009c340 	call	9c34 <__sfp_lock_acquire>
    a3d4:	98001f26 	beq	r19,zero,a454 <_fwalk+0xb0>
    a3d8:	002d883a 	mov	r22,zero
    a3dc:	9c800117 	ldw	r18,4(r19)
    a3e0:	9c000217 	ldw	r16,8(r19)
    a3e4:	90bfffc4 	addi	r2,r18,-1
    a3e8:	10000c16 	blt	r2,zero,a41c <_fwalk+0x78>
    a3ec:	0023883a 	mov	r17,zero
    a3f0:	053fffc4 	movi	r20,-1
    a3f4:	8080030f 	ldh	r2,12(r16)
    a3f8:	8c400044 	addi	r17,r17,1
    a3fc:	10000526 	beq	r2,zero,a414 <_fwalk+0x70>
    a400:	8080038f 	ldh	r2,14(r16)
    a404:	8009883a 	mov	r4,r16
    a408:	15000226 	beq	r2,r20,a414 <_fwalk+0x70>
    a40c:	a83ee83a 	callr	r21
    a410:	b0acb03a 	or	r22,r22,r2
    a414:	84001704 	addi	r16,r16,92
    a418:	947ff61e 	bne	r18,r17,a3f4 <_fwalk+0x50>
    a41c:	9cc00017 	ldw	r19,0(r19)
    a420:	983fee1e 	bne	r19,zero,a3dc <_fwalk+0x38>
    a424:	0009c380 	call	9c38 <__sfp_lock_release>
    a428:	b005883a 	mov	r2,r22
    a42c:	dfc00717 	ldw	ra,28(sp)
    a430:	dd800617 	ldw	r22,24(sp)
    a434:	dd400517 	ldw	r21,20(sp)
    a438:	dd000417 	ldw	r20,16(sp)
    a43c:	dcc00317 	ldw	r19,12(sp)
    a440:	dc800217 	ldw	r18,8(sp)
    a444:	dc400117 	ldw	r17,4(sp)
    a448:	dc000017 	ldw	r16,0(sp)
    a44c:	dec00804 	addi	sp,sp,32
    a450:	f800283a 	ret
    a454:	002d883a 	mov	r22,zero
    a458:	003ff206 	br	a424 <_fwalk+0x80>

0000a45c <__smakebuf_r>:
    a45c:	2880030b 	ldhu	r2,12(r5)
    a460:	deffed04 	addi	sp,sp,-76
    a464:	dc401015 	stw	r17,64(sp)
    a468:	1080008c 	andi	r2,r2,2
    a46c:	dc000f15 	stw	r16,60(sp)
    a470:	dfc01215 	stw	ra,72(sp)
    a474:	dc801115 	stw	r18,68(sp)
    a478:	2821883a 	mov	r16,r5
    a47c:	2023883a 	mov	r17,r4
    a480:	10000b26 	beq	r2,zero,a4b0 <__smakebuf_r+0x54>
    a484:	28c010c4 	addi	r3,r5,67
    a488:	00800044 	movi	r2,1
    a48c:	28800515 	stw	r2,20(r5)
    a490:	28c00415 	stw	r3,16(r5)
    a494:	28c00015 	stw	r3,0(r5)
    a498:	dfc01217 	ldw	ra,72(sp)
    a49c:	dc801117 	ldw	r18,68(sp)
    a4a0:	dc401017 	ldw	r17,64(sp)
    a4a4:	dc000f17 	ldw	r16,60(sp)
    a4a8:	dec01304 	addi	sp,sp,76
    a4ac:	f800283a 	ret
    a4b0:	2940038f 	ldh	r5,14(r5)
    a4b4:	28002116 	blt	r5,zero,a53c <__smakebuf_r+0xe0>
    a4b8:	d80d883a 	mov	r6,sp
    a4bc:	000b0f80 	call	b0f8 <_fstat_r>
    a4c0:	10001e16 	blt	r2,zero,a53c <__smakebuf_r+0xe0>
    a4c4:	d8800117 	ldw	r2,4(sp)
    a4c8:	00e00014 	movui	r3,32768
    a4cc:	113c000c 	andi	r4,r2,61440
    a4d0:	20c03126 	beq	r4,r3,a598 <__smakebuf_r+0x13c>
    a4d4:	8080030b 	ldhu	r2,12(r16)
    a4d8:	00c80004 	movi	r3,8192
    a4dc:	10820014 	ori	r2,r2,2048
    a4e0:	8080030d 	sth	r2,12(r16)
    a4e4:	20c01e26 	beq	r4,r3,a560 <__smakebuf_r+0x104>
    a4e8:	04810004 	movi	r18,1024
    a4ec:	8809883a 	mov	r4,r17
    a4f0:	900b883a 	mov	r5,r18
    a4f4:	000a5f00 	call	a5f0 <_malloc_r>
    a4f8:	1009883a 	mov	r4,r2
    a4fc:	10003126 	beq	r2,zero,a5c4 <__smakebuf_r+0x168>
    a500:	80c0030b 	ldhu	r3,12(r16)
    a504:	00800074 	movhi	r2,1
    a508:	10a74a04 	addi	r2,r2,-25304
    a50c:	88800f15 	stw	r2,60(r17)
    a510:	18c02014 	ori	r3,r3,128
    a514:	84800515 	stw	r18,20(r16)
    a518:	80c0030d 	sth	r3,12(r16)
    a51c:	81000415 	stw	r4,16(r16)
    a520:	81000015 	stw	r4,0(r16)
    a524:	dfc01217 	ldw	ra,72(sp)
    a528:	dc801117 	ldw	r18,68(sp)
    a52c:	dc401017 	ldw	r17,64(sp)
    a530:	dc000f17 	ldw	r16,60(sp)
    a534:	dec01304 	addi	sp,sp,76
    a538:	f800283a 	ret
    a53c:	80c0030b 	ldhu	r3,12(r16)
    a540:	1880200c 	andi	r2,r3,128
    a544:	10000426 	beq	r2,zero,a558 <__smakebuf_r+0xfc>
    a548:	04801004 	movi	r18,64
    a54c:	18820014 	ori	r2,r3,2048
    a550:	8080030d 	sth	r2,12(r16)
    a554:	003fe506 	br	a4ec <__smakebuf_r+0x90>
    a558:	04810004 	movi	r18,1024
    a55c:	003ffb06 	br	a54c <__smakebuf_r+0xf0>
    a560:	8140038f 	ldh	r5,14(r16)
    a564:	8809883a 	mov	r4,r17
    a568:	000b16c0 	call	b16c <_isatty_r>
    a56c:	103fde26 	beq	r2,zero,a4e8 <__smakebuf_r+0x8c>
    a570:	8080030b 	ldhu	r2,12(r16)
    a574:	80c010c4 	addi	r3,r16,67
    a578:	04810004 	movi	r18,1024
    a57c:	10800054 	ori	r2,r2,1
    a580:	8080030d 	sth	r2,12(r16)
    a584:	00800044 	movi	r2,1
    a588:	80c00415 	stw	r3,16(r16)
    a58c:	80800515 	stw	r2,20(r16)
    a590:	80c00015 	stw	r3,0(r16)
    a594:	003fd506 	br	a4ec <__smakebuf_r+0x90>
    a598:	80c00a17 	ldw	r3,40(r16)
    a59c:	00800074 	movhi	r2,1
    a5a0:	10ab6a04 	addi	r2,r2,-21080
    a5a4:	18bfcb1e 	bne	r3,r2,a4d4 <__smakebuf_r+0x78>
    a5a8:	8080030b 	ldhu	r2,12(r16)
    a5ac:	00c10004 	movi	r3,1024
    a5b0:	1825883a 	mov	r18,r3
    a5b4:	10c4b03a 	or	r2,r2,r3
    a5b8:	8080030d 	sth	r2,12(r16)
    a5bc:	80c01315 	stw	r3,76(r16)
    a5c0:	003fca06 	br	a4ec <__smakebuf_r+0x90>
    a5c4:	8100030b 	ldhu	r4,12(r16)
    a5c8:	2080800c 	andi	r2,r4,512
    a5cc:	103fb21e 	bne	r2,zero,a498 <__smakebuf_r+0x3c>
    a5d0:	80c010c4 	addi	r3,r16,67
    a5d4:	21000094 	ori	r4,r4,2
    a5d8:	00800044 	movi	r2,1
    a5dc:	80800515 	stw	r2,20(r16)
    a5e0:	8100030d 	sth	r4,12(r16)
    a5e4:	80c00415 	stw	r3,16(r16)
    a5e8:	80c00015 	stw	r3,0(r16)
    a5ec:	003faa06 	br	a498 <__smakebuf_r+0x3c>

0000a5f0 <_malloc_r>:
    a5f0:	defff604 	addi	sp,sp,-40
    a5f4:	28c002c4 	addi	r3,r5,11
    a5f8:	00800584 	movi	r2,22
    a5fc:	dc800215 	stw	r18,8(sp)
    a600:	dfc00915 	stw	ra,36(sp)
    a604:	df000815 	stw	fp,32(sp)
    a608:	ddc00715 	stw	r23,28(sp)
    a60c:	dd800615 	stw	r22,24(sp)
    a610:	dd400515 	stw	r21,20(sp)
    a614:	dd000415 	stw	r20,16(sp)
    a618:	dcc00315 	stw	r19,12(sp)
    a61c:	dc400115 	stw	r17,4(sp)
    a620:	dc000015 	stw	r16,0(sp)
    a624:	2025883a 	mov	r18,r4
    a628:	10c01236 	bltu	r2,r3,a674 <_malloc_r+0x84>
    a62c:	04400404 	movi	r17,16
    a630:	8940142e 	bgeu	r17,r5,a684 <_malloc_r+0x94>
    a634:	00800304 	movi	r2,12
    a638:	0007883a 	mov	r3,zero
    a63c:	90800015 	stw	r2,0(r18)
    a640:	1805883a 	mov	r2,r3
    a644:	dfc00917 	ldw	ra,36(sp)
    a648:	df000817 	ldw	fp,32(sp)
    a64c:	ddc00717 	ldw	r23,28(sp)
    a650:	dd800617 	ldw	r22,24(sp)
    a654:	dd400517 	ldw	r21,20(sp)
    a658:	dd000417 	ldw	r20,16(sp)
    a65c:	dcc00317 	ldw	r19,12(sp)
    a660:	dc800217 	ldw	r18,8(sp)
    a664:	dc400117 	ldw	r17,4(sp)
    a668:	dc000017 	ldw	r16,0(sp)
    a66c:	dec00a04 	addi	sp,sp,40
    a670:	f800283a 	ret
    a674:	00bffe04 	movi	r2,-8
    a678:	18a2703a 	and	r17,r3,r2
    a67c:	883fed16 	blt	r17,zero,a634 <_malloc_r+0x44>
    a680:	897fec36 	bltu	r17,r5,a634 <_malloc_r+0x44>
    a684:	9009883a 	mov	r4,r18
    a688:	000b6d00 	call	b6d0 <__malloc_lock>
    a68c:	00807dc4 	movi	r2,503
    a690:	14402b2e 	bgeu	r2,r17,a740 <_malloc_r+0x150>
    a694:	8806d27a 	srli	r3,r17,9
    a698:	18003f1e 	bne	r3,zero,a798 <_malloc_r+0x1a8>
    a69c:	880cd0fa 	srli	r6,r17,3
    a6a0:	300490fa 	slli	r2,r6,3
    a6a4:	02c00074 	movhi	r11,1
    a6a8:	5af74e04 	addi	r11,r11,-8904
    a6ac:	12cb883a 	add	r5,r2,r11
    a6b0:	2c000317 	ldw	r16,12(r5)
    a6b4:	580f883a 	mov	r7,r11
    a6b8:	2c00041e 	bne	r5,r16,a6cc <_malloc_r+0xdc>
    a6bc:	00000a06 	br	a6e8 <_malloc_r+0xf8>
    a6c0:	1800860e 	bge	r3,zero,a8dc <_malloc_r+0x2ec>
    a6c4:	84000317 	ldw	r16,12(r16)
    a6c8:	2c000726 	beq	r5,r16,a6e8 <_malloc_r+0xf8>
    a6cc:	80800117 	ldw	r2,4(r16)
    a6d0:	00ffff04 	movi	r3,-4
    a6d4:	10c8703a 	and	r4,r2,r3
    a6d8:	2447c83a 	sub	r3,r4,r17
    a6dc:	008003c4 	movi	r2,15
    a6e0:	10fff70e 	bge	r2,r3,a6c0 <_malloc_r+0xd0>
    a6e4:	31bfffc4 	addi	r6,r6,-1
    a6e8:	32400044 	addi	r9,r6,1
    a6ec:	02800074 	movhi	r10,1
    a6f0:	52b75004 	addi	r10,r10,-8896
    a6f4:	54000217 	ldw	r16,8(r10)
    a6f8:	8280a026 	beq	r16,r10,a97c <_malloc_r+0x38c>
    a6fc:	80800117 	ldw	r2,4(r16)
    a700:	00ffff04 	movi	r3,-4
    a704:	10ca703a 	and	r5,r2,r3
    a708:	2c4dc83a 	sub	r6,r5,r17
    a70c:	008003c4 	movi	r2,15
    a710:	11808316 	blt	r2,r6,a920 <_malloc_r+0x330>
    a714:	52800315 	stw	r10,12(r10)
    a718:	52800215 	stw	r10,8(r10)
    a71c:	30002916 	blt	r6,zero,a7c4 <_malloc_r+0x1d4>
    a720:	8147883a 	add	r3,r16,r5
    a724:	18800117 	ldw	r2,4(r3)
    a728:	9009883a 	mov	r4,r18
    a72c:	10800054 	ori	r2,r2,1
    a730:	18800115 	stw	r2,4(r3)
    a734:	000b6f00 	call	b6f0 <__malloc_unlock>
    a738:	80c00204 	addi	r3,r16,8
    a73c:	003fc006 	br	a640 <_malloc_r+0x50>
    a740:	02c00074 	movhi	r11,1
    a744:	5af74e04 	addi	r11,r11,-8904
    a748:	8ac5883a 	add	r2,r17,r11
    a74c:	14000317 	ldw	r16,12(r2)
    a750:	580f883a 	mov	r7,r11
    a754:	8806d0fa 	srli	r3,r17,3
    a758:	14006c26 	beq	r2,r16,a90c <_malloc_r+0x31c>
    a75c:	80c00117 	ldw	r3,4(r16)
    a760:	00bfff04 	movi	r2,-4
    a764:	81800317 	ldw	r6,12(r16)
    a768:	1886703a 	and	r3,r3,r2
    a76c:	80c7883a 	add	r3,r16,r3
    a770:	18800117 	ldw	r2,4(r3)
    a774:	81400217 	ldw	r5,8(r16)
    a778:	9009883a 	mov	r4,r18
    a77c:	10800054 	ori	r2,r2,1
    a780:	18800115 	stw	r2,4(r3)
    a784:	31400215 	stw	r5,8(r6)
    a788:	29800315 	stw	r6,12(r5)
    a78c:	000b6f00 	call	b6f0 <__malloc_unlock>
    a790:	80c00204 	addi	r3,r16,8
    a794:	003faa06 	br	a640 <_malloc_r+0x50>
    a798:	00800104 	movi	r2,4
    a79c:	10c0052e 	bgeu	r2,r3,a7b4 <_malloc_r+0x1c4>
    a7a0:	00800504 	movi	r2,20
    a7a4:	10c07836 	bltu	r2,r3,a988 <_malloc_r+0x398>
    a7a8:	198016c4 	addi	r6,r3,91
    a7ac:	300490fa 	slli	r2,r6,3
    a7b0:	003fbc06 	br	a6a4 <_malloc_r+0xb4>
    a7b4:	8804d1ba 	srli	r2,r17,6
    a7b8:	11800e04 	addi	r6,r2,56
    a7bc:	300490fa 	slli	r2,r6,3
    a7c0:	003fb806 	br	a6a4 <_malloc_r+0xb4>
    a7c4:	00807fc4 	movi	r2,511
    a7c8:	1140bb36 	bltu	r2,r5,aab8 <_malloc_r+0x4c8>
    a7cc:	2806d0fa 	srli	r3,r5,3
    a7d0:	573ffe04 	addi	fp,r10,-8
    a7d4:	00800044 	movi	r2,1
    a7d8:	180890fa 	slli	r4,r3,3
    a7dc:	1807d0ba 	srai	r3,r3,2
    a7e0:	e1c00117 	ldw	r7,4(fp)
    a7e4:	5909883a 	add	r4,r11,r4
    a7e8:	21400217 	ldw	r5,8(r4)
    a7ec:	10c4983a 	sll	r2,r2,r3
    a7f0:	81000315 	stw	r4,12(r16)
    a7f4:	81400215 	stw	r5,8(r16)
    a7f8:	388eb03a 	or	r7,r7,r2
    a7fc:	2c000315 	stw	r16,12(r5)
    a800:	24000215 	stw	r16,8(r4)
    a804:	e1c00115 	stw	r7,4(fp)
    a808:	4807883a 	mov	r3,r9
    a80c:	4800cd16 	blt	r9,zero,ab44 <_malloc_r+0x554>
    a810:	1807d0ba 	srai	r3,r3,2
    a814:	00800044 	movi	r2,1
    a818:	10c8983a 	sll	r4,r2,r3
    a81c:	39004436 	bltu	r7,r4,a930 <_malloc_r+0x340>
    a820:	21c4703a 	and	r2,r4,r7
    a824:	10000a1e 	bne	r2,zero,a850 <_malloc_r+0x260>
    a828:	2109883a 	add	r4,r4,r4
    a82c:	00bfff04 	movi	r2,-4
    a830:	4884703a 	and	r2,r9,r2
    a834:	3906703a 	and	r3,r7,r4
    a838:	12400104 	addi	r9,r2,4
    a83c:	1800041e 	bne	r3,zero,a850 <_malloc_r+0x260>
    a840:	2109883a 	add	r4,r4,r4
    a844:	3904703a 	and	r2,r7,r4
    a848:	4a400104 	addi	r9,r9,4
    a84c:	103ffc26 	beq	r2,zero,a840 <_malloc_r+0x250>
    a850:	480490fa 	slli	r2,r9,3
    a854:	4819883a 	mov	r12,r9
    a858:	023fff04 	movi	r8,-4
    a85c:	589b883a 	add	r13,r11,r2
    a860:	6807883a 	mov	r3,r13
    a864:	014003c4 	movi	r5,15
    a868:	1c000317 	ldw	r16,12(r3)
    a86c:	1c00041e 	bne	r3,r16,a880 <_malloc_r+0x290>
    a870:	0000a706 	br	ab10 <_malloc_r+0x520>
    a874:	3000ab0e 	bge	r6,zero,ab24 <_malloc_r+0x534>
    a878:	84000317 	ldw	r16,12(r16)
    a87c:	1c00a426 	beq	r3,r16,ab10 <_malloc_r+0x520>
    a880:	80800117 	ldw	r2,4(r16)
    a884:	1204703a 	and	r2,r2,r8
    a888:	144dc83a 	sub	r6,r2,r17
    a88c:	29bff90e 	bge	r5,r6,a874 <_malloc_r+0x284>
    a890:	81000317 	ldw	r4,12(r16)
    a894:	80c00217 	ldw	r3,8(r16)
    a898:	89400054 	ori	r5,r17,1
    a89c:	8445883a 	add	r2,r16,r17
    a8a0:	20c00215 	stw	r3,8(r4)
    a8a4:	19000315 	stw	r4,12(r3)
    a8a8:	81400115 	stw	r5,4(r16)
    a8ac:	1187883a 	add	r3,r2,r6
    a8b0:	31000054 	ori	r4,r6,1
    a8b4:	50800315 	stw	r2,12(r10)
    a8b8:	50800215 	stw	r2,8(r10)
    a8bc:	19800015 	stw	r6,0(r3)
    a8c0:	11000115 	stw	r4,4(r2)
    a8c4:	12800215 	stw	r10,8(r2)
    a8c8:	12800315 	stw	r10,12(r2)
    a8cc:	9009883a 	mov	r4,r18
    a8d0:	000b6f00 	call	b6f0 <__malloc_unlock>
    a8d4:	80c00204 	addi	r3,r16,8
    a8d8:	003f5906 	br	a640 <_malloc_r+0x50>
    a8dc:	8109883a 	add	r4,r16,r4
    a8e0:	20800117 	ldw	r2,4(r4)
    a8e4:	80c00217 	ldw	r3,8(r16)
    a8e8:	81400317 	ldw	r5,12(r16)
    a8ec:	10800054 	ori	r2,r2,1
    a8f0:	20800115 	stw	r2,4(r4)
    a8f4:	28c00215 	stw	r3,8(r5)
    a8f8:	19400315 	stw	r5,12(r3)
    a8fc:	9009883a 	mov	r4,r18
    a900:	000b6f00 	call	b6f0 <__malloc_unlock>
    a904:	80c00204 	addi	r3,r16,8
    a908:	003f4d06 	br	a640 <_malloc_r+0x50>
    a90c:	80800204 	addi	r2,r16,8
    a910:	14000317 	ldw	r16,12(r2)
    a914:	143f911e 	bne	r2,r16,a75c <_malloc_r+0x16c>
    a918:	1a400084 	addi	r9,r3,2
    a91c:	003f7306 	br	a6ec <_malloc_r+0xfc>
    a920:	88c00054 	ori	r3,r17,1
    a924:	8445883a 	add	r2,r16,r17
    a928:	80c00115 	stw	r3,4(r16)
    a92c:	003fdf06 	br	a8ac <_malloc_r+0x2bc>
    a930:	e4000217 	ldw	r16,8(fp)
    a934:	00bfff04 	movi	r2,-4
    a938:	80c00117 	ldw	r3,4(r16)
    a93c:	802d883a 	mov	r22,r16
    a940:	18aa703a 	and	r21,r3,r2
    a944:	ac401636 	bltu	r21,r17,a9a0 <_malloc_r+0x3b0>
    a948:	ac49c83a 	sub	r4,r21,r17
    a94c:	008003c4 	movi	r2,15
    a950:	1100130e 	bge	r2,r4,a9a0 <_malloc_r+0x3b0>
    a954:	88800054 	ori	r2,r17,1
    a958:	8447883a 	add	r3,r16,r17
    a95c:	80800115 	stw	r2,4(r16)
    a960:	20800054 	ori	r2,r4,1
    a964:	18800115 	stw	r2,4(r3)
    a968:	e0c00215 	stw	r3,8(fp)
    a96c:	9009883a 	mov	r4,r18
    a970:	000b6f00 	call	b6f0 <__malloc_unlock>
    a974:	80c00204 	addi	r3,r16,8
    a978:	003f3106 	br	a640 <_malloc_r+0x50>
    a97c:	39c00117 	ldw	r7,4(r7)
    a980:	573ffe04 	addi	fp,r10,-8
    a984:	003fa006 	br	a808 <_malloc_r+0x218>
    a988:	00801504 	movi	r2,84
    a98c:	10c06736 	bltu	r2,r3,ab2c <_malloc_r+0x53c>
    a990:	8804d33a 	srli	r2,r17,12
    a994:	11801b84 	addi	r6,r2,110
    a998:	300490fa 	slli	r2,r6,3
    a99c:	003f4106 	br	a6a4 <_malloc_r+0xb4>
    a9a0:	d0a85517 	ldw	r2,-24236(gp)
    a9a4:	d0e00c17 	ldw	r3,-32720(gp)
    a9a8:	053fffc4 	movi	r20,-1
    a9ac:	10800404 	addi	r2,r2,16
    a9b0:	88a7883a 	add	r19,r17,r2
    a9b4:	1d000326 	beq	r3,r20,a9c4 <_malloc_r+0x3d4>
    a9b8:	98c3ffc4 	addi	r3,r19,4095
    a9bc:	00bc0004 	movi	r2,-4096
    a9c0:	18a6703a 	and	r19,r3,r2
    a9c4:	9009883a 	mov	r4,r18
    a9c8:	980b883a 	mov	r5,r19
    a9cc:	000ad300 	call	ad30 <_sbrk_r>
    a9d0:	1009883a 	mov	r4,r2
    a9d4:	15000426 	beq	r2,r20,a9e8 <_malloc_r+0x3f8>
    a9d8:	854b883a 	add	r5,r16,r21
    a9dc:	1029883a 	mov	r20,r2
    a9e0:	11405a2e 	bgeu	r2,r5,ab4c <_malloc_r+0x55c>
    a9e4:	87000c26 	beq	r16,fp,aa18 <_malloc_r+0x428>
    a9e8:	e4000217 	ldw	r16,8(fp)
    a9ec:	80c00117 	ldw	r3,4(r16)
    a9f0:	00bfff04 	movi	r2,-4
    a9f4:	1884703a 	and	r2,r3,r2
    a9f8:	14400336 	bltu	r2,r17,aa08 <_malloc_r+0x418>
    a9fc:	1449c83a 	sub	r4,r2,r17
    aa00:	008003c4 	movi	r2,15
    aa04:	113fd316 	blt	r2,r4,a954 <_malloc_r+0x364>
    aa08:	9009883a 	mov	r4,r18
    aa0c:	000b6f00 	call	b6f0 <__malloc_unlock>
    aa10:	0007883a 	mov	r3,zero
    aa14:	003f0a06 	br	a640 <_malloc_r+0x50>
    aa18:	05c00074 	movhi	r23,1
    aa1c:	bdc0a804 	addi	r23,r23,672
    aa20:	b8800017 	ldw	r2,0(r23)
    aa24:	988d883a 	add	r6,r19,r2
    aa28:	b9800015 	stw	r6,0(r23)
    aa2c:	d0e00c17 	ldw	r3,-32720(gp)
    aa30:	00bfffc4 	movi	r2,-1
    aa34:	18808e26 	beq	r3,r2,ac70 <_malloc_r+0x680>
    aa38:	2145c83a 	sub	r2,r4,r5
    aa3c:	3085883a 	add	r2,r6,r2
    aa40:	b8800015 	stw	r2,0(r23)
    aa44:	20c001cc 	andi	r3,r4,7
    aa48:	18005f1e 	bne	r3,zero,abc8 <_malloc_r+0x5d8>
    aa4c:	000b883a 	mov	r5,zero
    aa50:	a4c5883a 	add	r2,r20,r19
    aa54:	1083ffcc 	andi	r2,r2,4095
    aa58:	00c40004 	movi	r3,4096
    aa5c:	1887c83a 	sub	r3,r3,r2
    aa60:	28e7883a 	add	r19,r5,r3
    aa64:	9009883a 	mov	r4,r18
    aa68:	980b883a 	mov	r5,r19
    aa6c:	000ad300 	call	ad30 <_sbrk_r>
    aa70:	1007883a 	mov	r3,r2
    aa74:	00bfffc4 	movi	r2,-1
    aa78:	18807a26 	beq	r3,r2,ac64 <_malloc_r+0x674>
    aa7c:	1d05c83a 	sub	r2,r3,r20
    aa80:	9885883a 	add	r2,r19,r2
    aa84:	10c00054 	ori	r3,r2,1
    aa88:	b8800017 	ldw	r2,0(r23)
    aa8c:	a021883a 	mov	r16,r20
    aa90:	a0c00115 	stw	r3,4(r20)
    aa94:	9885883a 	add	r2,r19,r2
    aa98:	b8800015 	stw	r2,0(r23)
    aa9c:	e5000215 	stw	r20,8(fp)
    aaa0:	b7003626 	beq	r22,fp,ab7c <_malloc_r+0x58c>
    aaa4:	018003c4 	movi	r6,15
    aaa8:	35404b36 	bltu	r6,r21,abd8 <_malloc_r+0x5e8>
    aaac:	00800044 	movi	r2,1
    aab0:	a0800115 	stw	r2,4(r20)
    aab4:	003fcd06 	br	a9ec <_malloc_r+0x3fc>
    aab8:	2808d27a 	srli	r4,r5,9
    aabc:	2000371e 	bne	r4,zero,ab9c <_malloc_r+0x5ac>
    aac0:	2808d0fa 	srli	r4,r5,3
    aac4:	200690fa 	slli	r3,r4,3
    aac8:	1ad1883a 	add	r8,r3,r11
    aacc:	41800217 	ldw	r6,8(r8)
    aad0:	41805b26 	beq	r8,r6,ac40 <_malloc_r+0x650>
    aad4:	30800117 	ldw	r2,4(r6)
    aad8:	00ffff04 	movi	r3,-4
    aadc:	10c4703a 	and	r2,r2,r3
    aae0:	2880022e 	bgeu	r5,r2,aaec <_malloc_r+0x4fc>
    aae4:	31800217 	ldw	r6,8(r6)
    aae8:	41bffa1e 	bne	r8,r6,aad4 <_malloc_r+0x4e4>
    aaec:	32000317 	ldw	r8,12(r6)
    aaf0:	39c00117 	ldw	r7,4(r7)
    aaf4:	82000315 	stw	r8,12(r16)
    aaf8:	81800215 	stw	r6,8(r16)
    aafc:	07000074 	movhi	fp,1
    ab00:	e7374e04 	addi	fp,fp,-8904
    ab04:	34000315 	stw	r16,12(r6)
    ab08:	44000215 	stw	r16,8(r8)
    ab0c:	003f3e06 	br	a808 <_malloc_r+0x218>
    ab10:	63000044 	addi	r12,r12,1
    ab14:	608000cc 	andi	r2,r12,3
    ab18:	10005d26 	beq	r2,zero,ac90 <_malloc_r+0x6a0>
    ab1c:	18c00204 	addi	r3,r3,8
    ab20:	003f5106 	br	a868 <_malloc_r+0x278>
    ab24:	8089883a 	add	r4,r16,r2
    ab28:	003f6d06 	br	a8e0 <_malloc_r+0x2f0>
    ab2c:	00805504 	movi	r2,340
    ab30:	10c02036 	bltu	r2,r3,abb4 <_malloc_r+0x5c4>
    ab34:	8804d3fa 	srli	r2,r17,15
    ab38:	11801dc4 	addi	r6,r2,119
    ab3c:	300490fa 	slli	r2,r6,3
    ab40:	003ed806 	br	a6a4 <_malloc_r+0xb4>
    ab44:	48c000c4 	addi	r3,r9,3
    ab48:	003f3106 	br	a810 <_malloc_r+0x220>
    ab4c:	05c00074 	movhi	r23,1
    ab50:	bdc0a804 	addi	r23,r23,672
    ab54:	b8800017 	ldw	r2,0(r23)
    ab58:	988d883a 	add	r6,r19,r2
    ab5c:	b9800015 	stw	r6,0(r23)
    ab60:	293fb21e 	bne	r5,r4,aa2c <_malloc_r+0x43c>
    ab64:	2083ffcc 	andi	r2,r4,4095
    ab68:	103fb01e 	bne	r2,zero,aa2c <_malloc_r+0x43c>
    ab6c:	e4000217 	ldw	r16,8(fp)
    ab70:	9d45883a 	add	r2,r19,r21
    ab74:	10800054 	ori	r2,r2,1
    ab78:	80800115 	stw	r2,4(r16)
    ab7c:	b8c00017 	ldw	r3,0(r23)
    ab80:	d0a85617 	ldw	r2,-24232(gp)
    ab84:	10c0012e 	bgeu	r2,r3,ab8c <_malloc_r+0x59c>
    ab88:	d0e85615 	stw	r3,-24232(gp)
    ab8c:	d0a85717 	ldw	r2,-24228(gp)
    ab90:	10ff962e 	bgeu	r2,r3,a9ec <_malloc_r+0x3fc>
    ab94:	d0e85715 	stw	r3,-24228(gp)
    ab98:	003f9406 	br	a9ec <_malloc_r+0x3fc>
    ab9c:	00800104 	movi	r2,4
    aba0:	11001e36 	bltu	r2,r4,ac1c <_malloc_r+0x62c>
    aba4:	2804d1ba 	srli	r2,r5,6
    aba8:	11000e04 	addi	r4,r2,56
    abac:	200690fa 	slli	r3,r4,3
    abb0:	003fc506 	br	aac8 <_malloc_r+0x4d8>
    abb4:	00815504 	movi	r2,1364
    abb8:	10c01d2e 	bgeu	r2,r3,ac30 <_malloc_r+0x640>
    abbc:	01801f84 	movi	r6,126
    abc0:	0080fc04 	movi	r2,1008
    abc4:	003eb706 	br	a6a4 <_malloc_r+0xb4>
    abc8:	00800204 	movi	r2,8
    abcc:	10cbc83a 	sub	r5,r2,r3
    abd0:	2169883a 	add	r20,r4,r5
    abd4:	003f9e06 	br	aa50 <_malloc_r+0x460>
    abd8:	00bffe04 	movi	r2,-8
    abdc:	a93ffd04 	addi	r4,r21,-12
    abe0:	2088703a 	and	r4,r4,r2
    abe4:	b10b883a 	add	r5,r22,r4
    abe8:	00c00144 	movi	r3,5
    abec:	28c00215 	stw	r3,8(r5)
    abf0:	28c00115 	stw	r3,4(r5)
    abf4:	b0800117 	ldw	r2,4(r22)
    abf8:	1080004c 	andi	r2,r2,1
    abfc:	2084b03a 	or	r2,r4,r2
    ac00:	b0800115 	stw	r2,4(r22)
    ac04:	313fdd2e 	bgeu	r6,r4,ab7c <_malloc_r+0x58c>
    ac08:	b1400204 	addi	r5,r22,8
    ac0c:	9009883a 	mov	r4,r18
    ac10:	0009fc80 	call	9fc8 <_free_r>
    ac14:	e4000217 	ldw	r16,8(fp)
    ac18:	003fd806 	br	ab7c <_malloc_r+0x58c>
    ac1c:	00800504 	movi	r2,20
    ac20:	11001536 	bltu	r2,r4,ac78 <_malloc_r+0x688>
    ac24:	210016c4 	addi	r4,r4,91
    ac28:	200690fa 	slli	r3,r4,3
    ac2c:	003fa606 	br	aac8 <_malloc_r+0x4d8>
    ac30:	8804d4ba 	srli	r2,r17,18
    ac34:	11801f04 	addi	r6,r2,124
    ac38:	300490fa 	slli	r2,r6,3
    ac3c:	003e9906 	br	a6a4 <_malloc_r+0xb4>
    ac40:	2009d0ba 	srai	r4,r4,2
    ac44:	01400074 	movhi	r5,1
    ac48:	29774e04 	addi	r5,r5,-8904
    ac4c:	00c00044 	movi	r3,1
    ac50:	28800117 	ldw	r2,4(r5)
    ac54:	1906983a 	sll	r3,r3,r4
    ac58:	10c4b03a 	or	r2,r2,r3
    ac5c:	28800115 	stw	r2,4(r5)
    ac60:	003fa306 	br	aaf0 <_malloc_r+0x500>
    ac64:	0027883a 	mov	r19,zero
    ac68:	00c00044 	movi	r3,1
    ac6c:	003f8606 	br	aa88 <_malloc_r+0x498>
    ac70:	d1200c15 	stw	r4,-32720(gp)
    ac74:	003f7306 	br	aa44 <_malloc_r+0x454>
    ac78:	00801504 	movi	r2,84
    ac7c:	11001936 	bltu	r2,r4,ace4 <_malloc_r+0x6f4>
    ac80:	2804d33a 	srli	r2,r5,12
    ac84:	11001b84 	addi	r4,r2,110
    ac88:	200690fa 	slli	r3,r4,3
    ac8c:	003f8e06 	br	aac8 <_malloc_r+0x4d8>
    ac90:	480b883a 	mov	r5,r9
    ac94:	6807883a 	mov	r3,r13
    ac98:	288000cc 	andi	r2,r5,3
    ac9c:	18fffe04 	addi	r3,r3,-8
    aca0:	297fffc4 	addi	r5,r5,-1
    aca4:	10001526 	beq	r2,zero,acfc <_malloc_r+0x70c>
    aca8:	18800217 	ldw	r2,8(r3)
    acac:	10fffa26 	beq	r2,r3,ac98 <_malloc_r+0x6a8>
    acb0:	2109883a 	add	r4,r4,r4
    acb4:	393f1e36 	bltu	r7,r4,a930 <_malloc_r+0x340>
    acb8:	203f1d26 	beq	r4,zero,a930 <_malloc_r+0x340>
    acbc:	21c4703a 	and	r2,r4,r7
    acc0:	10000226 	beq	r2,zero,accc <_malloc_r+0x6dc>
    acc4:	6013883a 	mov	r9,r12
    acc8:	003ee106 	br	a850 <_malloc_r+0x260>
    accc:	2109883a 	add	r4,r4,r4
    acd0:	3904703a 	and	r2,r7,r4
    acd4:	63000104 	addi	r12,r12,4
    acd8:	103ffc26 	beq	r2,zero,accc <_malloc_r+0x6dc>
    acdc:	6013883a 	mov	r9,r12
    ace0:	003edb06 	br	a850 <_malloc_r+0x260>
    ace4:	00805504 	movi	r2,340
    ace8:	11000836 	bltu	r2,r4,ad0c <_malloc_r+0x71c>
    acec:	2804d3fa 	srli	r2,r5,15
    acf0:	11001dc4 	addi	r4,r2,119
    acf4:	200690fa 	slli	r3,r4,3
    acf8:	003f7306 	br	aac8 <_malloc_r+0x4d8>
    acfc:	0104303a 	nor	r2,zero,r4
    ad00:	388e703a 	and	r7,r7,r2
    ad04:	e1c00115 	stw	r7,4(fp)
    ad08:	003fe906 	br	acb0 <_malloc_r+0x6c0>
    ad0c:	00815504 	movi	r2,1364
    ad10:	1100032e 	bgeu	r2,r4,ad20 <_malloc_r+0x730>
    ad14:	01001f84 	movi	r4,126
    ad18:	00c0fc04 	movi	r3,1008
    ad1c:	003f6a06 	br	aac8 <_malloc_r+0x4d8>
    ad20:	2804d4ba 	srli	r2,r5,18
    ad24:	11001f04 	addi	r4,r2,124
    ad28:	200690fa 	slli	r3,r4,3
    ad2c:	003f6606 	br	aac8 <_malloc_r+0x4d8>

0000ad30 <_sbrk_r>:
    ad30:	defffd04 	addi	sp,sp,-12
    ad34:	dc000015 	stw	r16,0(sp)
    ad38:	04000074 	movhi	r16,1
    ad3c:	8400a404 	addi	r16,r16,656
    ad40:	dc400115 	stw	r17,4(sp)
    ad44:	80000015 	stw	zero,0(r16)
    ad48:	2023883a 	mov	r17,r4
    ad4c:	2809883a 	mov	r4,r5
    ad50:	dfc00215 	stw	ra,8(sp)
    ad54:	000b8900 	call	b890 <sbrk>
    ad58:	1007883a 	mov	r3,r2
    ad5c:	00bfffc4 	movi	r2,-1
    ad60:	18800626 	beq	r3,r2,ad7c <_sbrk_r+0x4c>
    ad64:	1805883a 	mov	r2,r3
    ad68:	dfc00217 	ldw	ra,8(sp)
    ad6c:	dc400117 	ldw	r17,4(sp)
    ad70:	dc000017 	ldw	r16,0(sp)
    ad74:	dec00304 	addi	sp,sp,12
    ad78:	f800283a 	ret
    ad7c:	80800017 	ldw	r2,0(r16)
    ad80:	103ff826 	beq	r2,zero,ad64 <_sbrk_r+0x34>
    ad84:	88800015 	stw	r2,0(r17)
    ad88:	1805883a 	mov	r2,r3
    ad8c:	dfc00217 	ldw	ra,8(sp)
    ad90:	dc400117 	ldw	r17,4(sp)
    ad94:	dc000017 	ldw	r16,0(sp)
    ad98:	dec00304 	addi	sp,sp,12
    ad9c:	f800283a 	ret

0000ada0 <__sclose>:
    ada0:	2940038f 	ldh	r5,14(r5)
    ada4:	000af641 	jmpi	af64 <_close_r>

0000ada8 <__sseek>:
    ada8:	defffe04 	addi	sp,sp,-8
    adac:	dc000015 	stw	r16,0(sp)
    adb0:	2821883a 	mov	r16,r5
    adb4:	2940038f 	ldh	r5,14(r5)
    adb8:	dfc00115 	stw	ra,4(sp)
    adbc:	000b1dc0 	call	b1dc <_lseek_r>
    adc0:	1007883a 	mov	r3,r2
    adc4:	00bfffc4 	movi	r2,-1
    adc8:	18800926 	beq	r3,r2,adf0 <__sseek+0x48>
    adcc:	8080030b 	ldhu	r2,12(r16)
    add0:	80c01415 	stw	r3,80(r16)
    add4:	10840014 	ori	r2,r2,4096
    add8:	8080030d 	sth	r2,12(r16)
    addc:	1805883a 	mov	r2,r3
    ade0:	dfc00117 	ldw	ra,4(sp)
    ade4:	dc000017 	ldw	r16,0(sp)
    ade8:	dec00204 	addi	sp,sp,8
    adec:	f800283a 	ret
    adf0:	8080030b 	ldhu	r2,12(r16)
    adf4:	10bbffcc 	andi	r2,r2,61439
    adf8:	8080030d 	sth	r2,12(r16)
    adfc:	1805883a 	mov	r2,r3
    ae00:	dfc00117 	ldw	ra,4(sp)
    ae04:	dc000017 	ldw	r16,0(sp)
    ae08:	dec00204 	addi	sp,sp,8
    ae0c:	f800283a 	ret

0000ae10 <__swrite>:
    ae10:	2880030b 	ldhu	r2,12(r5)
    ae14:	defffb04 	addi	sp,sp,-20
    ae18:	dcc00315 	stw	r19,12(sp)
    ae1c:	1080400c 	andi	r2,r2,256
    ae20:	dc800215 	stw	r18,8(sp)
    ae24:	dc400115 	stw	r17,4(sp)
    ae28:	dc000015 	stw	r16,0(sp)
    ae2c:	3027883a 	mov	r19,r6
    ae30:	3825883a 	mov	r18,r7
    ae34:	dfc00415 	stw	ra,16(sp)
    ae38:	2821883a 	mov	r16,r5
    ae3c:	000d883a 	mov	r6,zero
    ae40:	01c00084 	movi	r7,2
    ae44:	2023883a 	mov	r17,r4
    ae48:	10000226 	beq	r2,zero,ae54 <__swrite+0x44>
    ae4c:	2940038f 	ldh	r5,14(r5)
    ae50:	000b1dc0 	call	b1dc <_lseek_r>
    ae54:	8080030b 	ldhu	r2,12(r16)
    ae58:	8140038f 	ldh	r5,14(r16)
    ae5c:	8809883a 	mov	r4,r17
    ae60:	10bbffcc 	andi	r2,r2,61439
    ae64:	980d883a 	mov	r6,r19
    ae68:	900f883a 	mov	r7,r18
    ae6c:	8080030d 	sth	r2,12(r16)
    ae70:	dfc00417 	ldw	ra,16(sp)
    ae74:	dcc00317 	ldw	r19,12(sp)
    ae78:	dc800217 	ldw	r18,8(sp)
    ae7c:	dc400117 	ldw	r17,4(sp)
    ae80:	dc000017 	ldw	r16,0(sp)
    ae84:	dec00504 	addi	sp,sp,20
    ae88:	000aeec1 	jmpi	aeec <_write_r>

0000ae8c <__sread>:
    ae8c:	defffe04 	addi	sp,sp,-8
    ae90:	dc000015 	stw	r16,0(sp)
    ae94:	2821883a 	mov	r16,r5
    ae98:	2940038f 	ldh	r5,14(r5)
    ae9c:	dfc00115 	stw	ra,4(sp)
    aea0:	000b2540 	call	b254 <_read_r>
    aea4:	1007883a 	mov	r3,r2
    aea8:	10000816 	blt	r2,zero,aecc <__sread+0x40>
    aeac:	80801417 	ldw	r2,80(r16)
    aeb0:	10c5883a 	add	r2,r2,r3
    aeb4:	80801415 	stw	r2,80(r16)
    aeb8:	1805883a 	mov	r2,r3
    aebc:	dfc00117 	ldw	ra,4(sp)
    aec0:	dc000017 	ldw	r16,0(sp)
    aec4:	dec00204 	addi	sp,sp,8
    aec8:	f800283a 	ret
    aecc:	8080030b 	ldhu	r2,12(r16)
    aed0:	10bbffcc 	andi	r2,r2,61439
    aed4:	8080030d 	sth	r2,12(r16)
    aed8:	1805883a 	mov	r2,r3
    aedc:	dfc00117 	ldw	ra,4(sp)
    aee0:	dc000017 	ldw	r16,0(sp)
    aee4:	dec00204 	addi	sp,sp,8
    aee8:	f800283a 	ret

0000aeec <_write_r>:
    aeec:	defffd04 	addi	sp,sp,-12
    aef0:	dc000015 	stw	r16,0(sp)
    aef4:	04000074 	movhi	r16,1
    aef8:	8400a404 	addi	r16,r16,656
    aefc:	dc400115 	stw	r17,4(sp)
    af00:	80000015 	stw	zero,0(r16)
    af04:	2023883a 	mov	r17,r4
    af08:	2809883a 	mov	r4,r5
    af0c:	300b883a 	mov	r5,r6
    af10:	380d883a 	mov	r6,r7
    af14:	dfc00215 	stw	ra,8(sp)
    af18:	000b94c0 	call	b94c <write>
    af1c:	1007883a 	mov	r3,r2
    af20:	00bfffc4 	movi	r2,-1
    af24:	18800626 	beq	r3,r2,af40 <_write_r+0x54>
    af28:	1805883a 	mov	r2,r3
    af2c:	dfc00217 	ldw	ra,8(sp)
    af30:	dc400117 	ldw	r17,4(sp)
    af34:	dc000017 	ldw	r16,0(sp)
    af38:	dec00304 	addi	sp,sp,12
    af3c:	f800283a 	ret
    af40:	80800017 	ldw	r2,0(r16)
    af44:	103ff826 	beq	r2,zero,af28 <_write_r+0x3c>
    af48:	88800015 	stw	r2,0(r17)
    af4c:	1805883a 	mov	r2,r3
    af50:	dfc00217 	ldw	ra,8(sp)
    af54:	dc400117 	ldw	r17,4(sp)
    af58:	dc000017 	ldw	r16,0(sp)
    af5c:	dec00304 	addi	sp,sp,12
    af60:	f800283a 	ret

0000af64 <_close_r>:
    af64:	defffd04 	addi	sp,sp,-12
    af68:	dc000015 	stw	r16,0(sp)
    af6c:	04000074 	movhi	r16,1
    af70:	8400a404 	addi	r16,r16,656
    af74:	dc400115 	stw	r17,4(sp)
    af78:	80000015 	stw	zero,0(r16)
    af7c:	2023883a 	mov	r17,r4
    af80:	2809883a 	mov	r4,r5
    af84:	dfc00215 	stw	ra,8(sp)
    af88:	00082340 	call	8234 <close>
    af8c:	1007883a 	mov	r3,r2
    af90:	00bfffc4 	movi	r2,-1
    af94:	18800626 	beq	r3,r2,afb0 <_close_r+0x4c>
    af98:	1805883a 	mov	r2,r3
    af9c:	dfc00217 	ldw	ra,8(sp)
    afa0:	dc400117 	ldw	r17,4(sp)
    afa4:	dc000017 	ldw	r16,0(sp)
    afa8:	dec00304 	addi	sp,sp,12
    afac:	f800283a 	ret
    afb0:	80800017 	ldw	r2,0(r16)
    afb4:	103ff826 	beq	r2,zero,af98 <_close_r+0x34>
    afb8:	88800015 	stw	r2,0(r17)
    afbc:	1805883a 	mov	r2,r3
    afc0:	dfc00217 	ldw	ra,8(sp)
    afc4:	dc400117 	ldw	r17,4(sp)
    afc8:	dc000017 	ldw	r16,0(sp)
    afcc:	dec00304 	addi	sp,sp,12
    afd0:	f800283a 	ret

0000afd4 <_fclose_r>:
    afd4:	defffc04 	addi	sp,sp,-16
    afd8:	dc400115 	stw	r17,4(sp)
    afdc:	dc000015 	stw	r16,0(sp)
    afe0:	dfc00315 	stw	ra,12(sp)
    afe4:	dc800215 	stw	r18,8(sp)
    afe8:	2821883a 	mov	r16,r5
    afec:	2023883a 	mov	r17,r4
    aff0:	28002926 	beq	r5,zero,b098 <_fclose_r+0xc4>
    aff4:	0009c340 	call	9c34 <__sfp_lock_acquire>
    aff8:	88000226 	beq	r17,zero,b004 <_fclose_r+0x30>
    affc:	88800e17 	ldw	r2,56(r17)
    b000:	10002d26 	beq	r2,zero,b0b8 <_fclose_r+0xe4>
    b004:	8080030f 	ldh	r2,12(r16)
    b008:	10002226 	beq	r2,zero,b094 <_fclose_r+0xc0>
    b00c:	8809883a 	mov	r4,r17
    b010:	800b883a 	mov	r5,r16
    b014:	00099ac0 	call	99ac <_fflush_r>
    b018:	1025883a 	mov	r18,r2
    b01c:	80800b17 	ldw	r2,44(r16)
    b020:	10000426 	beq	r2,zero,b034 <_fclose_r+0x60>
    b024:	81400717 	ldw	r5,28(r16)
    b028:	8809883a 	mov	r4,r17
    b02c:	103ee83a 	callr	r2
    b030:	10002a16 	blt	r2,zero,b0dc <_fclose_r+0x108>
    b034:	8080030b 	ldhu	r2,12(r16)
    b038:	1080200c 	andi	r2,r2,128
    b03c:	1000231e 	bne	r2,zero,b0cc <_fclose_r+0xf8>
    b040:	81400c17 	ldw	r5,48(r16)
    b044:	28000526 	beq	r5,zero,b05c <_fclose_r+0x88>
    b048:	80801004 	addi	r2,r16,64
    b04c:	28800226 	beq	r5,r2,b058 <_fclose_r+0x84>
    b050:	8809883a 	mov	r4,r17
    b054:	0009fc80 	call	9fc8 <_free_r>
    b058:	80000c15 	stw	zero,48(r16)
    b05c:	81401117 	ldw	r5,68(r16)
    b060:	28000326 	beq	r5,zero,b070 <_fclose_r+0x9c>
    b064:	8809883a 	mov	r4,r17
    b068:	0009fc80 	call	9fc8 <_free_r>
    b06c:	80001115 	stw	zero,68(r16)
    b070:	8000030d 	sth	zero,12(r16)
    b074:	0009c380 	call	9c38 <__sfp_lock_release>
    b078:	9005883a 	mov	r2,r18
    b07c:	dfc00317 	ldw	ra,12(sp)
    b080:	dc800217 	ldw	r18,8(sp)
    b084:	dc400117 	ldw	r17,4(sp)
    b088:	dc000017 	ldw	r16,0(sp)
    b08c:	dec00404 	addi	sp,sp,16
    b090:	f800283a 	ret
    b094:	0009c380 	call	9c38 <__sfp_lock_release>
    b098:	0025883a 	mov	r18,zero
    b09c:	9005883a 	mov	r2,r18
    b0a0:	dfc00317 	ldw	ra,12(sp)
    b0a4:	dc800217 	ldw	r18,8(sp)
    b0a8:	dc400117 	ldw	r17,4(sp)
    b0ac:	dc000017 	ldw	r16,0(sp)
    b0b0:	dec00404 	addi	sp,sp,16
    b0b4:	f800283a 	ret
    b0b8:	8809883a 	mov	r4,r17
    b0bc:	0009c440 	call	9c44 <__sinit>
    b0c0:	8080030f 	ldh	r2,12(r16)
    b0c4:	103fd11e 	bne	r2,zero,b00c <_fclose_r+0x38>
    b0c8:	003ff206 	br	b094 <_fclose_r+0xc0>
    b0cc:	81400417 	ldw	r5,16(r16)
    b0d0:	8809883a 	mov	r4,r17
    b0d4:	0009fc80 	call	9fc8 <_free_r>
    b0d8:	003fd906 	br	b040 <_fclose_r+0x6c>
    b0dc:	04bfffc4 	movi	r18,-1
    b0e0:	003fd406 	br	b034 <_fclose_r+0x60>

0000b0e4 <fclose>:
    b0e4:	00800074 	movhi	r2,1
    b0e8:	10b85904 	addi	r2,r2,-7836
    b0ec:	200b883a 	mov	r5,r4
    b0f0:	11000017 	ldw	r4,0(r2)
    b0f4:	000afd41 	jmpi	afd4 <_fclose_r>

0000b0f8 <_fstat_r>:
    b0f8:	defffd04 	addi	sp,sp,-12
    b0fc:	dc000015 	stw	r16,0(sp)
    b100:	04000074 	movhi	r16,1
    b104:	8400a404 	addi	r16,r16,656
    b108:	dc400115 	stw	r17,4(sp)
    b10c:	80000015 	stw	zero,0(r16)
    b110:	2023883a 	mov	r17,r4
    b114:	2809883a 	mov	r4,r5
    b118:	300b883a 	mov	r5,r6
    b11c:	dfc00215 	stw	ra,8(sp)
    b120:	000b32c0 	call	b32c <fstat>
    b124:	1007883a 	mov	r3,r2
    b128:	00bfffc4 	movi	r2,-1
    b12c:	18800626 	beq	r3,r2,b148 <_fstat_r+0x50>
    b130:	1805883a 	mov	r2,r3
    b134:	dfc00217 	ldw	ra,8(sp)
    b138:	dc400117 	ldw	r17,4(sp)
    b13c:	dc000017 	ldw	r16,0(sp)
    b140:	dec00304 	addi	sp,sp,12
    b144:	f800283a 	ret
    b148:	80800017 	ldw	r2,0(r16)
    b14c:	103ff826 	beq	r2,zero,b130 <_fstat_r+0x38>
    b150:	88800015 	stw	r2,0(r17)
    b154:	1805883a 	mov	r2,r3
    b158:	dfc00217 	ldw	ra,8(sp)
    b15c:	dc400117 	ldw	r17,4(sp)
    b160:	dc000017 	ldw	r16,0(sp)
    b164:	dec00304 	addi	sp,sp,12
    b168:	f800283a 	ret

0000b16c <_isatty_r>:
    b16c:	defffd04 	addi	sp,sp,-12
    b170:	dc000015 	stw	r16,0(sp)
    b174:	04000074 	movhi	r16,1
    b178:	8400a404 	addi	r16,r16,656
    b17c:	dc400115 	stw	r17,4(sp)
    b180:	80000015 	stw	zero,0(r16)
    b184:	2023883a 	mov	r17,r4
    b188:	2809883a 	mov	r4,r5
    b18c:	dfc00215 	stw	ra,8(sp)
    b190:	000b4600 	call	b460 <isatty>
    b194:	1007883a 	mov	r3,r2
    b198:	00bfffc4 	movi	r2,-1
    b19c:	18800626 	beq	r3,r2,b1b8 <_isatty_r+0x4c>
    b1a0:	1805883a 	mov	r2,r3
    b1a4:	dfc00217 	ldw	ra,8(sp)
    b1a8:	dc400117 	ldw	r17,4(sp)
    b1ac:	dc000017 	ldw	r16,0(sp)
    b1b0:	dec00304 	addi	sp,sp,12
    b1b4:	f800283a 	ret
    b1b8:	80800017 	ldw	r2,0(r16)
    b1bc:	103ff826 	beq	r2,zero,b1a0 <_isatty_r+0x34>
    b1c0:	88800015 	stw	r2,0(r17)
    b1c4:	1805883a 	mov	r2,r3
    b1c8:	dfc00217 	ldw	ra,8(sp)
    b1cc:	dc400117 	ldw	r17,4(sp)
    b1d0:	dc000017 	ldw	r16,0(sp)
    b1d4:	dec00304 	addi	sp,sp,12
    b1d8:	f800283a 	ret

0000b1dc <_lseek_r>:
    b1dc:	defffd04 	addi	sp,sp,-12
    b1e0:	dc000015 	stw	r16,0(sp)
    b1e4:	04000074 	movhi	r16,1
    b1e8:	8400a404 	addi	r16,r16,656
    b1ec:	dc400115 	stw	r17,4(sp)
    b1f0:	80000015 	stw	zero,0(r16)
    b1f4:	2023883a 	mov	r17,r4
    b1f8:	2809883a 	mov	r4,r5
    b1fc:	300b883a 	mov	r5,r6
    b200:	380d883a 	mov	r6,r7
    b204:	dfc00215 	stw	ra,8(sp)
    b208:	000b5800 	call	b580 <lseek>
    b20c:	1007883a 	mov	r3,r2
    b210:	00bfffc4 	movi	r2,-1
    b214:	18800626 	beq	r3,r2,b230 <_lseek_r+0x54>
    b218:	1805883a 	mov	r2,r3
    b21c:	dfc00217 	ldw	ra,8(sp)
    b220:	dc400117 	ldw	r17,4(sp)
    b224:	dc000017 	ldw	r16,0(sp)
    b228:	dec00304 	addi	sp,sp,12
    b22c:	f800283a 	ret
    b230:	80800017 	ldw	r2,0(r16)
    b234:	103ff826 	beq	r2,zero,b218 <_lseek_r+0x3c>
    b238:	88800015 	stw	r2,0(r17)
    b23c:	1805883a 	mov	r2,r3
    b240:	dfc00217 	ldw	ra,8(sp)
    b244:	dc400117 	ldw	r17,4(sp)
    b248:	dc000017 	ldw	r16,0(sp)
    b24c:	dec00304 	addi	sp,sp,12
    b250:	f800283a 	ret

0000b254 <_read_r>:
    b254:	defffd04 	addi	sp,sp,-12
    b258:	dc000015 	stw	r16,0(sp)
    b25c:	04000074 	movhi	r16,1
    b260:	8400a404 	addi	r16,r16,656
    b264:	dc400115 	stw	r17,4(sp)
    b268:	80000015 	stw	zero,0(r16)
    b26c:	2023883a 	mov	r17,r4
    b270:	2809883a 	mov	r4,r5
    b274:	300b883a 	mov	r5,r6
    b278:	380d883a 	mov	r6,r7
    b27c:	dfc00215 	stw	ra,8(sp)
    b280:	000b7100 	call	b710 <read>
    b284:	1007883a 	mov	r3,r2
    b288:	00bfffc4 	movi	r2,-1
    b28c:	18800626 	beq	r3,r2,b2a8 <_read_r+0x54>
    b290:	1805883a 	mov	r2,r3
    b294:	dfc00217 	ldw	ra,8(sp)
    b298:	dc400117 	ldw	r17,4(sp)
    b29c:	dc000017 	ldw	r16,0(sp)
    b2a0:	dec00304 	addi	sp,sp,12
    b2a4:	f800283a 	ret
    b2a8:	80800017 	ldw	r2,0(r16)
    b2ac:	103ff826 	beq	r2,zero,b290 <_read_r+0x3c>
    b2b0:	88800015 	stw	r2,0(r17)
    b2b4:	1805883a 	mov	r2,r3
    b2b8:	dfc00217 	ldw	ra,8(sp)
    b2bc:	dc400117 	ldw	r17,4(sp)
    b2c0:	dc000017 	ldw	r16,0(sp)
    b2c4:	dec00304 	addi	sp,sp,12
    b2c8:	f800283a 	ret

0000b2cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b2cc:	defffd04 	addi	sp,sp,-12
    b2d0:	df000215 	stw	fp,8(sp)
    b2d4:	df000204 	addi	fp,sp,8
    b2d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b2dc:	e0bfff17 	ldw	r2,-4(fp)
    b2e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b2e4:	e0bffe17 	ldw	r2,-8(fp)
    b2e8:	1005003a 	cmpeq	r2,r2,zero
    b2ec:	1000021e 	bne	r2,zero,b2f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b2f0:	002af070 	cmpltui	zero,zero,43969
    b2f4:	00000106 	br	b2fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b2f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b2fc:	e037883a 	mov	sp,fp
    b300:	df000017 	ldw	fp,0(sp)
    b304:	dec00104 	addi	sp,sp,4
    b308:	f800283a 	ret

0000b30c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b30c:	defffd04 	addi	sp,sp,-12
    b310:	dfc00215 	stw	ra,8(sp)
    b314:	df000115 	stw	fp,4(sp)
    b318:	df000104 	addi	fp,sp,4
    b31c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b320:	e13fff17 	ldw	r4,-4(fp)
    b324:	000b2cc0 	call	b2cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b328:	003fff06 	br	b328 <_exit+0x1c>

0000b32c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b32c:	defff904 	addi	sp,sp,-28
    b330:	dfc00615 	stw	ra,24(sp)
    b334:	df000515 	stw	fp,20(sp)
    b338:	df000504 	addi	fp,sp,20
    b33c:	e13ffc15 	stw	r4,-16(fp)
    b340:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b344:	e0bffc17 	ldw	r2,-16(fp)
    b348:	1004803a 	cmplt	r2,r2,zero
    b34c:	1000081e 	bne	r2,zero,b370 <fstat+0x44>
    b350:	e0bffc17 	ldw	r2,-16(fp)
    b354:	10800324 	muli	r2,r2,12
    b358:	1007883a 	mov	r3,r2
    b35c:	00800074 	movhi	r2,1
    b360:	10b5ee04 	addi	r2,r2,-10312
    b364:	1887883a 	add	r3,r3,r2
    b368:	e0ffff15 	stw	r3,-4(fp)
    b36c:	00000106 	br	b374 <fstat+0x48>
    b370:	e03fff15 	stw	zero,-4(fp)
    b374:	e0bfff17 	ldw	r2,-4(fp)
    b378:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b37c:	e0bffb17 	ldw	r2,-20(fp)
    b380:	1005003a 	cmpeq	r2,r2,zero
    b384:	1000121e 	bne	r2,zero,b3d0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b388:	e0bffb17 	ldw	r2,-20(fp)
    b38c:	10800017 	ldw	r2,0(r2)
    b390:	10800817 	ldw	r2,32(r2)
    b394:	1005003a 	cmpeq	r2,r2,zero
    b398:	1000081e 	bne	r2,zero,b3bc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b39c:	e0bffb17 	ldw	r2,-20(fp)
    b3a0:	10800017 	ldw	r2,0(r2)
    b3a4:	10800817 	ldw	r2,32(r2)
    b3a8:	e13ffb17 	ldw	r4,-20(fp)
    b3ac:	e17ffd17 	ldw	r5,-12(fp)
    b3b0:	103ee83a 	callr	r2
    b3b4:	e0bffe15 	stw	r2,-8(fp)
    b3b8:	00000b06 	br	b3e8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b3bc:	e0fffd17 	ldw	r3,-12(fp)
    b3c0:	00880004 	movi	r2,8192
    b3c4:	18800115 	stw	r2,4(r3)
      return 0;
    b3c8:	e03ffe15 	stw	zero,-8(fp)
    b3cc:	00000606 	br	b3e8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b3d0:	000b4000 	call	b400 <alt_get_errno>
    b3d4:	1007883a 	mov	r3,r2
    b3d8:	00801444 	movi	r2,81
    b3dc:	18800015 	stw	r2,0(r3)
    return -1;
    b3e0:	00bfffc4 	movi	r2,-1
    b3e4:	e0bffe15 	stw	r2,-8(fp)
    b3e8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b3ec:	e037883a 	mov	sp,fp
    b3f0:	dfc00117 	ldw	ra,4(sp)
    b3f4:	df000017 	ldw	fp,0(sp)
    b3f8:	dec00204 	addi	sp,sp,8
    b3fc:	f800283a 	ret

0000b400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b400:	defffd04 	addi	sp,sp,-12
    b404:	dfc00215 	stw	ra,8(sp)
    b408:	df000115 	stw	fp,4(sp)
    b40c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b410:	00800074 	movhi	r2,1
    b414:	10b85604 	addi	r2,r2,-7848
    b418:	10800017 	ldw	r2,0(r2)
    b41c:	1005003a 	cmpeq	r2,r2,zero
    b420:	1000061e 	bne	r2,zero,b43c <alt_get_errno+0x3c>
    b424:	00800074 	movhi	r2,1
    b428:	10b85604 	addi	r2,r2,-7848
    b42c:	10800017 	ldw	r2,0(r2)
    b430:	103ee83a 	callr	r2
    b434:	e0bfff15 	stw	r2,-4(fp)
    b438:	00000306 	br	b448 <alt_get_errno+0x48>
    b43c:	00800074 	movhi	r2,1
    b440:	1080a404 	addi	r2,r2,656
    b444:	e0bfff15 	stw	r2,-4(fp)
    b448:	e0bfff17 	ldw	r2,-4(fp)
}
    b44c:	e037883a 	mov	sp,fp
    b450:	dfc00117 	ldw	ra,4(sp)
    b454:	df000017 	ldw	fp,0(sp)
    b458:	dec00204 	addi	sp,sp,8
    b45c:	f800283a 	ret

0000b460 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b460:	deffeb04 	addi	sp,sp,-84
    b464:	dfc01415 	stw	ra,80(sp)
    b468:	df001315 	stw	fp,76(sp)
    b46c:	df001304 	addi	fp,sp,76
    b470:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b474:	e0bffd17 	ldw	r2,-12(fp)
    b478:	1004803a 	cmplt	r2,r2,zero
    b47c:	1000081e 	bne	r2,zero,b4a0 <isatty+0x40>
    b480:	e0bffd17 	ldw	r2,-12(fp)
    b484:	10800324 	muli	r2,r2,12
    b488:	1007883a 	mov	r3,r2
    b48c:	00800074 	movhi	r2,1
    b490:	10b5ee04 	addi	r2,r2,-10312
    b494:	1887883a 	add	r3,r3,r2
    b498:	e0ffff15 	stw	r3,-4(fp)
    b49c:	00000106 	br	b4a4 <isatty+0x44>
    b4a0:	e03fff15 	stw	zero,-4(fp)
    b4a4:	e0bfff17 	ldw	r2,-4(fp)
    b4a8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b4ac:	e0bfed17 	ldw	r2,-76(fp)
    b4b0:	1005003a 	cmpeq	r2,r2,zero
    b4b4:	10000f1e 	bne	r2,zero,b4f4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b4b8:	e0bfed17 	ldw	r2,-76(fp)
    b4bc:	10800017 	ldw	r2,0(r2)
    b4c0:	10800817 	ldw	r2,32(r2)
    b4c4:	1004c03a 	cmpne	r2,r2,zero
    b4c8:	1000031e 	bne	r2,zero,b4d8 <isatty+0x78>
    {
      return 1;
    b4cc:	00800044 	movi	r2,1
    b4d0:	e0bffe15 	stw	r2,-8(fp)
    b4d4:	00000c06 	br	b508 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b4d8:	e17fee04 	addi	r5,fp,-72
    b4dc:	e13ffd17 	ldw	r4,-12(fp)
    b4e0:	000b32c0 	call	b32c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b4e4:	e0bfef17 	ldw	r2,-68(fp)
    b4e8:	10880020 	cmpeqi	r2,r2,8192
    b4ec:	e0bffe15 	stw	r2,-8(fp)
    b4f0:	00000506 	br	b508 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b4f4:	000b5200 	call	b520 <alt_get_errno>
    b4f8:	1007883a 	mov	r3,r2
    b4fc:	00801444 	movi	r2,81
    b500:	18800015 	stw	r2,0(r3)
    return 0;
    b504:	e03ffe15 	stw	zero,-8(fp)
    b508:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b50c:	e037883a 	mov	sp,fp
    b510:	dfc00117 	ldw	ra,4(sp)
    b514:	df000017 	ldw	fp,0(sp)
    b518:	dec00204 	addi	sp,sp,8
    b51c:	f800283a 	ret

0000b520 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b520:	defffd04 	addi	sp,sp,-12
    b524:	dfc00215 	stw	ra,8(sp)
    b528:	df000115 	stw	fp,4(sp)
    b52c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b530:	00800074 	movhi	r2,1
    b534:	10b85604 	addi	r2,r2,-7848
    b538:	10800017 	ldw	r2,0(r2)
    b53c:	1005003a 	cmpeq	r2,r2,zero
    b540:	1000061e 	bne	r2,zero,b55c <alt_get_errno+0x3c>
    b544:	00800074 	movhi	r2,1
    b548:	10b85604 	addi	r2,r2,-7848
    b54c:	10800017 	ldw	r2,0(r2)
    b550:	103ee83a 	callr	r2
    b554:	e0bfff15 	stw	r2,-4(fp)
    b558:	00000306 	br	b568 <alt_get_errno+0x48>
    b55c:	00800074 	movhi	r2,1
    b560:	1080a404 	addi	r2,r2,656
    b564:	e0bfff15 	stw	r2,-4(fp)
    b568:	e0bfff17 	ldw	r2,-4(fp)
}
    b56c:	e037883a 	mov	sp,fp
    b570:	dfc00117 	ldw	ra,4(sp)
    b574:	df000017 	ldw	fp,0(sp)
    b578:	dec00204 	addi	sp,sp,8
    b57c:	f800283a 	ret

0000b580 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b580:	defff804 	addi	sp,sp,-32
    b584:	dfc00715 	stw	ra,28(sp)
    b588:	df000615 	stw	fp,24(sp)
    b58c:	df000604 	addi	fp,sp,24
    b590:	e13ffc15 	stw	r4,-16(fp)
    b594:	e17ffd15 	stw	r5,-12(fp)
    b598:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b59c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b5a0:	e0bffc17 	ldw	r2,-16(fp)
    b5a4:	1004803a 	cmplt	r2,r2,zero
    b5a8:	1000081e 	bne	r2,zero,b5cc <lseek+0x4c>
    b5ac:	e0bffc17 	ldw	r2,-16(fp)
    b5b0:	10800324 	muli	r2,r2,12
    b5b4:	1007883a 	mov	r3,r2
    b5b8:	00800074 	movhi	r2,1
    b5bc:	10b5ee04 	addi	r2,r2,-10312
    b5c0:	1887883a 	add	r3,r3,r2
    b5c4:	e0ffff15 	stw	r3,-4(fp)
    b5c8:	00000106 	br	b5d0 <lseek+0x50>
    b5cc:	e03fff15 	stw	zero,-4(fp)
    b5d0:	e0bfff17 	ldw	r2,-4(fp)
    b5d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b5d8:	e0bffb17 	ldw	r2,-20(fp)
    b5dc:	1005003a 	cmpeq	r2,r2,zero
    b5e0:	1000111e 	bne	r2,zero,b628 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b5e4:	e0bffb17 	ldw	r2,-20(fp)
    b5e8:	10800017 	ldw	r2,0(r2)
    b5ec:	10800717 	ldw	r2,28(r2)
    b5f0:	1005003a 	cmpeq	r2,r2,zero
    b5f4:	1000091e 	bne	r2,zero,b61c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b5f8:	e0bffb17 	ldw	r2,-20(fp)
    b5fc:	10800017 	ldw	r2,0(r2)
    b600:	10800717 	ldw	r2,28(r2)
    b604:	e13ffb17 	ldw	r4,-20(fp)
    b608:	e17ffd17 	ldw	r5,-12(fp)
    b60c:	e1bffe17 	ldw	r6,-8(fp)
    b610:	103ee83a 	callr	r2
    b614:	e0bffa15 	stw	r2,-24(fp)
    b618:	00000506 	br	b630 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b61c:	00bfde84 	movi	r2,-134
    b620:	e0bffa15 	stw	r2,-24(fp)
    b624:	00000206 	br	b630 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b628:	00bfebc4 	movi	r2,-81
    b62c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b630:	e0bffa17 	ldw	r2,-24(fp)
    b634:	1004403a 	cmpge	r2,r2,zero
    b638:	1000071e 	bne	r2,zero,b658 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b63c:	000b6700 	call	b670 <alt_get_errno>
    b640:	1007883a 	mov	r3,r2
    b644:	e0bffa17 	ldw	r2,-24(fp)
    b648:	0085c83a 	sub	r2,zero,r2
    b64c:	18800015 	stw	r2,0(r3)
    rc = -1;
    b650:	00bfffc4 	movi	r2,-1
    b654:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b658:	e0bffa17 	ldw	r2,-24(fp)
}
    b65c:	e037883a 	mov	sp,fp
    b660:	dfc00117 	ldw	ra,4(sp)
    b664:	df000017 	ldw	fp,0(sp)
    b668:	dec00204 	addi	sp,sp,8
    b66c:	f800283a 	ret

0000b670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b670:	defffd04 	addi	sp,sp,-12
    b674:	dfc00215 	stw	ra,8(sp)
    b678:	df000115 	stw	fp,4(sp)
    b67c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b680:	00800074 	movhi	r2,1
    b684:	10b85604 	addi	r2,r2,-7848
    b688:	10800017 	ldw	r2,0(r2)
    b68c:	1005003a 	cmpeq	r2,r2,zero
    b690:	1000061e 	bne	r2,zero,b6ac <alt_get_errno+0x3c>
    b694:	00800074 	movhi	r2,1
    b698:	10b85604 	addi	r2,r2,-7848
    b69c:	10800017 	ldw	r2,0(r2)
    b6a0:	103ee83a 	callr	r2
    b6a4:	e0bfff15 	stw	r2,-4(fp)
    b6a8:	00000306 	br	b6b8 <alt_get_errno+0x48>
    b6ac:	00800074 	movhi	r2,1
    b6b0:	1080a404 	addi	r2,r2,656
    b6b4:	e0bfff15 	stw	r2,-4(fp)
    b6b8:	e0bfff17 	ldw	r2,-4(fp)
}
    b6bc:	e037883a 	mov	sp,fp
    b6c0:	dfc00117 	ldw	ra,4(sp)
    b6c4:	df000017 	ldw	fp,0(sp)
    b6c8:	dec00204 	addi	sp,sp,8
    b6cc:	f800283a 	ret

0000b6d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b6d0:	defffe04 	addi	sp,sp,-8
    b6d4:	df000115 	stw	fp,4(sp)
    b6d8:	df000104 	addi	fp,sp,4
    b6dc:	e13fff15 	stw	r4,-4(fp)
}
    b6e0:	e037883a 	mov	sp,fp
    b6e4:	df000017 	ldw	fp,0(sp)
    b6e8:	dec00104 	addi	sp,sp,4
    b6ec:	f800283a 	ret

0000b6f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b6f0:	defffe04 	addi	sp,sp,-8
    b6f4:	df000115 	stw	fp,4(sp)
    b6f8:	df000104 	addi	fp,sp,4
    b6fc:	e13fff15 	stw	r4,-4(fp)
}
    b700:	e037883a 	mov	sp,fp
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00104 	addi	sp,sp,4
    b70c:	f800283a 	ret

0000b710 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b710:	defff704 	addi	sp,sp,-36
    b714:	dfc00815 	stw	ra,32(sp)
    b718:	df000715 	stw	fp,28(sp)
    b71c:	df000704 	addi	fp,sp,28
    b720:	e13ffb15 	stw	r4,-20(fp)
    b724:	e17ffc15 	stw	r5,-16(fp)
    b728:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b72c:	e0bffb17 	ldw	r2,-20(fp)
    b730:	1004803a 	cmplt	r2,r2,zero
    b734:	1000081e 	bne	r2,zero,b758 <read+0x48>
    b738:	e0bffb17 	ldw	r2,-20(fp)
    b73c:	10800324 	muli	r2,r2,12
    b740:	1007883a 	mov	r3,r2
    b744:	00800074 	movhi	r2,1
    b748:	10b5ee04 	addi	r2,r2,-10312
    b74c:	1887883a 	add	r3,r3,r2
    b750:	e0ffff15 	stw	r3,-4(fp)
    b754:	00000106 	br	b75c <read+0x4c>
    b758:	e03fff15 	stw	zero,-4(fp)
    b75c:	e0bfff17 	ldw	r2,-4(fp)
    b760:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b764:	e0bffa17 	ldw	r2,-24(fp)
    b768:	1005003a 	cmpeq	r2,r2,zero
    b76c:	1000241e 	bne	r2,zero,b800 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b770:	e0bffa17 	ldw	r2,-24(fp)
    b774:	10800217 	ldw	r2,8(r2)
    b778:	108000cc 	andi	r2,r2,3
    b77c:	10800060 	cmpeqi	r2,r2,1
    b780:	10001a1e 	bne	r2,zero,b7ec <read+0xdc>
    b784:	e0bffa17 	ldw	r2,-24(fp)
    b788:	10800017 	ldw	r2,0(r2)
    b78c:	10800517 	ldw	r2,20(r2)
    b790:	1005003a 	cmpeq	r2,r2,zero
    b794:	1000151e 	bne	r2,zero,b7ec <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b798:	e0bffa17 	ldw	r2,-24(fp)
    b79c:	10800017 	ldw	r2,0(r2)
    b7a0:	10800517 	ldw	r2,20(r2)
    b7a4:	e17ffc17 	ldw	r5,-16(fp)
    b7a8:	e1bffd17 	ldw	r6,-12(fp)
    b7ac:	e13ffa17 	ldw	r4,-24(fp)
    b7b0:	103ee83a 	callr	r2
    b7b4:	e0bff915 	stw	r2,-28(fp)
    b7b8:	e0bff917 	ldw	r2,-28(fp)
    b7bc:	1004403a 	cmpge	r2,r2,zero
    b7c0:	1000071e 	bne	r2,zero,b7e0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b7c4:	000b8300 	call	b830 <alt_get_errno>
    b7c8:	e0fff917 	ldw	r3,-28(fp)
    b7cc:	00c7c83a 	sub	r3,zero,r3
    b7d0:	10c00015 	stw	r3,0(r2)
          return -1;
    b7d4:	00bfffc4 	movi	r2,-1
    b7d8:	e0bffe15 	stw	r2,-8(fp)
    b7dc:	00000e06 	br	b818 <read+0x108>
        }
        return rval;
    b7e0:	e0bff917 	ldw	r2,-28(fp)
    b7e4:	e0bffe15 	stw	r2,-8(fp)
    b7e8:	00000b06 	br	b818 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b7ec:	000b8300 	call	b830 <alt_get_errno>
    b7f0:	1007883a 	mov	r3,r2
    b7f4:	00800344 	movi	r2,13
    b7f8:	18800015 	stw	r2,0(r3)
    b7fc:	00000406 	br	b810 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b800:	000b8300 	call	b830 <alt_get_errno>
    b804:	1007883a 	mov	r3,r2
    b808:	00801444 	movi	r2,81
    b80c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b810:	00bfffc4 	movi	r2,-1
    b814:	e0bffe15 	stw	r2,-8(fp)
    b818:	e0bffe17 	ldw	r2,-8(fp)
}
    b81c:	e037883a 	mov	sp,fp
    b820:	dfc00117 	ldw	ra,4(sp)
    b824:	df000017 	ldw	fp,0(sp)
    b828:	dec00204 	addi	sp,sp,8
    b82c:	f800283a 	ret

0000b830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b830:	defffd04 	addi	sp,sp,-12
    b834:	dfc00215 	stw	ra,8(sp)
    b838:	df000115 	stw	fp,4(sp)
    b83c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b840:	00800074 	movhi	r2,1
    b844:	10b85604 	addi	r2,r2,-7848
    b848:	10800017 	ldw	r2,0(r2)
    b84c:	1005003a 	cmpeq	r2,r2,zero
    b850:	1000061e 	bne	r2,zero,b86c <alt_get_errno+0x3c>
    b854:	00800074 	movhi	r2,1
    b858:	10b85604 	addi	r2,r2,-7848
    b85c:	10800017 	ldw	r2,0(r2)
    b860:	103ee83a 	callr	r2
    b864:	e0bfff15 	stw	r2,-4(fp)
    b868:	00000306 	br	b878 <alt_get_errno+0x48>
    b86c:	00800074 	movhi	r2,1
    b870:	1080a404 	addi	r2,r2,656
    b874:	e0bfff15 	stw	r2,-4(fp)
    b878:	e0bfff17 	ldw	r2,-4(fp)
}
    b87c:	e037883a 	mov	sp,fp
    b880:	dfc00117 	ldw	ra,4(sp)
    b884:	df000017 	ldw	fp,0(sp)
    b888:	dec00204 	addi	sp,sp,8
    b88c:	f800283a 	ret

0000b890 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b890:	defff804 	addi	sp,sp,-32
    b894:	df000715 	stw	fp,28(sp)
    b898:	df000704 	addi	fp,sp,28
    b89c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8a0:	0005303a 	rdctl	r2,status
    b8a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8a8:	e0fffb17 	ldw	r3,-20(fp)
    b8ac:	00bfff84 	movi	r2,-2
    b8b0:	1884703a 	and	r2,r3,r2
    b8b4:	1001703a 	wrctl	status,r2
  
  return context;
    b8b8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b8bc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b8c0:	d0a00d17 	ldw	r2,-32716(gp)
    b8c4:	10c000c4 	addi	r3,r2,3
    b8c8:	00bfff04 	movi	r2,-4
    b8cc:	1884703a 	and	r2,r3,r2
    b8d0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b8d4:	d0e00d17 	ldw	r3,-32716(gp)
    b8d8:	e0bffe17 	ldw	r2,-8(fp)
    b8dc:	1887883a 	add	r3,r3,r2
    b8e0:	00802034 	movhi	r2,128
    b8e4:	10800004 	addi	r2,r2,0
    b8e8:	10c0072e 	bgeu	r2,r3,b908 <sbrk+0x78>
    b8ec:	e0bffd17 	ldw	r2,-12(fp)
    b8f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8f4:	e0bffa17 	ldw	r2,-24(fp)
    b8f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b8fc:	00bfffc4 	movi	r2,-1
    b900:	e0bfff15 	stw	r2,-4(fp)
    b904:	00000c06 	br	b938 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b908:	d0a00d17 	ldw	r2,-32716(gp)
    b90c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b910:	d0e00d17 	ldw	r3,-32716(gp)
    b914:	e0bffe17 	ldw	r2,-8(fp)
    b918:	1885883a 	add	r2,r3,r2
    b91c:	d0a00d15 	stw	r2,-32716(gp)
    b920:	e0bffd17 	ldw	r2,-12(fp)
    b924:	e0bff915 	stw	r2,-28(fp)
    b928:	e0bff917 	ldw	r2,-28(fp)
    b92c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b930:	e0bffc17 	ldw	r2,-16(fp)
    b934:	e0bfff15 	stw	r2,-4(fp)
    b938:	e0bfff17 	ldw	r2,-4(fp)
} 
    b93c:	e037883a 	mov	sp,fp
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00104 	addi	sp,sp,4
    b948:	f800283a 	ret

0000b94c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b94c:	defff704 	addi	sp,sp,-36
    b950:	dfc00815 	stw	ra,32(sp)
    b954:	df000715 	stw	fp,28(sp)
    b958:	df000704 	addi	fp,sp,28
    b95c:	e13ffb15 	stw	r4,-20(fp)
    b960:	e17ffc15 	stw	r5,-16(fp)
    b964:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b968:	e0bffb17 	ldw	r2,-20(fp)
    b96c:	1004803a 	cmplt	r2,r2,zero
    b970:	1000081e 	bne	r2,zero,b994 <write+0x48>
    b974:	e0bffb17 	ldw	r2,-20(fp)
    b978:	10800324 	muli	r2,r2,12
    b97c:	1007883a 	mov	r3,r2
    b980:	00800074 	movhi	r2,1
    b984:	10b5ee04 	addi	r2,r2,-10312
    b988:	1887883a 	add	r3,r3,r2
    b98c:	e0ffff15 	stw	r3,-4(fp)
    b990:	00000106 	br	b998 <write+0x4c>
    b994:	e03fff15 	stw	zero,-4(fp)
    b998:	e0bfff17 	ldw	r2,-4(fp)
    b99c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b9a0:	e0bffa17 	ldw	r2,-24(fp)
    b9a4:	1005003a 	cmpeq	r2,r2,zero
    b9a8:	1000241e 	bne	r2,zero,ba3c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b9ac:	e0bffa17 	ldw	r2,-24(fp)
    b9b0:	10800217 	ldw	r2,8(r2)
    b9b4:	108000cc 	andi	r2,r2,3
    b9b8:	1005003a 	cmpeq	r2,r2,zero
    b9bc:	10001a1e 	bne	r2,zero,ba28 <write+0xdc>
    b9c0:	e0bffa17 	ldw	r2,-24(fp)
    b9c4:	10800017 	ldw	r2,0(r2)
    b9c8:	10800617 	ldw	r2,24(r2)
    b9cc:	1005003a 	cmpeq	r2,r2,zero
    b9d0:	1000151e 	bne	r2,zero,ba28 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b9d4:	e0bffa17 	ldw	r2,-24(fp)
    b9d8:	10800017 	ldw	r2,0(r2)
    b9dc:	10800617 	ldw	r2,24(r2)
    b9e0:	e17ffc17 	ldw	r5,-16(fp)
    b9e4:	e1bffd17 	ldw	r6,-12(fp)
    b9e8:	e13ffa17 	ldw	r4,-24(fp)
    b9ec:	103ee83a 	callr	r2
    b9f0:	e0bff915 	stw	r2,-28(fp)
    b9f4:	e0bff917 	ldw	r2,-28(fp)
    b9f8:	1004403a 	cmpge	r2,r2,zero
    b9fc:	1000071e 	bne	r2,zero,ba1c <write+0xd0>
      {
        ALT_ERRNO = -rval;
    ba00:	000ba6c0 	call	ba6c <alt_get_errno>
    ba04:	e0fff917 	ldw	r3,-28(fp)
    ba08:	00c7c83a 	sub	r3,zero,r3
    ba0c:	10c00015 	stw	r3,0(r2)
        return -1;
    ba10:	00bfffc4 	movi	r2,-1
    ba14:	e0bffe15 	stw	r2,-8(fp)
    ba18:	00000e06 	br	ba54 <write+0x108>
      }
      return rval;
    ba1c:	e0bff917 	ldw	r2,-28(fp)
    ba20:	e0bffe15 	stw	r2,-8(fp)
    ba24:	00000b06 	br	ba54 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ba28:	000ba6c0 	call	ba6c <alt_get_errno>
    ba2c:	1007883a 	mov	r3,r2
    ba30:	00800344 	movi	r2,13
    ba34:	18800015 	stw	r2,0(r3)
    ba38:	00000406 	br	ba4c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ba3c:	000ba6c0 	call	ba6c <alt_get_errno>
    ba40:	1007883a 	mov	r3,r2
    ba44:	00801444 	movi	r2,81
    ba48:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ba4c:	00bfffc4 	movi	r2,-1
    ba50:	e0bffe15 	stw	r2,-8(fp)
    ba54:	e0bffe17 	ldw	r2,-8(fp)
}
    ba58:	e037883a 	mov	sp,fp
    ba5c:	dfc00117 	ldw	ra,4(sp)
    ba60:	df000017 	ldw	fp,0(sp)
    ba64:	dec00204 	addi	sp,sp,8
    ba68:	f800283a 	ret

0000ba6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ba6c:	defffd04 	addi	sp,sp,-12
    ba70:	dfc00215 	stw	ra,8(sp)
    ba74:	df000115 	stw	fp,4(sp)
    ba78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ba7c:	00800074 	movhi	r2,1
    ba80:	10b85604 	addi	r2,r2,-7848
    ba84:	10800017 	ldw	r2,0(r2)
    ba88:	1005003a 	cmpeq	r2,r2,zero
    ba8c:	1000061e 	bne	r2,zero,baa8 <alt_get_errno+0x3c>
    ba90:	00800074 	movhi	r2,1
    ba94:	10b85604 	addi	r2,r2,-7848
    ba98:	10800017 	ldw	r2,0(r2)
    ba9c:	103ee83a 	callr	r2
    baa0:	e0bfff15 	stw	r2,-4(fp)
    baa4:	00000306 	br	bab4 <alt_get_errno+0x48>
    baa8:	00800074 	movhi	r2,1
    baac:	1080a404 	addi	r2,r2,656
    bab0:	e0bfff15 	stw	r2,-4(fp)
    bab4:	e0bfff17 	ldw	r2,-4(fp)
}
    bab8:	e037883a 	mov	sp,fp
    babc:	dfc00117 	ldw	ra,4(sp)
    bac0:	df000017 	ldw	fp,0(sp)
    bac4:	dec00204 	addi	sp,sp,8
    bac8:	f800283a 	ret
    bacc:	000097f8 	rdprs	zero,zero,607
