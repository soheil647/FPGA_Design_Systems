
New_Project.elf:     file format elf32-littlenios2
New_Project.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014004 memsz 0x00014004 flags r-x
    LOAD off    0x00015024 vaddr 0x00014024 paddr 0x000160b4 align 2**12
         filesz 0x00002090 memsz 0x00002090 flags rw-
    LOAD off    0x00017144 vaddr 0x00018144 paddr 0x00018144 align 2**12
         filesz 0x00000000 memsz 0x007a17f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013614  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000858  000137cc  000137cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002090  00014024  000160b4  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          007a1aca  00018144  00018144  00017144  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000170b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f98  00000000  00000000  000170e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000025fa  00000000  00000000  00018078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f1dd  00000000  00000000  0001a672  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000982b  00000000  00000000  0004984f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001a00b  00000000  00000000  0005307a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002704  00000000  00000000  0006d088  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c00  00000000  00000000  0006f78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e360  00000000  00000000  0007238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000806ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b80  00000000  00000000  00080740  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008603e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00086041  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00086044  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00086045  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00086046  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008604a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008604e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00086052  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008605b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00086064  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0008606d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  00086078  2**0
                  CONTENTS, READONLY
 29 .jdi          00006320  00000000  00000000  0008609c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00105fb5  00000000  00000000  0008c3bc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
000137cc l    d  .rodata	00000000 .rodata
00014024 l    d  .rwdata	00000000 .rwdata
00018144 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 amplitude_calculation.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
00013b54 l     O .rodata	00000010 C.37.3429
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000336c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003c24 l     F .text	00000058 __sprint_r
00013cd2 l     O .rodata	00000010 blanks.3452
00013cc2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005c88 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007684 l     F .text	00000058 std
00007790 l     F .text	00000008 __fp_lock
00007798 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000142a4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00016080 l     O .rwdata	00000004 charset
00013d08 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00013e50 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000b860 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cc88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cce8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cde8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d0c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d1a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d304 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d7c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000160a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000da64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014c60 l     O .rwdata	00001060 JTAG_UART
00015cc0 l     O .rwdata	00000030 AV_Config
00015cf0 l     O .rwdata	00000030 Audio
00015d20 l     O .rwdata	0000002c Char_LCD_16x2
00015d4c l     O .rwdata	0000003c Ethernet
00015d88 l     O .rwdata	0000002c IrDA_UART
00015db4 l     O .rwdata	0000002c Expansion_JP1
00015de0 l     O .rwdata	0000002c Expansion_JP2
00015e0c l     O .rwdata	0000002c Green_LEDs
00015e38 l     O .rwdata	0000002c HEX3_HEX0
00015e64 l     O .rwdata	0000002c HEX7_HEX4
00015e90 l     O .rwdata	0000002c Pushbuttons
00015ebc l     O .rwdata	0000002c Red_LEDs
00015ee8 l     O .rwdata	0000002c Slider_Switches
00015f14 l     O .rwdata	00000038 PS2_Port
00015f4c l     O .rwdata	0000002c Serial_Port
00015f78 l     O .rwdata	00000034 USB
00015fac l     O .rwdata	00000048 VGA_Char_Buffer
00015ff4 l     O .rwdata	00000054 VGA_Pixel_Buffer
00016048 l     O .rwdata	0000002c SD_Card
0000df08 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e140 l     F .text	0000022c altera_avalon_jtag_uart_irq
0000e36c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012514 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012700 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0001283c l     F .text	000000dc alt_file_locked
00012aa0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000135b4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00013768 l     F .text	00000040 alt_sim_halt
00009308 g     F .text	00000094 _mprec_log10
000093f4 g     F .text	00000088 __any_on
0000ab74 g     F .text	00000070 _isatty_r
00013e28 g     O .rodata	00000028 __mprec_tinytens
0000d364 g     F .text	0000006c alt_main
000119f0 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00000adc g     F .text	00000060 interval_timer_ISR
00010234 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
007b96a4 g     O .bss	00000100 alt_irq
0000abe4 g     F .text	00000078 _lseek_r
000160b4 g       *ABS*	00000000 __flash_rwdata_start
0000f3d8 g     F .text	00000034 alt_up_character_lcd_send_cmd
0000c380 g     F .text	00000088 __eqdf2
00018154 g     O .bss	00000001 byte2
00002ba0 g     F .text	00000680 __divdi3
0000edc8 g     F .text	00000070 alt_up_audio_read_fifo_avail
007b9934 g       *ABS*	00000000 __alt_heap_start
00003bac g     F .text	00000044 printf
0000ee38 g     F .text	00000070 alt_up_audio_record_r
00018155 g     O .bss	00000001 byte3
0000a5cc g     F .text	00000068 __sseek
000076ec g     F .text	000000a4 __sinit
00013334 g     F .text	00000130 __swbuf_r
00010c14 g     F .text	00000114 alt_up_char_buffer_string
0001004c g     F .text	00000034 read_CE_bit
00018158 g     O .bss	00000004 Play_Index
000083c4 g     F .text	00000084 _setlocale_r
000077ec g     F .text	00000068 __sfmoreglue
0000d3f0 g     F .text	00000020 __malloc_unlock
000103e0 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0001091c g     F .text	00000090 alt_up_rs232_read_fd
000024cc g     F .text	000002b8 Audio_Average
00010b44 g     F .text	000000d0 alt_up_char_buffer_draw
0000ed40 g     F .text	00000088 alt_up_audio_reset_audio_core
0000033c g     F .text	00000074 amplitude_operation
000181f8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00008e1c g     F .text	000000e0 memmove
0001815c g     O .bss	00000001 byte1
000077dc g     F .text	00000010 _cleanup
0000947c g     F .text	000000bc _Balloc
00010dc4 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000c490 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000f35c g     F .text	0000007c get_DDRAM_addr
00010d84 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ab00 g     F .text	00000074 _fstat_r
000181e0 g     O .bss	00000004 errno
00003334 g     F .text	00000038 __make_dp
000028dc g     F .text	00000174 Calculate_Avrage
00018148 g     O .bss	00000004 Read_Data
0000ed04 g     F .text	0000003c alt_up_audio_write_interrupt_pending
000181ec g     O .bss	00000004 alt_argv
0001e074 g       *ABS*	00000000 _gp
00012ca4 g     F .text	00000030 usleep
00010f64 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00014ae0 g     O .rwdata	00000180 alt_fd_list
0001819c g     O .bss	00000004 XoverFlow
00014024 g     O .rwdata	00000080 coeff
0001263c g     F .text	00000094 alt_find_dev
00003a74 g     F .text	000000a0 memcpy
0000f570 g     F .text	0000004c alt_up_character_lcd_write_fd
00010d28 g     F .text	0000005c alt_up_char_buffer_clear
000077d0 g     F .text	0000000c _cleanup_r
0000c628 g     F .text	000000f8 __floatsidf
000127c4 g     F .text	00000078 alt_io_redirect
0000c5a0 g     F .text	00000088 __ltdf2
000137cc g       *ABS*	00000000 __DTOR_END__
00000428 g     F .text	00000070 amplitude_circute_set_size
0000fed8 g     F .text	00000090 alt_up_irda_write_fd
000003b0 g     F .text	00000078 amplitude_circute_stop
000108a8 g     F .text	00000074 alt_up_rs232_read_data
000181a0 g     O .bss	00000004 MiddleBtn
00009258 g     F .text	000000b0 __ratio
0000f29c g     F .text	00000060 alt_up_audio_read_fifo_head
00011014 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
007b944c g     O .bss	00000078 Out_Ram
0000fcc0 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0000e584 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003bf0 g     F .text	00000034 _printf_r
000034a8 g     F .text	00000008 __udivsi3
0000d008 g     F .text	000000c0 isatty
0001815d g     O .bss	00000001 local_b2
00018198 g     O .bss	00000004 anita2
0000fa18 g     F .text	00000044 alt_up_ethernet_reg_write
00013d38 g     O .rodata	000000c8 __mprec_tens
000181a4 g     O .bss	00000004 index_Echo
0001815e g     O .bss	00000001 local_b1
000116a0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
000083a0 g     F .text	00000008 __locale_charset
0000fc68 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00012ff8 g     F .text	00000090 alt_icache_flush
000181d4 g     O .bss	00000004 __malloc_top_pad
00000498 g     F .text	00000058 amplitude_circute_set_num
0001607c g     O .rwdata	00000004 __mb_cur_max
000083a8 g     F .text	0000000c _localeconv_r
0000219c g     F .text	000001a4 Do_Soft_Echo
00009b74 g     F .text	0000003c __i2b
00007d84 g     F .text	0000049c __sfvwrite_r
0000a554 g     F .text	00000070 _sbrk_r
0001822c g     O .bss	00000020 up_dev
00011e84 g     F .text	000000d0 helper_plot_pixel
0000ac5c g     F .text	00000078 _read_r
00018160 g     O .bss	00000004 Echo_End
000146a4 g     O .rwdata	0000000c __lc_ctype
0001609c g     O .rwdata	00000004 alt_max_fd
00010810 g     F .text	00000050 alt_up_rs232_check_parity
0000f2fc g     F .text	00000060 alt_up_audio_write_fifo_head
0000f88c g     F .text	00000110 alt_up_ethernet_init
0000c98c g     F .text	00000138 __unpack_d
0000a9dc g     F .text	00000110 _fclose_r
00010080 g     F .text	00000034 read_num_bytes_available
00007650 g     F .text	00000034 fflush
000181d8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ce48 g     F .text	000001c0 alt_irq_register
0000ffe8 g     F .text	00000034 read_RI_bit
00003220 g     F .text	00000054 __extendsfdf2
0000bcf0 g     F .text	00000074 __adddf3
00009138 g     F .text	00000120 __b2d
007b94c4 g     O .bss	000000f0 Avrage_Hardware
00011048 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000b2b0 g     F .text	000005b0 __umoddi3
0000d214 g     F .text	000000f0 lseek
0001814c g     O .bss	00000004 Read_Reg0
00016078 g     O .rwdata	00000004 _global_impure_ptr
00009ef0 g     F .text	000005f4 _realloc_r
007b9934 g       *ABS*	00000000 __bss_end
000111ac g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00012b98 g     F .text	0000010c alt_tick
0000acd4 g     F .text	000005dc __udivdi3
00013e00 g     O .rodata	00000028 __mprec_bigtens
00009dd0 g     F .text	00000120 __s2b
0000c7f8 g     F .text	00000194 __floatunsidf
00009058 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000eb50 g     F .text	00000040 alt_up_audio_open_dev
000100e8 g     F .text	0000002c read_data_byte
000077b8 g     F .text	00000018 __fp_lock_all
0001824c g     O .bss	001e8480 Echo_buf_l
0000ef8c g     F .text	00000070 alt_up_audio_play_r
00012b00 g     F .text	00000098 alt_alarm_stop
0001001c g     F .text	00000030 read_RE_bit
000181e4 g     O .bss	00000004 alt_irq_active
00018164 g     O .bss	00000004 Echo_complete
0000fcfc g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
00014ab8 g     O .rwdata	00000028 alt_dev_null
00003698 g     F .text	000000c8 __unpack_f
0000f858 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000ffa8 g     F .text	00000040 alt_up_parallel_port_open_dev
0001818c g     O .bss	00000004 Echo
0001028c g     F .text	00000078 alt_up_ps2_write_data_byte
00000520 g     F .text	00000030 amplitude_circute_set_lbuff_addr
00012444 g     F .text	0000001c alt_dcache_flush_all
00008f24 g     F .text	00000070 __hi0bits
000181a8 g     O .bss	00000004 nibble_TempY
000181ac g     O .bss	00000004 nibble_TempX
00011dc0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000c720 g     F .text	000000d8 __fixdfsi
007b95b4 g     O .bss	000000f0 Average
00018168 g     O .bss	00000004 Play_Flag
000160b4 g       *ABS*	00000000 __ram_rwdata_end
00016094 g     O .rwdata	00000008 alt_dev_list
0000d944 g     F .text	00000120 write
0001324c g     F .text	000000e8 _putc_r
0000eb28 g     F .text	00000028 alt_timestamp_freq
00011f54 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00014024 g       *ABS*	00000000 __ram_rodata_end
0000cd14 g     F .text	000000d4 fstat
000109ac g     F .text	00000094 alt_up_rs232_write_fd
000005dc g     F .text	00000070 amplitude_circute_get_status
000140a4 g     O .rwdata	00000200 Mouse_Icon
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000181b0 g     O .bss	00000004 RightBtn
00009cb0 g     F .text	00000120 __pow5mult
000181c8 g     O .bss	00000004 __nlocale_changed
000034b0 g     F .text	00000008 __umodsi3
007b9934 g       *ABS*	00000000 end
00010600 g     F .text	000000a8 alt_up_ps2_write_fd
00003538 g     F .text	00000160 __pack_f
0000fd3c g     F .text	00000050 alt_up_irda_check_parity
00010a80 g     F .text	00000084 alt_up_char_buffer_init
002006cc g     O .bss	001e8480 r_buf
0000e088 g     F .text	000000b8 altera_avalon_jtag_uart_init
000137c8 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000034b8 g     F .text	00000080 __clzsi2
0000e7a8 g     F .text	00000240 altera_avalon_jtag_uart_write
000076dc g     F .text	00000004 __sfp_lock_acquire
00008d38 g     F .text	000000e4 memchr
0000f480 g     F .text	00000078 alt_up_character_lcd_write
00003c7c g     F .text	00001eac ___vfprintf_internal_r
000004f0 g     F .text	00000030 amplitude_circute_set_rbuff_addr
00007a70 g     F .text	00000314 _free_r
0000d410 g     F .text	00000258 alt_printf
000135b8 g     F .text	000001b0 __call_exitprocs
00002784 g     F .text	0000010c Plot_Play_Audio
000181cc g     O .bss	00000004 __mlocale_changed
00016088 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
000181fc g     O .bss	00000004 _alt_tick_rate
0000f170 g     F .text	0000012c alt_up_audio_write_fifo
00009840 g     F .text	0000014c __lshift
00018200 g     O .bss	00000004 _alt_nticks
0000d6a8 g     F .text	00000120 read
0000daf8 g     F .text	00000410 alt_sys_init
0000f6e4 g     F .text	000000b0 alt_up_character_lcd_shift_display
0000f06c g     F .text	00000104 alt_up_audio_read_fifo
00013480 g     F .text	00000134 __register_exitproc
0000ec78 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0001050c g     F .text	00000058 alt_up_ps2_clear_fifo
000107d0 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0000998c g     F .text	000001e8 __multiply
0000f794 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000e41c g     F .text	00000074 altera_avalon_jtag_uart_close
00014024 g       *ABS*	00000000 __ram_rwdata_start
000137cc g       *ABS*	00000000 __ram_rodata_start
00018204 g     O .bss	00000028 __malloc_current_mallinfo
00009538 g     F .text	0000017c __d2b
0000df40 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00012f40 g     F .text	000000b8 alt_get_fd
00012cf4 g     F .text	0000012c alt_busy_sleep
0000cac4 g     F .text	000000c8 __fpcmp_parts_d
0000a96c g     F .text	00000070 _close_r
000181b4 g     O .bss	00000004 Xsign
0000ec2c g     F .text	0000004c alt_up_audio_enable_write_interrupt
003e8b4c g     O .bss	001e8480 Echo_buf_r
000130d4 g     F .text	00000074 memcmp
0000dff0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
007b9934 g       *ABS*	00000000 __alt_stack_base
0000e038 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000fc14 g     F .text	00000054 alt_up_irda_enable_read_interrupt
00005b4c g     F .text	0000013c __swsetup_r
0000c128 g     F .text	00000258 __divdf3
0000ebdc g     F .text	00000050 alt_up_audio_disable_read_interrupt
00007854 g     F .text	000000f0 __sfp
0000939c g     F .text	00000058 __copybits
000146b0 g     O .rwdata	00000408 __malloc_av_
000076e8 g     F .text	00000004 __sinit_lock_release
0000bd64 g     F .text	000003c4 __muldf3
0000a6b0 g     F .text	00000060 __sread
0001073c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00012e20 g     F .text	00000120 alt_find_file
00012460 g     F .text	000000b4 alt_dev_llist_insert
0000d3d0 g     F .text	00000020 __malloc_lock
0000d888 g     F .text	000000bc sbrk
00007454 g     F .text	000001fc _fflush_r
0000a8b8 g     F .text	000000b4 _calloc_r
00018144 g       *ABS*	00000000 __bss_start
00003b14 g     F .text	00000098 memset
0001816c g     O .bss	00000004 Clear_Play_Plot
00000b3c g     F .text	00001354 main
0000ef18 g     F .text	00000074 alt_up_audio_write_fifo_space
000181f0 g     O .bss	00000004 alt_envp
000181dc g     O .bss	00000004 __malloc_max_total_mem
00010fbc g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00010b04 g     F .text	00000040 alt_up_char_buffer_open_dev
0000df98 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00018170 g     O .bss	00000004 End_Record
00013464 g     F .text	0000001c __swbuf
0000f634 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000a5c4 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000aaec g     F .text	00000014 fclose
00010490 g     F .text	0000007c alt_up_ps2_read_data_byte
00018174 g     O .bss	00000004 timeout
0000e9e8 g     F .text	000000a4 alt_timestamp_start
007b97a4 g     O .bss	00000190 _atexit0
00005ea0 g     F .text	000015b4 _dtoa_r
000085f8 g     F .text	00000740 _malloc_r
000160a0 g     O .rwdata	00000004 alt_errno
000082e8 g     F .text	000000b8 _fwalk
00018150 g     O .bss	00000004 Done_Bit
0000fd8c g     F .text	00000048 alt_up_irda_write_data
000106a8 g     F .text	00000040 alt_up_ps2_open_dev
00013148 g     F .text	00000104 putc
000033e8 g     F .text	00000060 __divsi3
00013e5c g     O .rodata	00000014 __thenan_df
0000f440 g     F .text	00000040 alt_up_character_lcd_open_dev
00007944 g     F .text	0000012c _malloc_trim_r
000101e0 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
000137cc g       *ABS*	00000000 __CTOR_END__
0000f40c g     F .text	00000034 alt_up_character_lcd_init
0000a710 g     F .text	000000bc strcmp
000137cc g       *ABS*	00000000 __flash_rodata_start
000137cc g       *ABS*	00000000 __DTOR_LIST__
00010a40 g     F .text	00000040 alt_up_rs232_open_dev
00018178 g     O .bss	00000004 count
0000c408 g     F .text	00000088 __nedf2
0000dac4 g     F .text	00000034 alt_irq_init
0000d828 g     F .text	00000060 alt_release_fd
000100b4 g     F .text	00000034 read_data_valid
0000f824 g     F .text	00000034 alt_up_character_lcd_cursor_off
00013b64 g     O .rodata	00000100 __clz_tab
000181d0 g     O .bss	00000004 _PathLocale
00010374 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00013088 g     F .text	00000014 atexit
000181b8 g     O .bss	00000004 Temp_Sign
0000a840 g     F .text	00000078 _write_r
00008448 g     F .text	0000001c setlocale
00002a50 g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	00000148 PS2_ISR
00016074 g     O .rwdata	00000004 _impure_ptr
0001817c g     O .bss	00000004 buf_index_play
000181e8 g     O .bss	00000004 alt_argc
000181f4 g     O .bss	00000004 altera_avalon_timer_ts_base
000125d8 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000090b8 g     F .text	00000080 __ulp
0000a4e4 g     F .text	00000040 __isinfd
000077a0 g     F .text	00000018 __fp_unlock_all
0001608c g     O .rwdata	00000008 alt_fs_list
000106e8 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000eea8 g     F .text	00000070 alt_up_audio_record_l
00018190 g     O .bss	00000004 anita0
00010860 g     F .text	00000048 alt_up_rs232_write_data
0000fa5c g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
000083b4 g     F .text	00000010 localeconv
0000ea8c g     F .text	0000009c alt_timestamp
00001e90 g     F .text	0000030c HEXxy_PS2
000160b4 g       *ABS*	00000000 _edata
007b9934 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000e490 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000006a4 g     F .text	00000438 audio_ISR
005d0fcc g     O .bss	001e8480 l_buf
0000effc g     F .text	00000070 alt_up_audio_play_l
00018180 g     O .bss	00000001 local_b3
0000a634 g     F .text	0000007c __swrite
00016084 g     O .rwdata	00000004 __malloc_trim_threshold
00012cd4 g     F .text	00000020 altera_nios2_qsys_irq_init
0001309c g     F .text	00000038 exit
0000fdd4 g     F .text	00000074 alt_up_irda_read_data
00008220 g     F .text	000000c8 _fwalk_reent
00003274 g     F .text	000000c0 __floatunsisf
00010114 g     F .text	000000cc alt_up_ps2_init
000096b4 g     F .text	0000018c __mdiff
00003448 g     F .text	00000060 __modsi3
000181bc g     O .bss	00000004 LeftBtn
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000076e0 g     F .text	00000004 __sfp_lock_release
0000f4f8 g     F .text	00000078 alt_up_character_lcd_string
00002890 g     F .text	0000004c Do_Hardware_Calculate
0000ff68 g     F .text	00000040 alt_up_irda_open_dev
00018144 g     O .bss	00000004 Base_Data
0000064c g     F .text	00000058 amplitude_circute_get_size
00018194 g     O .bss	00000004 anita1
000137a8 g     F .text	00000020 _exit
0000a524 g     F .text	00000030 __isnand
000122f0 g     F .text	00000154 alt_alarm_start
00002340 g     F .text	0000018c Plot_AudioRecord
00002b08 g     F .text	00000098 __muldi3
00008464 g     F .text	00000194 __smakebuf_r
00010304 g     F .text	00000070 alt_up_ps2_wait_for_ack
0000a7cc g     F .text	00000074 strlen
0000f99c g     F .text	00000040 alt_up_ethernet_open_dev
00012918 g     F .text	00000188 open
0000c518 g     F .text	00000088 __gedf2
0000d668 g     F .text	00000040 alt_putchar
00018184 g     O .bss	00000004 buf_index_record
000126d0 g     F .text	00000030 alt_icache_flush_all
0000fb3c g     F .text	000000d8 alt_up_ethernet_phy_reg_write
0000f5bc g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
000160a4 g     O .rwdata	00000004 alt_priority_mask
00005b28 g     F .text	00000024 __vfprintf_internal
00010564 g     F .text	0000009c alt_up_ps2_read_fd
00000580 g     F .text	0000005c amplitude_circute_start
0000bc70 g     F .text	00000080 __subdf3
0000fe48 g     F .text	00000090 alt_up_irda_read_fd
00008f94 g     F .text	000000c4 __lo0bits
000160ac g     O .rwdata	00000008 alt_alarm_list
00012574 g     F .text	00000064 _do_ctors
00010794 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
000181c0 g     O .bss	00000004 YoverFlow
0000cb8c g     F .text	000000fc close
00018188 g     O .bss	00000004 Click_Echo
000181c4 g     O .bss	00000004 Ysign
0000d128 g     F .text	00000080 alt_load
0000f9dc g     F .text	0000003c alt_up_ethernet_reg_read
0000eb90 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00003760 g     F .text	00000314 __pack_d
00000550 g     F .text	00000030 amplitude_circute_set_dest_addr
00000000  w      *UND*	00000000 free
000076e4 g     F .text	00000004 __sinit_lock_acquire
00009bb0 g     F .text	00000100 __multadd
00008efc g     F .text	00000028 _Bfree
0000ecc8 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c01f34 	movhi	r3,124
 134:	18e5a904 	addi	r3,r3,-26972
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c01f34 	movhi	r3,124
 14c:	18e5a904 	addi	r3,r3,-26972
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6b81d14 	ori	gp,gp,57460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10a05114 	ori	r2,r2,33092

    movhi r3, %hi(__bss_end)
     1d0:	00c01ef4 	movhi	r3,123
    ori r3, r3, %lo(__bss_end)
     1d4:	18e64d14 	ori	r3,r3,39220

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000d1280 	call	d128 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000d3640 	call	d364 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/

void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)

	unsigned char PS2_data;


	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000317 	ldw	r4,12(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	00104900 	call	10490 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000411e 	bne	r2,zero,328 <PS2_ISR+0x134>
	{
		count++;
     224:	008000b4 	movhi	r2,2
     228:	10a05e04 	addi	r2,r2,-32392
     22c:	10800017 	ldw	r2,0(r2)
     230:	10c00044 	addi	r3,r2,1
     234:	008000b4 	movhi	r2,2
     238:	10a05e04 	addi	r2,r2,-32392
     23c:	10c00015 	stw	r3,0(r2)
		local_b1 = local_b2;
     240:	008000b4 	movhi	r2,2
     244:	10a05744 	addi	r2,r2,-32419
     248:	10c00003 	ldbu	r3,0(r2)
     24c:	008000b4 	movhi	r2,2
     250:	10a05784 	addi	r2,r2,-32418
     254:	10c00005 	stb	r3,0(r2)
		local_b2 = local_b3;
     258:	008000b4 	movhi	r2,2
     25c:	10a06004 	addi	r2,r2,-32384
     260:	10c00003 	ldbu	r3,0(r2)
     264:	008000b4 	movhi	r2,2
     268:	10a05744 	addi	r2,r2,-32419
     26c:	10c00005 	stb	r3,0(r2)
		local_b3 = PS2_data;
     270:	e0fffd03 	ldbu	r3,-12(fp)
     274:	008000b4 	movhi	r2,2
     278:	10a06004 	addi	r2,r2,-32384
     27c:	10c00005 	stb	r3,0(r2)
		if(count == 3){
     280:	008000b4 	movhi	r2,2
     284:	10a05e04 	addi	r2,r2,-32392
     288:	10800017 	ldw	r2,0(r2)
     28c:	108000d8 	cmpnei	r2,r2,3
     290:	1000151e 	bne	r2,zero,2e8 <PS2_ISR+0xf4>
			byte1 = local_b1;
     294:	008000b4 	movhi	r2,2
     298:	10a05784 	addi	r2,r2,-32418
     29c:	10c00003 	ldbu	r3,0(r2)
     2a0:	008000b4 	movhi	r2,2
     2a4:	10a05704 	addi	r2,r2,-32420
     2a8:	10c00005 	stb	r3,0(r2)
			byte2 = local_b2;
     2ac:	008000b4 	movhi	r2,2
     2b0:	10a05744 	addi	r2,r2,-32419
     2b4:	10c00003 	ldbu	r3,0(r2)
     2b8:	008000b4 	movhi	r2,2
     2bc:	10a05504 	addi	r2,r2,-32428
     2c0:	10c00005 	stb	r3,0(r2)
			byte3 = local_b3;
     2c4:	008000b4 	movhi	r2,2
     2c8:	10a06004 	addi	r2,r2,-32384
     2cc:	10c00003 	ldbu	r3,0(r2)
     2d0:	008000b4 	movhi	r2,2
     2d4:	10a05544 	addi	r2,r2,-32427
     2d8:	10c00005 	stb	r3,0(r2)
			count = 0;
     2dc:	008000b4 	movhi	r2,2
     2e0:	10a05e04 	addi	r2,r2,-32392
     2e4:	10000015 	stw	zero,0(r2)
		}
		/* allows save the last three bytes of data */
//		byte1 = byte2;
//		byte2 = byte3;
//		byte3 = PS2_data;
		if ( (local_b2 == (unsigned char) 0xAA) && (local_b3 == (unsigned char) 0x00) )
     2e8:	008000b4 	movhi	r2,2
     2ec:	10a05744 	addi	r2,r2,-32419
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	10803fcc 	andi	r2,r2,255
     2f8:	10802a98 	cmpnei	r2,r2,170
     2fc:	10000a1e 	bne	r2,zero,328 <PS2_ISR+0x134>
     300:	008000b4 	movhi	r2,2
     304:	10a06004 	addi	r2,r2,-32384
     308:	10800003 	ldbu	r2,0(r2)
     30c:	10803fcc 	andi	r2,r2,255
     310:	1004c03a 	cmpne	r2,r2,zero
     314:	1000041e 	bne	r2,zero,328 <PS2_ISR+0x134>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte (up_dev->PS2_dev, (unsigned char) 0xF4);
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	11000317 	ldw	r4,12(r2)
     320:	01403d04 	movi	r5,244
     324:	001028c0 	call	1028c <alt_up_ps2_write_data_byte>
	}

	return;
}
     328:	e037883a 	mov	sp,fp
     32c:	dfc00117 	ldw	ra,4(sp)
     330:	df000017 	ldw	fp,0(sp)
     334:	dec00204 	addi	sp,sp,8
     338:	f800283a 	ret

0000033c <amplitude_operation>:
#include "amplitude_calculation.h"

void amplitude_operation(int size, int num, int rbuff_addr, int lbuff_addr, int dest_addr)
{
     33c:	defffa04 	addi	sp,sp,-24
     340:	dfc00515 	stw	ra,20(sp)
     344:	df000415 	stw	fp,16(sp)
     348:	df000404 	addi	fp,sp,16
     34c:	e13ffc15 	stw	r4,-16(fp)
     350:	e17ffd15 	stw	r5,-12(fp)
     354:	e1bffe15 	stw	r6,-8(fp)
     358:	e1ffff15 	stw	r7,-4(fp)
	amplitude_circute_stop();
     35c:	00003b00 	call	3b0 <amplitude_circute_stop>
	amplitude_circute_set_size(size);
     360:	e13ffc17 	ldw	r4,-16(fp)
     364:	00004280 	call	428 <amplitude_circute_set_size>
	amplitude_circute_get_size();
     368:	000064c0 	call	64c <amplitude_circute_get_size>
	amplitude_circute_set_num(num);
     36c:	e13ffd17 	ldw	r4,-12(fp)
     370:	00004980 	call	498 <amplitude_circute_set_num>
	// also for your debugging make int amplitude_circute_get_num(); (optional)
	amplitude_circute_set_rbuff_addr(rbuff_addr);
     374:	e13ffe17 	ldw	r4,-8(fp)
     378:	00004f00 	call	4f0 <amplitude_circute_set_rbuff_addr>
	// also for your debugging make int amplitude_circute_get_lbuff_addr(); (optional)
	amplitude_circute_set_lbuff_addr(lbuff_addr);
     37c:	e13fff17 	ldw	r4,-4(fp)
     380:	00005200 	call	520 <amplitude_circute_set_lbuff_addr>
	// also for your debugging make int amplitude_circute_get_rbuff_addr(); (optional)
	amplitude_circute_set_dest_addr(dest_addr);
     384:	e1000217 	ldw	r4,8(fp)
     388:	00005500 	call	550 <amplitude_circute_set_dest_addr>
	// also for your debugging make int amplitude_circute_get_dest_addr(); (optional)
	amplitude_circute_start();
     38c:	00005800 	call	580 <amplitude_circute_start>
	while(amplitude_circute_get_status() == 0);
     390:	00005dc0 	call	5dc <amplitude_circute_get_status>
     394:	1005003a 	cmpeq	r2,r2,zero
     398:	103ffd1e 	bne	r2,zero,390 <amplitude_operation+0x54>
	return;
}
     39c:	e037883a 	mov	sp,fp
     3a0:	dfc00117 	ldw	ra,4(sp)
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00204 	addi	sp,sp,8
     3ac:	f800283a 	ret

000003b0 <amplitude_circute_stop>:
int Base_Data = 0;
int Read_Data;
int Read_Reg0;
int Done_Bit;

void amplitude_circute_stop(){
     3b0:	deffff04 	addi	sp,sp,-4
     3b4:	df000015 	stw	fp,0(sp)
     3b8:	d839883a 	mov	fp,sp
	Read_Reg0 = IORD_32DIRECT(0x10004000,0);
     3bc:	00840034 	movhi	r2,4096
     3c0:	10900004 	addi	r2,r2,16384
     3c4:	10800037 	ldwio	r2,0(r2)
     3c8:	d0a83615 	stw	r2,-24360(gp)
	Done_Bit = Read_Reg0 >> 31;
     3cc:	d0a83617 	ldw	r2,-24360(gp)
     3d0:	1005d7fa 	srai	r2,r2,31
     3d4:	d0a83715 	stw	r2,-24356(gp)
	if(Done_Bit == 1){
     3d8:	d0a83717 	ldw	r2,-24356(gp)
     3dc:	10800058 	cmpnei	r2,r2,1
     3e0:	1000061e 	bne	r2,zero,3fc <amplitude_circute_stop+0x4c>
		IOWR_32DIRECT(0x10004000,0,Base_Data | 1 << 31);
     3e4:	d0a83417 	ldw	r2,-24368(gp)
     3e8:	10e00034 	orhi	r3,r2,32768
     3ec:	00840034 	movhi	r2,4096
     3f0:	10900004 	addi	r2,r2,16384
     3f4:	10c00035 	stwio	r3,0(r2)
     3f8:	00000706 	br	418 <amplitude_circute_stop+0x68>
	}
	else if (Done_Bit == 0){
     3fc:	d0a83717 	ldw	r2,-24356(gp)
     400:	1004c03a 	cmpne	r2,r2,zero
     404:	1000041e 	bne	r2,zero,418 <amplitude_circute_stop+0x68>
		IOWR_32DIRECT(0x10004000,0,Base_Data);
     408:	d0e83417 	ldw	r3,-24368(gp)
     40c:	00840034 	movhi	r2,4096
     410:	10900004 	addi	r2,r2,16384
     414:	10c00035 	stwio	r3,0(r2)
	}
}
     418:	e037883a 	mov	sp,fp
     41c:	df000017 	ldw	fp,0(sp)
     420:	dec00104 	addi	sp,sp,4
     424:	f800283a 	ret

00000428 <amplitude_circute_set_size>:

void amplitude_circute_set_size(int size){
     428:	defffd04 	addi	sp,sp,-12
     42c:	df000215 	stw	fp,8(sp)
     430:	df000204 	addi	fp,sp,8
     434:	e13fff15 	stw	r4,-4(fp)
	Base_Data = size;
     438:	e0bfff17 	ldw	r2,-4(fp)
     43c:	d0a83415 	stw	r2,-24368(gp)
	Read_Reg0 = IORD_32DIRECT(0x10004000,0);
     440:	00840034 	movhi	r2,4096
     444:	10900004 	addi	r2,r2,16384
     448:	10800037 	ldwio	r2,0(r2)
     44c:	d0a83615 	stw	r2,-24360(gp)
	Read_Reg0 = Read_Reg0 & 0x80000FFF;
     450:	d0e83617 	ldw	r3,-24360(gp)
     454:	00a00034 	movhi	r2,32768
     458:	1083ffc4 	addi	r2,r2,4095
     45c:	1884703a 	and	r2,r3,r2
     460:	d0a83615 	stw	r2,-24360(gp)
	int Data = Read_Reg0 | (Base_Data << 12);
     464:	d0a83417 	ldw	r2,-24368(gp)
     468:	1006933a 	slli	r3,r2,12
     46c:	d0a83617 	ldw	r2,-24360(gp)
     470:	1884b03a 	or	r2,r3,r2
     474:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(0x10004000,0,Data);
     478:	00c40034 	movhi	r3,4096
     47c:	18d00004 	addi	r3,r3,16384
     480:	e0bffe17 	ldw	r2,-8(fp)
     484:	18800035 	stwio	r2,0(r3)
}
     488:	e037883a 	mov	sp,fp
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00104 	addi	sp,sp,4
     494:	f800283a 	ret

00000498 <amplitude_circute_set_num>:

void amplitude_circute_set_num(int num){
     498:	defffe04 	addi	sp,sp,-8
     49c:	df000115 	stw	fp,4(sp)
     4a0:	df000104 	addi	fp,sp,4
     4a4:	e13fff15 	stw	r4,-4(fp)
	Base_Data = num;
     4a8:	e0bfff17 	ldw	r2,-4(fp)
     4ac:	d0a83415 	stw	r2,-24368(gp)
	Read_Reg0 = IORD_32DIRECT(0x10004000,0);
     4b0:	00840034 	movhi	r2,4096
     4b4:	10900004 	addi	r2,r2,16384
     4b8:	10800037 	ldwio	r2,0(r2)
     4bc:	d0a83615 	stw	r2,-24360(gp)
	IOWR_32DIRECT(0x10004000,0,Read_Reg0 | (Base_Data << 1));
     4c0:	d0a83417 	ldw	r2,-24368(gp)
     4c4:	1085883a 	add	r2,r2,r2
     4c8:	1007883a 	mov	r3,r2
     4cc:	d0a83617 	ldw	r2,-24360(gp)
     4d0:	1886b03a 	or	r3,r3,r2
     4d4:	00840034 	movhi	r2,4096
     4d8:	10900004 	addi	r2,r2,16384
     4dc:	10c00035 	stwio	r3,0(r2)
}
     4e0:	e037883a 	mov	sp,fp
     4e4:	df000017 	ldw	fp,0(sp)
     4e8:	dec00104 	addi	sp,sp,4
     4ec:	f800283a 	ret

000004f0 <amplitude_circute_set_rbuff_addr>:

void amplitude_circute_set_rbuff_addr(int Right_Address){
     4f0:	defffe04 	addi	sp,sp,-8
     4f4:	df000115 	stw	fp,4(sp)
     4f8:	df000104 	addi	fp,sp,4
     4fc:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(0x10004000,4, Right_Address);
     500:	00c40034 	movhi	r3,4096
     504:	18d00104 	addi	r3,r3,16388
     508:	e0bfff17 	ldw	r2,-4(fp)
     50c:	18800035 	stwio	r2,0(r3)
}
     510:	e037883a 	mov	sp,fp
     514:	df000017 	ldw	fp,0(sp)
     518:	dec00104 	addi	sp,sp,4
     51c:	f800283a 	ret

00000520 <amplitude_circute_set_lbuff_addr>:

void amplitude_circute_set_lbuff_addr(int Left_Address){
     520:	defffe04 	addi	sp,sp,-8
     524:	df000115 	stw	fp,4(sp)
     528:	df000104 	addi	fp,sp,4
     52c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(0x10004000,8, Left_Address);
     530:	00c40034 	movhi	r3,4096
     534:	18d00204 	addi	r3,r3,16392
     538:	e0bfff17 	ldw	r2,-4(fp)
     53c:	18800035 	stwio	r2,0(r3)
}
     540:	e037883a 	mov	sp,fp
     544:	df000017 	ldw	fp,0(sp)
     548:	dec00104 	addi	sp,sp,4
     54c:	f800283a 	ret

00000550 <amplitude_circute_set_dest_addr>:

void amplitude_circute_set_dest_addr(int Dest_Address){
     550:	defffe04 	addi	sp,sp,-8
     554:	df000115 	stw	fp,4(sp)
     558:	df000104 	addi	fp,sp,4
     55c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(0x10004000,12, Dest_Address);
     560:	00c40034 	movhi	r3,4096
     564:	18d00304 	addi	r3,r3,16396
     568:	e0bfff17 	ldw	r2,-4(fp)
     56c:	18800035 	stwio	r2,0(r3)
}
     570:	e037883a 	mov	sp,fp
     574:	df000017 	ldw	fp,0(sp)
     578:	dec00104 	addi	sp,sp,4
     57c:	f800283a 	ret

00000580 <amplitude_circute_start>:

void amplitude_circute_start(){
     580:	deffff04 	addi	sp,sp,-4
     584:	df000015 	stw	fp,0(sp)
     588:	d839883a 	mov	fp,sp
	Read_Reg0 = IORD_32DIRECT(0x10004000,0);
     58c:	00840034 	movhi	r2,4096
     590:	10900004 	addi	r2,r2,16384
     594:	10800037 	ldwio	r2,0(r2)
     598:	d0a83615 	stw	r2,-24360(gp)
	Base_Data = 1;
     59c:	00800044 	movi	r2,1
     5a0:	d0a83415 	stw	r2,-24368(gp)
	Read_Reg0 = Read_Reg0 & 0xFFFFFFFE;
     5a4:	d0e83617 	ldw	r3,-24360(gp)
     5a8:	00bfff84 	movi	r2,-2
     5ac:	1884703a 	and	r2,r3,r2
     5b0:	d0a83615 	stw	r2,-24360(gp)
	IOWR_32DIRECT(0x10004000,0,Read_Reg0 | Base_Data);
     5b4:	d0e83617 	ldw	r3,-24360(gp)
     5b8:	d0a83417 	ldw	r2,-24368(gp)
     5bc:	1886b03a 	or	r3,r3,r2
     5c0:	00840034 	movhi	r2,4096
     5c4:	10900004 	addi	r2,r2,16384
     5c8:	10c00035 	stwio	r3,0(r2)
}
     5cc:	e037883a 	mov	sp,fp
     5d0:	df000017 	ldw	fp,0(sp)
     5d4:	dec00104 	addi	sp,sp,4
     5d8:	f800283a 	ret

000005dc <amplitude_circute_get_status>:

int amplitude_circute_get_status(){
     5dc:	defffe04 	addi	sp,sp,-8
     5e0:	df000115 	stw	fp,4(sp)
     5e4:	df000104 	addi	fp,sp,4
	Read_Reg0 = IORD_32DIRECT(0x10004000,0);
     5e8:	00840034 	movhi	r2,4096
     5ec:	10900004 	addi	r2,r2,16384
     5f0:	10800037 	ldwio	r2,0(r2)
     5f4:	d0a83615 	stw	r2,-24360(gp)
	Done_Bit = Read_Reg0 >> 31;
     5f8:	d0a83617 	ldw	r2,-24360(gp)
     5fc:	1005d7fa 	srai	r2,r2,31
     600:	d0a83715 	stw	r2,-24356(gp)
	if(Done_Bit == 1){
     604:	d0a83717 	ldw	r2,-24356(gp)
     608:	10800058 	cmpnei	r2,r2,1
     60c:	1000021e 	bne	r2,zero,618 <amplitude_circute_get_status+0x3c>
		return 0;
     610:	e03fff15 	stw	zero,-4(fp)
     614:	00000806 	br	638 <amplitude_circute_get_status+0x5c>
	}
	if(Done_Bit == 0){
     618:	d0a83717 	ldw	r2,-24356(gp)
     61c:	1004c03a 	cmpne	r2,r2,zero
     620:	1000031e 	bne	r2,zero,630 <amplitude_circute_get_status+0x54>
		return 1;
     624:	00800044 	movi	r2,1
     628:	e0bfff15 	stw	r2,-4(fp)
     62c:	00000206 	br	638 <amplitude_circute_get_status+0x5c>
	}
	return 2;
     630:	00800084 	movi	r2,2
     634:	e0bfff15 	stw	r2,-4(fp)
     638:	e0bfff17 	ldw	r2,-4(fp)
}
     63c:	e037883a 	mov	sp,fp
     640:	df000017 	ldw	fp,0(sp)
     644:	dec00104 	addi	sp,sp,4
     648:	f800283a 	ret

0000064c <amplitude_circute_get_size>:


//Debug Functions
int amplitude_circute_get_size(){
     64c:	defffd04 	addi	sp,sp,-12
     650:	df000215 	stw	fp,8(sp)
     654:	df000204 	addi	fp,sp,8
	int Anita;
	Base_Data = Size;
     658:	00904684 	movi	r2,16666
     65c:	d0a83415 	stw	r2,-24368(gp)
	Anita = IORD_32DIRECT(0x10004000,0);
     660:	00840034 	movhi	r2,4096
     664:	10900004 	addi	r2,r2,16384
     668:	10800037 	ldwio	r2,0(r2)
     66c:	e0bfff15 	stw	r2,-4(fp)
	int Size_Test = Anita & Base_Data << 12;
     670:	d0a83417 	ldw	r2,-24368(gp)
     674:	1006933a 	slli	r3,r2,12
     678:	e0bfff17 	ldw	r2,-4(fp)
     67c:	1884703a 	and	r2,r3,r2
     680:	e0bffe15 	stw	r2,-8(fp)
	Size_Test = Size_Test >> 12;
     684:	e0bffe17 	ldw	r2,-8(fp)
     688:	1005d33a 	srai	r2,r2,12
     68c:	e0bffe15 	stw	r2,-8(fp)
	return Size_Test;
     690:	e0bffe17 	ldw	r2,-8(fp)
}
     694:	e037883a 	mov	sp,fp
     698:	df000017 	ldw	fp,0(sp)
     69c:	dec00104 	addi	sp,sp,4
     6a0:	f800283a 	ret

000006a4 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     6a4:	defff904 	addi	sp,sp,-28
     6a8:	dfc00615 	stw	ra,24(sp)
     6ac:	df000515 	stw	fp,20(sp)
     6b0:	df000504 	addi	fp,sp,20
     6b4:	e13ffe15 	stw	r4,-8(fp)
     6b8:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	11000517 	ldw	r4,20(r2)
     6c4:	000ecc80 	call	ecc8 <alt_up_audio_read_interrupt_pending>
     6c8:	1005003a 	cmpeq	r2,r2,zero
     6cc:	10004a1e 	bne	r2,zero,7f8 <audio_ISR+0x154>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     6d0:	e0bffe17 	ldw	r2,-8(fp)
     6d4:	10800117 	ldw	r2,4(r2)
     6d8:	10800a17 	ldw	r2,40(r2)
     6dc:	1007883a 	mov	r3,r2
     6e0:	00800044 	movi	r2,1
     6e4:	18800035 	stwio	r2,0(r3)
		Echo_End = 0;
     6e8:	008000b4 	movhi	r2,2
     6ec:	10a05804 	addi	r2,r2,-32416
     6f0:	10000015 	stw	zero,0(r2)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     6f4:	008000b4 	movhi	r2,2
     6f8:	10a06104 	addi	r2,r2,-32380
     6fc:	10c00017 	ldw	r3,0(r2)
     700:	00800234 	movhi	r2,8
     704:	10a847c4 	addi	r2,r2,-24289
     708:	10c03b16 	blt	r2,r3,7f8 <audio_ISR+0x154>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     70c:	e0bffe17 	ldw	r2,-8(fp)
     710:	11000517 	ldw	r4,20(r2)
     714:	008000b4 	movhi	r2,2
     718:	10a06104 	addi	r2,r2,-32380
     71c:	10800017 	ldw	r2,0(r2)
     720:	1085883a 	add	r2,r2,r2
     724:	1085883a 	add	r2,r2,r2
     728:	1007883a 	mov	r3,r2
     72c:	00800834 	movhi	r2,32
     730:	1081b304 	addi	r2,r2,1740
     734:	1885883a 	add	r2,r3,r2
     738:	100b883a 	mov	r5,r2
     73c:	008000b4 	movhi	r2,2
     740:	10a06104 	addi	r2,r2,-32380
     744:	10c00017 	ldw	r3,0(r2)
     748:	00800234 	movhi	r2,8
     74c:	10a84804 	addi	r2,r2,-24288
     750:	10cdc83a 	sub	r6,r2,r3
     754:	000ee380 	call	ee38 <alt_up_audio_record_r>
     758:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
//			Temp_r_buf[buf_index_record] = r_buf[buf_index_record];
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     75c:	e0bffe17 	ldw	r2,-8(fp)
     760:	11000517 	ldw	r4,20(r2)
     764:	008000b4 	movhi	r2,2
     768:	10a06104 	addi	r2,r2,-32380
     76c:	10800017 	ldw	r2,0(r2)
     770:	1085883a 	add	r2,r2,r2
     774:	1085883a 	add	r2,r2,r2
     778:	1007883a 	mov	r3,r2
     77c:	00801774 	movhi	r2,93
     780:	1083f304 	addi	r2,r2,4044
     784:	1885883a 	add	r2,r3,r2
     788:	100b883a 	mov	r5,r2
     78c:	e1bffd17 	ldw	r6,-12(fp)
     790:	000eea80 	call	eea8 <alt_up_audio_record_l>
				num_read);
//			Temp_l_buf[buf_index_record] = l_buf[buf_index_record];
			buf_index_record += num_read;
     794:	008000b4 	movhi	r2,2
     798:	10a06104 	addi	r2,r2,-32380
     79c:	10c00017 	ldw	r3,0(r2)
     7a0:	e0bffd17 	ldw	r2,-12(fp)
     7a4:	1887883a 	add	r3,r3,r2
     7a8:	008000b4 	movhi	r2,2
     7ac:	10a06104 	addi	r2,r2,-32380
     7b0:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     7b4:	008000b4 	movhi	r2,2
     7b8:	10a06104 	addi	r2,r2,-32380
     7bc:	10c00017 	ldw	r3,0(r2)
     7c0:	00800234 	movhi	r2,8
     7c4:	10a84804 	addi	r2,r2,-24288
     7c8:	18800b1e 	bne	r3,r2,7f8 <audio_ISR+0x154>
			{
				// done recording
				End_Record = 1;
     7cc:	00c000b4 	movhi	r3,2
     7d0:	18e05c04 	addi	r3,r3,-32400
     7d4:	00800044 	movi	r2,1
     7d8:	18800015 	stw	r2,0(r3)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     7dc:	e0bffe17 	ldw	r2,-8(fp)
     7e0:	10800117 	ldw	r2,4(r2)
     7e4:	10800a17 	ldw	r2,40(r2)
     7e8:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     7ec:	e0bffe17 	ldw	r2,-8(fp)
     7f0:	11000517 	ldw	r4,20(r2)
     7f4:	000ebdc0 	call	ebdc <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     7f8:	e0bffe17 	ldw	r2,-8(fp)
     7fc:	11000517 	ldw	r4,20(r2)
     800:	000ed040 	call	ed04 <alt_up_audio_write_interrupt_pending>
     804:	1005003a 	cmpeq	r2,r2,zero
     808:	1000af1e 	bne	r2,zero,ac8 <audio_ISR+0x424>
	{

		// output data until the buffer is empty //Echo
		if (buf_index_play < BUF_SIZE && Echo_complete == 1 && Click_Echo == 1)
     80c:	008000b4 	movhi	r2,2
     810:	10a05f04 	addi	r2,r2,-32388
     814:	10c00017 	ldw	r3,0(r2)
     818:	00800234 	movhi	r2,8
     81c:	10a847c4 	addi	r2,r2,-24289
     820:	10c04816 	blt	r2,r3,944 <audio_ISR+0x2a0>
     824:	008000b4 	movhi	r2,2
     828:	10a05904 	addi	r2,r2,-32412
     82c:	10800017 	ldw	r2,0(r2)
     830:	10800058 	cmpnei	r2,r2,1
     834:	1000431e 	bne	r2,zero,944 <audio_ISR+0x2a0>
     838:	008000b4 	movhi	r2,2
     83c:	10a06204 	addi	r2,r2,-32376
     840:	10800017 	ldw	r2,0(r2)
     844:	10800058 	cmpnei	r2,r2,1
     848:	10003e1e 	bne	r2,zero,944 <audio_ISR+0x2a0>
		{
			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x4); // set LEDG[1] on
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	10800117 	ldw	r2,4(r2)
     854:	10800a17 	ldw	r2,40(r2)
     858:	1007883a 	mov	r3,r2
     85c:	00800104 	movi	r2,4
     860:	18800035 	stwio	r2,0(r3)
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(Echo_buf_r[buf_index_play]),
     864:	e0bffe17 	ldw	r2,-8(fp)
     868:	11000517 	ldw	r4,20(r2)
     86c:	008000b4 	movhi	r2,2
     870:	10a05f04 	addi	r2,r2,-32388
     874:	10800017 	ldw	r2,0(r2)
     878:	1085883a 	add	r2,r2,r2
     87c:	1085883a 	add	r2,r2,r2
     880:	1007883a 	mov	r3,r2
     884:	00800ff4 	movhi	r2,63
     888:	10a2d304 	addi	r2,r2,-29876
     88c:	1885883a 	add	r2,r3,r2
     890:	100b883a 	mov	r5,r2
     894:	008000b4 	movhi	r2,2
     898:	10a05f04 	addi	r2,r2,-32388
     89c:	10c00017 	ldw	r3,0(r2)
     8a0:	00800234 	movhi	r2,8
     8a4:	10a84804 	addi	r2,r2,-24288
     8a8:	10cdc83a 	sub	r6,r2,r3
     8ac:	000ef8c0 	call	ef8c <alt_up_audio_play_r>
     8b0:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(Echo_buf_l[buf_index_play]),
     8b4:	e0bffe17 	ldw	r2,-8(fp)
     8b8:	11000517 	ldw	r4,20(r2)
     8bc:	008000b4 	movhi	r2,2
     8c0:	10a05f04 	addi	r2,r2,-32388
     8c4:	10800017 	ldw	r2,0(r2)
     8c8:	1085883a 	add	r2,r2,r2
     8cc:	1085883a 	add	r2,r2,r2
     8d0:	1007883a 	mov	r3,r2
     8d4:	008000b4 	movhi	r2,2
     8d8:	10a09304 	addi	r2,r2,-32180
     8dc:	1885883a 	add	r2,r3,r2
     8e0:	100b883a 	mov	r5,r2
     8e4:	e1bffc17 	ldw	r6,-16(fp)
     8e8:	000effc0 	call	effc <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     8ec:	008000b4 	movhi	r2,2
     8f0:	10a05f04 	addi	r2,r2,-32388
     8f4:	10c00017 	ldw	r3,0(r2)
     8f8:	e0bffc17 	ldw	r2,-16(fp)
     8fc:	1887883a 	add	r3,r3,r2
     900:	008000b4 	movhi	r2,2
     904:	10a05f04 	addi	r2,r2,-32388
     908:	10c00015 	stw	r3,0(r2)

				if (buf_index_play >= BUF_SIZE)
     90c:	008000b4 	movhi	r2,2
     910:	10a05f04 	addi	r2,r2,-32388
     914:	10c00017 	ldw	r3,0(r2)
     918:	00800234 	movhi	r2,8
     91c:	10a847c4 	addi	r2,r2,-24289
     920:	10c0690e 	bge	r2,r3,ac8 <audio_ISR+0x424>
				{
					// done playback
					alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     924:	e0bffe17 	ldw	r2,-8(fp)
     928:	10800117 	ldw	r2,4(r2)
     92c:	10800a17 	ldw	r2,40(r2)
     930:	10000035 	stwio	zero,0(r2)
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     934:	e0bffe17 	ldw	r2,-8(fp)
     938:	11000517 	ldw	r4,20(r2)
     93c:	000ec780 	call	ec78 <alt_up_audio_disable_write_interrupt>
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
	{

		// output data until the buffer is empty //Echo
		if (buf_index_play < BUF_SIZE && Echo_complete == 1 && Click_Echo == 1)
     940:	00006106 	br	ac8 <audio_ISR+0x424>
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
				}
		}

		// output data until the buffer is empty //Play
		else if (buf_index_play < BUF_SIZE && Click_Echo == 0)
     944:	008000b4 	movhi	r2,2
     948:	10a05f04 	addi	r2,r2,-32388
     94c:	10c00017 	ldw	r3,0(r2)
     950:	00800234 	movhi	r2,8
     954:	10a847c4 	addi	r2,r2,-24289
     958:	10c05216 	blt	r2,r3,aa4 <audio_ISR+0x400>
     95c:	008000b4 	movhi	r2,2
     960:	10a06204 	addi	r2,r2,-32376
     964:	10800017 	ldw	r2,0(r2)
     968:	1004c03a 	cmpne	r2,r2,zero
     96c:	10004d1e 	bne	r2,zero,aa4 <audio_ISR+0x400>
		{

			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[2] on
     970:	e0bffe17 	ldw	r2,-8(fp)
     974:	10800117 	ldw	r2,4(r2)
     978:	10800a17 	ldw	r2,40(r2)
     97c:	1007883a 	mov	r3,r2
     980:	00800084 	movi	r2,2
     984:	18800035 	stwio	r2,0(r3)
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf[buf_index_play]), 
     988:	e0bffe17 	ldw	r2,-8(fp)
     98c:	11000517 	ldw	r4,20(r2)
     990:	008000b4 	movhi	r2,2
     994:	10a05f04 	addi	r2,r2,-32388
     998:	10800017 	ldw	r2,0(r2)
     99c:	1085883a 	add	r2,r2,r2
     9a0:	1085883a 	add	r2,r2,r2
     9a4:	1007883a 	mov	r3,r2
     9a8:	00800834 	movhi	r2,32
     9ac:	1081b304 	addi	r2,r2,1740
     9b0:	1885883a 	add	r2,r3,r2
     9b4:	100b883a 	mov	r5,r2
     9b8:	008000b4 	movhi	r2,2
     9bc:	10a05f04 	addi	r2,r2,-32388
     9c0:	10c00017 	ldw	r3,0(r2)
     9c4:	00800234 	movhi	r2,8
     9c8:	10a84804 	addi	r2,r2,-24288
     9cc:	10cdc83a 	sub	r6,r2,r3
     9d0:	000ef8c0 	call	ef8c <alt_up_audio_play_r>
     9d4:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf[buf_index_play]), 
     9d8:	e0bffe17 	ldw	r2,-8(fp)
     9dc:	11000517 	ldw	r4,20(r2)
     9e0:	008000b4 	movhi	r2,2
     9e4:	10a05f04 	addi	r2,r2,-32388
     9e8:	10800017 	ldw	r2,0(r2)
     9ec:	1085883a 	add	r2,r2,r2
     9f0:	1085883a 	add	r2,r2,r2
     9f4:	1007883a 	mov	r3,r2
     9f8:	00801774 	movhi	r2,93
     9fc:	1083f304 	addi	r2,r2,4044
     a00:	1885883a 	add	r2,r3,r2
     a04:	100b883a 	mov	r5,r2
     a08:	e1bffc17 	ldw	r6,-16(fp)
     a0c:	000effc0 	call	effc <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     a10:	008000b4 	movhi	r2,2
     a14:	10a05f04 	addi	r2,r2,-32388
     a18:	10c00017 	ldw	r3,0(r2)
     a1c:	e0bffc17 	ldw	r2,-16(fp)
     a20:	1887883a 	add	r3,r3,r2
     a24:	008000b4 	movhi	r2,2
     a28:	10a05f04 	addi	r2,r2,-32388
     a2c:	10c00015 	stw	r3,0(r2)

			if(buf_index_play >= ((BUF_SIZE / N)*Play_Index)){
     a30:	008000b4 	movhi	r2,2
     a34:	10a05604 	addi	r2,r2,-32424
     a38:	10800017 	ldw	r2,0(r2)
     a3c:	10d046a4 	muli	r3,r2,16666
     a40:	008000b4 	movhi	r2,2
     a44:	10a05f04 	addi	r2,r2,-32388
     a48:	10800017 	ldw	r2,0(r2)
     a4c:	10c00416 	blt	r2,r3,a60 <audio_ISR+0x3bc>
				Play_Flag = 1;
     a50:	00c000b4 	movhi	r3,2
     a54:	18e05a04 	addi	r3,r3,-32408
     a58:	00800044 	movi	r2,1
     a5c:	18800015 	stw	r2,0(r3)
			}
	
			if (buf_index_play >= BUF_SIZE)
     a60:	008000b4 	movhi	r2,2
     a64:	10a05f04 	addi	r2,r2,-32388
     a68:	10c00017 	ldw	r3,0(r2)
     a6c:	00800234 	movhi	r2,8
     a70:	10a847c4 	addi	r2,r2,-24289
     a74:	10c0140e 	bge	r2,r3,ac8 <audio_ISR+0x424>
			{
				// done playback
				Play_Index = 0;
     a78:	008000b4 	movhi	r2,2
     a7c:	10a05604 	addi	r2,r2,-32424
     a80:	10000015 	stw	zero,0(r2)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     a84:	e0bffe17 	ldw	r2,-8(fp)
     a88:	10800117 	ldw	r2,4(r2)
     a8c:	10800a17 	ldw	r2,40(r2)
     a90:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     a94:	e0bffe17 	ldw	r2,-8(fp)
     a98:	11000517 	ldw	r4,20(r2)
     a9c:	000ec780 	call	ec78 <alt_up_audio_disable_write_interrupt>
					alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
				}
		}

		// output data until the buffer is empty //Play
		else if (buf_index_play < BUF_SIZE && Click_Echo == 0)
     aa0:	00000906 	br	ac8 <audio_ISR+0x424>
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
			}
		}
		else {
			alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x80); //  LEDG
     aa4:	e0bffe17 	ldw	r2,-8(fp)
     aa8:	10800117 	ldw	r2,4(r2)
     aac:	10800a17 	ldw	r2,40(r2)
     ab0:	1007883a 	mov	r3,r2
     ab4:	00802004 	movi	r2,128
     ab8:	18800035 	stwio	r2,0(r3)
			alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     abc:	e0bffe17 	ldw	r2,-8(fp)
     ac0:	11000517 	ldw	r4,20(r2)
     ac4:	000ec780 	call	ec78 <alt_up_audio_disable_write_interrupt>
		}

	}
	return;
}
     ac8:	e037883a 	mov	sp,fp
     acc:	dfc00117 	ldw	ra,4(sp)
     ad0:	df000017 	ldw	fp,0(sp)
     ad4:	dec00204 	addi	sp,sp,8
     ad8:	f800283a 	ret

00000adc <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     adc:	defffb04 	addi	sp,sp,-20
     ae0:	dfc00415 	stw	ra,16(sp)
     ae4:	df000315 	stw	fp,12(sp)
     ae8:	df000304 	addi	fp,sp,12
     aec:	e13ffe15 	stw	r4,-8(fp)
     af0:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     af4:	00840034 	movhi	r2,4096
     af8:	10880004 	addi	r2,r2,8192
     afc:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     b00:	e0bffd17 	ldw	r2,-12(fp)
     b04:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     b08:	00c000b4 	movhi	r3,2
     b0c:	18e05d04 	addi	r3,r3,-32396
     b10:	00800044 	movi	r2,1
     b14:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     b18:	e0bffe17 	ldw	r2,-8(fp)
     b1c:	11000417 	ldw	r4,16(r2)
     b20:	017fffc4 	movi	r5,-1
     b24:	000f6e40 	call	f6e4 <alt_up_character_lcd_shift_display>

	return;
}
     b28:	e037883a 	mov	sp,fp
     b2c:	dfc00117 	ldw	ra,4(sp)
     b30:	df000017 	ldw	fp,0(sp)
     b34:	dec00204 	addi	sp,sp,8
     b38:	f800283a 	ret

00000b3c <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     b3c:	deffb404 	addi	sp,sp,-304
     b40:	dfc04b15 	stw	ra,300(sp)
     b44:	df004a15 	stw	fp,296(sp)
     b48:	dc004915 	stw	r16,292(sp)
     b4c:	df004904 	addi	fp,sp,292
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     b50:	00840034 	movhi	r2,4096
     b54:	10880004 	addi	r2,r2,8192
     b58:	e0bfce15 	stw	r2,-200(fp)

	/* initialize some variables */
	byte1 = 0; byte2 = 0; byte3 = 0; 			// used to hold PS/2 data
     b5c:	008000b4 	movhi	r2,2
     b60:	10a05704 	addi	r2,r2,-32420
     b64:	10000005 	stb	zero,0(r2)
     b68:	008000b4 	movhi	r2,2
     b6c:	10a05504 	addi	r2,r2,-32428
     b70:	10000005 	stb	zero,0(r2)
     b74:	008000b4 	movhi	r2,2
     b78:	10a05544 	addi	r2,r2,-32427
     b7c:	10000005 	stb	zero,0(r2)
	count = 0;
     b80:	008000b4 	movhi	r2,2
     b84:	10a05e04 	addi	r2,r2,-32392
     b88:	10000015 	stw	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     b8c:	008000b4 	movhi	r2,2
     b90:	10a05d04 	addi	r2,r2,-32396
     b94:	10000015 	stw	zero,0(r2)
	int blue_x1; int blue_y1; int blue_x2; int blue_y2; 
	int screen_x; int screen_y; int char_buffer_x; int char_buffer_y;
	short color;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     b98:	008025b4 	movhi	r2,150
     b9c:	e0bfc015 	stw	r2,-256(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     ba0:	e0bfce17 	ldw	r2,-200(fp)
     ba4:	10c00204 	addi	r3,r2,8
     ba8:	e0bfc017 	ldw	r2,-256(fp)
     bac:	10bfffcc 	andi	r2,r2,65535
     bb0:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     bb4:	e0bfce17 	ldw	r2,-200(fp)
     bb8:	10c00304 	addi	r3,r2,12
     bbc:	e0bfc017 	ldw	r2,-256(fp)
     bc0:	1005d43a 	srai	r2,r2,16
     bc4:	10bfffcc 	andi	r2,r2,65535
     bc8:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     bcc:	e0bfce17 	ldw	r2,-200(fp)
     bd0:	10c00104 	addi	r3,r2,4
     bd4:	008001c4 	movi	r2,7
     bd8:	18800015 	stw	r2,0(r3)
	
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     bdc:	01000074 	movhi	r4,1
     be0:	210df304 	addi	r4,r4,14284
     be4:	000ffa80 	call	ffa8 <alt_up_parallel_port_open_dev>
     be8:	e0bfd615 	stw	r2,-168(fp)
	if ( KEY_dev == NULL)
     bec:	e0bfd617 	ldw	r2,-168(fp)
     bf0:	1004c03a 	cmpne	r2,r2,zero
     bf4:	1000061e 	bne	r2,zero,c10 <main+0xd4>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     bf8:	01000074 	movhi	r4,1
     bfc:	210df804 	addi	r4,r4,14304
     c00:	000d4100 	call	d410 <alt_printf>
		return -1;
     c04:	00bfffc4 	movi	r2,-1
     c08:	e0bfff15 	stw	r2,-4(fp)
     c0c:	00049906 	br	1e74 <main+0x1338>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     c10:	01000074 	movhi	r4,1
     c14:	210e0404 	addi	r4,r4,14352
     c18:	000d4100 	call	d410 <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     c1c:	00c000b4 	movhi	r3,2
     c20:	18e08b04 	addi	r3,r3,-32212
     c24:	e0bfd617 	ldw	r2,-168(fp)
     c28:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     c2c:	e0bfd617 	ldw	r2,-168(fp)
     c30:	10800a17 	ldw	r2,40(r2)
     c34:	10800204 	addi	r2,r2,8
     c38:	1007883a 	mov	r3,r2
     c3c:	00800384 	movi	r2,14
     c40:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     c44:	01000074 	movhi	r4,1
     c48:	210e0c04 	addi	r4,r4,14384
     c4c:	000ffa80 	call	ffa8 <alt_up_parallel_port_open_dev>
     c50:	e0bfd515 	stw	r2,-172(fp)
	if ( green_LEDs_dev == NULL)
     c54:	e0bfd517 	ldw	r2,-172(fp)
     c58:	1004c03a 	cmpne	r2,r2,zero
     c5c:	1000061e 	bne	r2,zero,c78 <main+0x13c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     c60:	01000074 	movhi	r4,1
     c64:	210e1004 	addi	r4,r4,14400
     c68:	000d4100 	call	d410 <alt_printf>
		return -1;
     c6c:	00bfffc4 	movi	r2,-1
     c70:	e0bfff15 	stw	r2,-4(fp)
     c74:	00047f06 	br	1e74 <main+0x1338>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     c78:	01000074 	movhi	r4,1
     c7c:	210e1b04 	addi	r4,r4,14444
     c80:	000d4100 	call	d410 <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     c84:	00c000b4 	movhi	r3,2
     c88:	18e08b04 	addi	r3,r3,-32212
     c8c:	e0bfd517 	ldw	r2,-172(fp)
     c90:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     c94:	01000074 	movhi	r4,1
     c98:	210e2204 	addi	r4,r4,14472
     c9c:	000ffa80 	call	ffa8 <alt_up_parallel_port_open_dev>
     ca0:	e0bfd515 	stw	r2,-172(fp)
	if ( green_LEDs_dev == NULL)
     ca4:	e0bfd517 	ldw	r2,-172(fp)
     ca8:	1004c03a 	cmpne	r2,r2,zero
     cac:	1000061e 	bne	r2,zero,cc8 <main+0x18c>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     cb0:	01000074 	movhi	r4,1
     cb4:	210e2604 	addi	r4,r4,14488
     cb8:	000d4100 	call	d410 <alt_printf>
		return -1;
     cbc:	00bfffc4 	movi	r2,-1
     cc0:	e0bfff15 	stw	r2,-4(fp)
     cc4:	00046b06 	br	1e74 <main+0x1338>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     cc8:	01000074 	movhi	r4,1
     ccc:	210e3004 	addi	r4,r4,14528
     cd0:	000d4100 	call	d410 <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     cd4:	00c000b4 	movhi	r3,2
     cd8:	18e08b04 	addi	r3,r3,-32212
     cdc:	e0bfd417 	ldw	r2,-176(fp)
     ce0:	18800215 	stw	r2,8(r3)
	}

	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     ce4:	01000074 	movhi	r4,1
     ce8:	210e3604 	addi	r4,r4,14552
     cec:	00106a80 	call	106a8 <alt_up_ps2_open_dev>
     cf0:	e0bfd315 	stw	r2,-180(fp)
	if ( PS2_dev == NULL)
     cf4:	e0bfd317 	ldw	r2,-180(fp)
     cf8:	1004c03a 	cmpne	r2,r2,zero
     cfc:	1000061e 	bne	r2,zero,d18 <main+0x1dc>
	{
		alt_printf ("Error: could not open PS2 device\n");
     d00:	01000074 	movhi	r4,1
     d04:	210e3a04 	addi	r4,r4,14568
     d08:	000d4100 	call	d410 <alt_printf>
		return -1;
     d0c:	00bfffc4 	movi	r2,-1
     d10:	e0bfff15 	stw	r2,-4(fp)
     d14:	00045706 	br	1e74 <main+0x1338>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     d18:	01000074 	movhi	r4,1
     d1c:	210e4304 	addi	r4,r4,14604
     d20:	000d4100 	call	d410 <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     d24:	00c000b4 	movhi	r3,2
     d28:	18e08b04 	addi	r3,r3,-32212
     d2c:	e0bfd317 	ldw	r2,-180(fp)
     d30:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     d34:	e13fd317 	ldw	r4,-180(fp)
     d38:	01403fc4 	movi	r5,255
     d3c:	001028c0 	call	1028c <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     d40:	e13fd317 	ldw	r4,-180(fp)
     d44:	00101e00 	call	101e0 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     d48:	01000074 	movhi	r4,1
     d4c:	210e4804 	addi	r4,r4,14624
     d50:	000eb500 	call	eb50 <alt_up_audio_open_dev>
     d54:	e0bfd115 	stw	r2,-188(fp)
	if ( audio_dev == NULL)
     d58:	e0bfd117 	ldw	r2,-188(fp)
     d5c:	1004c03a 	cmpne	r2,r2,zero
     d60:	1000061e 	bne	r2,zero,d7c <main+0x240>
	{
		alt_printf ("Error: could not open audio device\n");
     d64:	01000074 	movhi	r4,1
     d68:	210e4b04 	addi	r4,r4,14636
     d6c:	000d4100 	call	d410 <alt_printf>
		return -1;
     d70:	00bfffc4 	movi	r2,-1
     d74:	e0bfff15 	stw	r2,-4(fp)
     d78:	00043e06 	br	1e74 <main+0x1338>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     d7c:	01000074 	movhi	r4,1
     d80:	210e5404 	addi	r4,r4,14672
     d84:	000d4100 	call	d410 <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     d88:	00c000b4 	movhi	r3,2
     d8c:	18e08b04 	addi	r3,r3,-32212
     d90:	e0bfd117 	ldw	r2,-188(fp)
     d94:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     d98:	01000074 	movhi	r4,1
     d9c:	210e5a04 	addi	r4,r4,14696
     da0:	000f4400 	call	f440 <alt_up_character_lcd_open_dev>
     da4:	e0bfd215 	stw	r2,-184(fp)
	if ( lcd_dev == NULL)
     da8:	e0bfd217 	ldw	r2,-184(fp)
     dac:	1004c03a 	cmpne	r2,r2,zero
     db0:	1000061e 	bne	r2,zero,dcc <main+0x290>
	{
		alt_printf ("Error: could not open character LCD device\n");
     db4:	01000074 	movhi	r4,1
     db8:	210e5f04 	addi	r4,r4,14716
     dbc:	000d4100 	call	d410 <alt_printf>
		return -1;
     dc0:	00bfffc4 	movi	r2,-1
     dc4:	e0bfff15 	stw	r2,-4(fp)
     dc8:	00042a06 	br	1e74 <main+0x1338>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     dcc:	01000074 	movhi	r4,1
     dd0:	210e6a04 	addi	r4,r4,14760
     dd4:	000d4100 	call	d410 <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     dd8:	00c000b4 	movhi	r3,2
     ddc:	18e08b04 	addi	r3,r3,-32212
     de0:	e0bfd217 	ldw	r2,-184(fp)
     de4:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     de8:	01800034 	movhi	r6,0
     dec:	3182b704 	addi	r6,r6,2780
     df0:	0009883a 	mov	r4,zero
     df4:	014000b4 	movhi	r5,2
     df8:	29608b04 	addi	r5,r5,-32212
     dfc:	000ce480 	call	ce48 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     e00:	01800034 	movhi	r6,0
     e04:	318a9404 	addi	r6,r6,10832
     e08:	01000044 	movi	r4,1
     e0c:	014000b4 	movhi	r5,2
     e10:	29608b04 	addi	r5,r5,-32212
     e14:	000ce480 	call	ce48 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     e18:	01800034 	movhi	r6,0
     e1c:	3181a904 	addi	r6,r6,1700
     e20:	01000184 	movi	r4,6
     e24:	014000b4 	movhi	r5,2
     e28:	29608b04 	addi	r5,r5,-32212
     e2c:	000ce480 	call	ce48 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     e30:	01800034 	movhi	r6,0
     e34:	31807d04 	addi	r6,r6,500
     e38:	010001c4 	movi	r4,7
     e3c:	014000b4 	movhi	r5,2
     e40:	29608b04 	addi	r5,r5,-32212
     e44:	000ce480 	call	ce48 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     e48:	00c00074 	movhi	r3,1
     e4c:	18cead04 	addi	r3,r3,15028
     e50:	18800017 	ldw	r2,0(r3)
     e54:	e0bfd715 	stw	r2,-164(fp)
     e58:	18800117 	ldw	r2,4(r3)
     e5c:	e0bfd815 	stw	r2,-160(fp)
     e60:	18800217 	ldw	r2,8(r3)
     e64:	e0bfd915 	stw	r2,-156(fp)
     e68:	18800317 	ldw	r2,12(r3)
     e6c:	e0bfda15 	stw	r2,-152(fp)
     e70:	18800417 	ldw	r2,16(r3)
     e74:	e0bfdb15 	stw	r2,-148(fp)
     e78:	18800517 	ldw	r2,20(r3)
     e7c:	e0bfdc15 	stw	r2,-144(fp)
     e80:	18800617 	ldw	r2,24(r3)
     e84:	e0bfdd15 	stw	r2,-140(fp)
     e88:	18800717 	ldw	r2,28(r3)
     e8c:	e0bfde15 	stw	r2,-136(fp)
     e90:	18800817 	ldw	r2,32(r3)
     e94:	e0bfdf15 	stw	r2,-132(fp)
     e98:	1880090b 	ldhu	r2,36(r3)
     e9c:	e0bfe00d 	sth	r2,-128(fp)
     ea0:	e13fe084 	addi	r4,fp,-126
     ea4:	01800a84 	movi	r6,42
     ea8:	000b883a 	mov	r5,zero
     eac:	0003b140 	call	3b14 <memset>
	char text_Record[20] = "Record\0";
     eb0:	00c00074 	movhi	r3,1
     eb4:	18cec104 	addi	r3,r3,15108
     eb8:	18800017 	ldw	r2,0(r3)
     ebc:	e0bfeb15 	stw	r2,-84(fp)
     ec0:	18800117 	ldw	r2,4(r3)
     ec4:	e0bfec15 	stw	r2,-80(fp)
     ec8:	e03fed15 	stw	zero,-76(fp)
     ecc:	e03fee15 	stw	zero,-72(fp)
     ed0:	e03fef15 	stw	zero,-68(fp)
	char text_Play[20] = "Play\0";
     ed4:	00c00074 	movhi	r3,1
     ed8:	18cec604 	addi	r3,r3,15128
     edc:	18800017 	ldw	r2,0(r3)
     ee0:	e0bff015 	stw	r2,-64(fp)
     ee4:	1880010b 	ldhu	r2,4(r3)
     ee8:	e0bff10d 	sth	r2,-60(fp)
     eec:	e03ff18d 	sth	zero,-58(fp)
     ef0:	e03ff20d 	sth	zero,-56(fp)
     ef4:	e03ff28d 	sth	zero,-54(fp)
     ef8:	e03ff30d 	sth	zero,-52(fp)
     efc:	e03ff38d 	sth	zero,-50(fp)
     f00:	e03ff40d 	sth	zero,-48(fp)
     f04:	e03ff48d 	sth	zero,-46(fp)
	char text_Echo[20] = "Echo\0";
     f08:	00c00074 	movhi	r3,1
     f0c:	18cecb04 	addi	r3,r3,15148
     f10:	18800017 	ldw	r2,0(r3)
     f14:	e0bff515 	stw	r2,-44(fp)
     f18:	1880010b 	ldhu	r2,4(r3)
     f1c:	e0bff60d 	sth	r2,-40(fp)
     f20:	e03ff68d 	sth	zero,-38(fp)
     f24:	e03ff70d 	sth	zero,-36(fp)
     f28:	e03ff78d 	sth	zero,-34(fp)
     f2c:	e03ff80d 	sth	zero,-32(fp)
     f30:	e03ff88d 	sth	zero,-30(fp)
     f34:	e03ff90d 	sth	zero,-28(fp)
     f38:	e03ff98d 	sth	zero,-26(fp)
	char test_Audio[20] = "Audio Plot\0";
     f3c:	00c00074 	movhi	r3,1
     f40:	18ced004 	addi	r3,r3,15168
     f44:	18800017 	ldw	r2,0(r3)
     f48:	e0bffa15 	stw	r2,-24(fp)
     f4c:	18800117 	ldw	r2,4(r3)
     f50:	e0bffb15 	stw	r2,-20(fp)
     f54:	18800217 	ldw	r2,8(r3)
     f58:	e0bffc15 	stw	r2,-16(fp)
     f5c:	e03ffd15 	stw	zero,-12(fp)
     f60:	e03ffe15 	stw	zero,-8(fp)

	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     f64:	e13fd217 	ldw	r4,-184(fp)
     f68:	000b883a 	mov	r5,zero
     f6c:	000d883a 	mov	r6,zero
     f70:	000f5bc0 	call	f5bc <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     f74:	e17fd704 	addi	r5,fp,-164
     f78:	e13fd217 	ldw	r4,-184(fp)
     f7c:	000f4f80 	call	f4f8 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     f80:	e13fd217 	ldw	r4,-184(fp)
     f84:	000f8240 	call	f824 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     f88:	01000074 	movhi	r4,1
     f8c:	210e7204 	addi	r4,r4,14792
     f90:	0010d840 	call	10d84 <alt_up_pixel_buffer_dma_open_dev>
     f94:	e0bfcf15 	stw	r2,-196(fp)
	if ( pixel_buffer_dev == NULL)
     f98:	e0bfcf17 	ldw	r2,-196(fp)
     f9c:	1004c03a 	cmpne	r2,r2,zero
     fa0:	1000041e 	bne	r2,zero,fb4 <main+0x478>
		alt_printf ("Error: could not open pixel buffer device\n");
     fa4:	01000074 	movhi	r4,1
     fa8:	210e7804 	addi	r4,r4,14816
     fac:	000d4100 	call	d410 <alt_printf>
     fb0:	00000306 	br	fc0 <main+0x484>
	else
		alt_printf ("Opened pixel buffer device\n");
     fb4:	01000074 	movhi	r4,1
     fb8:	210e8304 	addi	r4,r4,14860
     fbc:	000d4100 	call	d410 <alt_printf>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     fc0:	01000074 	movhi	r4,1
     fc4:	210e8a04 	addi	r4,r4,14888
     fc8:	0010b040 	call	10b04 <alt_up_char_buffer_open_dev>
     fcc:	e0bfd015 	stw	r2,-192(fp)
	if ( char_buffer_dev == NULL)
     fd0:	e0bfd017 	ldw	r2,-192(fp)
     fd4:	1004c03a 	cmpne	r2,r2,zero
     fd8:	1000041e 	bne	r2,zero,fec <main+0x4b0>
		alt_printf ("Error: could not open character buffer device\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	210e9004 	addi	r4,r4,14912
     fe4:	000d4100 	call	d410 <alt_printf>
     fe8:	00000306 	br	ff8 <main+0x4bc>
	else
		alt_printf ("Opened character buffer device\n");
     fec:	01000074 	movhi	r4,1
     ff0:	210e9c04 	addi	r4,r4,14960
     ff4:	000d4100 	call	d410 <alt_printf>


	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     ff8:	00804fc4 	movi	r2,319
     ffc:	e0bfc515 	stw	r2,-236(fp)
    1000:	00803bc4 	movi	r2,239
    1004:	e0bfc415 	stw	r2,-240(fp)
	color = 0x1863;		// a dark grey color
    1008:	008618c4 	movi	r2,6243
    100c:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
    1010:	e0ffc10f 	ldh	r3,-252(fp)
    1014:	e0bfc417 	ldw	r2,-240(fp)
    1018:	d8800015 	stw	r2,0(sp)
    101c:	d8c00115 	stw	r3,4(sp)
    1020:	d8000215 	stw	zero,8(sp)
    1024:	e13fcf17 	ldw	r4,-196(fp)
    1028:	000b883a 	mov	r5,zero
    102c:	000d883a 	mov	r6,zero
    1030:	e1ffc517 	ldw	r7,-236(fp)
    1034:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		screen_y, color, 0); // fill the screen
	
	// draw a medium-blue box in the middle of the screen, using character buffer coordinates
	blue_x1 = 0; blue_x2 = 100; blue_y1 = 0; blue_y2 = 20;
    1038:	e03fc915 	stw	zero,-220(fp)
    103c:	00801904 	movi	r2,100
    1040:	e0bfc715 	stw	r2,-228(fp)
    1044:	e03fc815 	stw	zero,-224(fp)
    1048:	00800504 	movi	r2,20
    104c:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x0360;		// a medium blue color
    1050:	0080d804 	movi	r2,864
    1054:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
    1058:	e0bfc917 	ldw	r2,-220(fp)
    105c:	1085883a 	add	r2,r2,r2
    1060:	1085883a 	add	r2,r2,r2
    1064:	100b883a 	mov	r5,r2
    1068:	e0bfc817 	ldw	r2,-224(fp)
    106c:	1085883a 	add	r2,r2,r2
    1070:	1085883a 	add	r2,r2,r2
    1074:	100d883a 	mov	r6,r2
    1078:	e0bfc717 	ldw	r2,-228(fp)
    107c:	1085883a 	add	r2,r2,r2
    1080:	1085883a 	add	r2,r2,r2
    1084:	100f883a 	mov	r7,r2
    1088:	e0bfc617 	ldw	r2,-232(fp)
    108c:	1085883a 	add	r2,r2,r2
    1090:	1085883a 	add	r2,r2,r2
    1094:	e0ffc10f 	ldh	r3,-252(fp)
    1098:	d8800015 	stw	r2,0(sp)
    109c:	d8c00115 	stw	r3,4(sp)
    10a0:	d8000215 	stw	zero,8(sp)
    10a4:	e13fcf17 	ldw	r4,-196(fp)
    10a8:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);

	//Green Box For Record //Record ******************
	blue_x1 = 15; blue_x2 = 25; blue_y1 = 4; blue_y2 = 14;
    10ac:	008003c4 	movi	r2,15
    10b0:	e0bfc915 	stw	r2,-220(fp)
    10b4:	00800644 	movi	r2,25
    10b8:	e0bfc715 	stw	r2,-228(fp)
    10bc:	00800104 	movi	r2,4
    10c0:	e0bfc815 	stw	r2,-224(fp)
    10c4:	00800384 	movi	r2,14
    10c8:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x100F;		// a medium blue color
    10cc:	008403c4 	movi	r2,4111
    10d0:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    10d4:	e0bfc917 	ldw	r2,-220(fp)
    10d8:	1085883a 	add	r2,r2,r2
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	100b883a 	mov	r5,r2
    10e4:	e0bfc817 	ldw	r2,-224(fp)
    10e8:	1085883a 	add	r2,r2,r2
    10ec:	1085883a 	add	r2,r2,r2
    10f0:	100d883a 	mov	r6,r2
    10f4:	e0bfc717 	ldw	r2,-228(fp)
    10f8:	1085883a 	add	r2,r2,r2
    10fc:	1085883a 	add	r2,r2,r2
    1100:	100f883a 	mov	r7,r2
    1104:	e0bfc617 	ldw	r2,-232(fp)
    1108:	1085883a 	add	r2,r2,r2
    110c:	1085883a 	add	r2,r2,r2
    1110:	e0ffc10f 	ldh	r3,-252(fp)
    1114:	d8800015 	stw	r2,0(sp)
    1118:	d8c00115 	stw	r3,4(sp)
    111c:	d8000215 	stw	zero,8(sp)
    1120:	e13fcf17 	ldw	r4,-196(fp)
    1124:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, text_Record, blue_x1 + 2, blue_y1 + 4);
    1128:	e0bfc917 	ldw	r2,-220(fp)
    112c:	10800084 	addi	r2,r2,2
    1130:	100d883a 	mov	r6,r2
    1134:	e0bfc817 	ldw	r2,-224(fp)
    1138:	10800104 	addi	r2,r2,4
    113c:	100f883a 	mov	r7,r2
    1140:	e17feb04 	addi	r5,fp,-84
    1144:	e13fd017 	ldw	r4,-192(fp)
    1148:	0010c140 	call	10c14 <alt_up_char_buffer_string>

	//Green Box For Play //PLAY**********************
	blue_x1 = 35; blue_x2 = 45; blue_y1 = 4; blue_y2 = 14;
    114c:	008008c4 	movi	r2,35
    1150:	e0bfc915 	stw	r2,-220(fp)
    1154:	00800b44 	movi	r2,45
    1158:	e0bfc715 	stw	r2,-228(fp)
    115c:	00800104 	movi	r2,4
    1160:	e0bfc815 	stw	r2,-224(fp)
    1164:	00800384 	movi	r2,14
    1168:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x100F;		// a medium blue color
    116c:	008403c4 	movi	r2,4111
    1170:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1174:	e0bfc917 	ldw	r2,-220(fp)
    1178:	1085883a 	add	r2,r2,r2
    117c:	1085883a 	add	r2,r2,r2
    1180:	100b883a 	mov	r5,r2
    1184:	e0bfc817 	ldw	r2,-224(fp)
    1188:	1085883a 	add	r2,r2,r2
    118c:	1085883a 	add	r2,r2,r2
    1190:	100d883a 	mov	r6,r2
    1194:	e0bfc717 	ldw	r2,-228(fp)
    1198:	1085883a 	add	r2,r2,r2
    119c:	1085883a 	add	r2,r2,r2
    11a0:	100f883a 	mov	r7,r2
    11a4:	e0bfc617 	ldw	r2,-232(fp)
    11a8:	1085883a 	add	r2,r2,r2
    11ac:	1085883a 	add	r2,r2,r2
    11b0:	e0ffc10f 	ldh	r3,-252(fp)
    11b4:	d8800015 	stw	r2,0(sp)
    11b8:	d8c00115 	stw	r3,4(sp)
    11bc:	d8000215 	stw	zero,8(sp)
    11c0:	e13fcf17 	ldw	r4,-196(fp)
    11c4:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, text_Play, blue_x1 + 4, blue_y1 + 4);
    11c8:	e0bfc917 	ldw	r2,-220(fp)
    11cc:	10800104 	addi	r2,r2,4
    11d0:	100d883a 	mov	r6,r2
    11d4:	e0bfc817 	ldw	r2,-224(fp)
    11d8:	10800104 	addi	r2,r2,4
    11dc:	100f883a 	mov	r7,r2
    11e0:	e17ff004 	addi	r5,fp,-64
    11e4:	e13fd017 	ldw	r4,-192(fp)
    11e8:	0010c140 	call	10c14 <alt_up_char_buffer_string>

	//Green Box For Echo //Echo**********************
	blue_x1 = 55; blue_x2 = 65; blue_y1 = 4; blue_y2 = 14;
    11ec:	00800dc4 	movi	r2,55
    11f0:	e0bfc915 	stw	r2,-220(fp)
    11f4:	00801044 	movi	r2,65
    11f8:	e0bfc715 	stw	r2,-228(fp)
    11fc:	00800104 	movi	r2,4
    1200:	e0bfc815 	stw	r2,-224(fp)
    1204:	00800384 	movi	r2,14
    1208:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x100F;		// a medium blue color
    120c:	008403c4 	movi	r2,4111
    1210:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1214:	e0bfc917 	ldw	r2,-220(fp)
    1218:	1085883a 	add	r2,r2,r2
    121c:	1085883a 	add	r2,r2,r2
    1220:	100b883a 	mov	r5,r2
    1224:	e0bfc817 	ldw	r2,-224(fp)
    1228:	1085883a 	add	r2,r2,r2
    122c:	1085883a 	add	r2,r2,r2
    1230:	100d883a 	mov	r6,r2
    1234:	e0bfc717 	ldw	r2,-228(fp)
    1238:	1085883a 	add	r2,r2,r2
    123c:	1085883a 	add	r2,r2,r2
    1240:	100f883a 	mov	r7,r2
    1244:	e0bfc617 	ldw	r2,-232(fp)
    1248:	1085883a 	add	r2,r2,r2
    124c:	1085883a 	add	r2,r2,r2
    1250:	e0ffc10f 	ldh	r3,-252(fp)
    1254:	d8800015 	stw	r2,0(sp)
    1258:	d8c00115 	stw	r3,4(sp)
    125c:	d8000215 	stw	zero,8(sp)
    1260:	e13fcf17 	ldw	r4,-196(fp)
    1264:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);
	alt_up_char_buffer_string (char_buffer_dev, text_Echo, blue_x1 + 4, blue_y1 + 4);
    1268:	e0bfc917 	ldw	r2,-220(fp)
    126c:	10800104 	addi	r2,r2,4
    1270:	100d883a 	mov	r6,r2
    1274:	e0bfc817 	ldw	r2,-224(fp)
    1278:	10800104 	addi	r2,r2,4
    127c:	100f883a 	mov	r7,r2
    1280:	e17ff504 	addi	r5,fp,-44
    1284:	e13fd017 	ldw	r4,-192(fp)
    1288:	0010c140 	call	10c14 <alt_up_char_buffer_string>

	// Draw Audio Display
	blue_x1 = 0; blue_x2 = 100; blue_y1 = 20; blue_y2 = 60;
    128c:	e03fc915 	stw	zero,-220(fp)
    1290:	00801904 	movi	r2,100
    1294:	e0bfc715 	stw	r2,-228(fp)
    1298:	00800504 	movi	r2,20
    129c:	e0bfc815 	stw	r2,-224(fp)
    12a0:	00800f04 	movi	r2,60
    12a4:	e0bfc615 	stw	r2,-232(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x0328;		// a medium blue color
    12a8:	0080ca04 	movi	r2,808
    12ac:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    12b0:	e0bfc917 	ldw	r2,-220(fp)
    12b4:	1085883a 	add	r2,r2,r2
    12b8:	1085883a 	add	r2,r2,r2
    12bc:	100b883a 	mov	r5,r2
    12c0:	e0bfc817 	ldw	r2,-224(fp)
    12c4:	1085883a 	add	r2,r2,r2
    12c8:	1085883a 	add	r2,r2,r2
    12cc:	100d883a 	mov	r6,r2
    12d0:	e0bfc717 	ldw	r2,-228(fp)
    12d4:	1085883a 	add	r2,r2,r2
    12d8:	1085883a 	add	r2,r2,r2
    12dc:	100f883a 	mov	r7,r2
    12e0:	e0bfc617 	ldw	r2,-232(fp)
    12e4:	1085883a 	add	r2,r2,r2
    12e8:	1085883a 	add	r2,r2,r2
    12ec:	e0ffc10f 	ldh	r3,-252(fp)
    12f0:	d8800015 	stw	r2,0(sp)
    12f4:	d8c00115 	stw	r3,4(sp)
    12f8:	d8000215 	stw	zero,8(sp)
    12fc:	e13fcf17 	ldw	r4,-196(fp)
    1300:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		blue_y2 * 4, color, 0);

	//Write Audio
	blue_x1 = 39; blue_y1 = 22;
    1304:	008009c4 	movi	r2,39
    1308:	e0bfc915 	stw	r2,-220(fp)
    130c:	00800584 	movi	r2,22
    1310:	e0bfc815 	stw	r2,-224(fp)
	color = 0xABCD;
    1314:	00aaf344 	movi	r2,-21555
    1318:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_char_buffer_string (char_buffer_dev, test_Audio, blue_x1 , blue_y1 );
    131c:	e1bfc917 	ldw	r6,-220(fp)
    1320:	e1ffc817 	ldw	r7,-224(fp)
    1324:	e17ffa04 	addi	r5,fp,-24
    1328:	e13fd017 	ldw	r4,-192(fp)
    132c:	0010c140 	call	10c14 <alt_up_char_buffer_string>
	//Audio Line
	blue_x1 = 10; blue_x2 = 70; blue_y1 = 21;
    1330:	00800284 	movi	r2,10
    1334:	e0bfc915 	stw	r2,-220(fp)
    1338:	00801184 	movi	r2,70
    133c:	e0bfc715 	stw	r2,-228(fp)
    1340:	00800544 	movi	r2,21
    1344:	e0bfc815 	stw	r2,-224(fp)
	color = 0xABCD;
    1348:	00aaf344 	movi	r2,-21555
    134c:	e0bfc10d 	sth	r2,-252(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev,blue_x1 * 4, blue_x2 * 4, blue_y1 * 4, color, 0);
    1350:	e0bfc917 	ldw	r2,-220(fp)
    1354:	1085883a 	add	r2,r2,r2
    1358:	1085883a 	add	r2,r2,r2
    135c:	100b883a 	mov	r5,r2
    1360:	e0bfc717 	ldw	r2,-228(fp)
    1364:	1085883a 	add	r2,r2,r2
    1368:	1085883a 	add	r2,r2,r2
    136c:	100d883a 	mov	r6,r2
    1370:	e0bfc817 	ldw	r2,-224(fp)
    1374:	1085883a 	add	r2,r2,r2
    1378:	1085883a 	add	r2,r2,r2
    137c:	100f883a 	mov	r7,r2
    1380:	e0bfc10f 	ldh	r2,-252(fp)
    1384:	d8800015 	stw	r2,0(sp)
    1388:	d8000115 	stw	zero,4(sp)
    138c:	e13fcf17 	ldw	r4,-196(fp)
    1390:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>
	blue_x1 = 10; blue_x2 = 70; blue_y1 = 23;
    1394:	00800284 	movi	r2,10
    1398:	e0bfc915 	stw	r2,-220(fp)
    139c:	00801184 	movi	r2,70
    13a0:	e0bfc715 	stw	r2,-228(fp)
    13a4:	008005c4 	movi	r2,23
    13a8:	e0bfc815 	stw	r2,-224(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev,blue_x1 * 4, blue_x2 * 4, blue_y1 * 4, color, 0);
    13ac:	e0bfc917 	ldw	r2,-220(fp)
    13b0:	1085883a 	add	r2,r2,r2
    13b4:	1085883a 	add	r2,r2,r2
    13b8:	100b883a 	mov	r5,r2
    13bc:	e0bfc717 	ldw	r2,-228(fp)
    13c0:	1085883a 	add	r2,r2,r2
    13c4:	1085883a 	add	r2,r2,r2
    13c8:	100d883a 	mov	r6,r2
    13cc:	e0bfc817 	ldw	r2,-224(fp)
    13d0:	1085883a 	add	r2,r2,r2
    13d4:	1085883a 	add	r2,r2,r2
    13d8:	100f883a 	mov	r7,r2
    13dc:	e0bfc10f 	ldh	r2,-252(fp)
    13e0:	d8800015 	stw	r2,0(sp)
    13e4:	d8000115 	stw	zero,4(sp)
    13e8:	e13fcf17 	ldw	r4,-196(fp)
    13ec:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>
	//Audio OverFlow
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer_dev,10, 300, 105, 0xABCD, 0);
    13f0:	00aaf354 	movui	r2,43981
    13f4:	d8800015 	stw	r2,0(sp)
    13f8:	d8000115 	stw	zero,4(sp)
    13fc:	e13fcf17 	ldw	r4,-196(fp)
    1400:	01400284 	movi	r5,10
    1404:	01804b04 	movi	r6,300
    1408:	01c01a44 	movi	r7,105
    140c:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>

	
	char_buffer_x = 79; char_buffer_y = 59;
    1410:	008013c4 	movi	r2,79
    1414:	e0bfc315 	stw	r2,-244(fp)
    1418:	00800ec4 	movi	r2,59
    141c:	e0bfc215 	stw	r2,-248(fp)
	MouseX = 10;
    1420:	00800284 	movi	r2,10
    1424:	e0bfcd15 	stw	r2,-204(fp)
	MouseY = 10;
    1428:	00800284 	movi	r2,10
    142c:	e0bfcc15 	stw	r2,-208(fp)
	int temp1;
	int temp2;
	int temp3;
	Echo_complete = 0;
    1430:	008000b4 	movhi	r2,2
    1434:	10a05904 	addi	r2,r2,-32412
    1438:	10000015 	stw	zero,0(r2)
	Play_Index = 0;
    143c:	008000b4 	movhi	r2,2
    1440:	10a05604 	addi	r2,r2,-32424
    1444:	10000015 	stw	zero,0(r2)
    1448:	00000006 	br	144c <main+0x910>
	/* this loops "bounces" the word ALTERA around on the VGA screen */
	while (1)
	{
			while(!timeout);
    144c:	008000b4 	movhi	r2,2
    1450:	10a05d04 	addi	r2,r2,-32396
    1454:	10800017 	ldw	r2,0(r2)
    1458:	1005003a 	cmpeq	r2,r2,zero
    145c:	103ffb1e 	bne	r2,zero,144c <main+0x910>
			// wait to synchronize with timeout, which is set by the interval timer ISR
			/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */
			HEXxy_PS2 (&up_dev, byte1, byte2, byte3);
    1460:	008000b4 	movhi	r2,2
    1464:	10a05704 	addi	r2,r2,-32420
    1468:	10800003 	ldbu	r2,0(r2)
    146c:	11403fcc 	andi	r5,r2,255
    1470:	008000b4 	movhi	r2,2
    1474:	10a05504 	addi	r2,r2,-32428
    1478:	10800003 	ldbu	r2,0(r2)
    147c:	11803fcc 	andi	r6,r2,255
    1480:	008000b4 	movhi	r2,2
    1484:	10a05544 	addi	r2,r2,-32427
    1488:	10800003 	ldbu	r2,0(r2)
    148c:	11c03fcc 	andi	r7,r2,255
    1490:	010000b4 	movhi	r4,2
    1494:	21208b04 	addi	r4,r4,-32212
    1498:	0001e900 	call	1e90 <HEXxy_PS2>
			temp1 = byte1;
    149c:	008000b4 	movhi	r2,2
    14a0:	10a05704 	addi	r2,r2,-32420
    14a4:	10800003 	ldbu	r2,0(r2)
    14a8:	10803fcc 	andi	r2,r2,255
    14ac:	e0bfbf15 	stw	r2,-260(fp)
			temp2 = byte2;
    14b0:	008000b4 	movhi	r2,2
    14b4:	10a05504 	addi	r2,r2,-32428
    14b8:	10800003 	ldbu	r2,0(r2)
    14bc:	10803fcc 	andi	r2,r2,255
    14c0:	e0bfbe15 	stw	r2,-264(fp)
			temp3 = byte3;
    14c4:	008000b4 	movhi	r2,2
    14c8:	10a05544 	addi	r2,r2,-32427
    14cc:	10800003 	ldbu	r2,0(r2)
    14d0:	10803fcc 	andi	r2,r2,255
    14d4:	e0bfbd15 	stw	r2,-268(fp)
			if((temp1 >= 100 && !Xsign) || (temp2>= 100 && !Ysign)){
    14d8:	e0bfbf17 	ldw	r2,-260(fp)
    14dc:	10801910 	cmplti	r2,r2,100
    14e0:	1000031e 	bne	r2,zero,14f0 <main+0x9b4>
    14e4:	d0a85017 	ldw	r2,-24256(gp)
    14e8:	1005003a 	cmpeq	r2,r2,zero
    14ec:	103fd71e 	bne	r2,zero,144c <main+0x910>
    14f0:	e0bfbe17 	ldw	r2,-264(fp)
    14f4:	10801910 	cmplti	r2,r2,100
    14f8:	1000031e 	bne	r2,zero,1508 <main+0x9cc>
    14fc:	d0a85417 	ldw	r2,-24240(gp)
    1500:	1005003a 	cmpeq	r2,r2,zero
    1504:	103fd11e 	bne	r2,zero,144c <main+0x910>
				continue;
			}
			if((temp1 <= 150 && Xsign) || (temp2<= 150 && Ysign)){
    1508:	e0bfbf17 	ldw	r2,-260(fp)
    150c:	108025c8 	cmpgei	r2,r2,151
    1510:	1000031e 	bne	r2,zero,1520 <main+0x9e4>
    1514:	d0a85017 	ldw	r2,-24256(gp)
    1518:	1004c03a 	cmpne	r2,r2,zero
    151c:	103fcb1e 	bne	r2,zero,144c <main+0x910>
    1520:	e0bfbe17 	ldw	r2,-264(fp)
    1524:	108025c8 	cmpgei	r2,r2,151
    1528:	1000031e 	bne	r2,zero,1538 <main+0x9fc>
    152c:	d0a85417 	ldw	r2,-24240(gp)
    1530:	1004c03a 	cmpne	r2,r2,zero
    1534:	103fc51e 	bne	r2,zero,144c <main+0x910>
				continue;
			}


			//Record interrupt
			if(Temp_MouseX >= 60 && Temp_MouseX <= 100 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1538:	e0bfcb17 	ldw	r2,-212(fp)
    153c:	10800f10 	cmplti	r2,r2,60
    1540:	10006f1e 	bne	r2,zero,1700 <main+0xbc4>
    1544:	e0bfcb17 	ldw	r2,-212(fp)
    1548:	10801948 	cmpgei	r2,r2,101
    154c:	10006c1e 	bne	r2,zero,1700 <main+0xbc4>
    1550:	e0bfca17 	ldw	r2,-216(fp)
    1554:	10800410 	cmplti	r2,r2,16
    1558:	1000691e 	bne	r2,zero,1700 <main+0xbc4>
    155c:	e0bfca17 	ldw	r2,-216(fp)
    1560:	10800e48 	cmpgei	r2,r2,57
    1564:	1000661e 	bne	r2,zero,1700 <main+0xbc4>
				if(Temp_MouseX <= 62 || Temp_MouseX >= 98 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    1568:	e0bfcb17 	ldw	r2,-212(fp)
    156c:	10800fd0 	cmplti	r2,r2,63
    1570:	1000091e 	bne	r2,zero,1598 <main+0xa5c>
    1574:	e0bfcb17 	ldw	r2,-212(fp)
    1578:	10801888 	cmpgei	r2,r2,98
    157c:	1000061e 	bne	r2,zero,1598 <main+0xa5c>
    1580:	e0bfca17 	ldw	r2,-216(fp)
    1584:	10800550 	cmplti	r2,r2,21
    1588:	1000031e 	bne	r2,zero,1598 <main+0xa5c>
    158c:	e0bfca17 	ldw	r2,-216(fp)
    1590:	10800d10 	cmplti	r2,r2,52
    1594:	1000481e 	bne	r2,zero,16b8 <main+0xb7c>

					// draw a medium-blue box in the middle of the screen, using character buffer coordinates
					blue_x1 = 14; blue_x2 = 26; blue_y1 = 3; blue_y2 = 15;
    1598:	00800384 	movi	r2,14
    159c:	e0bfc915 	stw	r2,-220(fp)
    15a0:	00800684 	movi	r2,26
    15a4:	e0bfc715 	stw	r2,-228(fp)
    15a8:	008000c4 	movi	r2,3
    15ac:	e0bfc815 	stw	r2,-224(fp)
    15b0:	008003c4 	movi	r2,15
    15b4:	e0bfc615 	stw	r2,-232(fp)
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x0360;		// a medium blue color
    15b8:	0080d804 	movi	r2,864
    15bc:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    15c0:	e0bfc917 	ldw	r2,-220(fp)
    15c4:	1085883a 	add	r2,r2,r2
    15c8:	1085883a 	add	r2,r2,r2
    15cc:	100b883a 	mov	r5,r2
    15d0:	e0bfc817 	ldw	r2,-224(fp)
    15d4:	1085883a 	add	r2,r2,r2
    15d8:	1085883a 	add	r2,r2,r2
    15dc:	100d883a 	mov	r6,r2
    15e0:	e0bfc717 	ldw	r2,-228(fp)
    15e4:	1085883a 	add	r2,r2,r2
    15e8:	1085883a 	add	r2,r2,r2
    15ec:	100f883a 	mov	r7,r2
    15f0:	e0bfc617 	ldw	r2,-232(fp)
    15f4:	1085883a 	add	r2,r2,r2
    15f8:	1085883a 	add	r2,r2,r2
    15fc:	e0ffc10f 	ldh	r3,-252(fp)
    1600:	d8800015 	stw	r2,0(sp)
    1604:	d8c00115 	stw	r3,4(sp)
    1608:	d8000215 	stw	zero,8(sp)
    160c:	e13fcf17 	ldw	r4,-196(fp)
    1610:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);

					//Green Box For Record //Record ******************
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					blue_x1 = 15; blue_x2 = 25; blue_y1 = 4; blue_y2 = 14;
    1614:	008003c4 	movi	r2,15
    1618:	e0bfc915 	stw	r2,-220(fp)
    161c:	00800644 	movi	r2,25
    1620:	e0bfc715 	stw	r2,-228(fp)
    1624:	00800104 	movi	r2,4
    1628:	e0bfc815 	stw	r2,-224(fp)
    162c:	00800384 	movi	r2,14
    1630:	e0bfc615 	stw	r2,-232(fp)
					color = 0x100F;
    1634:	008403c4 	movi	r2,4111
    1638:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    163c:	e0bfc917 	ldw	r2,-220(fp)
    1640:	1085883a 	add	r2,r2,r2
    1644:	1085883a 	add	r2,r2,r2
    1648:	100b883a 	mov	r5,r2
    164c:	e0bfc817 	ldw	r2,-224(fp)
    1650:	1085883a 	add	r2,r2,r2
    1654:	1085883a 	add	r2,r2,r2
    1658:	100d883a 	mov	r6,r2
    165c:	e0bfc717 	ldw	r2,-228(fp)
    1660:	1085883a 	add	r2,r2,r2
    1664:	1085883a 	add	r2,r2,r2
    1668:	100f883a 	mov	r7,r2
    166c:	e0bfc617 	ldw	r2,-232(fp)
    1670:	1085883a 	add	r2,r2,r2
    1674:	1085883a 	add	r2,r2,r2
    1678:	e0ffc10f 	ldh	r3,-252(fp)
    167c:	d8800015 	stw	r2,0(sp)
    1680:	d8c00115 	stw	r3,4(sp)
    1684:	d8000215 	stw	zero,8(sp)
    1688:	e13fcf17 	ldw	r4,-196(fp)
    168c:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Record, blue_x1 + 2, blue_y1 + 4);
    1690:	e0bfc917 	ldw	r2,-220(fp)
    1694:	10800084 	addi	r2,r2,2
    1698:	100d883a 	mov	r6,r2
    169c:	e0bfc817 	ldw	r2,-224(fp)
    16a0:	10800104 	addi	r2,r2,4
    16a4:	100f883a 	mov	r7,r2
    16a8:	e17feb04 	addi	r5,fp,-84
    16ac:	e13fd017 	ldw	r4,-192(fp)
    16b0:	0010c140 	call	10c14 <alt_up_char_buffer_string>
			}


			//Record interrupt
			if(Temp_MouseX >= 60 && Temp_MouseX <= 100 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
				if(Temp_MouseX <= 62 || Temp_MouseX >= 98 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    16b4:	00011306 	br	1b04 <main+0xfc8>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Record, blue_x1 + 2, blue_y1 + 4);

				}
				else {
					color = 0x100F;		// a medium blue color
    16b8:	008403c4 	movi	r2,4111
    16bc:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    16c0:	e0bfcb17 	ldw	r2,-212(fp)
    16c4:	117fff84 	addi	r5,r2,-2
    16c8:	e0bfca17 	ldw	r2,-216(fp)
    16cc:	11bfff84 	addi	r6,r2,-2
    16d0:	e0bfcb17 	ldw	r2,-212(fp)
    16d4:	11c00084 	addi	r7,r2,2
    16d8:	e0bfca17 	ldw	r2,-216(fp)
    16dc:	10800084 	addi	r2,r2,2
    16e0:	e0ffc10f 	ldh	r3,-252(fp)
    16e4:	d8800015 	stw	r2,0(sp)
    16e8:	d8c00115 	stw	r3,4(sp)
    16ec:	00800044 	movi	r2,1
    16f0:	d8800215 	stw	r2,8(sp)
    16f4:	e13fcf17 	ldw	r4,-196(fp)
    16f8:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
				continue;
			}


			//Record interrupt
			if(Temp_MouseX >= 60 && Temp_MouseX <= 100 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    16fc:	00010106 	br	1b04 <main+0xfc8>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}


			else if(Temp_MouseX >= 140 && Temp_MouseX <= 180 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1700:	e0bfcb17 	ldw	r2,-212(fp)
    1704:	10802310 	cmplti	r2,r2,140
    1708:	10006f1e 	bne	r2,zero,18c8 <main+0xd8c>
    170c:	e0bfcb17 	ldw	r2,-212(fp)
    1710:	10802d48 	cmpgei	r2,r2,181
    1714:	10006c1e 	bne	r2,zero,18c8 <main+0xd8c>
    1718:	e0bfca17 	ldw	r2,-216(fp)
    171c:	10800410 	cmplti	r2,r2,16
    1720:	1000691e 	bne	r2,zero,18c8 <main+0xd8c>
    1724:	e0bfca17 	ldw	r2,-216(fp)
    1728:	10800e48 	cmpgei	r2,r2,57
    172c:	1000661e 	bne	r2,zero,18c8 <main+0xd8c>
				if(Temp_MouseX <= 142 || Temp_MouseX >= 178 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    1730:	e0bfcb17 	ldw	r2,-212(fp)
    1734:	108023d0 	cmplti	r2,r2,143
    1738:	1000091e 	bne	r2,zero,1760 <main+0xc24>
    173c:	e0bfcb17 	ldw	r2,-212(fp)
    1740:	10802c88 	cmpgei	r2,r2,178
    1744:	1000061e 	bne	r2,zero,1760 <main+0xc24>
    1748:	e0bfca17 	ldw	r2,-216(fp)
    174c:	10800550 	cmplti	r2,r2,21
    1750:	1000031e 	bne	r2,zero,1760 <main+0xc24>
    1754:	e0bfca17 	ldw	r2,-216(fp)
    1758:	10800d10 	cmplti	r2,r2,52
    175c:	1000481e 	bne	r2,zero,1880 <main+0xd44>

					// draw a medium-blue box in the middle of the screen, using character buffer coordinates
					blue_x1 = 34; blue_x2 = 46; blue_y1 = 3; blue_y2 = 15;
    1760:	00800884 	movi	r2,34
    1764:	e0bfc915 	stw	r2,-220(fp)
    1768:	00800b84 	movi	r2,46
    176c:	e0bfc715 	stw	r2,-228(fp)
    1770:	008000c4 	movi	r2,3
    1774:	e0bfc815 	stw	r2,-224(fp)
    1778:	008003c4 	movi	r2,15
    177c:	e0bfc615 	stw	r2,-232(fp)
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x0360;		// a medium blue color
    1780:	0080d804 	movi	r2,864
    1784:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1788:	e0bfc917 	ldw	r2,-220(fp)
    178c:	1085883a 	add	r2,r2,r2
    1790:	1085883a 	add	r2,r2,r2
    1794:	100b883a 	mov	r5,r2
    1798:	e0bfc817 	ldw	r2,-224(fp)
    179c:	1085883a 	add	r2,r2,r2
    17a0:	1085883a 	add	r2,r2,r2
    17a4:	100d883a 	mov	r6,r2
    17a8:	e0bfc717 	ldw	r2,-228(fp)
    17ac:	1085883a 	add	r2,r2,r2
    17b0:	1085883a 	add	r2,r2,r2
    17b4:	100f883a 	mov	r7,r2
    17b8:	e0bfc617 	ldw	r2,-232(fp)
    17bc:	1085883a 	add	r2,r2,r2
    17c0:	1085883a 	add	r2,r2,r2
    17c4:	e0ffc10f 	ldh	r3,-252(fp)
    17c8:	d8800015 	stw	r2,0(sp)
    17cc:	d8c00115 	stw	r3,4(sp)
    17d0:	d8000215 	stw	zero,8(sp)
    17d4:	e13fcf17 	ldw	r4,-196(fp)
    17d8:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);

					blue_x1 = 35; blue_x2 = 45; blue_y1 = 4; blue_y2 = 14;
    17dc:	008008c4 	movi	r2,35
    17e0:	e0bfc915 	stw	r2,-220(fp)
    17e4:	00800b44 	movi	r2,45
    17e8:	e0bfc715 	stw	r2,-228(fp)
    17ec:	00800104 	movi	r2,4
    17f0:	e0bfc815 	stw	r2,-224(fp)
    17f4:	00800384 	movi	r2,14
    17f8:	e0bfc615 	stw	r2,-232(fp)
					//Green Box For Record //Record ******************
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x100F;		//
    17fc:	008403c4 	movi	r2,4111
    1800:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1804:	e0bfc917 	ldw	r2,-220(fp)
    1808:	1085883a 	add	r2,r2,r2
    180c:	1085883a 	add	r2,r2,r2
    1810:	100b883a 	mov	r5,r2
    1814:	e0bfc817 	ldw	r2,-224(fp)
    1818:	1085883a 	add	r2,r2,r2
    181c:	1085883a 	add	r2,r2,r2
    1820:	100d883a 	mov	r6,r2
    1824:	e0bfc717 	ldw	r2,-228(fp)
    1828:	1085883a 	add	r2,r2,r2
    182c:	1085883a 	add	r2,r2,r2
    1830:	100f883a 	mov	r7,r2
    1834:	e0bfc617 	ldw	r2,-232(fp)
    1838:	1085883a 	add	r2,r2,r2
    183c:	1085883a 	add	r2,r2,r2
    1840:	e0ffc10f 	ldh	r3,-252(fp)
    1844:	d8800015 	stw	r2,0(sp)
    1848:	d8c00115 	stw	r3,4(sp)
    184c:	d8000215 	stw	zero,8(sp)
    1850:	e13fcf17 	ldw	r4,-196(fp)
    1854:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Play, blue_x1 + 4, blue_y1 + 4);
    1858:	e0bfc917 	ldw	r2,-220(fp)
    185c:	10800104 	addi	r2,r2,4
    1860:	100d883a 	mov	r6,r2
    1864:	e0bfc817 	ldw	r2,-224(fp)
    1868:	10800104 	addi	r2,r2,4
    186c:	100f883a 	mov	r7,r2
    1870:	e17ff004 	addi	r5,fp,-64
    1874:	e13fd017 	ldw	r4,-192(fp)
    1878:	0010c140 	call	10c14 <alt_up_char_buffer_string>
				}
			}


			else if(Temp_MouseX >= 140 && Temp_MouseX <= 180 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
				if(Temp_MouseX <= 142 || Temp_MouseX >= 178 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    187c:	0000a106 	br	1b04 <main+0xfc8>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Play, blue_x1 + 4, blue_y1 + 4);

				}
				else {
					color = 0x100F;		// a medium blue color
    1880:	008403c4 	movi	r2,4111
    1884:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    1888:	e0bfcb17 	ldw	r2,-212(fp)
    188c:	117fff84 	addi	r5,r2,-2
    1890:	e0bfca17 	ldw	r2,-216(fp)
    1894:	11bfff84 	addi	r6,r2,-2
    1898:	e0bfcb17 	ldw	r2,-212(fp)
    189c:	11c00084 	addi	r7,r2,2
    18a0:	e0bfca17 	ldw	r2,-216(fp)
    18a4:	10800084 	addi	r2,r2,2
    18a8:	e0ffc10f 	ldh	r3,-252(fp)
    18ac:	d8800015 	stw	r2,0(sp)
    18b0:	d8c00115 	stw	r3,4(sp)
    18b4:	00800044 	movi	r2,1
    18b8:	d8800215 	stw	r2,8(sp)
    18bc:	e13fcf17 	ldw	r4,-196(fp)
    18c0:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}


			else if(Temp_MouseX >= 140 && Temp_MouseX <= 180 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    18c4:	00008f06 	br	1b04 <main+0xfc8>
					color = 0x100F;		// a medium blue color
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			else if(Temp_MouseX >= 220 && Temp_MouseX <= 260 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    18c8:	e0bfcb17 	ldw	r2,-212(fp)
    18cc:	10803710 	cmplti	r2,r2,220
    18d0:	10006f1e 	bne	r2,zero,1a90 <main+0xf54>
    18d4:	e0bfcb17 	ldw	r2,-212(fp)
    18d8:	10804148 	cmpgei	r2,r2,261
    18dc:	10006c1e 	bne	r2,zero,1a90 <main+0xf54>
    18e0:	e0bfca17 	ldw	r2,-216(fp)
    18e4:	10800410 	cmplti	r2,r2,16
    18e8:	1000691e 	bne	r2,zero,1a90 <main+0xf54>
    18ec:	e0bfca17 	ldw	r2,-216(fp)
    18f0:	10800e48 	cmpgei	r2,r2,57
    18f4:	1000661e 	bne	r2,zero,1a90 <main+0xf54>
				if(Temp_MouseX <= 222 || Temp_MouseX >= 258 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    18f8:	e0bfcb17 	ldw	r2,-212(fp)
    18fc:	108037d0 	cmplti	r2,r2,223
    1900:	1000091e 	bne	r2,zero,1928 <main+0xdec>
    1904:	e0bfcb17 	ldw	r2,-212(fp)
    1908:	10804088 	cmpgei	r2,r2,258
    190c:	1000061e 	bne	r2,zero,1928 <main+0xdec>
    1910:	e0bfca17 	ldw	r2,-216(fp)
    1914:	10800550 	cmplti	r2,r2,21
    1918:	1000031e 	bne	r2,zero,1928 <main+0xdec>
    191c:	e0bfca17 	ldw	r2,-216(fp)
    1920:	10800d10 	cmplti	r2,r2,52
    1924:	1000481e 	bne	r2,zero,1a48 <main+0xf0c>

					// draw a medium-blue box in the middle of the screen, using character buffer coordinates
					blue_x1 = 54; blue_x2 = 66; blue_y1 = 3; blue_y2 = 15;
    1928:	00800d84 	movi	r2,54
    192c:	e0bfc915 	stw	r2,-220(fp)
    1930:	00801084 	movi	r2,66
    1934:	e0bfc715 	stw	r2,-228(fp)
    1938:	008000c4 	movi	r2,3
    193c:	e0bfc815 	stw	r2,-224(fp)
    1940:	008003c4 	movi	r2,15
    1944:	e0bfc615 	stw	r2,-232(fp)
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					color = 0x0360;		// a medium blue color
    1948:	0080d804 	movi	r2,864
    194c:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    1950:	e0bfc917 	ldw	r2,-220(fp)
    1954:	1085883a 	add	r2,r2,r2
    1958:	1085883a 	add	r2,r2,r2
    195c:	100b883a 	mov	r5,r2
    1960:	e0bfc817 	ldw	r2,-224(fp)
    1964:	1085883a 	add	r2,r2,r2
    1968:	1085883a 	add	r2,r2,r2
    196c:	100d883a 	mov	r6,r2
    1970:	e0bfc717 	ldw	r2,-228(fp)
    1974:	1085883a 	add	r2,r2,r2
    1978:	1085883a 	add	r2,r2,r2
    197c:	100f883a 	mov	r7,r2
    1980:	e0bfc617 	ldw	r2,-232(fp)
    1984:	1085883a 	add	r2,r2,r2
    1988:	1085883a 	add	r2,r2,r2
    198c:	e0ffc10f 	ldh	r3,-252(fp)
    1990:	d8800015 	stw	r2,0(sp)
    1994:	d8c00115 	stw	r3,4(sp)
    1998:	d8000215 	stw	zero,8(sp)
    199c:	e13fcf17 	ldw	r4,-196(fp)
    19a0:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);

					//Green Box For Record //Record ******************
					// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
					blue_x1 = 55; blue_x2 = 65; blue_y1 = 4; blue_y2 = 14;
    19a4:	00800dc4 	movi	r2,55
    19a8:	e0bfc915 	stw	r2,-220(fp)
    19ac:	00801044 	movi	r2,65
    19b0:	e0bfc715 	stw	r2,-228(fp)
    19b4:	00800104 	movi	r2,4
    19b8:	e0bfc815 	stw	r2,-224(fp)
    19bc:	00800384 	movi	r2,14
    19c0:	e0bfc615 	stw	r2,-232(fp)
					color = 0x100F;
    19c4:	008403c4 	movi	r2,4111
    19c8:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4,
    19cc:	e0bfc917 	ldw	r2,-220(fp)
    19d0:	1085883a 	add	r2,r2,r2
    19d4:	1085883a 	add	r2,r2,r2
    19d8:	100b883a 	mov	r5,r2
    19dc:	e0bfc817 	ldw	r2,-224(fp)
    19e0:	1085883a 	add	r2,r2,r2
    19e4:	1085883a 	add	r2,r2,r2
    19e8:	100d883a 	mov	r6,r2
    19ec:	e0bfc717 	ldw	r2,-228(fp)
    19f0:	1085883a 	add	r2,r2,r2
    19f4:	1085883a 	add	r2,r2,r2
    19f8:	100f883a 	mov	r7,r2
    19fc:	e0bfc617 	ldw	r2,-232(fp)
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1085883a 	add	r2,r2,r2
    1a08:	e0ffc10f 	ldh	r3,-252(fp)
    1a0c:	d8800015 	stw	r2,0(sp)
    1a10:	d8c00115 	stw	r3,4(sp)
    1a14:	d8000215 	stw	zero,8(sp)
    1a18:	e13fcf17 	ldw	r4,-196(fp)
    1a1c:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Echo, blue_x1 + 4, blue_y1 + 4);
    1a20:	e0bfc917 	ldw	r2,-220(fp)
    1a24:	10800104 	addi	r2,r2,4
    1a28:	100d883a 	mov	r6,r2
    1a2c:	e0bfc817 	ldw	r2,-224(fp)
    1a30:	10800104 	addi	r2,r2,4
    1a34:	100f883a 	mov	r7,r2
    1a38:	e17ff504 	addi	r5,fp,-44
    1a3c:	e13fd017 	ldw	r4,-192(fp)
    1a40:	0010c140 	call	10c14 <alt_up_char_buffer_string>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			else if(Temp_MouseX >= 220 && Temp_MouseX <= 260 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
				if(Temp_MouseX <= 222 || Temp_MouseX >= 258 || Temp_MouseY <= 20 || Temp_MouseY >= 52){
    1a44:	00002f06 	br	1b04 <main+0xfc8>
						blue_y2 * 4, color, 0);
					alt_up_char_buffer_string (char_buffer_dev, text_Echo, blue_x1 + 4, blue_y1 + 4);

				}
				else {
					color = 0x100F;		// a medium blue color
    1a48:	008403c4 	movi	r2,4111
    1a4c:	e0bfc10d 	sth	r2,-252(fp)
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    1a50:	e0bfcb17 	ldw	r2,-212(fp)
    1a54:	117fff84 	addi	r5,r2,-2
    1a58:	e0bfca17 	ldw	r2,-216(fp)
    1a5c:	11bfff84 	addi	r6,r2,-2
    1a60:	e0bfcb17 	ldw	r2,-212(fp)
    1a64:	11c00084 	addi	r7,r2,2
    1a68:	e0bfca17 	ldw	r2,-216(fp)
    1a6c:	10800084 	addi	r2,r2,2
    1a70:	e0ffc10f 	ldh	r3,-252(fp)
    1a74:	d8800015 	stw	r2,0(sp)
    1a78:	d8c00115 	stw	r3,4(sp)
    1a7c:	00800044 	movi	r2,1
    1a80:	d8800215 	stw	r2,8(sp)
    1a84:	e13fcf17 	ldw	r4,-196(fp)
    1a88:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
					color = 0x100F;		// a medium blue color
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			else if(Temp_MouseX >= 220 && Temp_MouseX <= 260 && Temp_MouseY >= 16 && Temp_MouseY <= 56){
    1a8c:	00001d06 	br	1b04 <main+0xfc8>
					alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
				}
			}

			//Boxe Out
			else if(Temp_MouseX >= 0 && Temp_MouseX <= 400 && Temp_MouseY >= 0 && Temp_MouseY <= 80){
    1a90:	e0bfcb17 	ldw	r2,-212(fp)
    1a94:	1004803a 	cmplt	r2,r2,zero
    1a98:	10001a1e 	bne	r2,zero,1b04 <main+0xfc8>
    1a9c:	e0bfcb17 	ldw	r2,-212(fp)
    1aa0:	10806448 	cmpgei	r2,r2,401
    1aa4:	1000171e 	bne	r2,zero,1b04 <main+0xfc8>
    1aa8:	e0bfca17 	ldw	r2,-216(fp)
    1aac:	1004803a 	cmplt	r2,r2,zero
    1ab0:	1000141e 	bne	r2,zero,1b04 <main+0xfc8>
    1ab4:	e0bfca17 	ldw	r2,-216(fp)
    1ab8:	10801448 	cmpgei	r2,r2,81
    1abc:	1000111e 	bne	r2,zero,1b04 <main+0xfc8>
				color = 0x0360;
    1ac0:	0080d804 	movi	r2,864
    1ac4:	e0bfc10d 	sth	r2,-252(fp)
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
    1ac8:	e0bfcb17 	ldw	r2,-212(fp)
    1acc:	117fff84 	addi	r5,r2,-2
    1ad0:	e0bfca17 	ldw	r2,-216(fp)
    1ad4:	11bfff84 	addi	r6,r2,-2
    1ad8:	e0bfcb17 	ldw	r2,-212(fp)
    1adc:	11c00084 	addi	r7,r2,2
    1ae0:	e0bfca17 	ldw	r2,-216(fp)
    1ae4:	10800084 	addi	r2,r2,2
    1ae8:	e0ffc10f 	ldh	r3,-252(fp)
    1aec:	d8800015 	stw	r2,0(sp)
    1af0:	d8c00115 	stw	r3,4(sp)
    1af4:	00800044 	movi	r2,1
    1af8:	d8800215 	stw	r2,8(sp)
    1afc:	e13fcf17 	ldw	r4,-196(fp)
    1b00:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
//				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);
//			}

//			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Temp_MouseX - 2, Temp_MouseY - 2, Temp_MouseX + 2, Temp_MouseY + 2, color, 1);

			if(Xsign){
    1b04:	d0a85017 	ldw	r2,-24256(gp)
    1b08:	1005003a 	cmpeq	r2,r2,zero
    1b0c:	1000071e 	bne	r2,zero,1b2c <main+0xff0>
				MouseX = MouseX - (256-(alt_u8)(temp1)) - 1;
    1b10:	e0bfbf17 	ldw	r2,-260(fp)
    1b14:	10c03fcc 	andi	r3,r2,255
    1b18:	e0bfcd17 	ldw	r2,-204(fp)
    1b1c:	1885883a 	add	r2,r3,r2
    1b20:	10bfbfc4 	addi	r2,r2,-257
    1b24:	e0bfcd15 	stw	r2,-204(fp)
    1b28:	00000506 	br	1b40 <main+0x1004>
			}
			else{
				MouseX = MouseX + (alt_u8)(temp1);
    1b2c:	e0bfbf17 	ldw	r2,-260(fp)
    1b30:	10c03fcc 	andi	r3,r2,255
    1b34:	e0bfcd17 	ldw	r2,-204(fp)
    1b38:	10c5883a 	add	r2,r2,r3
    1b3c:	e0bfcd15 	stw	r2,-204(fp)
			}
			if(Ysign){
    1b40:	d0a85417 	ldw	r2,-24240(gp)
    1b44:	1005003a 	cmpeq	r2,r2,zero
    1b48:	1000071e 	bne	r2,zero,1b68 <main+0x102c>
				MouseY = MouseY + (256-(alt_u8)(temp2)) + 1;
    1b4c:	e0bfbe17 	ldw	r2,-264(fp)
    1b50:	10c03fcc 	andi	r3,r2,255
    1b54:	e0bfcc17 	ldw	r2,-208(fp)
    1b58:	10c5c83a 	sub	r2,r2,r3
    1b5c:	10804044 	addi	r2,r2,257
    1b60:	e0bfcc15 	stw	r2,-208(fp)
    1b64:	00000506 	br	1b7c <main+0x1040>
			}
			else {
				MouseY = MouseY - (alt_u8)(temp2);
    1b68:	e0bfbe17 	ldw	r2,-264(fp)
    1b6c:	10c03fcc 	andi	r3,r2,255
    1b70:	e0bfcc17 	ldw	r2,-208(fp)
    1b74:	10c5c83a 	sub	r2,r2,r3
    1b78:	e0bfcc15 	stw	r2,-208(fp)
			}
			if(MouseX >= 320){
    1b7c:	e0bfcd17 	ldw	r2,-204(fp)
    1b80:	10805010 	cmplti	r2,r2,320
    1b84:	1000021e 	bne	r2,zero,1b90 <main+0x1054>
				MouseX = 320;
    1b88:	00805004 	movi	r2,320
    1b8c:	e0bfcd15 	stw	r2,-204(fp)
			}
			if(MouseX <= 2){
    1b90:	e0bfcd17 	ldw	r2,-204(fp)
    1b94:	108000c8 	cmpgei	r2,r2,3
    1b98:	1000021e 	bne	r2,zero,1ba4 <main+0x1068>
				MouseX = 2;
    1b9c:	00800084 	movi	r2,2
    1ba0:	e0bfcd15 	stw	r2,-204(fp)
			}
			if(MouseY >= 77){
    1ba4:	e0bfcc17 	ldw	r2,-208(fp)
    1ba8:	10801350 	cmplti	r2,r2,77
    1bac:	1000021e 	bne	r2,zero,1bb8 <main+0x107c>
				MouseY = 77;
    1bb0:	00801344 	movi	r2,77
    1bb4:	e0bfcc15 	stw	r2,-208(fp)
			}
			if(MouseY <= 2){
    1bb8:	e0bfcc17 	ldw	r2,-208(fp)
    1bbc:	108000c8 	cmpgei	r2,r2,3
    1bc0:	1000021e 	bne	r2,zero,1bcc <main+0x1090>
				MouseY = 2;
    1bc4:	00800084 	movi	r2,2
    1bc8:	e0bfcc15 	stw	r2,-208(fp)
			}
			color = 0xDDDD;		// a medium blue color
    1bcc:	00b77744 	movi	r2,-8739
    1bd0:	e0bfc10d 	sth	r2,-252(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, MouseX - 2, MouseY - 2, MouseX + 2, MouseY + 2, color, 1);
    1bd4:	e0bfcd17 	ldw	r2,-204(fp)
    1bd8:	117fff84 	addi	r5,r2,-2
    1bdc:	e0bfcc17 	ldw	r2,-208(fp)
    1be0:	11bfff84 	addi	r6,r2,-2
    1be4:	e0bfcd17 	ldw	r2,-204(fp)
    1be8:	11c00084 	addi	r7,r2,2
    1bec:	e0bfcc17 	ldw	r2,-208(fp)
    1bf0:	10800084 	addi	r2,r2,2
    1bf4:	e0ffc10f 	ldh	r3,-252(fp)
    1bf8:	d8800015 	stw	r2,0(sp)
    1bfc:	d8c00115 	stw	r3,4(sp)
    1c00:	00800044 	movi	r2,1
    1c04:	d8800215 	stw	r2,8(sp)
    1c08:	e13fcf17 	ldw	r4,-196(fp)
    1c0c:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
//						alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, MouseX - a, MouseY - b,MouseX - a+1, MouseY - b+1, color, 1);
//					}
//				}
//			}

			Temp_MouseX = MouseX;
    1c10:	e0bfcd17 	ldw	r2,-204(fp)
    1c14:	e0bfcb15 	stw	r2,-212(fp)
			Temp_MouseY = MouseY;
    1c18:	e0bfcc17 	ldw	r2,-208(fp)
    1c1c:	e0bfca15 	stw	r2,-216(fp)

			//Record interrupt
			if(MouseX >= 60 && MouseX <= 100 && MouseY >= 16 && MouseY <= 56 && LeftBtn){
    1c20:	e0bfcd17 	ldw	r2,-204(fp)
    1c24:	10800f10 	cmplti	r2,r2,60
    1c28:	10001a1e 	bne	r2,zero,1c94 <main+0x1158>
    1c2c:	e0bfcd17 	ldw	r2,-204(fp)
    1c30:	10801948 	cmpgei	r2,r2,101
    1c34:	1000171e 	bne	r2,zero,1c94 <main+0x1158>
    1c38:	e0bfcc17 	ldw	r2,-208(fp)
    1c3c:	10800410 	cmplti	r2,r2,16
    1c40:	1000141e 	bne	r2,zero,1c94 <main+0x1158>
    1c44:	e0bfcc17 	ldw	r2,-208(fp)
    1c48:	10800e48 	cmpgei	r2,r2,57
    1c4c:	1000111e 	bne	r2,zero,1c94 <main+0x1158>
    1c50:	d0a85217 	ldw	r2,-24248(gp)
    1c54:	1005003a 	cmpeq	r2,r2,zero
    1c58:	10000e1e 	bne	r2,zero,1c94 <main+0x1158>
				index_Echo = 0;
    1c5c:	d0284c15 	stw	zero,-24272(gp)
				Echo_complete = 0;
    1c60:	008000b4 	movhi	r2,2
    1c64:	10a05904 	addi	r2,r2,-32412
    1c68:	10000015 	stw	zero,0(r2)
				Click_Echo = 0;
    1c6c:	008000b4 	movhi	r2,2
    1c70:	10a06204 	addi	r2,r2,-32376
    1c74:	10000015 	stw	zero,0(r2)
				// reset the buffer index for recording
				buf_index_record = 0;
    1c78:	008000b4 	movhi	r2,2
    1c7c:	10a06104 	addi	r2,r2,-32380
    1c80:	10000015 	stw	zero,0(r2)
				// clear audio FIFOs
				alt_up_audio_reset_audio_core (audio_dev);
    1c84:	e13fd117 	ldw	r4,-188(fp)
    1c88:	000ed400 	call	ed40 <alt_up_audio_reset_audio_core>
				// enable audio-in interrupts
				alt_up_audio_enable_read_interrupt (audio_dev);
    1c8c:	e13fd117 	ldw	r4,-188(fp)
    1c90:	000eb900 	call	eb90 <alt_up_audio_enable_read_interrupt>
			}

			//Play interrupt
			if(MouseX >= 140 && MouseX <= 180 && MouseY >= 16 && MouseY <= 56 && LeftBtn){
    1c94:	e0bfcd17 	ldw	r2,-204(fp)
    1c98:	10802310 	cmplti	r2,r2,140
    1c9c:	1000231e 	bne	r2,zero,1d2c <main+0x11f0>
    1ca0:	e0bfcd17 	ldw	r2,-204(fp)
    1ca4:	10802d48 	cmpgei	r2,r2,181
    1ca8:	1000201e 	bne	r2,zero,1d2c <main+0x11f0>
    1cac:	e0bfcc17 	ldw	r2,-208(fp)
    1cb0:	10800410 	cmplti	r2,r2,16
    1cb4:	10001d1e 	bne	r2,zero,1d2c <main+0x11f0>
    1cb8:	e0bfcc17 	ldw	r2,-208(fp)
    1cbc:	10800e48 	cmpgei	r2,r2,57
    1cc0:	10001a1e 	bne	r2,zero,1d2c <main+0x11f0>
    1cc4:	d0a85217 	ldw	r2,-24248(gp)
    1cc8:	1005003a 	cmpeq	r2,r2,zero
    1ccc:	1000171e 	bne	r2,zero,1d2c <main+0x11f0>
				Click_Echo = 0;
    1cd0:	008000b4 	movhi	r2,2
    1cd4:	10a06204 	addi	r2,r2,-32376
    1cd8:	10000015 	stw	zero,0(r2)
				Play_Index = 0;
    1cdc:	008000b4 	movhi	r2,2
    1ce0:	10a05604 	addi	r2,r2,-32424
    1ce4:	10000015 	stw	zero,0(r2)
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0 , 205, 100 * 4,
    1ce8:	00803e84 	movi	r2,250
    1cec:	d8800015 	stw	r2,0(sp)
    1cf0:	0080ca04 	movi	r2,808
    1cf4:	d8800115 	stw	r2,4(sp)
    1cf8:	d8000215 	stw	zero,8(sp)
    1cfc:	e13fcf17 	ldw	r4,-196(fp)
    1d00:	000b883a 	mov	r5,zero
    1d04:	01803344 	movi	r6,205
    1d08:	01c06404 	movi	r7,400
    1d0c:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
					250, 0x0328, 0);
				// reset the buffer index for recording
				buf_index_play = 0;
    1d10:	008000b4 	movhi	r2,2
    1d14:	10a05f04 	addi	r2,r2,-32388
    1d18:	10000015 	stw	zero,0(r2)
				// clear audio FIFOs
				alt_up_audio_reset_audio_core (audio_dev);
    1d1c:	e13fd117 	ldw	r4,-188(fp)
    1d20:	000ed400 	call	ed40 <alt_up_audio_reset_audio_core>
				// enable audio-in interrupts
				alt_up_audio_enable_write_interrupt (audio_dev);
    1d24:	e13fd117 	ldw	r4,-188(fp)
    1d28:	000ec2c0 	call	ec2c <alt_up_audio_enable_write_interrupt>
			}

			//Echo interrupt
			if(MouseX >= 220 && MouseX <= 260 && MouseY >= 16 && MouseY <= 56 && LeftBtn){
    1d2c:	e0bfcd17 	ldw	r2,-204(fp)
    1d30:	10803710 	cmplti	r2,r2,220
    1d34:	1000181e 	bne	r2,zero,1d98 <main+0x125c>
    1d38:	e0bfcd17 	ldw	r2,-204(fp)
    1d3c:	10804148 	cmpgei	r2,r2,261
    1d40:	1000151e 	bne	r2,zero,1d98 <main+0x125c>
    1d44:	e0bfcc17 	ldw	r2,-208(fp)
    1d48:	10800410 	cmplti	r2,r2,16
    1d4c:	1000121e 	bne	r2,zero,1d98 <main+0x125c>
    1d50:	e0bfcc17 	ldw	r2,-208(fp)
    1d54:	10800e48 	cmpgei	r2,r2,57
    1d58:	10000f1e 	bne	r2,zero,1d98 <main+0x125c>
    1d5c:	d0a85217 	ldw	r2,-24248(gp)
    1d60:	1005003a 	cmpeq	r2,r2,zero
    1d64:	10000c1e 	bne	r2,zero,1d98 <main+0x125c>
				Do_Soft_Echo();
    1d68:	000219c0 	call	219c <Do_Soft_Echo>
				Click_Echo = 1;
    1d6c:	008000b4 	movhi	r2,2
    1d70:	10a06204 	addi	r2,r2,-32376
    1d74:	00c00044 	movi	r3,1
    1d78:	10c00015 	stw	r3,0(r2)
				// reset the buffer index for recording
				buf_index_play = 0;
    1d7c:	008000b4 	movhi	r2,2
    1d80:	10a05f04 	addi	r2,r2,-32388
    1d84:	10000015 	stw	zero,0(r2)
				// clear audio FIFOs
				alt_up_audio_reset_audio_core (audio_dev);
    1d88:	e13fd117 	ldw	r4,-188(fp)
    1d8c:	000ed400 	call	ed40 <alt_up_audio_reset_audio_core>
				// enable audio-in interrupts
				alt_up_audio_enable_write_interrupt (audio_dev);
    1d90:	e13fd117 	ldw	r4,-188(fp)
    1d94:	000ec2c0 	call	ec2c <alt_up_audio_enable_write_interrupt>
			}
//			if(Echo_End == 1 && Echo_complete == 0){
//				Do_Echo();
//			}

			if(End_Record == 1){
    1d98:	008000b4 	movhi	r2,2
    1d9c:	10a05c04 	addi	r2,r2,-32400
    1da0:	10800017 	ldw	r2,0(r2)
    1da4:	10800058 	cmpnei	r2,r2,1
    1da8:	10002c1e 	bne	r2,zero,1e5c <main+0x1320>
//				clock_t c1 = clock();
				int time_Start;
				int time_End;
				int Elapsed;
				printf("[timestamp]timestamp 1:%.3f second\n", (float)alt_timestamp()/(float)alt_timestamp_freq());
    1dac:	000ea8c0 	call	ea8c <alt_timestamp>
    1db0:	1009883a 	mov	r4,r2
    1db4:	00032740 	call	3274 <__floatunsisf>
    1db8:	1021883a 	mov	r16,r2
    1dbc:	000eb280 	call	eb28 <alt_timestamp_freq>
    1dc0:	1009883a 	mov	r4,r2
    1dc4:	00032740 	call	3274 <__floatunsisf>
    1dc8:	8085fff2 	custom	255,r2,r16,r2
    1dcc:	1009883a 	mov	r4,r2
    1dd0:	00032200 	call	3220 <__extendsfdf2>
    1dd4:	100d883a 	mov	r6,r2
    1dd8:	180f883a 	mov	r7,r3
    1ddc:	01000074 	movhi	r4,1
    1de0:	210ea404 	addi	r4,r4,14992
    1de4:	300b883a 	mov	r5,r6
    1de8:	380d883a 	mov	r6,r7
    1dec:	0003bac0 	call	3bac <printf>
				Audio_Average(); // Software Calculate
    1df0:	00024cc0 	call	24cc <Audio_Average>
//				clock_t c2 = clock();
				printf("[timestamp]timestamp 1:%.3f second\n", (float)alt_timestamp()/(float)alt_timestamp_freq());
    1df4:	000ea8c0 	call	ea8c <alt_timestamp>
    1df8:	1009883a 	mov	r4,r2
    1dfc:	00032740 	call	3274 <__floatunsisf>
    1e00:	1021883a 	mov	r16,r2
    1e04:	000eb280 	call	eb28 <alt_timestamp_freq>
    1e08:	1009883a 	mov	r4,r2
    1e0c:	00032740 	call	3274 <__floatunsisf>
    1e10:	8085fff2 	custom	255,r2,r16,r2
    1e14:	1009883a 	mov	r4,r2
    1e18:	00032200 	call	3220 <__extendsfdf2>
    1e1c:	100d883a 	mov	r6,r2
    1e20:	180f883a 	mov	r7,r3
    1e24:	01000074 	movhi	r4,1
    1e28:	210ea404 	addi	r4,r4,14992
    1e2c:	300b883a 	mov	r5,r6
    1e30:	380d883a 	mov	r6,r7
    1e34:	0003bac0 	call	3bac <printf>
				Elapsed = time_End - time_Start;
    1e38:	e0ffbb17 	ldw	r3,-276(fp)
    1e3c:	e0bfbc17 	ldw	r2,-272(fp)
    1e40:	1885c83a 	sub	r2,r3,r2
    1e44:	e0bfba15 	stw	r2,-280(fp)
//				printf("%d",Elapsed);
//				int Runtime = ((c2 - c1) * 1000);
//				printf("%d",Runtime);
//				Do_Hardware_Calculate();//Hardware Calculate
//				Calculate_Avrage();//For Hardware
				End_Record = 0;
    1e48:	008000b4 	movhi	r2,2
    1e4c:	10a05c04 	addi	r2,r2,-32400
    1e50:	10000015 	stw	zero,0(r2)
				Plot_AudioRecord(pixel_buffer_dev);
    1e54:	e13fcf17 	ldw	r4,-196(fp)
    1e58:	00023400 	call	2340 <Plot_AudioRecord>
			}
			Plot_Play_Audio(pixel_buffer_dev);
    1e5c:	e13fcf17 	ldw	r4,-196(fp)
    1e60:	00027840 	call	2784 <Plot_Play_Audio>
			timeout = 0;
    1e64:	008000b4 	movhi	r2,2
    1e68:	10a05d04 	addi	r2,r2,-32396
    1e6c:	10000015 	stw	zero,0(r2)

		}
    1e70:	003d7606 	br	144c <main+0x910>
    1e74:	e0bfff17 	ldw	r2,-4(fp)
}
    1e78:	e037883a 	mov	sp,fp
    1e7c:	dfc00217 	ldw	ra,8(sp)
    1e80:	df000117 	ldw	fp,4(sp)
    1e84:	dc000017 	ldw	r16,0(sp)
    1e88:	dec00304 	addi	sp,sp,12
    1e8c:	f800283a 	ret

00001e90 <HEXxy_PS2>:
 * also use the HAL functions for these ports instead
 ****************************************************************************************/

/****************************************************************************************/
void HEXxy_PS2(struct alt_up_dev *up_dev,unsigned char b1, unsigned char b2, unsigned char b3)
{
    1e90:	deffec04 	addi	sp,sp,-80
    1e94:	dfc01315 	stw	ra,76(sp)
    1e98:	df001215 	stw	fp,72(sp)
    1e9c:	df001204 	addi	fp,sp,72
    1ea0:	e13ffc15 	stw	r4,-16(fp)
    1ea4:	e17ffd05 	stb	r5,-12(fp)
    1ea8:	e1bffe05 	stb	r6,-8(fp)
    1eac:	e1ffff05 	stb	r7,-4(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    1eb0:	00840034 	movhi	r2,4096
    1eb4:	10800804 	addi	r2,r2,32
    1eb8:	e0bff515 	stw	r2,-44(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    1ebc:	00840034 	movhi	r2,4096
    1ec0:	10800c04 	addi	r2,r2,48
    1ec4:	e0bff415 	stw	r2,-48(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
												0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71  };
    1ec8:	00800074 	movhi	r2,1
    1ecc:	108ed504 	addi	r2,r2,15188
    1ed0:	e13ff604 	addi	r4,fp,-40
    1ed4:	100b883a 	mov	r5,r2
    1ed8:	01800404 	movi	r6,16
    1edc:	0003a740 	call	3a74 <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    1ee0:	e03ffa05 	stb	zero,-24(fp)
    1ee4:	e03ffa45 	stb	zero,-23(fp)
    1ee8:	e03ffa85 	stb	zero,-22(fp)
    1eec:	e03ffac5 	stb	zero,-21(fp)
    1ef0:	e03ffb05 	stb	zero,-20(fp)
    1ef4:	e03ffb45 	stb	zero,-19(fp)
    1ef8:	e03ffb85 	stb	zero,-18(fp)
    1efc:	e03ffbc5 	stb	zero,-17(fp)
	unsigned int shift_buffer,Temp_Buffer, nibble;
	unsigned char code;
	unsigned int Mouse_Btn;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
    1f00:	e0bffd03 	ldbu	r2,-12(fp)
    1f04:	1006943a 	slli	r3,r2,16
    1f08:	e0bffe03 	ldbu	r2,-8(fp)
    1f0c:	1004923a 	slli	r2,r2,8
    1f10:	1886b03a 	or	r3,r3,r2
    1f14:	e0bfff03 	ldbu	r2,-4(fp)
    1f18:	1884b03a 	or	r2,r3,r2
    1f1c:	e0bff315 	stw	r2,-52(fp)
	Temp_Buffer = shift_buffer;
    1f20:	e0bff317 	ldw	r2,-52(fp)
    1f24:	e0bff215 	stw	r2,-56(fp)


	for ( i = 0; i < 6; i++ )
    1f28:	e03fee15 	stw	zero,-72(fp)
    1f2c:	00008a06 	br	2158 <HEXxy_PS2+0x2c8>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
    1f30:	e0bff317 	ldw	r2,-52(fp)
    1f34:	108003cc 	andi	r2,r2,15
    1f38:	e0bff115 	stw	r2,-60(fp)
		code = seven_seg_decode_table[nibble];
    1f3c:	e0fff117 	ldw	r3,-60(fp)
    1f40:	e0bff604 	addi	r2,fp,-40
    1f44:	10c5883a 	add	r2,r2,r3
    1f48:	10800003 	ldbu	r2,0(r2)
    1f4c:	e0bff005 	stb	r2,-64(fp)
		if(i==0){
    1f50:	e0bfee17 	ldw	r2,-72(fp)
    1f54:	1004c03a 	cmpne	r2,r2,zero
    1f58:	1000131e 	bne	r2,zero,1fa8 <HEXxy_PS2+0x118>
			LeftBtn   = shift_buffer & 0x00000001;
    1f5c:	e0bff317 	ldw	r2,-52(fp)
    1f60:	1080004c 	andi	r2,r2,1
    1f64:	d0a85215 	stw	r2,-24248(gp)
			RightBtn  = shift_buffer & 0x00000002;
    1f68:	e0bff317 	ldw	r2,-52(fp)
    1f6c:	1080008c 	andi	r2,r2,2
    1f70:	d0a84f15 	stw	r2,-24260(gp)
			MiddleBtn = shift_buffer & 0x00000004;
    1f74:	e0bff317 	ldw	r2,-52(fp)
    1f78:	1080010c 	andi	r2,r2,4
    1f7c:	d0a84b15 	stw	r2,-24276(gp)
			Mouse_Btn = LeftBtn | MiddleBtn | RightBtn;
    1f80:	d0e85217 	ldw	r3,-24248(gp)
    1f84:	d0a84b17 	ldw	r2,-24276(gp)
    1f88:	1886b03a 	or	r3,r3,r2
    1f8c:	d0a84f17 	ldw	r2,-24260(gp)
    1f90:	1884b03a 	or	r2,r3,r2
    1f94:	e0bfef15 	stw	r2,-68(fp)
			IOWR_ALT_UP_PARALLEL_PORT_DATA(RED_LEDS_BASE,Mouse_Btn);
    1f98:	e0ffef17 	ldw	r3,-68(fp)
    1f9c:	00840034 	movhi	r2,4096
    1fa0:	10c00035 	stwio	r3,0(r2)
    1fa4:	00006606 	br	2140 <HEXxy_PS2+0x2b0>
		}
		else if(i==1){
    1fa8:	e0bfee17 	ldw	r2,-72(fp)
    1fac:	10800058 	cmpnei	r2,r2,1
    1fb0:	1000211e 	bne	r2,zero,2038 <HEXxy_PS2+0x1a8>
			Xsign = shift_buffer & 0x00000001;
    1fb4:	e0bff317 	ldw	r2,-52(fp)
    1fb8:	1080004c 	andi	r2,r2,1
    1fbc:	d0a85015 	stw	r2,-24256(gp)
			Ysign = shift_buffer & 0x00000002;
    1fc0:	e0bff317 	ldw	r2,-52(fp)
    1fc4:	1080008c 	andi	r2,r2,2
    1fc8:	d0a85415 	stw	r2,-24240(gp)
			XoverFlow = shift_buffer & 0x00000004;
    1fcc:	e0bff317 	ldw	r2,-52(fp)
    1fd0:	1080010c 	andi	r2,r2,4
    1fd4:	d0a84a15 	stw	r2,-24280(gp)
			YoverFlow = shift_buffer & 0x00000008;
    1fd8:	e0bff317 	ldw	r2,-52(fp)
    1fdc:	1080020c 	andi	r2,r2,8
    1fe0:	d0a85315 	stw	r2,-24244(gp)
			hex_segs[6] = seven_seg_decode_table[Xsign];
    1fe4:	d0e85017 	ldw	r3,-24256(gp)
    1fe8:	e0bff604 	addi	r2,fp,-40
    1fec:	10c5883a 	add	r2,r2,r3
    1ff0:	10800003 	ldbu	r2,0(r2)
    1ff4:	e0bffb85 	stb	r2,-18(fp)
			hex_segs[2] = seven_seg_decode_table[Ysign];
    1ff8:	d0e85417 	ldw	r3,-24240(gp)
    1ffc:	e0bff604 	addi	r2,fp,-40
    2000:	10c5883a 	add	r2,r2,r3
    2004:	10800003 	ldbu	r2,0(r2)
    2008:	e0bffa85 	stb	r2,-22(fp)
			hex_segs[7] = seven_seg_decode_table[XoverFlow];
    200c:	d0e84a17 	ldw	r3,-24280(gp)
    2010:	e0bff604 	addi	r2,fp,-40
    2014:	10c5883a 	add	r2,r2,r3
    2018:	10800003 	ldbu	r2,0(r2)
    201c:	e0bffbc5 	stb	r2,-17(fp)
			hex_segs[3] = seven_seg_decode_table[YoverFlow];
    2020:	d0e85317 	ldw	r3,-24244(gp)
    2024:	e0bff604 	addi	r2,fp,-40
    2028:	10c5883a 	add	r2,r2,r3
    202c:	10800003 	ldbu	r2,0(r2)
    2030:	e0bffac5 	stb	r2,-21(fp)
    2034:	00004206 	br	2140 <HEXxy_PS2+0x2b0>
		}
		else if(i==4 || i==5){
    2038:	e0bfee17 	ldw	r2,-72(fp)
    203c:	10800120 	cmpeqi	r2,r2,4
    2040:	1000031e 	bne	r2,zero,2050 <HEXxy_PS2+0x1c0>
    2044:	e0bfee17 	ldw	r2,-72(fp)
    2048:	10800158 	cmpnei	r2,r2,5
    204c:	10001b1e 	bne	r2,zero,20bc <HEXxy_PS2+0x22c>
			Temp_Sign = Temp_Buffer & 0x00000010;
    2050:	e0bff217 	ldw	r2,-56(fp)
    2054:	1080040c 	andi	r2,r2,16
    2058:	d0a85115 	stw	r2,-24252(gp)
			if(Xsign){
    205c:	d0a85017 	ldw	r2,-24256(gp)
    2060:	1005003a 	cmpeq	r2,r2,zero
    2064:	10000a1e 	bne	r2,zero,2090 <HEXxy_PS2+0x200>
				nibble_TempX = 15 - nibble;
    2068:	00c003c4 	movi	r3,15
    206c:	e0bff117 	ldw	r2,-60(fp)
    2070:	1885c83a 	sub	r2,r3,r2
    2074:	d0a84e15 	stw	r2,-24264(gp)
				code = seven_seg_decode_table[nibble_TempX];
    2078:	d0e84e17 	ldw	r3,-24264(gp)
    207c:	e0bff604 	addi	r2,fp,-40
    2080:	10c5883a 	add	r2,r2,r3
    2084:	10800003 	ldbu	r2,0(r2)
    2088:	e0bff005 	stb	r2,-64(fp)
    208c:	00000506 	br	20a4 <HEXxy_PS2+0x214>
			}
			else{
				code = seven_seg_decode_table[nibble];
    2090:	e0fff117 	ldw	r3,-60(fp)
    2094:	e0bff604 	addi	r2,fp,-40
    2098:	10c5883a 	add	r2,r2,r3
    209c:	10800003 	ldbu	r2,0(r2)
    20a0:	e0bff005 	stb	r2,-64(fp)
			}
			hex_segs[i] = code;
    20a4:	e0ffee17 	ldw	r3,-72(fp)
    20a8:	e0bffa04 	addi	r2,fp,-24
    20ac:	10c7883a 	add	r3,r2,r3
    20b0:	e0bff003 	ldbu	r2,-64(fp)
    20b4:	18800005 	stb	r2,0(r3)
			hex_segs[6] = seven_seg_decode_table[Xsign];
			hex_segs[2] = seven_seg_decode_table[Ysign];
			hex_segs[7] = seven_seg_decode_table[XoverFlow];
			hex_segs[3] = seven_seg_decode_table[YoverFlow];
		}
		else if(i==4 || i==5){
    20b8:	00002106 	br	2140 <HEXxy_PS2+0x2b0>
			else{
				code = seven_seg_decode_table[nibble];
			}
			hex_segs[i] = code;
		}
		else if(i==2 || i==3){
    20bc:	e0bfee17 	ldw	r2,-72(fp)
    20c0:	108000a0 	cmpeqi	r2,r2,2
    20c4:	1000031e 	bne	r2,zero,20d4 <HEXxy_PS2+0x244>
    20c8:	e0bfee17 	ldw	r2,-72(fp)
    20cc:	108000d8 	cmpnei	r2,r2,3
    20d0:	10001b1e 	bne	r2,zero,2140 <HEXxy_PS2+0x2b0>
			Temp_Sign = Temp_Buffer & 0x00000002;
    20d4:	e0bff217 	ldw	r2,-56(fp)
    20d8:	1080008c 	andi	r2,r2,2
    20dc:	d0a85115 	stw	r2,-24252(gp)
			if(Ysign){
    20e0:	d0a85417 	ldw	r2,-24240(gp)
    20e4:	1005003a 	cmpeq	r2,r2,zero
    20e8:	10000a1e 	bne	r2,zero,2114 <HEXxy_PS2+0x284>
				nibble_TempY = 15 - nibble;
    20ec:	00c003c4 	movi	r3,15
    20f0:	e0bff117 	ldw	r2,-60(fp)
    20f4:	1885c83a 	sub	r2,r3,r2
    20f8:	d0a84d15 	stw	r2,-24268(gp)
				code = seven_seg_decode_table[nibble_TempY];
    20fc:	d0e84d17 	ldw	r3,-24268(gp)
    2100:	e0bff604 	addi	r2,fp,-40
    2104:	10c5883a 	add	r2,r2,r3
    2108:	10800003 	ldbu	r2,0(r2)
    210c:	e0bff005 	stb	r2,-64(fp)
    2110:	00000506 	br	2128 <HEXxy_PS2+0x298>
			}
			else{
				code = seven_seg_decode_table[nibble];
    2114:	e0fff117 	ldw	r3,-60(fp)
    2118:	e0bff604 	addi	r2,fp,-40
    211c:	10c5883a 	add	r2,r2,r3
    2120:	10800003 	ldbu	r2,0(r2)
    2124:	e0bff005 	stb	r2,-64(fp)
			}
			hex_segs[i-2] = code;
    2128:	e0bfee17 	ldw	r2,-72(fp)
    212c:	10ffff84 	addi	r3,r2,-2
    2130:	e0bffa04 	addi	r2,fp,-24
    2134:	10c7883a 	add	r3,r2,r3
    2138:	e0bff003 	ldbu	r2,-64(fp)
    213c:	18800005 	stb	r2,0(r3)
		}
		shift_buffer = shift_buffer >> 4;
    2140:	e0bff317 	ldw	r2,-52(fp)
    2144:	1004d13a 	srli	r2,r2,4
    2148:	e0bff315 	stw	r2,-52(fp)

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	Temp_Buffer = shift_buffer;


	for ( i = 0; i < 6; i++ )
    214c:	e0bfee17 	ldw	r2,-72(fp)
    2150:	10800044 	addi	r2,r2,1
    2154:	e0bfee15 	stw	r2,-72(fp)
    2158:	e0bfee17 	ldw	r2,-72(fp)
    215c:	10800190 	cmplti	r2,r2,6
    2160:	103f731e 	bne	r2,zero,1f30 <HEXxy_PS2+0xa0>
			hex_segs[i-2] = code;
		}
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    2164:	e0bffa04 	addi	r2,fp,-24
    2168:	10c00017 	ldw	r3,0(r2)
    216c:	e0bff517 	ldw	r2,-44(fp)
    2170:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    2174:	e0bffa04 	addi	r2,fp,-24
    2178:	10800104 	addi	r2,r2,4
    217c:	10c00017 	ldw	r3,0(r2)
    2180:	e0bff417 	ldw	r2,-48(fp)
    2184:	10c00015 	stw	r3,0(r2)
}
    2188:	e037883a 	mov	sp,fp
    218c:	dfc00117 	ldw	ra,4(sp)
    2190:	df000017 	ldw	fp,0(sp)
    2194:	dec00204 	addi	sp,sp,8
    2198:	f800283a 	ret

0000219c <Do_Soft_Echo>:
//
//}


/****************************************************************************************/
void Do_Soft_Echo(){
    219c:	defff504 	addi	sp,sp,-44
    21a0:	dfc00a15 	stw	ra,40(sp)
    21a4:	df000915 	stw	fp,36(sp)
    21a8:	df000904 	addi	fp,sp,36
	int j;
	int i;
	for(i=0;i<BUF_SIZE;i++){
    21ac:	e03ffe15 	stw	zero,-8(fp)
    21b0:	00005206 	br	22fc <Do_Soft_Echo+0x160>
		alt_64 temp = 0;
    21b4:	e03ffc15 	stw	zero,-16(fp)
    21b8:	e03ffd15 	stw	zero,-12(fp)
		for(j = 0; j<64; j++)
    21bc:	e03fff15 	stw	zero,-4(fp)
    21c0:	00002d06 	br	2278 <Do_Soft_Echo+0xdc>
		{
			alt_64 eff = (alt_64)(coeff[j]);
    21c4:	e0bfff17 	ldw	r2,-4(fp)
    21c8:	00c00074 	movhi	r3,1
    21cc:	18d00904 	addi	r3,r3,16420
    21d0:	1085883a 	add	r2,r2,r2
    21d4:	10c5883a 	add	r2,r2,r3
    21d8:	1080000b 	ldhu	r2,0(r2)
    21dc:	10bfffcc 	andi	r2,r2,65535
    21e0:	10a0001c 	xori	r2,r2,32768
    21e4:	10a00004 	addi	r2,r2,-32768
    21e8:	e0bff915 	stw	r2,-28(fp)
    21ec:	1005d7fa 	srai	r2,r2,31
    21f0:	e0bffa15 	stw	r2,-24(fp)
			alt_64 data = ((alt_64)((alt_32)l_buf[i-j]));
    21f4:	e0fffe17 	ldw	r3,-8(fp)
    21f8:	e0bfff17 	ldw	r2,-4(fp)
    21fc:	1885c83a 	sub	r2,r3,r2
    2200:	00c01774 	movhi	r3,93
    2204:	18c3f304 	addi	r3,r3,4044
    2208:	1085883a 	add	r2,r2,r2
    220c:	1085883a 	add	r2,r2,r2
    2210:	10c5883a 	add	r2,r2,r3
    2214:	10800017 	ldw	r2,0(r2)
    2218:	e0bff715 	stw	r2,-36(fp)
    221c:	1005d7fa 	srai	r2,r2,31
    2220:	e0bff815 	stw	r2,-32(fp)
			temp = (temp + (data * eff));
    2224:	e13ff717 	ldw	r4,-36(fp)
    2228:	e17ff817 	ldw	r5,-32(fp)
    222c:	e1bff917 	ldw	r6,-28(fp)
    2230:	e1fffa17 	ldw	r7,-24(fp)
    2234:	0002b080 	call	2b08 <__muldi3>
    2238:	1009883a 	mov	r4,r2
    223c:	180b883a 	mov	r5,r3
    2240:	200d883a 	mov	r6,r4
    2244:	280f883a 	mov	r7,r5
    2248:	e13ffc17 	ldw	r4,-16(fp)
    224c:	e17ffd17 	ldw	r5,-12(fp)
    2250:	2185883a 	add	r2,r4,r6
    2254:	1111803a 	cmpltu	r8,r2,r4
    2258:	29c7883a 	add	r3,r5,r7
    225c:	40c9883a 	add	r4,r8,r3
    2260:	2007883a 	mov	r3,r4
    2264:	e0bffc15 	stw	r2,-16(fp)
    2268:	e0fffd15 	stw	r3,-12(fp)
void Do_Soft_Echo(){
	int j;
	int i;
	for(i=0;i<BUF_SIZE;i++){
		alt_64 temp = 0;
		for(j = 0; j<64; j++)
    226c:	e0bfff17 	ldw	r2,-4(fp)
    2270:	10800044 	addi	r2,r2,1
    2274:	e0bfff15 	stw	r2,-4(fp)
    2278:	e0bfff17 	ldw	r2,-4(fp)
    227c:	10801010 	cmplti	r2,r2,64
    2280:	103fd01e 	bne	r2,zero,21c4 <Do_Soft_Echo+0x28>
		{
			alt_64 eff = (alt_64)(coeff[j]);
			alt_64 data = ((alt_64)((alt_32)l_buf[i-j]));
			temp = (temp + (data * eff));
		}
		temp = (temp >> 15);
    2284:	e0bffd17 	ldw	r2,-12(fp)
    2288:	100a947a 	slli	r5,r2,17
    228c:	e13ffc17 	ldw	r4,-16(fp)
    2290:	e1bffd17 	ldw	r6,-12(fp)
    2294:	2004d3fa 	srli	r2,r4,15
    2298:	1144b03a 	or	r2,r2,r5
    229c:	3007d3fa 	srai	r3,r6,15
    22a0:	e0bffc15 	stw	r2,-16(fp)
    22a4:	e0fffd15 	stw	r3,-12(fp)
		alt_u32 dataout = (alt_u32)((alt_32)temp);
    22a8:	e0bffc17 	ldw	r2,-16(fp)
    22ac:	e0bffb15 	stw	r2,-20(fp)
		Echo_buf_l[i] = dataout;
    22b0:	e0bffe17 	ldw	r2,-8(fp)
    22b4:	00c000b4 	movhi	r3,2
    22b8:	18e09304 	addi	r3,r3,-32180
    22bc:	1085883a 	add	r2,r2,r2
    22c0:	1085883a 	add	r2,r2,r2
    22c4:	10c7883a 	add	r3,r2,r3
    22c8:	e0bffb17 	ldw	r2,-20(fp)
    22cc:	18800015 	stw	r2,0(r3)
		Echo_buf_r[i] = dataout;
    22d0:	e0bffe17 	ldw	r2,-8(fp)
    22d4:	00c00ff4 	movhi	r3,63
    22d8:	18e2d304 	addi	r3,r3,-29876
    22dc:	1085883a 	add	r2,r2,r2
    22e0:	1085883a 	add	r2,r2,r2
    22e4:	10c7883a 	add	r3,r2,r3
    22e8:	e0bffb17 	ldw	r2,-20(fp)
    22ec:	18800015 	stw	r2,0(r3)

/****************************************************************************************/
void Do_Soft_Echo(){
	int j;
	int i;
	for(i=0;i<BUF_SIZE;i++){
    22f0:	e0bffe17 	ldw	r2,-8(fp)
    22f4:	10800044 	addi	r2,r2,1
    22f8:	e0bffe15 	stw	r2,-8(fp)
    22fc:	e0fffe17 	ldw	r3,-8(fp)
    2300:	00800234 	movhi	r2,8
    2304:	10a847c4 	addi	r2,r2,-24289
    2308:	10ffaa0e 	bge	r2,r3,21b4 <Do_Soft_Echo+0x18>
//			temp = ((alt_64)temp + (((alt_64)((alt_32)r_buf[i])) * ((alt_64)coeff)));
//		}
//		Echo_buf_r[i] = temp;
//	}

	IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE,0x0);
    230c:	00840034 	movhi	r2,4096
    2310:	10800404 	addi	r2,r2,16
    2314:	10000035 	stwio	zero,0(r2)
	Echo = 0;
    2318:	d0284615 	stw	zero,-24296(gp)
	Echo_complete = 1;
    231c:	00c000b4 	movhi	r3,2
    2320:	18e05904 	addi	r3,r3,-32412
    2324:	00800044 	movi	r2,1
    2328:	18800015 	stw	r2,0(r3)
}
    232c:	e037883a 	mov	sp,fp
    2330:	dfc00117 	ldw	ra,4(sp)
    2334:	df000017 	ldw	fp,0(sp)
    2338:	dec00204 	addi	sp,sp,8
    233c:	f800283a 	ret

00002340 <Plot_AudioRecord>:

/****************************************************************************************/
void Plot_AudioRecord(alt_up_pixel_buffer_dma_dev *pixel_buffer){
    2340:	defff204 	addi	sp,sp,-56
    2344:	dfc00d15 	stw	ra,52(sp)
    2348:	df000c15 	stw	fp,48(sp)
    234c:	df000c04 	addi	fp,sp,48
    2350:	e13fff15 	stw	r4,-4(fp)

	// Draw Audio Display
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer, 0 , 20 * 4, 100 * 4,
    2354:	00803c04 	movi	r2,240
    2358:	d8800015 	stw	r2,0(sp)
    235c:	0080ca04 	movi	r2,808
    2360:	d8800115 	stw	r2,4(sp)
    2364:	d8000215 	stw	zero,8(sp)
    2368:	e13fff17 	ldw	r4,-4(fp)
    236c:	000b883a 	mov	r5,zero
    2370:	01801404 	movi	r6,80
    2374:	01c06404 	movi	r7,400
    2378:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
		60 * 4, 0x0328, 0);

	//Audio Line
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer,10 * 4, 70 * 4, 21 * 4, 0xABCD, 0);
    237c:	00aaf354 	movui	r2,43981
    2380:	d8800015 	stw	r2,0(sp)
    2384:	d8000115 	stw	zero,4(sp)
    2388:	e13fff17 	ldw	r4,-4(fp)
    238c:	01400a04 	movi	r5,40
    2390:	01804604 	movi	r6,280
    2394:	01c01504 	movi	r7,84
    2398:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer,10 * 4, 70 * 4, 23 * 4, 0xABCD, 0);
    239c:	00aaf354 	movui	r2,43981
    23a0:	d8800015 	stw	r2,0(sp)
    23a4:	d8000115 	stw	zero,4(sp)
    23a8:	e13fff17 	ldw	r4,-4(fp)
    23ac:	01400a04 	movi	r5,40
    23b0:	01804604 	movi	r6,280
    23b4:	01c01704 	movi	r7,92
    23b8:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>
	//Audio OverFlow
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer,10, 300, 105, 0xABCD, 0);
    23bc:	00aaf354 	movui	r2,43981
    23c0:	d8800015 	stw	r2,0(sp)
    23c4:	d8000115 	stw	zero,4(sp)
    23c8:	e13fff17 	ldw	r4,-4(fp)
    23cc:	01400284 	movi	r5,10
    23d0:	01804b04 	movi	r6,300
    23d4:	01c01a44 	movi	r7,105
    23d8:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>

	int i=0;
    23dc:	e03ffe15 	stw	zero,-8(fp)
	short color = 0x8053;
    23e0:	00a014c4 	movi	r2,-32685
    23e4:	e0bffd0d 	sth	r2,-12(fp)
	int x1 = 10;
    23e8:	00800284 	movi	r2,10
    23ec:	e0bffc15 	stw	r2,-16(fp)
	int x2 = 310;
    23f0:	00804d84 	movi	r2,310
    23f4:	e0bffb15 	stw	r2,-20(fp)
	int gap = 3;
    23f8:	008000c4 	movi	r2,3
    23fc:	e0bffa15 	stw	r2,-24(fp)
	int Range = ((x2 - x1)/N)-3;
    2400:	e0fffb17 	ldw	r3,-20(fp)
    2404:	e0bffc17 	ldw	r2,-16(fp)
    2408:	1887c83a 	sub	r3,r3,r2
    240c:	00800784 	movi	r2,30
    2410:	1885283a 	div	r2,r3,r2
    2414:	10bfff44 	addi	r2,r2,-3
    2418:	e0bff915 	stw	r2,-28(fp)

	int x_Start=0,x_End=10;
    241c:	e03ff815 	stw	zero,-32(fp)
    2420:	00800284 	movi	r2,10
    2424:	e0bff715 	stw	r2,-36(fp)

	for(i=0;i<N;i++){
    2428:	e03ffe15 	stw	zero,-8(fp)
    242c:	00001f06 	br	24ac <Plot_AudioRecord+0x16c>
		x_Start = x_End + gap;
    2430:	e0fff717 	ldw	r3,-36(fp)
    2434:	e0bffa17 	ldw	r2,-24(fp)
    2438:	1885883a 	add	r2,r3,r2
    243c:	e0bff815 	stw	r2,-32(fp)
		x_End = x_Start + Range;
    2440:	e0fff817 	ldw	r3,-32(fp)
    2444:	e0bff917 	ldw	r2,-28(fp)
    2448:	1885883a 	add	r2,r3,r2
    244c:	e0bff715 	stw	r2,-36(fp)
		//Draw Audio Range
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer, x_Start, 200-Average[i], x_End,
    2450:	e0bffe17 	ldw	r2,-8(fp)
    2454:	00c01f34 	movhi	r3,124
    2458:	18e56d04 	addi	r3,r3,-27212
    245c:	100490fa 	slli	r2,r2,3
    2460:	10c9883a 	add	r4,r2,r3
    2464:	20800017 	ldw	r2,0(r4)
    2468:	20c00117 	ldw	r3,4(r4)
    246c:	1007883a 	mov	r3,r2
    2470:	00803204 	movi	r2,200
    2474:	10c5c83a 	sub	r2,r2,r3
    2478:	100d883a 	mov	r6,r2
    247c:	e0fffd0f 	ldh	r3,-12(fp)
    2480:	00803204 	movi	r2,200
    2484:	d8800015 	stw	r2,0(sp)
    2488:	d8c00115 	stw	r3,4(sp)
    248c:	d8000215 	stw	zero,8(sp)
    2490:	e13fff17 	ldw	r4,-4(fp)
    2494:	e17ff817 	ldw	r5,-32(fp)
    2498:	e1fff717 	ldw	r7,-36(fp)
    249c:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
	int gap = 3;
	int Range = ((x2 - x1)/N)-3;

	int x_Start=0,x_End=10;

	for(i=0;i<N;i++){
    24a0:	e0bffe17 	ldw	r2,-8(fp)
    24a4:	10800044 	addi	r2,r2,1
    24a8:	e0bffe15 	stw	r2,-8(fp)
    24ac:	e0bffe17 	ldw	r2,-8(fp)
    24b0:	10800790 	cmplti	r2,r2,30
    24b4:	103fde1e 	bne	r2,zero,2430 <Plot_AudioRecord+0xf0>
		x_End = x_Start + Range;
		//Draw Audio Range
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer, x_Start, 200-Average[i], x_End,
			200, color, 0);
	}
}
    24b8:	e037883a 	mov	sp,fp
    24bc:	dfc00117 	ldw	ra,4(sp)
    24c0:	df000017 	ldw	fp,0(sp)
    24c4:	dec00204 	addi	sp,sp,8
    24c8:	f800283a 	ret

000024cc <Audio_Average>:
/****************************************************************************************/
void Audio_Average(){
    24cc:	defff404 	addi	sp,sp,-48
    24d0:	dfc00b15 	stw	ra,44(sp)
    24d4:	df000a15 	stw	fp,40(sp)
    24d8:	dc000915 	stw	r16,36(sp)
    24dc:	df000904 	addi	fp,sp,36
	int i=0;
    24e0:	e03ffb15 	stw	zero,-20(fp)
	int j=0;
    24e4:	e03ffa15 	stw	zero,-24(fp)
	long long int Sum=0;
    24e8:	e03ff815 	stw	zero,-32(fp)
    24ec:	e03ff915 	stw	zero,-28(fp)

	int Duration = BUF_SIZE / N;
    24f0:	00904684 	movi	r2,16666
    24f4:	e0bff715 	stw	r2,-36(fp)
	for(j=0;j<N;j++){
    24f8:	e03ffa15 	stw	zero,-24(fp)
    24fc:	00009806 	br	2760 <Audio_Average+0x294>
		Average[j] = 0;
    2500:	e0bffa17 	ldw	r2,-24(fp)
    2504:	00c01f34 	movhi	r3,124
    2508:	18e56d04 	addi	r3,r3,-27212
    250c:	100490fa 	slli	r2,r2,3
    2510:	10c5883a 	add	r2,r2,r3
    2514:	10000015 	stw	zero,0(r2)
    2518:	10000115 	stw	zero,4(r2)
		Sum =0;
    251c:	e03ff815 	stw	zero,-32(fp)
    2520:	e03ff915 	stw	zero,-28(fp)
		for(i=0;i<Duration;i++){
    2524:	e03ffb15 	stw	zero,-20(fp)
    2528:	00004506 	br	2640 <Audio_Average+0x174>
			Sum = ((alt_u64)abs(((alt_u32)l_buf[i + j * Duration]))) + Sum;
    252c:	e0fffa17 	ldw	r3,-24(fp)
    2530:	e0bff717 	ldw	r2,-36(fp)
    2534:	1887383a 	mul	r3,r3,r2
    2538:	e0bffb17 	ldw	r2,-20(fp)
    253c:	1885883a 	add	r2,r3,r2
    2540:	00c01774 	movhi	r3,93
    2544:	18c3f304 	addi	r3,r3,4044
    2548:	1085883a 	add	r2,r2,r2
    254c:	1085883a 	add	r2,r2,r2
    2550:	10c5883a 	add	r2,r2,r3
    2554:	10800017 	ldw	r2,0(r2)
    2558:	e0bfff15 	stw	r2,-4(fp)
    255c:	e0ffff17 	ldw	r3,-4(fp)
    2560:	1804403a 	cmpge	r2,r3,zero
    2564:	1000031e 	bne	r2,zero,2574 <Audio_Average+0xa8>
    2568:	e13fff17 	ldw	r4,-4(fp)
    256c:	0109c83a 	sub	r4,zero,r4
    2570:	e13fff15 	stw	r4,-4(fp)
    2574:	e0ffff17 	ldw	r3,-4(fp)
    2578:	1805d7fa 	srai	r2,r3,31
    257c:	e13fff17 	ldw	r4,-4(fp)
    2580:	100b883a 	mov	r5,r2
    2584:	e1bff817 	ldw	r6,-32(fp)
    2588:	e1fff917 	ldw	r7,-28(fp)
    258c:	2185883a 	add	r2,r4,r6
    2590:	1111803a 	cmpltu	r8,r2,r4
    2594:	29c7883a 	add	r3,r5,r7
    2598:	40c9883a 	add	r4,r8,r3
    259c:	2007883a 	mov	r3,r4
    25a0:	1009883a 	mov	r4,r2
    25a4:	180b883a 	mov	r5,r3
    25a8:	e13ff815 	stw	r4,-32(fp)
    25ac:	e17ff915 	stw	r5,-28(fp)
			Sum = ((alt_u64)abs(((alt_u32)r_buf[i + j * Duration]))) + Sum;
    25b0:	e0fffa17 	ldw	r3,-24(fp)
    25b4:	e0bff717 	ldw	r2,-36(fp)
    25b8:	1887383a 	mul	r3,r3,r2
    25bc:	e0bffb17 	ldw	r2,-20(fp)
    25c0:	1885883a 	add	r2,r3,r2
    25c4:	00c00834 	movhi	r3,32
    25c8:	18c1b304 	addi	r3,r3,1740
    25cc:	1085883a 	add	r2,r2,r2
    25d0:	1085883a 	add	r2,r2,r2
    25d4:	10c5883a 	add	r2,r2,r3
    25d8:	10800017 	ldw	r2,0(r2)
    25dc:	e0bffe15 	stw	r2,-8(fp)
    25e0:	e13ffe17 	ldw	r4,-8(fp)
    25e4:	2004403a 	cmpge	r2,r4,zero
    25e8:	1000031e 	bne	r2,zero,25f8 <Audio_Average+0x12c>
    25ec:	e0bffe17 	ldw	r2,-8(fp)
    25f0:	0085c83a 	sub	r2,zero,r2
    25f4:	e0bffe15 	stw	r2,-8(fp)
    25f8:	e0fffe17 	ldw	r3,-8(fp)
    25fc:	1805d7fa 	srai	r2,r3,31
    2600:	e13ffe17 	ldw	r4,-8(fp)
    2604:	100b883a 	mov	r5,r2
    2608:	e1bff817 	ldw	r6,-32(fp)
    260c:	e1fff917 	ldw	r7,-28(fp)
    2610:	2185883a 	add	r2,r4,r6
    2614:	1111803a 	cmpltu	r8,r2,r4
    2618:	29c7883a 	add	r3,r5,r7
    261c:	40c9883a 	add	r4,r8,r3
    2620:	2007883a 	mov	r3,r4
    2624:	1009883a 	mov	r4,r2
    2628:	180b883a 	mov	r5,r3
    262c:	e13ff815 	stw	r4,-32(fp)
    2630:	e17ff915 	stw	r5,-28(fp)

	int Duration = BUF_SIZE / N;
	for(j=0;j<N;j++){
		Average[j] = 0;
		Sum =0;
		for(i=0;i<Duration;i++){
    2634:	e0bffb17 	ldw	r2,-20(fp)
    2638:	10800044 	addi	r2,r2,1
    263c:	e0bffb15 	stw	r2,-20(fp)
    2640:	e0fffb17 	ldw	r3,-20(fp)
    2644:	e0bff717 	ldw	r2,-36(fp)
    2648:	18bfb816 	blt	r3,r2,252c <Audio_Average+0x60>
			Sum = ((alt_u64)abs(((alt_u32)l_buf[i + j * Duration]))) + Sum;
			Sum = ((alt_u64)abs(((alt_u32)r_buf[i + j * Duration]))) + Sum;
		}

		Average[j] = (((Sum * 400) / (Duration) ) >> 32);
    264c:	e43ffa17 	ldw	r16,-24(fp)
    2650:	e13ff817 	ldw	r4,-32(fp)
    2654:	e17ff917 	ldw	r5,-28(fp)
    2658:	01806404 	movi	r6,400
    265c:	000f883a 	mov	r7,zero
    2660:	0002b080 	call	2b08 <__muldi3>
    2664:	1009883a 	mov	r4,r2
    2668:	180b883a 	mov	r5,r3
    266c:	200d883a 	mov	r6,r4
    2670:	280f883a 	mov	r7,r5
    2674:	e0bff717 	ldw	r2,-36(fp)
    2678:	1009d7fa 	srai	r4,r2,31
    267c:	e0bff717 	ldw	r2,-36(fp)
    2680:	2007883a 	mov	r3,r4
    2684:	3009883a 	mov	r4,r6
    2688:	380b883a 	mov	r5,r7
    268c:	100d883a 	mov	r6,r2
    2690:	180f883a 	mov	r7,r3
    2694:	0002ba00 	call	2ba0 <__divdi3>
    2698:	1009883a 	mov	r4,r2
    269c:	180b883a 	mov	r5,r3
    26a0:	2005883a 	mov	r2,r4
    26a4:	2807883a 	mov	r3,r5
    26a8:	1809d83a 	sra	r4,r3,zero
    26ac:	180bd7fa 	srai	r5,r3,31
    26b0:	00c01f34 	movhi	r3,124
    26b4:	18e56d04 	addi	r3,r3,-27212
    26b8:	800490fa 	slli	r2,r16,3
    26bc:	10c5883a 	add	r2,r2,r3
    26c0:	11000015 	stw	r4,0(r2)
    26c4:	11400115 	stw	r5,4(r2)
        if((200-Average[j]) < 110 ){
    26c8:	e0bffa17 	ldw	r2,-24(fp)
    26cc:	00c01f34 	movhi	r3,124
    26d0:	18e56d04 	addi	r3,r3,-27212
    26d4:	100490fa 	slli	r2,r2,3
    26d8:	10c5883a 	add	r2,r2,r3
    26dc:	11800017 	ldw	r6,0(r2)
    26e0:	11c00117 	ldw	r7,4(r2)
    26e4:	01003204 	movi	r4,200
    26e8:	000b883a 	mov	r5,zero
    26ec:	2185c83a 	sub	r2,r4,r6
    26f0:	2091803a 	cmpltu	r8,r4,r2
    26f4:	29c7c83a 	sub	r3,r5,r7
    26f8:	1a09c83a 	sub	r4,r3,r8
    26fc:	2007883a 	mov	r3,r4
    2700:	1009883a 	mov	r4,r2
    2704:	e13ffc15 	stw	r4,-16(fp)
    2708:	1805883a 	mov	r2,r3
    270c:	e0bffd15 	stw	r2,-12(fp)
    2710:	e0fffd17 	ldw	r3,-12(fp)
    2714:	18800048 	cmpgei	r2,r3,1
    2718:	10000e1e 	bne	r2,zero,2754 <Audio_Average+0x288>
    271c:	e13ffd17 	ldw	r4,-12(fp)
    2720:	2004c03a 	cmpne	r2,r4,zero
    2724:	1000031e 	bne	r2,zero,2734 <Audio_Average+0x268>
    2728:	e0fffc17 	ldw	r3,-16(fp)
    272c:	18801ba8 	cmpgeui	r2,r3,110
    2730:	1000081e 	bne	r2,zero,2754 <Audio_Average+0x288>
        	Average[j] = 95;
    2734:	e0bffa17 	ldw	r2,-24(fp)
    2738:	00c01f34 	movhi	r3,124
    273c:	18e56d04 	addi	r3,r3,-27212
    2740:	100490fa 	slli	r2,r2,3
    2744:	10c7883a 	add	r3,r2,r3
    2748:	008017c4 	movi	r2,95
    274c:	18800015 	stw	r2,0(r3)
    2750:	18000115 	stw	zero,4(r3)
	int i=0;
	int j=0;
	long long int Sum=0;

	int Duration = BUF_SIZE / N;
	for(j=0;j<N;j++){
    2754:	e0bffa17 	ldw	r2,-24(fp)
    2758:	10800044 	addi	r2,r2,1
    275c:	e0bffa15 	stw	r2,-24(fp)
    2760:	e0bffa17 	ldw	r2,-24(fp)
    2764:	10800790 	cmplti	r2,r2,30
    2768:	103f651e 	bne	r2,zero,2500 <Audio_Average+0x34>
		Average[j] = (((Sum * 400) / (Duration) ) >> 32);
        if((200-Average[j]) < 110 ){
        	Average[j] = 95;
        }
	}
}
    276c:	e037883a 	mov	sp,fp
    2770:	dfc00217 	ldw	ra,8(sp)
    2774:	df000117 	ldw	fp,4(sp)
    2778:	dc000017 	ldw	r16,0(sp)
    277c:	dec00304 	addi	sp,sp,12
    2780:	f800283a 	ret

00002784 <Plot_Play_Audio>:
/****************************************************************************************/
void Plot_Play_Audio(alt_up_pixel_buffer_dma_dev *pixel_buffer){
    2784:	defff304 	addi	sp,sp,-52
    2788:	dfc00c15 	stw	ra,48(sp)
    278c:	df000b15 	stw	fp,44(sp)
    2790:	df000b04 	addi	fp,sp,44
    2794:	e13fff15 	stw	r4,-4(fp)
	int x_Start=0,x_End=10;
    2798:	e03ffe15 	stw	zero,-8(fp)
    279c:	00800284 	movi	r2,10
    27a0:	e0bffd15 	stw	r2,-12(fp)
	int gap = 3;
    27a4:	008000c4 	movi	r2,3
    27a8:	e0bffc15 	stw	r2,-16(fp)
	int x1 = 10;
    27ac:	00800284 	movi	r2,10
    27b0:	e0bffb15 	stw	r2,-20(fp)
	int x2 = 310;
    27b4:	00804d84 	movi	r2,310
    27b8:	e0bffa15 	stw	r2,-24(fp)
	int Range = ((x2 - x1)/N)-3;
    27bc:	e0fffa17 	ldw	r3,-24(fp)
    27c0:	e0bffb17 	ldw	r2,-20(fp)
    27c4:	1887c83a 	sub	r3,r3,r2
    27c8:	00800784 	movi	r2,30
    27cc:	1885283a 	div	r2,r3,r2
    27d0:	10bfff44 	addi	r2,r2,-3
    27d4:	e0bff915 	stw	r2,-28(fp)
	short color = 0x1111;
    27d8:	00844444 	movi	r2,4369
    27dc:	e0bff80d 	sth	r2,-32(fp)


	if(Play_Flag == 1){
    27e0:	008000b4 	movhi	r2,2
    27e4:	10a05a04 	addi	r2,r2,-32408
    27e8:	10800017 	ldw	r2,0(r2)
    27ec:	10800058 	cmpnei	r2,r2,1
    27f0:	1000221e 	bne	r2,zero,287c <Plot_Play_Audio+0xf8>
		x_Start = Play_Index * Range + gap * Play_Index + 13;
    27f4:	e0fff917 	ldw	r3,-28(fp)
    27f8:	e0bffc17 	ldw	r2,-16(fp)
    27fc:	1887883a 	add	r3,r3,r2
    2800:	008000b4 	movhi	r2,2
    2804:	10a05604 	addi	r2,r2,-32424
    2808:	10800017 	ldw	r2,0(r2)
    280c:	1885383a 	mul	r2,r3,r2
    2810:	10800344 	addi	r2,r2,13
    2814:	e0bffe15 	stw	r2,-8(fp)
		x_End = x_Start + Range;
    2818:	e0fffe17 	ldw	r3,-8(fp)
    281c:	e0bff917 	ldw	r2,-28(fp)
    2820:	1885883a 	add	r2,r3,r2
    2824:	e0bffd15 	stw	r2,-12(fp)
		Play_Flag = 0;
    2828:	008000b4 	movhi	r2,2
    282c:	10a05a04 	addi	r2,r2,-32408
    2830:	10000015 	stw	zero,0(r2)
		Play_Index = Play_Index + 1;
    2834:	008000b4 	movhi	r2,2
    2838:	10a05604 	addi	r2,r2,-32424
    283c:	10800017 	ldw	r2,0(r2)
    2840:	10c00044 	addi	r3,r2,1
    2844:	008000b4 	movhi	r2,2
    2848:	10a05604 	addi	r2,r2,-32424
    284c:	10c00015 	stw	r3,0(r2)
		alt_up_pixel_buffer_dma_draw_box (pixel_buffer, x_Start, 205, x_End,
    2850:	e0bff917 	ldw	r2,-28(fp)
    2854:	10803344 	addi	r2,r2,205
    2858:	e0fff80f 	ldh	r3,-32(fp)
    285c:	d8800015 	stw	r2,0(sp)
    2860:	d8c00115 	stw	r3,4(sp)
    2864:	d8000215 	stw	zero,8(sp)
    2868:	e13fff17 	ldw	r4,-4(fp)
    286c:	e17ffe17 	ldw	r5,-8(fp)
    2870:	01803344 	movi	r6,205
    2874:	e1fffd17 	ldw	r7,-12(fp)
    2878:	00111ac0 	call	111ac <alt_up_pixel_buffer_dma_draw_box>
			205 + Range , color, 0);
	}
}
    287c:	e037883a 	mov	sp,fp
    2880:	dfc00117 	ldw	ra,4(sp)
    2884:	df000017 	ldw	fp,0(sp)
    2888:	dec00204 	addi	sp,sp,8
    288c:	f800283a 	ret

00002890 <Do_Hardware_Calculate>:
/****************************************************************************************/
void Do_Hardware_Calculate(){
    2890:	defffd04 	addi	sp,sp,-12
    2894:	dfc00215 	stw	ra,8(sp)
    2898:	df000115 	stw	fp,4(sp)
    289c:	df000104 	addi	fp,sp,4
	amplitude_operation(Size,Number,(int)r_buf,(int)l_buf,(int)Out_Ram);
    28a0:	01800834 	movhi	r6,32
    28a4:	3181b304 	addi	r6,r6,1740
    28a8:	01c01774 	movhi	r7,93
    28ac:	39c3f304 	addi	r7,r7,4044
    28b0:	00801f34 	movhi	r2,124
    28b4:	10a51304 	addi	r2,r2,-27572
    28b8:	d8800015 	stw	r2,0(sp)
    28bc:	01104684 	movi	r4,16666
    28c0:	01400784 	movi	r5,30
    28c4:	000033c0 	call	33c <amplitude_operation>
//	IOWR_32DIRECT()
}
    28c8:	e037883a 	mov	sp,fp
    28cc:	dfc00117 	ldw	ra,4(sp)
    28d0:	df000017 	ldw	fp,0(sp)
    28d4:	dec00204 	addi	sp,sp,8
    28d8:	f800283a 	ret

000028dc <Calculate_Avrage>:
/****************************************************************************************/
void Calculate_Avrage(){
    28dc:	defffa04 	addi	sp,sp,-24
    28e0:	df000515 	stw	fp,20(sp)
    28e4:	df000504 	addi	fp,sp,20
	int i;
	for(i=0;i<=Number;i++){
    28e8:	e03ffd15 	stw	zero,-12(fp)
    28ec:	00005106 	br	2a34 <Calculate_Avrage+0x158>
		Average[i] = 0;
    28f0:	e0bffd17 	ldw	r2,-12(fp)
    28f4:	00c01f34 	movhi	r3,124
    28f8:	18e56d04 	addi	r3,r3,-27212
    28fc:	100490fa 	slli	r2,r2,3
    2900:	10c5883a 	add	r2,r2,r3
    2904:	10000015 	stw	zero,0(r2)
    2908:	10000115 	stw	zero,4(r2)
		int Anita = Out_Ram[i];
    290c:	e0bffd17 	ldw	r2,-12(fp)
    2910:	00c01f34 	movhi	r3,124
    2914:	18e51304 	addi	r3,r3,-27572
    2918:	1085883a 	add	r2,r2,r2
    291c:	1085883a 	add	r2,r2,r2
    2920:	10c5883a 	add	r2,r2,r3
    2924:	10800017 	ldw	r2,0(r2)
    2928:	e0bffc15 	stw	r2,-16(fp)
		Average[i] = Out_Ram[i]/Size;
    292c:	e1bffd17 	ldw	r6,-12(fp)
    2930:	e0bffd17 	ldw	r2,-12(fp)
    2934:	00c01f34 	movhi	r3,124
    2938:	18e51304 	addi	r3,r3,-27572
    293c:	1085883a 	add	r2,r2,r2
    2940:	1085883a 	add	r2,r2,r2
    2944:	10c5883a 	add	r2,r2,r3
    2948:	10c00017 	ldw	r3,0(r2)
    294c:	00803974 	movhi	r2,229
    2950:	10b87004 	addi	r2,r2,-7744
    2954:	1889283a 	div	r4,r3,r2
    2958:	200bd7fa 	srai	r5,r4,31
    295c:	2005883a 	mov	r2,r4
    2960:	2807883a 	mov	r3,r5
    2964:	01401f34 	movhi	r5,124
    2968:	29656d04 	addi	r5,r5,-27212
    296c:	300890fa 	slli	r4,r6,3
    2970:	2149883a 	add	r4,r4,r5
    2974:	20800015 	stw	r2,0(r4)
    2978:	20c00115 	stw	r3,4(r4)
		int Anita2 = Average[i];
    297c:	e0bffd17 	ldw	r2,-12(fp)
    2980:	00c01f34 	movhi	r3,124
    2984:	18e56d04 	addi	r3,r3,-27212
    2988:	100490fa 	slli	r2,r2,3
    298c:	10c9883a 	add	r4,r2,r3
    2990:	20800017 	ldw	r2,0(r4)
    2994:	20c00117 	ldw	r3,4(r4)
    2998:	e0bffb15 	stw	r2,-20(fp)
        if((200-Average[i]) < 110 ){
    299c:	e0bffd17 	ldw	r2,-12(fp)
    29a0:	00c01f34 	movhi	r3,124
    29a4:	18e56d04 	addi	r3,r3,-27212
    29a8:	100490fa 	slli	r2,r2,3
    29ac:	10c5883a 	add	r2,r2,r3
    29b0:	11800017 	ldw	r6,0(r2)
    29b4:	11c00117 	ldw	r7,4(r2)
    29b8:	01003204 	movi	r4,200
    29bc:	000b883a 	mov	r5,zero
    29c0:	2185c83a 	sub	r2,r4,r6
    29c4:	2091803a 	cmpltu	r8,r4,r2
    29c8:	29c7c83a 	sub	r3,r5,r7
    29cc:	1a09c83a 	sub	r4,r3,r8
    29d0:	2007883a 	mov	r3,r4
    29d4:	1009883a 	mov	r4,r2
    29d8:	e13ffe15 	stw	r4,-8(fp)
    29dc:	1805883a 	mov	r2,r3
    29e0:	e0bfff15 	stw	r2,-4(fp)
    29e4:	e0ffff17 	ldw	r3,-4(fp)
    29e8:	18800048 	cmpgei	r2,r3,1
    29ec:	10000e1e 	bne	r2,zero,2a28 <Calculate_Avrage+0x14c>
    29f0:	e13fff17 	ldw	r4,-4(fp)
    29f4:	2004c03a 	cmpne	r2,r4,zero
    29f8:	1000031e 	bne	r2,zero,2a08 <Calculate_Avrage+0x12c>
    29fc:	e0fffe17 	ldw	r3,-8(fp)
    2a00:	18801ba8 	cmpgeui	r2,r3,110
    2a04:	1000081e 	bne	r2,zero,2a28 <Calculate_Avrage+0x14c>
        	Average[i] = 95;
    2a08:	e0bffd17 	ldw	r2,-12(fp)
    2a0c:	00c01f34 	movhi	r3,124
    2a10:	18e56d04 	addi	r3,r3,-27212
    2a14:	100490fa 	slli	r2,r2,3
    2a18:	10c7883a 	add	r3,r2,r3
    2a1c:	008017c4 	movi	r2,95
    2a20:	18800015 	stw	r2,0(r3)
    2a24:	18000115 	stw	zero,4(r3)
//	IOWR_32DIRECT()
}
/****************************************************************************************/
void Calculate_Avrage(){
	int i;
	for(i=0;i<=Number;i++){
    2a28:	e0bffd17 	ldw	r2,-12(fp)
    2a2c:	10800044 	addi	r2,r2,1
    2a30:	e0bffd15 	stw	r2,-12(fp)
    2a34:	e0bffd17 	ldw	r2,-12(fp)
    2a38:	108007d0 	cmplti	r2,r2,31
    2a3c:	103fac1e 	bne	r2,zero,28f0 <Calculate_Avrage+0x14>
		int Anita2 = Average[i];
        if((200-Average[i]) < 110 ){
        	Average[i] = 95;
        }
	}
}
    2a40:	e037883a 	mov	sp,fp
    2a44:	df000017 	ldw	fp,0(sp)
    2a48:	dec00104 	addi	sp,sp,4
    2a4c:	f800283a 	ret

00002a50 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    2a50:	defffa04 	addi	sp,sp,-24
    2a54:	dfc00515 	stw	ra,20(sp)
    2a58:	df000415 	stw	fp,16(sp)
    2a5c:	df000404 	addi	fp,sp,16
    2a60:	e13ffe15 	stw	r4,-8(fp)
    2a64:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    2a68:	e0bffe17 	ldw	r2,-8(fp)
    2a6c:	10800517 	ldw	r2,20(r2)
    2a70:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    2a74:	e0bffe17 	ldw	r2,-8(fp)
    2a78:	10800017 	ldw	r2,0(r2)
    2a7c:	10800a17 	ldw	r2,40(r2)
    2a80:	10800304 	addi	r2,r2,12
    2a84:	10800037 	ldwio	r2,0(r2)
    2a88:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    2a8c:	e0bffe17 	ldw	r2,-8(fp)
    2a90:	10800017 	ldw	r2,0(r2)
    2a94:	10800a17 	ldw	r2,40(r2)
    2a98:	10800304 	addi	r2,r2,12
    2a9c:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    2aa0:	e0bffc17 	ldw	r2,-16(fp)
    2aa4:	10800098 	cmpnei	r2,r2,2
    2aa8:	1000081e 	bne	r2,zero,2acc <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    2aac:	008000b4 	movhi	r2,2
    2ab0:	10a06104 	addi	r2,r2,-32380
    2ab4:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2ab8:	e13ffd17 	ldw	r4,-12(fp)
    2abc:	000ed400 	call	ed40 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    2ac0:	e13ffd17 	ldw	r4,-12(fp)
    2ac4:	000eb900 	call	eb90 <alt_up_audio_enable_read_interrupt>
    2ac8:	00000a06 	br	2af4 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    2acc:	e0bffc17 	ldw	r2,-16(fp)
    2ad0:	10800118 	cmpnei	r2,r2,4
    2ad4:	1000071e 	bne	r2,zero,2af4 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    2ad8:	008000b4 	movhi	r2,2
    2adc:	10a05f04 	addi	r2,r2,-32388
    2ae0:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2ae4:	e13ffd17 	ldw	r4,-12(fp)
    2ae8:	000ed400 	call	ed40 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    2aec:	e13ffd17 	ldw	r4,-12(fp)
    2af0:	000ec2c0 	call	ec2c <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    2af4:	e037883a 	mov	sp,fp
    2af8:	dfc00117 	ldw	ra,4(sp)
    2afc:	df000017 	ldw	fp,0(sp)
    2b00:	dec00204 	addi	sp,sp,8
    2b04:	f800283a 	ret

00002b08 <__muldi3>:
    2b08:	2011883a 	mov	r8,r4
    2b0c:	427fffcc 	andi	r9,r8,65535
    2b10:	4018d43a 	srli	r12,r8,16
    2b14:	32bfffcc 	andi	r10,r6,65535
    2b18:	3016d43a 	srli	r11,r6,16
    2b1c:	4a85383a 	mul	r2,r9,r10
    2b20:	6295383a 	mul	r10,r12,r10
    2b24:	4ad3383a 	mul	r9,r9,r11
    2b28:	113fffcc 	andi	r4,r2,65535
    2b2c:	1004d43a 	srli	r2,r2,16
    2b30:	4a93883a 	add	r9,r9,r10
    2b34:	3807883a 	mov	r3,r7
    2b38:	1245883a 	add	r2,r2,r9
    2b3c:	280f883a 	mov	r7,r5
    2b40:	180b883a 	mov	r5,r3
    2b44:	1006943a 	slli	r3,r2,16
    2b48:	defffd04 	addi	sp,sp,-12
    2b4c:	dc800215 	stw	r18,8(sp)
    2b50:	1907883a 	add	r3,r3,r4
    2b54:	dc400115 	stw	r17,4(sp)
    2b58:	dc000015 	stw	r16,0(sp)
    2b5c:	4165383a 	mul	r18,r8,r5
    2b60:	31e3383a 	mul	r17,r6,r7
    2b64:	1012d43a 	srli	r9,r2,16
    2b68:	62d9383a 	mul	r12,r12,r11
    2b6c:	181f883a 	mov	r15,r3
    2b70:	1280022e 	bgeu	r2,r10,2b7c <__muldi3+0x74>
    2b74:	00800074 	movhi	r2,1
    2b78:	6099883a 	add	r12,r12,r2
    2b7c:	624d883a 	add	r6,r12,r9
    2b80:	9187883a 	add	r3,r18,r6
    2b84:	88c7883a 	add	r3,r17,r3
    2b88:	7805883a 	mov	r2,r15
    2b8c:	dc800217 	ldw	r18,8(sp)
    2b90:	dc400117 	ldw	r17,4(sp)
    2b94:	dc000017 	ldw	r16,0(sp)
    2b98:	dec00304 	addi	sp,sp,12
    2b9c:	f800283a 	ret

00002ba0 <__divdi3>:
    2ba0:	deffef04 	addi	sp,sp,-68
    2ba4:	2005883a 	mov	r2,r4
    2ba8:	2807883a 	mov	r3,r5
    2bac:	dfc01015 	stw	ra,64(sp)
    2bb0:	df000f15 	stw	fp,60(sp)
    2bb4:	ddc00e15 	stw	r23,56(sp)
    2bb8:	dd800d15 	stw	r22,52(sp)
    2bbc:	dd400c15 	stw	r21,48(sp)
    2bc0:	dd000b15 	stw	r20,44(sp)
    2bc4:	dcc00a15 	stw	r19,40(sp)
    2bc8:	dc800915 	stw	r18,36(sp)
    2bcc:	dc400815 	stw	r17,32(sp)
    2bd0:	dc000715 	stw	r16,28(sp)
    2bd4:	1019883a 	mov	r12,r2
    2bd8:	181b883a 	mov	r13,r3
    2bdc:	3015883a 	mov	r10,r6
    2be0:	3817883a 	mov	r11,r7
    2be4:	1800ba16 	blt	r3,zero,2ed0 <__divdi3+0x330>
    2be8:	d8000615 	stw	zero,24(sp)
    2bec:	5800ad16 	blt	r11,zero,2ea4 <__divdi3+0x304>
    2bf0:	5021883a 	mov	r16,r10
    2bf4:	602f883a 	mov	r23,r12
    2bf8:	6829883a 	mov	r20,r13
    2bfc:	58003b1e 	bne	r11,zero,2cec <__divdi3+0x14c>
    2c00:	6a805836 	bltu	r13,r10,2d64 <__divdi3+0x1c4>
    2c04:	5000ce26 	beq	r10,zero,2f40 <__divdi3+0x3a0>
    2c08:	00bfffd4 	movui	r2,65535
    2c0c:	1400ba36 	bltu	r2,r16,2ef8 <__divdi3+0x358>
    2c10:	00803fc4 	movi	r2,255
    2c14:	14015f36 	bltu	r2,r16,3194 <__divdi3+0x5f4>
    2c18:	000b883a 	mov	r5,zero
    2c1c:	0005883a 	mov	r2,zero
    2c20:	8084d83a 	srl	r2,r16,r2
    2c24:	01000074 	movhi	r4,1
    2c28:	210ed904 	addi	r4,r4,15204
    2c2c:	01800804 	movi	r6,32
    2c30:	1105883a 	add	r2,r2,r4
    2c34:	10c00003 	ldbu	r3,0(r2)
    2c38:	28c7883a 	add	r3,r5,r3
    2c3c:	30edc83a 	sub	r22,r6,r3
    2c40:	b001101e 	bne	r22,zero,3084 <__divdi3+0x4e4>
    2c44:	802ad43a 	srli	r21,r16,16
    2c48:	01000044 	movi	r4,1
    2c4c:	a423c83a 	sub	r17,r20,r16
    2c50:	873fffcc 	andi	fp,r16,65535
    2c54:	d9000315 	stw	r4,12(sp)
    2c58:	8809883a 	mov	r4,r17
    2c5c:	a80b883a 	mov	r5,r21
    2c60:	00034a80 	call	34a8 <__udivsi3>
    2c64:	8809883a 	mov	r4,r17
    2c68:	a80b883a 	mov	r5,r21
    2c6c:	102d883a 	mov	r22,r2
    2c70:	00034b00 	call	34b0 <__umodsi3>
    2c74:	1004943a 	slli	r2,r2,16
    2c78:	b806d43a 	srli	r3,r23,16
    2c7c:	e5a3383a 	mul	r17,fp,r22
    2c80:	10c4b03a 	or	r2,r2,r3
    2c84:	1440042e 	bgeu	r2,r17,2c98 <__divdi3+0xf8>
    2c88:	1405883a 	add	r2,r2,r16
    2c8c:	b5bfffc4 	addi	r22,r22,-1
    2c90:	14000136 	bltu	r2,r16,2c98 <__divdi3+0xf8>
    2c94:	14415f36 	bltu	r2,r17,3214 <__divdi3+0x674>
    2c98:	1463c83a 	sub	r17,r2,r17
    2c9c:	8809883a 	mov	r4,r17
    2ca0:	a80b883a 	mov	r5,r21
    2ca4:	00034a80 	call	34a8 <__udivsi3>
    2ca8:	8809883a 	mov	r4,r17
    2cac:	a80b883a 	mov	r5,r21
    2cb0:	1029883a 	mov	r20,r2
    2cb4:	00034b00 	call	34b0 <__umodsi3>
    2cb8:	1004943a 	slli	r2,r2,16
    2cbc:	e509383a 	mul	r4,fp,r20
    2cc0:	b8ffffcc 	andi	r3,r23,65535
    2cc4:	10c4b03a 	or	r2,r2,r3
    2cc8:	1100042e 	bgeu	r2,r4,2cdc <__divdi3+0x13c>
    2ccc:	8085883a 	add	r2,r16,r2
    2cd0:	a53fffc4 	addi	r20,r20,-1
    2cd4:	14000136 	bltu	r2,r16,2cdc <__divdi3+0x13c>
    2cd8:	11014736 	bltu	r2,r4,31f8 <__divdi3+0x658>
    2cdc:	b004943a 	slli	r2,r22,16
    2ce0:	d8c00317 	ldw	r3,12(sp)
    2ce4:	a084b03a 	or	r2,r20,r2
    2ce8:	00000406 	br	2cfc <__divdi3+0x15c>
    2cec:	5811883a 	mov	r8,r11
    2cf0:	6ac0582e 	bgeu	r13,r11,2e54 <__divdi3+0x2b4>
    2cf4:	0005883a 	mov	r2,zero
    2cf8:	0007883a 	mov	r3,zero
    2cfc:	1025883a 	mov	r18,r2
    2d00:	100d883a 	mov	r6,r2
    2d04:	d8800617 	ldw	r2,24(sp)
    2d08:	180f883a 	mov	r7,r3
    2d0c:	10000726 	beq	r2,zero,2d2c <__divdi3+0x18c>
    2d10:	0009883a 	mov	r4,zero
    2d14:	2485c83a 	sub	r2,r4,r18
    2d18:	2089803a 	cmpltu	r4,r4,r2
    2d1c:	00c7c83a 	sub	r3,zero,r3
    2d20:	1909c83a 	sub	r4,r3,r4
    2d24:	100d883a 	mov	r6,r2
    2d28:	200f883a 	mov	r7,r4
    2d2c:	3005883a 	mov	r2,r6
    2d30:	3807883a 	mov	r3,r7
    2d34:	dfc01017 	ldw	ra,64(sp)
    2d38:	df000f17 	ldw	fp,60(sp)
    2d3c:	ddc00e17 	ldw	r23,56(sp)
    2d40:	dd800d17 	ldw	r22,52(sp)
    2d44:	dd400c17 	ldw	r21,48(sp)
    2d48:	dd000b17 	ldw	r20,44(sp)
    2d4c:	dcc00a17 	ldw	r19,40(sp)
    2d50:	dc800917 	ldw	r18,36(sp)
    2d54:	dc400817 	ldw	r17,32(sp)
    2d58:	dc000717 	ldw	r16,28(sp)
    2d5c:	dec01104 	addi	sp,sp,68
    2d60:	f800283a 	ret
    2d64:	00bfffd4 	movui	r2,65535
    2d68:	12806f36 	bltu	r2,r10,2f28 <__divdi3+0x388>
    2d6c:	00803fc4 	movi	r2,255
    2d70:	12810236 	bltu	r2,r10,317c <__divdi3+0x5dc>
    2d74:	000b883a 	mov	r5,zero
    2d78:	0005883a 	mov	r2,zero
    2d7c:	8084d83a 	srl	r2,r16,r2
    2d80:	01000074 	movhi	r4,1
    2d84:	210ed904 	addi	r4,r4,15204
    2d88:	01800804 	movi	r6,32
    2d8c:	1105883a 	add	r2,r2,r4
    2d90:	10c00003 	ldbu	r3,0(r2)
    2d94:	28c7883a 	add	r3,r5,r3
    2d98:	30d1c83a 	sub	r8,r6,r3
    2d9c:	40000626 	beq	r8,zero,2db8 <__divdi3+0x218>
    2da0:	3205c83a 	sub	r2,r6,r8
    2da4:	b884d83a 	srl	r2,r23,r2
    2da8:	a206983a 	sll	r3,r20,r8
    2dac:	ba2e983a 	sll	r23,r23,r8
    2db0:	8220983a 	sll	r16,r16,r8
    2db4:	18a8b03a 	or	r20,r3,r2
    2db8:	802ad43a 	srli	r21,r16,16
    2dbc:	a009883a 	mov	r4,r20
    2dc0:	873fffcc 	andi	fp,r16,65535
    2dc4:	a80b883a 	mov	r5,r21
    2dc8:	00034a80 	call	34a8 <__udivsi3>
    2dcc:	a009883a 	mov	r4,r20
    2dd0:	a80b883a 	mov	r5,r21
    2dd4:	102d883a 	mov	r22,r2
    2dd8:	00034b00 	call	34b0 <__umodsi3>
    2ddc:	1004943a 	slli	r2,r2,16
    2de0:	b806d43a 	srli	r3,r23,16
    2de4:	e5a3383a 	mul	r17,fp,r22
    2de8:	10c4b03a 	or	r2,r2,r3
    2dec:	1440042e 	bgeu	r2,r17,2e00 <__divdi3+0x260>
    2df0:	1405883a 	add	r2,r2,r16
    2df4:	b5bfffc4 	addi	r22,r22,-1
    2df8:	14000136 	bltu	r2,r16,2e00 <__divdi3+0x260>
    2dfc:	14410236 	bltu	r2,r17,3208 <__divdi3+0x668>
    2e00:	1463c83a 	sub	r17,r2,r17
    2e04:	8809883a 	mov	r4,r17
    2e08:	a80b883a 	mov	r5,r21
    2e0c:	00034a80 	call	34a8 <__udivsi3>
    2e10:	8809883a 	mov	r4,r17
    2e14:	a80b883a 	mov	r5,r21
    2e18:	1029883a 	mov	r20,r2
    2e1c:	00034b00 	call	34b0 <__umodsi3>
    2e20:	1004943a 	slli	r2,r2,16
    2e24:	e509383a 	mul	r4,fp,r20
    2e28:	b8ffffcc 	andi	r3,r23,65535
    2e2c:	10c4b03a 	or	r2,r2,r3
    2e30:	1100042e 	bgeu	r2,r4,2e44 <__divdi3+0x2a4>
    2e34:	8085883a 	add	r2,r16,r2
    2e38:	a53fffc4 	addi	r20,r20,-1
    2e3c:	14000136 	bltu	r2,r16,2e44 <__divdi3+0x2a4>
    2e40:	1100ef36 	bltu	r2,r4,3200 <__divdi3+0x660>
    2e44:	b004943a 	slli	r2,r22,16
    2e48:	0007883a 	mov	r3,zero
    2e4c:	a084b03a 	or	r2,r20,r2
    2e50:	003faa06 	br	2cfc <__divdi3+0x15c>
    2e54:	00bfffd4 	movui	r2,65535
    2e58:	12c02d36 	bltu	r2,r11,2f10 <__divdi3+0x370>
    2e5c:	00803fc4 	movi	r2,255
    2e60:	12c0cf36 	bltu	r2,r11,31a0 <__divdi3+0x600>
    2e64:	000b883a 	mov	r5,zero
    2e68:	0005883a 	mov	r2,zero
    2e6c:	4084d83a 	srl	r2,r8,r2
    2e70:	01000074 	movhi	r4,1
    2e74:	210ed904 	addi	r4,r4,15204
    2e78:	01800804 	movi	r6,32
    2e7c:	1105883a 	add	r2,r2,r4
    2e80:	10c00003 	ldbu	r3,0(r2)
    2e84:	28c7883a 	add	r3,r5,r3
    2e88:	30f9c83a 	sub	fp,r6,r3
    2e8c:	e000331e 	bne	fp,zero,2f5c <__divdi3+0x3bc>
    2e90:	45000136 	bltu	r8,r20,2e98 <__divdi3+0x2f8>
    2e94:	bc3f9736 	bltu	r23,r16,2cf4 <__divdi3+0x154>
    2e98:	00800044 	movi	r2,1
    2e9c:	0007883a 	mov	r3,zero
    2ea0:	003f9606 	br	2cfc <__divdi3+0x15c>
    2ea4:	0009883a 	mov	r4,zero
    2ea8:	2285c83a 	sub	r2,r4,r10
    2eac:	02c7c83a 	sub	r3,zero,r11
    2eb0:	2089803a 	cmpltu	r4,r4,r2
    2eb4:	1909c83a 	sub	r4,r3,r4
    2eb8:	d8c00617 	ldw	r3,24(sp)
    2ebc:	1015883a 	mov	r10,r2
    2ec0:	2017883a 	mov	r11,r4
    2ec4:	00c6303a 	nor	r3,zero,r3
    2ec8:	d8c00615 	stw	r3,24(sp)
    2ecc:	003f4806 	br	2bf0 <__divdi3+0x50>
    2ed0:	0009883a 	mov	r4,zero
    2ed4:	2085c83a 	sub	r2,r4,r2
    2ed8:	2089803a 	cmpltu	r4,r4,r2
    2edc:	00c7c83a 	sub	r3,zero,r3
    2ee0:	1909c83a 	sub	r4,r3,r4
    2ee4:	1019883a 	mov	r12,r2
    2ee8:	201b883a 	mov	r13,r4
    2eec:	00bfffc4 	movi	r2,-1
    2ef0:	d8800615 	stw	r2,24(sp)
    2ef4:	003f3d06 	br	2bec <__divdi3+0x4c>
    2ef8:	00804034 	movhi	r2,256
    2efc:	10bfffc4 	addi	r2,r2,-1
    2f00:	1400aa36 	bltu	r2,r16,31ac <__divdi3+0x60c>
    2f04:	01400404 	movi	r5,16
    2f08:	2805883a 	mov	r2,r5
    2f0c:	003f4406 	br	2c20 <__divdi3+0x80>
    2f10:	00804034 	movhi	r2,256
    2f14:	10bfffc4 	addi	r2,r2,-1
    2f18:	12c09b36 	bltu	r2,r11,3188 <__divdi3+0x5e8>
    2f1c:	01400404 	movi	r5,16
    2f20:	2805883a 	mov	r2,r5
    2f24:	003fd106 	br	2e6c <__divdi3+0x2cc>
    2f28:	00804034 	movhi	r2,256
    2f2c:	10bfffc4 	addi	r2,r2,-1
    2f30:	1280a136 	bltu	r2,r10,31b8 <__divdi3+0x618>
    2f34:	01400404 	movi	r5,16
    2f38:	2805883a 	mov	r2,r5
    2f3c:	003f8f06 	br	2d7c <__divdi3+0x1dc>
    2f40:	01000044 	movi	r4,1
    2f44:	000b883a 	mov	r5,zero
    2f48:	00034a80 	call	34a8 <__udivsi3>
    2f4c:	1021883a 	mov	r16,r2
    2f50:	00bfffd4 	movui	r2,65535
    2f54:	143fe836 	bltu	r2,r16,2ef8 <__divdi3+0x358>
    2f58:	003f2d06 	br	2c10 <__divdi3+0x70>
    2f5c:	3705c83a 	sub	r2,r6,fp
    2f60:	4708983a 	sll	r4,r8,fp
    2f64:	8086d83a 	srl	r3,r16,r2
    2f68:	a0a2d83a 	srl	r17,r20,r2
    2f6c:	b884d83a 	srl	r2,r23,r2
    2f70:	20eab03a 	or	r21,r4,r3
    2f74:	a82cd43a 	srli	r22,r21,16
    2f78:	a706983a 	sll	r3,r20,fp
    2f7c:	8809883a 	mov	r4,r17
    2f80:	b00b883a 	mov	r5,r22
    2f84:	1886b03a 	or	r3,r3,r2
    2f88:	d8c00215 	stw	r3,8(sp)
    2f8c:	00034a80 	call	34a8 <__udivsi3>
    2f90:	8809883a 	mov	r4,r17
    2f94:	b00b883a 	mov	r5,r22
    2f98:	1029883a 	mov	r20,r2
    2f9c:	00034b00 	call	34b0 <__umodsi3>
    2fa0:	a8ffffcc 	andi	r3,r21,65535
    2fa4:	d8c00515 	stw	r3,20(sp)
    2fa8:	d9000217 	ldw	r4,8(sp)
    2fac:	d9400517 	ldw	r5,20(sp)
    2fb0:	1004943a 	slli	r2,r2,16
    2fb4:	2006d43a 	srli	r3,r4,16
    2fb8:	8720983a 	sll	r16,r16,fp
    2fbc:	2d23383a 	mul	r17,r5,r20
    2fc0:	10c4b03a 	or	r2,r2,r3
    2fc4:	dc000015 	stw	r16,0(sp)
    2fc8:	1440032e 	bgeu	r2,r17,2fd8 <__divdi3+0x438>
    2fcc:	1545883a 	add	r2,r2,r21
    2fd0:	a53fffc4 	addi	r20,r20,-1
    2fd4:	1540842e 	bgeu	r2,r21,31e8 <__divdi3+0x648>
    2fd8:	1463c83a 	sub	r17,r2,r17
    2fdc:	8809883a 	mov	r4,r17
    2fe0:	b00b883a 	mov	r5,r22
    2fe4:	00034a80 	call	34a8 <__udivsi3>
    2fe8:	8809883a 	mov	r4,r17
    2fec:	b00b883a 	mov	r5,r22
    2ff0:	1021883a 	mov	r16,r2
    2ff4:	00034b00 	call	34b0 <__umodsi3>
    2ff8:	d8c00517 	ldw	r3,20(sp)
    2ffc:	d9000217 	ldw	r4,8(sp)
    3000:	1004943a 	slli	r2,r2,16
    3004:	1c0f383a 	mul	r7,r3,r16
    3008:	20ffffcc 	andi	r3,r4,65535
    300c:	10e2b03a 	or	r17,r2,r3
    3010:	89c0032e 	bgeu	r17,r7,3020 <__divdi3+0x480>
    3014:	8d63883a 	add	r17,r17,r21
    3018:	843fffc4 	addi	r16,r16,-1
    301c:	8d406e2e 	bgeu	r17,r21,31d8 <__divdi3+0x638>
    3020:	a008943a 	slli	r4,r20,16
    3024:	d9400017 	ldw	r5,0(sp)
    3028:	89e3c83a 	sub	r17,r17,r7
    302c:	8110b03a 	or	r8,r16,r4
    3030:	280cd43a 	srli	r6,r5,16
    3034:	28ffffcc 	andi	r3,r5,65535
    3038:	40bfffcc 	andi	r2,r8,65535
    303c:	400ad43a 	srli	r5,r8,16
    3040:	10d3383a 	mul	r9,r2,r3
    3044:	1185383a 	mul	r2,r2,r6
    3048:	28c7383a 	mul	r3,r5,r3
    304c:	4808d43a 	srli	r4,r9,16
    3050:	298b383a 	mul	r5,r5,r6
    3054:	10c5883a 	add	r2,r2,r3
    3058:	2089883a 	add	r4,r4,r2
    305c:	20c0022e 	bgeu	r4,r3,3068 <__divdi3+0x4c8>
    3060:	00800074 	movhi	r2,1
    3064:	288b883a 	add	r5,r5,r2
    3068:	2004d43a 	srli	r2,r4,16
    306c:	288b883a 	add	r5,r5,r2
    3070:	89403f36 	bltu	r17,r5,3170 <__divdi3+0x5d0>
    3074:	89403926 	beq	r17,r5,315c <__divdi3+0x5bc>
    3078:	4005883a 	mov	r2,r8
    307c:	0007883a 	mov	r3,zero
    3080:	003f1e06 	br	2cfc <__divdi3+0x15c>
    3084:	85a0983a 	sll	r16,r16,r22
    3088:	3585c83a 	sub	r2,r6,r22
    308c:	a0a2d83a 	srl	r17,r20,r2
    3090:	802ad43a 	srli	r21,r16,16
    3094:	b884d83a 	srl	r2,r23,r2
    3098:	a586983a 	sll	r3,r20,r22
    309c:	8809883a 	mov	r4,r17
    30a0:	a80b883a 	mov	r5,r21
    30a4:	1886b03a 	or	r3,r3,r2
    30a8:	d8c00115 	stw	r3,4(sp)
    30ac:	00034a80 	call	34a8 <__udivsi3>
    30b0:	8809883a 	mov	r4,r17
    30b4:	a80b883a 	mov	r5,r21
    30b8:	d8800415 	stw	r2,16(sp)
    30bc:	00034b00 	call	34b0 <__umodsi3>
    30c0:	d9400117 	ldw	r5,4(sp)
    30c4:	d9000417 	ldw	r4,16(sp)
    30c8:	1004943a 	slli	r2,r2,16
    30cc:	873fffcc 	andi	fp,r16,65535
    30d0:	2806d43a 	srli	r3,r5,16
    30d4:	e123383a 	mul	r17,fp,r4
    30d8:	10c4b03a 	or	r2,r2,r3
    30dc:	1440042e 	bgeu	r2,r17,30f0 <__divdi3+0x550>
    30e0:	213fffc4 	addi	r4,r4,-1
    30e4:	1405883a 	add	r2,r2,r16
    30e8:	d9000415 	stw	r4,16(sp)
    30ec:	1400352e 	bgeu	r2,r16,31c4 <__divdi3+0x624>
    30f0:	1463c83a 	sub	r17,r2,r17
    30f4:	8809883a 	mov	r4,r17
    30f8:	a80b883a 	mov	r5,r21
    30fc:	00034a80 	call	34a8 <__udivsi3>
    3100:	8809883a 	mov	r4,r17
    3104:	a80b883a 	mov	r5,r21
    3108:	1029883a 	mov	r20,r2
    310c:	00034b00 	call	34b0 <__umodsi3>
    3110:	d9400117 	ldw	r5,4(sp)
    3114:	1004943a 	slli	r2,r2,16
    3118:	e509383a 	mul	r4,fp,r20
    311c:	28ffffcc 	andi	r3,r5,65535
    3120:	10c6b03a 	or	r3,r2,r3
    3124:	1900062e 	bgeu	r3,r4,3140 <__divdi3+0x5a0>
    3128:	1c07883a 	add	r3,r3,r16
    312c:	a53fffc4 	addi	r20,r20,-1
    3130:	1c000336 	bltu	r3,r16,3140 <__divdi3+0x5a0>
    3134:	1900022e 	bgeu	r3,r4,3140 <__divdi3+0x5a0>
    3138:	a53fffc4 	addi	r20,r20,-1
    313c:	1c07883a 	add	r3,r3,r16
    3140:	d9400417 	ldw	r5,16(sp)
    3144:	bdae983a 	sll	r23,r23,r22
    3148:	1923c83a 	sub	r17,r3,r4
    314c:	2804943a 	slli	r2,r5,16
    3150:	a0a8b03a 	or	r20,r20,r2
    3154:	dd000315 	stw	r20,12(sp)
    3158:	003ebf06 	br	2c58 <__divdi3+0xb8>
    315c:	2004943a 	slli	r2,r4,16
    3160:	bf08983a 	sll	r4,r23,fp
    3164:	48ffffcc 	andi	r3,r9,65535
    3168:	10c5883a 	add	r2,r2,r3
    316c:	20bfc22e 	bgeu	r4,r2,3078 <__divdi3+0x4d8>
    3170:	40bfffc4 	addi	r2,r8,-1
    3174:	0007883a 	mov	r3,zero
    3178:	003ee006 	br	2cfc <__divdi3+0x15c>
    317c:	01400204 	movi	r5,8
    3180:	2805883a 	mov	r2,r5
    3184:	003efd06 	br	2d7c <__divdi3+0x1dc>
    3188:	01400604 	movi	r5,24
    318c:	2805883a 	mov	r2,r5
    3190:	003f3606 	br	2e6c <__divdi3+0x2cc>
    3194:	01400204 	movi	r5,8
    3198:	2805883a 	mov	r2,r5
    319c:	003ea006 	br	2c20 <__divdi3+0x80>
    31a0:	01400204 	movi	r5,8
    31a4:	2805883a 	mov	r2,r5
    31a8:	003f3006 	br	2e6c <__divdi3+0x2cc>
    31ac:	01400604 	movi	r5,24
    31b0:	2805883a 	mov	r2,r5
    31b4:	003e9a06 	br	2c20 <__divdi3+0x80>
    31b8:	01400604 	movi	r5,24
    31bc:	2805883a 	mov	r2,r5
    31c0:	003eee06 	br	2d7c <__divdi3+0x1dc>
    31c4:	147fca2e 	bgeu	r2,r17,30f0 <__divdi3+0x550>
    31c8:	213fffc4 	addi	r4,r4,-1
    31cc:	1405883a 	add	r2,r2,r16
    31d0:	d9000415 	stw	r4,16(sp)
    31d4:	003fc606 	br	30f0 <__divdi3+0x550>
    31d8:	89ff912e 	bgeu	r17,r7,3020 <__divdi3+0x480>
    31dc:	8d63883a 	add	r17,r17,r21
    31e0:	843fffc4 	addi	r16,r16,-1
    31e4:	003f8e06 	br	3020 <__divdi3+0x480>
    31e8:	147f7b2e 	bgeu	r2,r17,2fd8 <__divdi3+0x438>
    31ec:	a53fffc4 	addi	r20,r20,-1
    31f0:	1545883a 	add	r2,r2,r21
    31f4:	003f7806 	br	2fd8 <__divdi3+0x438>
    31f8:	a53fffc4 	addi	r20,r20,-1
    31fc:	003eb706 	br	2cdc <__divdi3+0x13c>
    3200:	a53fffc4 	addi	r20,r20,-1
    3204:	003f0f06 	br	2e44 <__divdi3+0x2a4>
    3208:	b5bfffc4 	addi	r22,r22,-1
    320c:	1405883a 	add	r2,r2,r16
    3210:	003efb06 	br	2e00 <__divdi3+0x260>
    3214:	b5bfffc4 	addi	r22,r22,-1
    3218:	1405883a 	add	r2,r2,r16
    321c:	003e9e06 	br	2c98 <__divdi3+0xf8>

00003220 <__extendsfdf2>:
    3220:	defff904 	addi	sp,sp,-28
    3224:	d9000115 	stw	r4,4(sp)
    3228:	d9400204 	addi	r5,sp,8
    322c:	d9000104 	addi	r4,sp,4
    3230:	dfc00615 	stw	ra,24(sp)
    3234:	00036980 	call	3698 <__unpack_f>
    3238:	d9c00517 	ldw	r7,20(sp)
    323c:	0011883a 	mov	r8,zero
    3240:	400697ba 	slli	r3,r8,30
    3244:	3812d0ba 	srli	r9,r7,2
    3248:	380497ba 	slli	r2,r7,30
    324c:	d9000217 	ldw	r4,8(sp)
    3250:	d9400317 	ldw	r5,12(sp)
    3254:	d9800417 	ldw	r6,16(sp)
    3258:	48c6b03a 	or	r3,r9,r3
    325c:	100f883a 	mov	r7,r2
    3260:	d8c00015 	stw	r3,0(sp)
    3264:	00033340 	call	3334 <__make_dp>
    3268:	dfc00617 	ldw	ra,24(sp)
    326c:	dec00704 	addi	sp,sp,28
    3270:	f800283a 	ret

00003274 <__floatunsisf>:
    3274:	defff904 	addi	sp,sp,-28
    3278:	dc400515 	stw	r17,20(sp)
    327c:	dc000415 	stw	r16,16(sp)
    3280:	dfc00615 	stw	ra,24(sp)
    3284:	04400784 	movi	r17,30
    3288:	2021883a 	mov	r16,r4
    328c:	d8000115 	stw	zero,4(sp)
    3290:	2000091e 	bne	r4,zero,32b8 <__floatunsisf+0x44>
    3294:	00800084 	movi	r2,2
    3298:	d8800015 	stw	r2,0(sp)
    329c:	d809883a 	mov	r4,sp
    32a0:	00035380 	call	3538 <__pack_f>
    32a4:	dfc00617 	ldw	ra,24(sp)
    32a8:	dc400517 	ldw	r17,20(sp)
    32ac:	dc000417 	ldw	r16,16(sp)
    32b0:	dec00704 	addi	sp,sp,28
    32b4:	f800283a 	ret
    32b8:	008000c4 	movi	r2,3
    32bc:	d9000315 	stw	r4,12(sp)
    32c0:	d8800015 	stw	r2,0(sp)
    32c4:	dc400215 	stw	r17,8(sp)
    32c8:	00034b80 	call	34b8 <__clzsi2>
    32cc:	117fffc4 	addi	r5,r2,-1
    32d0:	0147c83a 	sub	r3,zero,r5
    32d4:	00800044 	movi	r2,1
    32d8:	10c4983a 	sll	r2,r2,r3
    32dc:	80c6d83a 	srl	r3,r16,r3
    32e0:	8949c83a 	sub	r4,r17,r5
    32e4:	10bfffc4 	addi	r2,r2,-1
    32e8:	8084703a 	and	r2,r16,r2
    32ec:	1004c03a 	cmpne	r2,r2,zero
    32f0:	1886b03a 	or	r3,r3,r2
    32f4:	28000c16 	blt	r5,zero,3328 <__floatunsisf+0xb4>
    32f8:	8144983a 	sll	r2,r16,r5
    32fc:	8947c83a 	sub	r3,r17,r5
    3300:	283fe626 	beq	r5,zero,329c <__floatunsisf+0x28>
    3304:	d809883a 	mov	r4,sp
    3308:	d8800315 	stw	r2,12(sp)
    330c:	d8c00215 	stw	r3,8(sp)
    3310:	00035380 	call	3538 <__pack_f>
    3314:	dfc00617 	ldw	ra,24(sp)
    3318:	dc400517 	ldw	r17,20(sp)
    331c:	dc000417 	ldw	r16,16(sp)
    3320:	dec00704 	addi	sp,sp,28
    3324:	f800283a 	ret
    3328:	d8c00315 	stw	r3,12(sp)
    332c:	d9000215 	stw	r4,8(sp)
    3330:	003fda06 	br	329c <__floatunsisf+0x28>

00003334 <__make_dp>:
    3334:	defff904 	addi	sp,sp,-28
    3338:	d8c00717 	ldw	r3,28(sp)
    333c:	d9000015 	stw	r4,0(sp)
    3340:	d809883a 	mov	r4,sp
    3344:	dfc00515 	stw	ra,20(sp)
    3348:	d9c00615 	stw	r7,24(sp)
    334c:	d9400115 	stw	r5,4(sp)
    3350:	d9800215 	stw	r6,8(sp)
    3354:	d8c00415 	stw	r3,16(sp)
    3358:	d9c00315 	stw	r7,12(sp)
    335c:	00037600 	call	3760 <__pack_d>
    3360:	dfc00517 	ldw	ra,20(sp)
    3364:	dec00704 	addi	sp,sp,28
    3368:	f800283a 	ret

0000336c <udivmodsi4>:
    336c:	29001b2e 	bgeu	r5,r4,33dc <udivmodsi4+0x70>
    3370:	28001a16 	blt	r5,zero,33dc <udivmodsi4+0x70>
    3374:	00800044 	movi	r2,1
    3378:	0007883a 	mov	r3,zero
    337c:	01c007c4 	movi	r7,31
    3380:	00000306 	br	3390 <udivmodsi4+0x24>
    3384:	19c01326 	beq	r3,r7,33d4 <udivmodsi4+0x68>
    3388:	18c00044 	addi	r3,r3,1
    338c:	28000416 	blt	r5,zero,33a0 <udivmodsi4+0x34>
    3390:	294b883a 	add	r5,r5,r5
    3394:	1085883a 	add	r2,r2,r2
    3398:	293ffa36 	bltu	r5,r4,3384 <udivmodsi4+0x18>
    339c:	10000d26 	beq	r2,zero,33d4 <udivmodsi4+0x68>
    33a0:	0007883a 	mov	r3,zero
    33a4:	21400236 	bltu	r4,r5,33b0 <udivmodsi4+0x44>
    33a8:	2149c83a 	sub	r4,r4,r5
    33ac:	1886b03a 	or	r3,r3,r2
    33b0:	1004d07a 	srli	r2,r2,1
    33b4:	280ad07a 	srli	r5,r5,1
    33b8:	103ffa1e 	bne	r2,zero,33a4 <udivmodsi4+0x38>
    33bc:	30000226 	beq	r6,zero,33c8 <udivmodsi4+0x5c>
    33c0:	2005883a 	mov	r2,r4
    33c4:	f800283a 	ret
    33c8:	1809883a 	mov	r4,r3
    33cc:	2005883a 	mov	r2,r4
    33d0:	f800283a 	ret
    33d4:	0007883a 	mov	r3,zero
    33d8:	003ff806 	br	33bc <udivmodsi4+0x50>
    33dc:	00800044 	movi	r2,1
    33e0:	0007883a 	mov	r3,zero
    33e4:	003fef06 	br	33a4 <udivmodsi4+0x38>

000033e8 <__divsi3>:
    33e8:	defffe04 	addi	sp,sp,-8
    33ec:	dc000015 	stw	r16,0(sp)
    33f0:	dfc00115 	stw	ra,4(sp)
    33f4:	0021883a 	mov	r16,zero
    33f8:	20000c16 	blt	r4,zero,342c <__divsi3+0x44>
    33fc:	000d883a 	mov	r6,zero
    3400:	28000e16 	blt	r5,zero,343c <__divsi3+0x54>
    3404:	000336c0 	call	336c <udivmodsi4>
    3408:	1007883a 	mov	r3,r2
    340c:	8005003a 	cmpeq	r2,r16,zero
    3410:	1000011e 	bne	r2,zero,3418 <__divsi3+0x30>
    3414:	00c7c83a 	sub	r3,zero,r3
    3418:	1805883a 	mov	r2,r3
    341c:	dfc00117 	ldw	ra,4(sp)
    3420:	dc000017 	ldw	r16,0(sp)
    3424:	dec00204 	addi	sp,sp,8
    3428:	f800283a 	ret
    342c:	0109c83a 	sub	r4,zero,r4
    3430:	04000044 	movi	r16,1
    3434:	000d883a 	mov	r6,zero
    3438:	283ff20e 	bge	r5,zero,3404 <__divsi3+0x1c>
    343c:	014bc83a 	sub	r5,zero,r5
    3440:	8021003a 	cmpeq	r16,r16,zero
    3444:	003fef06 	br	3404 <__divsi3+0x1c>

00003448 <__modsi3>:
    3448:	deffff04 	addi	sp,sp,-4
    344c:	dfc00015 	stw	ra,0(sp)
    3450:	01800044 	movi	r6,1
    3454:	2807883a 	mov	r3,r5
    3458:	20000416 	blt	r4,zero,346c <__modsi3+0x24>
    345c:	28000c16 	blt	r5,zero,3490 <__modsi3+0x48>
    3460:	dfc00017 	ldw	ra,0(sp)
    3464:	dec00104 	addi	sp,sp,4
    3468:	000336c1 	jmpi	336c <udivmodsi4>
    346c:	0109c83a 	sub	r4,zero,r4
    3470:	28000b16 	blt	r5,zero,34a0 <__modsi3+0x58>
    3474:	180b883a 	mov	r5,r3
    3478:	01800044 	movi	r6,1
    347c:	000336c0 	call	336c <udivmodsi4>
    3480:	0085c83a 	sub	r2,zero,r2
    3484:	dfc00017 	ldw	ra,0(sp)
    3488:	dec00104 	addi	sp,sp,4
    348c:	f800283a 	ret
    3490:	014bc83a 	sub	r5,zero,r5
    3494:	dfc00017 	ldw	ra,0(sp)
    3498:	dec00104 	addi	sp,sp,4
    349c:	000336c1 	jmpi	336c <udivmodsi4>
    34a0:	0147c83a 	sub	r3,zero,r5
    34a4:	003ff306 	br	3474 <__modsi3+0x2c>

000034a8 <__udivsi3>:
    34a8:	000d883a 	mov	r6,zero
    34ac:	000336c1 	jmpi	336c <udivmodsi4>

000034b0 <__umodsi3>:
    34b0:	01800044 	movi	r6,1
    34b4:	000336c1 	jmpi	336c <udivmodsi4>

000034b8 <__clzsi2>:
    34b8:	00bfffd4 	movui	r2,65535
    34bc:	11000e36 	bltu	r2,r4,34f8 <__clzsi2+0x40>
    34c0:	00803fc4 	movi	r2,255
    34c4:	01400204 	movi	r5,8
    34c8:	0007883a 	mov	r3,zero
    34cc:	11001036 	bltu	r2,r4,3510 <__clzsi2+0x58>
    34d0:	000b883a 	mov	r5,zero
    34d4:	20c6d83a 	srl	r3,r4,r3
    34d8:	00800074 	movhi	r2,1
    34dc:	108ed904 	addi	r2,r2,15204
    34e0:	1887883a 	add	r3,r3,r2
    34e4:	18800003 	ldbu	r2,0(r3)
    34e8:	00c00804 	movi	r3,32
    34ec:	2885883a 	add	r2,r5,r2
    34f0:	1885c83a 	sub	r2,r3,r2
    34f4:	f800283a 	ret
    34f8:	01400404 	movi	r5,16
    34fc:	00804034 	movhi	r2,256
    3500:	10bfffc4 	addi	r2,r2,-1
    3504:	2807883a 	mov	r3,r5
    3508:	113ff22e 	bgeu	r2,r4,34d4 <__clzsi2+0x1c>
    350c:	01400604 	movi	r5,24
    3510:	2807883a 	mov	r3,r5
    3514:	20c6d83a 	srl	r3,r4,r3
    3518:	00800074 	movhi	r2,1
    351c:	108ed904 	addi	r2,r2,15204
    3520:	1887883a 	add	r3,r3,r2
    3524:	18800003 	ldbu	r2,0(r3)
    3528:	00c00804 	movi	r3,32
    352c:	2885883a 	add	r2,r5,r2
    3530:	1885c83a 	sub	r2,r3,r2
    3534:	f800283a 	ret

00003538 <__pack_f>:
    3538:	20c00017 	ldw	r3,0(r4)
    353c:	01c00044 	movi	r7,1
    3540:	21800317 	ldw	r6,12(r4)
    3544:	21400117 	ldw	r5,4(r4)
    3548:	38c02d2e 	bgeu	r7,r3,3600 <__pack_f+0xc8>
    354c:	00800104 	movi	r2,4
    3550:	18802826 	beq	r3,r2,35f4 <__pack_f+0xbc>
    3554:	00800084 	movi	r2,2
    3558:	18800126 	beq	r3,r2,3560 <__pack_f+0x28>
    355c:	3000101e 	bne	r6,zero,35a0 <__pack_f+0x68>
    3560:	000d883a 	mov	r6,zero
    3564:	0007883a 	mov	r3,zero
    3568:	19003fcc 	andi	r4,r3,255
    356c:	200895fa 	slli	r4,r4,23
    3570:	00c02034 	movhi	r3,128
    3574:	18ffffc4 	addi	r3,r3,-1
    3578:	30c6703a 	and	r3,r6,r3
    357c:	10a0002c 	andhi	r2,r2,32768
    3580:	10c4b03a 	or	r2,r2,r3
    3584:	280a97fa 	slli	r5,r5,31
    3588:	1104b03a 	or	r2,r2,r4
    358c:	00e00034 	movhi	r3,32768
    3590:	18ffffc4 	addi	r3,r3,-1
    3594:	10c4703a 	and	r2,r2,r3
    3598:	1144b03a 	or	r2,r2,r5
    359c:	f800283a 	ret
    35a0:	21000217 	ldw	r4,8(r4)
    35a4:	00bfe084 	movi	r2,-126
    35a8:	20801b16 	blt	r4,r2,3618 <__pack_f+0xe0>
    35ac:	00801fc4 	movi	r2,127
    35b0:	11001016 	blt	r2,r4,35f4 <__pack_f+0xbc>
    35b4:	308e703a 	and	r7,r6,r2
    35b8:	2087883a 	add	r3,r4,r2
    35bc:	00801004 	movi	r2,64
    35c0:	38800526 	beq	r7,r2,35d8 <__pack_f+0xa0>
    35c4:	31800fc4 	addi	r6,r6,63
    35c8:	30000716 	blt	r6,zero,35e8 <__pack_f+0xb0>
    35cc:	300490ba 	slli	r2,r6,2
    35d0:	100cd27a 	srli	r6,r2,9
    35d4:	003fe406 	br	3568 <__pack_f+0x30>
    35d8:	3080200c 	andi	r2,r6,128
    35dc:	103ffa26 	beq	r2,zero,35c8 <__pack_f+0x90>
    35e0:	31cd883a 	add	r6,r6,r7
    35e4:	003ff806 	br	35c8 <__pack_f+0x90>
    35e8:	300cd07a 	srli	r6,r6,1
    35ec:	18c00044 	addi	r3,r3,1
    35f0:	003ff606 	br	35cc <__pack_f+0x94>
    35f4:	000d883a 	mov	r6,zero
    35f8:	00ffffc4 	movi	r3,-1
    35fc:	003fda06 	br	3568 <__pack_f+0x30>
    3600:	31800434 	orhi	r6,r6,16
    3604:	00802034 	movhi	r2,128
    3608:	10bfffc4 	addi	r2,r2,-1
    360c:	308c703a 	and	r6,r6,r2
    3610:	00ffffc4 	movi	r3,-1
    3614:	003fd406 	br	3568 <__pack_f+0x30>
    3618:	1109c83a 	sub	r4,r2,r4
    361c:	00800644 	movi	r2,25
    3620:	11001216 	blt	r2,r4,366c <__pack_f+0x134>
    3624:	3904983a 	sll	r2,r7,r4
    3628:	3106d83a 	srl	r3,r6,r4
    362c:	10bfffc4 	addi	r2,r2,-1
    3630:	3084703a 	and	r2,r6,r2
    3634:	1004c03a 	cmpne	r2,r2,zero
    3638:	1886b03a 	or	r3,r3,r2
    363c:	19001fcc 	andi	r4,r3,127
    3640:	00801004 	movi	r2,64
    3644:	20800c26 	beq	r4,r2,3678 <__pack_f+0x140>
    3648:	18c00fc4 	addi	r3,r3,63
    364c:	00900034 	movhi	r2,16384
    3650:	10bfffc4 	addi	r2,r2,-1
    3654:	180cd1fa 	srli	r6,r3,7
    3658:	10c7803a 	cmpltu	r3,r2,r3
    365c:	00802034 	movhi	r2,128
    3660:	10bfffc4 	addi	r2,r2,-1
    3664:	308c703a 	and	r6,r6,r2
    3668:	003fbf06 	br	3568 <__pack_f+0x30>
    366c:	0007883a 	mov	r3,zero
    3670:	000d883a 	mov	r6,zero
    3674:	003ff906 	br	365c <__pack_f+0x124>
    3678:	1880200c 	andi	r2,r3,128
    367c:	10000126 	beq	r2,zero,3684 <__pack_f+0x14c>
    3680:	1907883a 	add	r3,r3,r4
    3684:	180cd1fa 	srli	r6,r3,7
    3688:	00900034 	movhi	r2,16384
    368c:	10bfffc4 	addi	r2,r2,-1
    3690:	10c7803a 	cmpltu	r3,r2,r3
    3694:	003ff106 	br	365c <__pack_f+0x124>

00003698 <__unpack_f>:
    3698:	21800017 	ldw	r6,0(r4)
    369c:	00c02034 	movhi	r3,128
    36a0:	18ffffc4 	addi	r3,r3,-1
    36a4:	3004d5fa 	srli	r2,r6,23
    36a8:	3008d7fa 	srli	r4,r6,31
    36ac:	30ce703a 	and	r7,r6,r3
    36b0:	10c03fcc 	andi	r3,r2,255
    36b4:	29000115 	stw	r4,4(r5)
    36b8:	1800131e 	bne	r3,zero,3708 <__unpack_f+0x70>
    36bc:	38000f26 	beq	r7,zero,36fc <__unpack_f+0x64>
    36c0:	380691fa 	slli	r3,r7,7
    36c4:	01bfe084 	movi	r6,-126
    36c8:	008000c4 	movi	r2,3
    36cc:	01100034 	movhi	r4,16384
    36d0:	213fffc4 	addi	r4,r4,-1
    36d4:	28800015 	stw	r2,0(r5)
    36d8:	29800215 	stw	r6,8(r5)
    36dc:	20c00536 	bltu	r4,r3,36f4 <__unpack_f+0x5c>
    36e0:	3005883a 	mov	r2,r6
    36e4:	18c7883a 	add	r3,r3,r3
    36e8:	10bfffc4 	addi	r2,r2,-1
    36ec:	20fffd2e 	bgeu	r4,r3,36e4 <__unpack_f+0x4c>
    36f0:	28800215 	stw	r2,8(r5)
    36f4:	28c00315 	stw	r3,12(r5)
    36f8:	f800283a 	ret
    36fc:	00800084 	movi	r2,2
    3700:	28800015 	stw	r2,0(r5)
    3704:	f800283a 	ret
    3708:	00803fc4 	movi	r2,255
    370c:	18800826 	beq	r3,r2,3730 <__unpack_f+0x98>
    3710:	380491fa 	slli	r2,r7,7
    3714:	18ffe044 	addi	r3,r3,-127
    3718:	28c00215 	stw	r3,8(r5)
    371c:	10900034 	orhi	r2,r2,16384
    3720:	28800315 	stw	r2,12(r5)
    3724:	008000c4 	movi	r2,3
    3728:	28800015 	stw	r2,0(r5)
    372c:	f800283a 	ret
    3730:	3800031e 	bne	r7,zero,3740 <__unpack_f+0xa8>
    3734:	00800104 	movi	r2,4
    3738:	28800015 	stw	r2,0(r5)
    373c:	f800283a 	ret
    3740:	3080042c 	andhi	r2,r6,16
    3744:	10000426 	beq	r2,zero,3758 <__unpack_f+0xc0>
    3748:	00800044 	movi	r2,1
    374c:	28800015 	stw	r2,0(r5)
    3750:	29c00315 	stw	r7,12(r5)
    3754:	f800283a 	ret
    3758:	28000015 	stw	zero,0(r5)
    375c:	003ffc06 	br	3750 <__unpack_f+0xb8>

00003760 <__pack_d>:
    3760:	20c00017 	ldw	r3,0(r4)
    3764:	defffd04 	addi	sp,sp,-12
    3768:	dc000015 	stw	r16,0(sp)
    376c:	dc800215 	stw	r18,8(sp)
    3770:	dc400115 	stw	r17,4(sp)
    3774:	00800044 	movi	r2,1
    3778:	22000317 	ldw	r8,12(r4)
    377c:	001f883a 	mov	r15,zero
    3780:	22400417 	ldw	r9,16(r4)
    3784:	24000117 	ldw	r16,4(r4)
    3788:	10c0552e 	bgeu	r2,r3,38e0 <__pack_d+0x180>
    378c:	00800104 	movi	r2,4
    3790:	18804f26 	beq	r3,r2,38d0 <__pack_d+0x170>
    3794:	00800084 	movi	r2,2
    3798:	18800226 	beq	r3,r2,37a4 <__pack_d+0x44>
    379c:	4244b03a 	or	r2,r8,r9
    37a0:	10001a1e 	bne	r2,zero,380c <__pack_d+0xac>
    37a4:	000d883a 	mov	r6,zero
    37a8:	000f883a 	mov	r7,zero
    37ac:	0011883a 	mov	r8,zero
    37b0:	00800434 	movhi	r2,16
    37b4:	10bfffc4 	addi	r2,r2,-1
    37b8:	301d883a 	mov	r14,r6
    37bc:	3884703a 	and	r2,r7,r2
    37c0:	400a953a 	slli	r5,r8,20
    37c4:	79bffc2c 	andhi	r6,r15,65520
    37c8:	308cb03a 	or	r6,r6,r2
    37cc:	00e00434 	movhi	r3,32784
    37d0:	18ffffc4 	addi	r3,r3,-1
    37d4:	800497fa 	slli	r2,r16,31
    37d8:	30c6703a 	and	r3,r6,r3
    37dc:	1946b03a 	or	r3,r3,r5
    37e0:	01600034 	movhi	r5,32768
    37e4:	297fffc4 	addi	r5,r5,-1
    37e8:	194a703a 	and	r5,r3,r5
    37ec:	288ab03a 	or	r5,r5,r2
    37f0:	2807883a 	mov	r3,r5
    37f4:	7005883a 	mov	r2,r14
    37f8:	dc800217 	ldw	r18,8(sp)
    37fc:	dc400117 	ldw	r17,4(sp)
    3800:	dc000017 	ldw	r16,0(sp)
    3804:	dec00304 	addi	sp,sp,12
    3808:	f800283a 	ret
    380c:	21000217 	ldw	r4,8(r4)
    3810:	00bf0084 	movi	r2,-1022
    3814:	20803f16 	blt	r4,r2,3914 <__pack_d+0x1b4>
    3818:	0080ffc4 	movi	r2,1023
    381c:	11002c16 	blt	r2,r4,38d0 <__pack_d+0x170>
    3820:	00803fc4 	movi	r2,255
    3824:	408c703a 	and	r6,r8,r2
    3828:	00802004 	movi	r2,128
    382c:	0007883a 	mov	r3,zero
    3830:	000f883a 	mov	r7,zero
    3834:	2280ffc4 	addi	r10,r4,1023
    3838:	30801e26 	beq	r6,r2,38b4 <__pack_d+0x154>
    383c:	00801fc4 	movi	r2,127
    3840:	4089883a 	add	r4,r8,r2
    3844:	220d803a 	cmpltu	r6,r4,r8
    3848:	324d883a 	add	r6,r6,r9
    384c:	2011883a 	mov	r8,r4
    3850:	3013883a 	mov	r9,r6
    3854:	00880034 	movhi	r2,8192
    3858:	10bfffc4 	addi	r2,r2,-1
    385c:	12400d36 	bltu	r2,r9,3894 <__pack_d+0x134>
    3860:	4804963a 	slli	r2,r9,24
    3864:	400cd23a 	srli	r6,r8,8
    3868:	480ed23a 	srli	r7,r9,8
    386c:	013fffc4 	movi	r4,-1
    3870:	118cb03a 	or	r6,r2,r6
    3874:	01400434 	movhi	r5,16
    3878:	297fffc4 	addi	r5,r5,-1
    387c:	3104703a 	and	r2,r6,r4
    3880:	3946703a 	and	r3,r7,r5
    3884:	5201ffcc 	andi	r8,r10,2047
    3888:	100d883a 	mov	r6,r2
    388c:	180f883a 	mov	r7,r3
    3890:	003fc706 	br	37b0 <__pack_d+0x50>
    3894:	480897fa 	slli	r4,r9,31
    3898:	4004d07a 	srli	r2,r8,1
    389c:	4806d07a 	srli	r3,r9,1
    38a0:	52800044 	addi	r10,r10,1
    38a4:	2084b03a 	or	r2,r4,r2
    38a8:	1011883a 	mov	r8,r2
    38ac:	1813883a 	mov	r9,r3
    38b0:	003feb06 	br	3860 <__pack_d+0x100>
    38b4:	383fe11e 	bne	r7,zero,383c <__pack_d+0xdc>
    38b8:	01004004 	movi	r4,256
    38bc:	4104703a 	and	r2,r8,r4
    38c0:	10c4b03a 	or	r2,r2,r3
    38c4:	103fe326 	beq	r2,zero,3854 <__pack_d+0xf4>
    38c8:	3005883a 	mov	r2,r6
    38cc:	003fdc06 	br	3840 <__pack_d+0xe0>
    38d0:	000d883a 	mov	r6,zero
    38d4:	000f883a 	mov	r7,zero
    38d8:	0201ffc4 	movi	r8,2047
    38dc:	003fb406 	br	37b0 <__pack_d+0x50>
    38e0:	0005883a 	mov	r2,zero
    38e4:	00c00234 	movhi	r3,8
    38e8:	408cb03a 	or	r6,r8,r2
    38ec:	48ceb03a 	or	r7,r9,r3
    38f0:	013fffc4 	movi	r4,-1
    38f4:	01400434 	movhi	r5,16
    38f8:	297fffc4 	addi	r5,r5,-1
    38fc:	3104703a 	and	r2,r6,r4
    3900:	3946703a 	and	r3,r7,r5
    3904:	100d883a 	mov	r6,r2
    3908:	180f883a 	mov	r7,r3
    390c:	0201ffc4 	movi	r8,2047
    3910:	003fa706 	br	37b0 <__pack_d+0x50>
    3914:	1109c83a 	sub	r4,r2,r4
    3918:	00800e04 	movi	r2,56
    391c:	11004316 	blt	r2,r4,3a2c <__pack_d+0x2cc>
    3920:	21fff804 	addi	r7,r4,-32
    3924:	38004516 	blt	r7,zero,3a3c <__pack_d+0x2dc>
    3928:	49d8d83a 	srl	r12,r9,r7
    392c:	001b883a 	mov	r13,zero
    3930:	0023883a 	mov	r17,zero
    3934:	01400044 	movi	r5,1
    3938:	0025883a 	mov	r18,zero
    393c:	38004716 	blt	r7,zero,3a5c <__pack_d+0x2fc>
    3940:	29d6983a 	sll	r11,r5,r7
    3944:	0015883a 	mov	r10,zero
    3948:	00bfffc4 	movi	r2,-1
    394c:	5089883a 	add	r4,r10,r2
    3950:	588b883a 	add	r5,r11,r2
    3954:	228d803a 	cmpltu	r6,r4,r10
    3958:	314b883a 	add	r5,r6,r5
    395c:	4104703a 	and	r2,r8,r4
    3960:	4946703a 	and	r3,r9,r5
    3964:	10c4b03a 	or	r2,r2,r3
    3968:	10000226 	beq	r2,zero,3974 <__pack_d+0x214>
    396c:	04400044 	movi	r17,1
    3970:	0025883a 	mov	r18,zero
    3974:	00803fc4 	movi	r2,255
    3978:	644eb03a 	or	r7,r12,r17
    397c:	3892703a 	and	r9,r7,r2
    3980:	00802004 	movi	r2,128
    3984:	6c90b03a 	or	r8,r13,r18
    3988:	0015883a 	mov	r10,zero
    398c:	48801626 	beq	r9,r2,39e8 <__pack_d+0x288>
    3990:	01001fc4 	movi	r4,127
    3994:	3905883a 	add	r2,r7,r4
    3998:	11cd803a 	cmpltu	r6,r2,r7
    399c:	320d883a 	add	r6,r6,r8
    39a0:	100f883a 	mov	r7,r2
    39a4:	00840034 	movhi	r2,4096
    39a8:	10bfffc4 	addi	r2,r2,-1
    39ac:	3011883a 	mov	r8,r6
    39b0:	0007883a 	mov	r3,zero
    39b4:	11801b36 	bltu	r2,r6,3a24 <__pack_d+0x2c4>
    39b8:	4004963a 	slli	r2,r8,24
    39bc:	3808d23a 	srli	r4,r7,8
    39c0:	400ad23a 	srli	r5,r8,8
    39c4:	1813883a 	mov	r9,r3
    39c8:	1108b03a 	or	r4,r2,r4
    39cc:	00bfffc4 	movi	r2,-1
    39d0:	00c00434 	movhi	r3,16
    39d4:	18ffffc4 	addi	r3,r3,-1
    39d8:	208c703a 	and	r6,r4,r2
    39dc:	28ce703a 	and	r7,r5,r3
    39e0:	4a01ffcc 	andi	r8,r9,2047
    39e4:	003f7206 	br	37b0 <__pack_d+0x50>
    39e8:	503fe91e 	bne	r10,zero,3990 <__pack_d+0x230>
    39ec:	01004004 	movi	r4,256
    39f0:	3904703a 	and	r2,r7,r4
    39f4:	0007883a 	mov	r3,zero
    39f8:	10c4b03a 	or	r2,r2,r3
    39fc:	10000626 	beq	r2,zero,3a18 <__pack_d+0x2b8>
    3a00:	3a45883a 	add	r2,r7,r9
    3a04:	11cd803a 	cmpltu	r6,r2,r7
    3a08:	320d883a 	add	r6,r6,r8
    3a0c:	100f883a 	mov	r7,r2
    3a10:	3011883a 	mov	r8,r6
    3a14:	0007883a 	mov	r3,zero
    3a18:	00840034 	movhi	r2,4096
    3a1c:	10bfffc4 	addi	r2,r2,-1
    3a20:	123fe52e 	bgeu	r2,r8,39b8 <__pack_d+0x258>
    3a24:	00c00044 	movi	r3,1
    3a28:	003fe306 	br	39b8 <__pack_d+0x258>
    3a2c:	0009883a 	mov	r4,zero
    3a30:	0013883a 	mov	r9,zero
    3a34:	000b883a 	mov	r5,zero
    3a38:	003fe406 	br	39cc <__pack_d+0x26c>
    3a3c:	4a47883a 	add	r3,r9,r9
    3a40:	008007c4 	movi	r2,31
    3a44:	1105c83a 	sub	r2,r2,r4
    3a48:	1886983a 	sll	r3,r3,r2
    3a4c:	4118d83a 	srl	r12,r8,r4
    3a50:	491ad83a 	srl	r13,r9,r4
    3a54:	1b18b03a 	or	r12,r3,r12
    3a58:	003fb506 	br	3930 <__pack_d+0x1d0>
    3a5c:	2806d07a 	srli	r3,r5,1
    3a60:	008007c4 	movi	r2,31
    3a64:	1105c83a 	sub	r2,r2,r4
    3a68:	1896d83a 	srl	r11,r3,r2
    3a6c:	2914983a 	sll	r10,r5,r4
    3a70:	003fb506 	br	3948 <__pack_d+0x1e8>

00003a74 <memcpy>:
    3a74:	01c003c4 	movi	r7,15
    3a78:	2007883a 	mov	r3,r4
    3a7c:	3980032e 	bgeu	r7,r6,3a8c <memcpy+0x18>
    3a80:	2904b03a 	or	r2,r5,r4
    3a84:	108000cc 	andi	r2,r2,3
    3a88:	10000926 	beq	r2,zero,3ab0 <memcpy+0x3c>
    3a8c:	30000626 	beq	r6,zero,3aa8 <memcpy+0x34>
    3a90:	30cd883a 	add	r6,r6,r3
    3a94:	28800003 	ldbu	r2,0(r5)
    3a98:	29400044 	addi	r5,r5,1
    3a9c:	18800005 	stb	r2,0(r3)
    3aa0:	18c00044 	addi	r3,r3,1
    3aa4:	30fffb1e 	bne	r6,r3,3a94 <memcpy+0x20>
    3aa8:	2005883a 	mov	r2,r4
    3aac:	f800283a 	ret
    3ab0:	3811883a 	mov	r8,r7
    3ab4:	200f883a 	mov	r7,r4
    3ab8:	28c00017 	ldw	r3,0(r5)
    3abc:	31bffc04 	addi	r6,r6,-16
    3ac0:	38c00015 	stw	r3,0(r7)
    3ac4:	28800117 	ldw	r2,4(r5)
    3ac8:	38800115 	stw	r2,4(r7)
    3acc:	28c00217 	ldw	r3,8(r5)
    3ad0:	38c00215 	stw	r3,8(r7)
    3ad4:	28800317 	ldw	r2,12(r5)
    3ad8:	29400404 	addi	r5,r5,16
    3adc:	38800315 	stw	r2,12(r7)
    3ae0:	39c00404 	addi	r7,r7,16
    3ae4:	41bff436 	bltu	r8,r6,3ab8 <memcpy+0x44>
    3ae8:	008000c4 	movi	r2,3
    3aec:	1180072e 	bgeu	r2,r6,3b0c <memcpy+0x98>
    3af0:	1007883a 	mov	r3,r2
    3af4:	28800017 	ldw	r2,0(r5)
    3af8:	31bfff04 	addi	r6,r6,-4
    3afc:	29400104 	addi	r5,r5,4
    3b00:	38800015 	stw	r2,0(r7)
    3b04:	39c00104 	addi	r7,r7,4
    3b08:	19bffa36 	bltu	r3,r6,3af4 <memcpy+0x80>
    3b0c:	3807883a 	mov	r3,r7
    3b10:	003fde06 	br	3a8c <memcpy+0x18>

00003b14 <memset>:
    3b14:	008000c4 	movi	r2,3
    3b18:	29403fcc 	andi	r5,r5,255
    3b1c:	2007883a 	mov	r3,r4
    3b20:	1180022e 	bgeu	r2,r6,3b2c <memset+0x18>
    3b24:	2084703a 	and	r2,r4,r2
    3b28:	10000826 	beq	r2,zero,3b4c <memset+0x38>
    3b2c:	30000526 	beq	r6,zero,3b44 <memset+0x30>
    3b30:	2805883a 	mov	r2,r5
    3b34:	30cd883a 	add	r6,r6,r3
    3b38:	18800005 	stb	r2,0(r3)
    3b3c:	18c00044 	addi	r3,r3,1
    3b40:	19bffd1e 	bne	r3,r6,3b38 <memset+0x24>
    3b44:	2005883a 	mov	r2,r4
    3b48:	f800283a 	ret
    3b4c:	2804923a 	slli	r2,r5,8
    3b50:	020003c4 	movi	r8,15
    3b54:	200f883a 	mov	r7,r4
    3b58:	2884b03a 	or	r2,r5,r2
    3b5c:	1006943a 	slli	r3,r2,16
    3b60:	10c6b03a 	or	r3,r2,r3
    3b64:	41800a2e 	bgeu	r8,r6,3b90 <memset+0x7c>
    3b68:	4005883a 	mov	r2,r8
    3b6c:	31bffc04 	addi	r6,r6,-16
    3b70:	38c00015 	stw	r3,0(r7)
    3b74:	38c00115 	stw	r3,4(r7)
    3b78:	38c00215 	stw	r3,8(r7)
    3b7c:	38c00315 	stw	r3,12(r7)
    3b80:	39c00404 	addi	r7,r7,16
    3b84:	11bff936 	bltu	r2,r6,3b6c <memset+0x58>
    3b88:	008000c4 	movi	r2,3
    3b8c:	1180052e 	bgeu	r2,r6,3ba4 <memset+0x90>
    3b90:	31bfff04 	addi	r6,r6,-4
    3b94:	008000c4 	movi	r2,3
    3b98:	38c00015 	stw	r3,0(r7)
    3b9c:	39c00104 	addi	r7,r7,4
    3ba0:	11bffb36 	bltu	r2,r6,3b90 <memset+0x7c>
    3ba4:	3807883a 	mov	r3,r7
    3ba8:	003fe006 	br	3b2c <memset+0x18>

00003bac <printf>:
    3bac:	defffb04 	addi	sp,sp,-20
    3bb0:	dfc00115 	stw	ra,4(sp)
    3bb4:	d9400215 	stw	r5,8(sp)
    3bb8:	d9800315 	stw	r6,12(sp)
    3bbc:	d9c00415 	stw	r7,16(sp)
    3bc0:	00800074 	movhi	r2,1
    3bc4:	10981d04 	addi	r2,r2,24692
    3bc8:	10c00017 	ldw	r3,0(r2)
    3bcc:	200b883a 	mov	r5,r4
    3bd0:	d8800204 	addi	r2,sp,8
    3bd4:	19000217 	ldw	r4,8(r3)
    3bd8:	100d883a 	mov	r6,r2
    3bdc:	d8800015 	stw	r2,0(sp)
    3be0:	0005b280 	call	5b28 <__vfprintf_internal>
    3be4:	dfc00117 	ldw	ra,4(sp)
    3be8:	dec00504 	addi	sp,sp,20
    3bec:	f800283a 	ret

00003bf0 <_printf_r>:
    3bf0:	defffc04 	addi	sp,sp,-16
    3bf4:	dfc00115 	stw	ra,4(sp)
    3bf8:	d9800215 	stw	r6,8(sp)
    3bfc:	d9c00315 	stw	r7,12(sp)
    3c00:	280d883a 	mov	r6,r5
    3c04:	21400217 	ldw	r5,8(r4)
    3c08:	d8c00204 	addi	r3,sp,8
    3c0c:	180f883a 	mov	r7,r3
    3c10:	d8c00015 	stw	r3,0(sp)
    3c14:	0003c7c0 	call	3c7c <___vfprintf_internal_r>
    3c18:	dfc00117 	ldw	ra,4(sp)
    3c1c:	dec00404 	addi	sp,sp,16
    3c20:	f800283a 	ret

00003c24 <__sprint_r>:
    3c24:	30800217 	ldw	r2,8(r6)
    3c28:	defffe04 	addi	sp,sp,-8
    3c2c:	dc000015 	stw	r16,0(sp)
    3c30:	dfc00115 	stw	ra,4(sp)
    3c34:	3021883a 	mov	r16,r6
    3c38:	0007883a 	mov	r3,zero
    3c3c:	1000061e 	bne	r2,zero,3c58 <__sprint_r+0x34>
    3c40:	1805883a 	mov	r2,r3
    3c44:	30000115 	stw	zero,4(r6)
    3c48:	dfc00117 	ldw	ra,4(sp)
    3c4c:	dc000017 	ldw	r16,0(sp)
    3c50:	dec00204 	addi	sp,sp,8
    3c54:	f800283a 	ret
    3c58:	0007d840 	call	7d84 <__sfvwrite_r>
    3c5c:	1007883a 	mov	r3,r2
    3c60:	1805883a 	mov	r2,r3
    3c64:	80000115 	stw	zero,4(r16)
    3c68:	80000215 	stw	zero,8(r16)
    3c6c:	dfc00117 	ldw	ra,4(sp)
    3c70:	dc000017 	ldw	r16,0(sp)
    3c74:	dec00204 	addi	sp,sp,8
    3c78:	f800283a 	ret

00003c7c <___vfprintf_internal_r>:
    3c7c:	defea404 	addi	sp,sp,-1392
    3c80:	dd815815 	stw	r22,1376(sp)
    3c84:	dc015215 	stw	r16,1352(sp)
    3c88:	d9c15115 	stw	r7,1348(sp)
    3c8c:	dfc15b15 	stw	ra,1388(sp)
    3c90:	df015a15 	stw	fp,1384(sp)
    3c94:	ddc15915 	stw	r23,1380(sp)
    3c98:	dd415715 	stw	r21,1372(sp)
    3c9c:	dd015615 	stw	r20,1368(sp)
    3ca0:	dcc15515 	stw	r19,1364(sp)
    3ca4:	dc815415 	stw	r18,1360(sp)
    3ca8:	dc415315 	stw	r17,1356(sp)
    3cac:	282d883a 	mov	r22,r5
    3cb0:	3021883a 	mov	r16,r6
    3cb4:	d9014f15 	stw	r4,1340(sp)
    3cb8:	00083a80 	call	83a8 <_localeconv_r>
    3cbc:	10800017 	ldw	r2,0(r2)
    3cc0:	d9c15117 	ldw	r7,1348(sp)
    3cc4:	d8814915 	stw	r2,1316(sp)
    3cc8:	d8814f17 	ldw	r2,1340(sp)
    3ccc:	10000226 	beq	r2,zero,3cd8 <___vfprintf_internal_r+0x5c>
    3cd0:	10800e17 	ldw	r2,56(r2)
    3cd4:	10020d26 	beq	r2,zero,450c <___vfprintf_internal_r+0x890>
    3cd8:	b080030b 	ldhu	r2,12(r22)
    3cdc:	1080020c 	andi	r2,r2,8
    3ce0:	10020e26 	beq	r2,zero,451c <___vfprintf_internal_r+0x8a0>
    3ce4:	b0800417 	ldw	r2,16(r22)
    3ce8:	10020c26 	beq	r2,zero,451c <___vfprintf_internal_r+0x8a0>
    3cec:	b200030b 	ldhu	r8,12(r22)
    3cf0:	00800284 	movi	r2,10
    3cf4:	40c0068c 	andi	r3,r8,26
    3cf8:	18802f1e 	bne	r3,r2,3db8 <___vfprintf_internal_r+0x13c>
    3cfc:	b080038f 	ldh	r2,14(r22)
    3d00:	10002d16 	blt	r2,zero,3db8 <___vfprintf_internal_r+0x13c>
    3d04:	b240038b 	ldhu	r9,14(r22)
    3d08:	b2800717 	ldw	r10,28(r22)
    3d0c:	b2c00917 	ldw	r11,36(r22)
    3d10:	d9014f17 	ldw	r4,1340(sp)
    3d14:	dc402904 	addi	r17,sp,164
    3d18:	d8804004 	addi	r2,sp,256
    3d1c:	00c10004 	movi	r3,1024
    3d20:	423fff4c 	andi	r8,r8,65533
    3d24:	800d883a 	mov	r6,r16
    3d28:	880b883a 	mov	r5,r17
    3d2c:	da002c0d 	sth	r8,176(sp)
    3d30:	da402c8d 	sth	r9,178(sp)
    3d34:	da803015 	stw	r10,192(sp)
    3d38:	dac03215 	stw	r11,200(sp)
    3d3c:	d8802d15 	stw	r2,180(sp)
    3d40:	d8c02e15 	stw	r3,184(sp)
    3d44:	d8802915 	stw	r2,164(sp)
    3d48:	d8c02b15 	stw	r3,172(sp)
    3d4c:	d8002f15 	stw	zero,188(sp)
    3d50:	0003c7c0 	call	3c7c <___vfprintf_internal_r>
    3d54:	d8814b15 	stw	r2,1324(sp)
    3d58:	10000416 	blt	r2,zero,3d6c <___vfprintf_internal_r+0xf0>
    3d5c:	d9014f17 	ldw	r4,1340(sp)
    3d60:	880b883a 	mov	r5,r17
    3d64:	00074540 	call	7454 <_fflush_r>
    3d68:	1002321e 	bne	r2,zero,4634 <___vfprintf_internal_r+0x9b8>
    3d6c:	d8802c0b 	ldhu	r2,176(sp)
    3d70:	1080100c 	andi	r2,r2,64
    3d74:	10000326 	beq	r2,zero,3d84 <___vfprintf_internal_r+0x108>
    3d78:	b080030b 	ldhu	r2,12(r22)
    3d7c:	10801014 	ori	r2,r2,64
    3d80:	b080030d 	sth	r2,12(r22)
    3d84:	d8814b17 	ldw	r2,1324(sp)
    3d88:	dfc15b17 	ldw	ra,1388(sp)
    3d8c:	df015a17 	ldw	fp,1384(sp)
    3d90:	ddc15917 	ldw	r23,1380(sp)
    3d94:	dd815817 	ldw	r22,1376(sp)
    3d98:	dd415717 	ldw	r21,1372(sp)
    3d9c:	dd015617 	ldw	r20,1368(sp)
    3da0:	dcc15517 	ldw	r19,1364(sp)
    3da4:	dc815417 	ldw	r18,1360(sp)
    3da8:	dc415317 	ldw	r17,1356(sp)
    3dac:	dc015217 	ldw	r16,1352(sp)
    3db0:	dec15c04 	addi	sp,sp,1392
    3db4:	f800283a 	ret
    3db8:	0005883a 	mov	r2,zero
    3dbc:	0007883a 	mov	r3,zero
    3dc0:	dd401904 	addi	r21,sp,100
    3dc4:	d8814215 	stw	r2,1288(sp)
    3dc8:	802f883a 	mov	r23,r16
    3dcc:	d8c14315 	stw	r3,1292(sp)
    3dd0:	d8014b15 	stw	zero,1324(sp)
    3dd4:	d8014815 	stw	zero,1312(sp)
    3dd8:	d8014415 	stw	zero,1296(sp)
    3ddc:	d8014715 	stw	zero,1308(sp)
    3de0:	dd400c15 	stw	r21,48(sp)
    3de4:	d8000e15 	stw	zero,56(sp)
    3de8:	d8000d15 	stw	zero,52(sp)
    3dec:	b8800007 	ldb	r2,0(r23)
    3df0:	10001926 	beq	r2,zero,3e58 <___vfprintf_internal_r+0x1dc>
    3df4:	00c00944 	movi	r3,37
    3df8:	10c01726 	beq	r2,r3,3e58 <___vfprintf_internal_r+0x1dc>
    3dfc:	b821883a 	mov	r16,r23
    3e00:	00000106 	br	3e08 <___vfprintf_internal_r+0x18c>
    3e04:	10c00326 	beq	r2,r3,3e14 <___vfprintf_internal_r+0x198>
    3e08:	84000044 	addi	r16,r16,1
    3e0c:	80800007 	ldb	r2,0(r16)
    3e10:	103ffc1e 	bne	r2,zero,3e04 <___vfprintf_internal_r+0x188>
    3e14:	85e7c83a 	sub	r19,r16,r23
    3e18:	98000e26 	beq	r19,zero,3e54 <___vfprintf_internal_r+0x1d8>
    3e1c:	dc800e17 	ldw	r18,56(sp)
    3e20:	dc400d17 	ldw	r17,52(sp)
    3e24:	008001c4 	movi	r2,7
    3e28:	94e5883a 	add	r18,r18,r19
    3e2c:	8c400044 	addi	r17,r17,1
    3e30:	adc00015 	stw	r23,0(r21)
    3e34:	dc800e15 	stw	r18,56(sp)
    3e38:	acc00115 	stw	r19,4(r21)
    3e3c:	dc400d15 	stw	r17,52(sp)
    3e40:	14428b16 	blt	r2,r17,4870 <___vfprintf_internal_r+0xbf4>
    3e44:	ad400204 	addi	r21,r21,8
    3e48:	d9014b17 	ldw	r4,1324(sp)
    3e4c:	24c9883a 	add	r4,r4,r19
    3e50:	d9014b15 	stw	r4,1324(sp)
    3e54:	802f883a 	mov	r23,r16
    3e58:	b8800007 	ldb	r2,0(r23)
    3e5c:	10013c26 	beq	r2,zero,4350 <___vfprintf_internal_r+0x6d4>
    3e60:	bdc00044 	addi	r23,r23,1
    3e64:	d8000405 	stb	zero,16(sp)
    3e68:	b8c00007 	ldb	r3,0(r23)
    3e6c:	04ffffc4 	movi	r19,-1
    3e70:	d8014c15 	stw	zero,1328(sp)
    3e74:	d8014a15 	stw	zero,1320(sp)
    3e78:	d8c14d15 	stw	r3,1332(sp)
    3e7c:	bdc00044 	addi	r23,r23,1
    3e80:	d9414d17 	ldw	r5,1332(sp)
    3e84:	00801604 	movi	r2,88
    3e88:	28fff804 	addi	r3,r5,-32
    3e8c:	10c06036 	bltu	r2,r3,4010 <___vfprintf_internal_r+0x394>
    3e90:	18c5883a 	add	r2,r3,r3
    3e94:	1085883a 	add	r2,r2,r2
    3e98:	00c00034 	movhi	r3,0
    3e9c:	18cfab04 	addi	r3,r3,16044
    3ea0:	10c5883a 	add	r2,r2,r3
    3ea4:	11000017 	ldw	r4,0(r2)
    3ea8:	2000683a 	jmp	r4
    3eac:	00004e20 	cmpeqi	zero,zero,312
    3eb0:	00004010 	cmplti	zero,zero,256
    3eb4:	00004010 	cmplti	zero,zero,256
    3eb8:	00004e0c 	andi	zero,zero,312
    3ebc:	00004010 	cmplti	zero,zero,256
    3ec0:	00004010 	cmplti	zero,zero,256
    3ec4:	00004010 	cmplti	zero,zero,256
    3ec8:	00004010 	cmplti	zero,zero,256
    3ecc:	00004010 	cmplti	zero,zero,256
    3ed0:	00004010 	cmplti	zero,zero,256
    3ed4:	00004bec 	andhi	zero,zero,303
    3ed8:	00004dfc 	xorhi	zero,zero,311
    3edc:	00004010 	cmplti	zero,zero,256
    3ee0:	00004c04 	movi	zero,304
    3ee4:	00004e98 	cmpnei	zero,zero,314
    3ee8:	00004010 	cmplti	zero,zero,256
    3eec:	00004e84 	movi	zero,314
    3ef0:	00004e4c 	andi	zero,zero,313
    3ef4:	00004e4c 	andi	zero,zero,313
    3ef8:	00004e4c 	andi	zero,zero,313
    3efc:	00004e4c 	andi	zero,zero,313
    3f00:	00004e4c 	andi	zero,zero,313
    3f04:	00004e4c 	andi	zero,zero,313
    3f08:	00004e4c 	andi	zero,zero,313
    3f0c:	00004e4c 	andi	zero,zero,313
    3f10:	00004e4c 	andi	zero,zero,313
    3f14:	00004010 	cmplti	zero,zero,256
    3f18:	00004010 	cmplti	zero,zero,256
    3f1c:	00004010 	cmplti	zero,zero,256
    3f20:	00004010 	cmplti	zero,zero,256
    3f24:	00004010 	cmplti	zero,zero,256
    3f28:	00004010 	cmplti	zero,zero,256
    3f2c:	00004010 	cmplti	zero,zero,256
    3f30:	00004010 	cmplti	zero,zero,256
    3f34:	00004010 	cmplti	zero,zero,256
    3f38:	00004010 	cmplti	zero,zero,256
    3f3c:	00004668 	cmpgeui	zero,zero,281
    3f40:	00004cd4 	movui	zero,307
    3f44:	00004010 	cmplti	zero,zero,256
    3f48:	00004cd4 	movui	zero,307
    3f4c:	00004010 	cmplti	zero,zero,256
    3f50:	00004010 	cmplti	zero,zero,256
    3f54:	00004010 	cmplti	zero,zero,256
    3f58:	00004010 	cmplti	zero,zero,256
    3f5c:	00004e38 	rdprs	zero,zero,312
    3f60:	00004010 	cmplti	zero,zero,256
    3f64:	00004010 	cmplti	zero,zero,256
    3f68:	0000471c 	xori	zero,zero,284
    3f6c:	00004010 	cmplti	zero,zero,256
    3f70:	00004010 	cmplti	zero,zero,256
    3f74:	00004010 	cmplti	zero,zero,256
    3f78:	00004010 	cmplti	zero,zero,256
    3f7c:	00004010 	cmplti	zero,zero,256
    3f80:	00004768 	cmpgeui	zero,zero,285
    3f84:	00004010 	cmplti	zero,zero,256
    3f88:	00004010 	cmplti	zero,zero,256
    3f8c:	00004d88 	cmpgei	zero,zero,310
    3f90:	00004010 	cmplti	zero,zero,256
    3f94:	00004010 	cmplti	zero,zero,256
    3f98:	00004010 	cmplti	zero,zero,256
    3f9c:	00004010 	cmplti	zero,zero,256
    3fa0:	00004010 	cmplti	zero,zero,256
    3fa4:	00004010 	cmplti	zero,zero,256
    3fa8:	00004010 	cmplti	zero,zero,256
    3fac:	00004010 	cmplti	zero,zero,256
    3fb0:	00004010 	cmplti	zero,zero,256
    3fb4:	00004010 	cmplti	zero,zero,256
    3fb8:	00004d5c 	xori	zero,zero,309
    3fbc:	00004674 	movhi	zero,281
    3fc0:	00004cd4 	movui	zero,307
    3fc4:	00004cd4 	movui	zero,307
    3fc8:	00004cd4 	movui	zero,307
    3fcc:	00004cc0 	call	4cc <amplitude_circute_set_num+0x34>
    3fd0:	00004674 	movhi	zero,281
    3fd4:	00004010 	cmplti	zero,zero,256
    3fd8:	00004010 	cmplti	zero,zero,256
    3fdc:	00004c48 	cmpgei	zero,zero,305
    3fe0:	00004010 	cmplti	zero,zero,256
    3fe4:	00004c18 	cmpnei	zero,zero,304
    3fe8:	00004728 	cmpgeui	zero,zero,284
    3fec:	00004c78 	rdprs	zero,zero,305
    3ff0:	00004c64 	muli	zero,zero,305
    3ff4:	00004010 	cmplti	zero,zero,256
    3ff8:	00004ef4 	movhi	zero,315
    3ffc:	00004010 	cmplti	zero,zero,256
    4000:	00004774 	movhi	zero,285
    4004:	00004010 	cmplti	zero,zero,256
    4008:	00004010 	cmplti	zero,zero,256
    400c:	00004dec 	andhi	zero,zero,311
    4010:	d9014d17 	ldw	r4,1332(sp)
    4014:	2000ce26 	beq	r4,zero,4350 <___vfprintf_internal_r+0x6d4>
    4018:	01400044 	movi	r5,1
    401c:	d9800f04 	addi	r6,sp,60
    4020:	d9c14015 	stw	r7,1280(sp)
    4024:	d9414515 	stw	r5,1300(sp)
    4028:	d9814115 	stw	r6,1284(sp)
    402c:	280f883a 	mov	r7,r5
    4030:	d9000f05 	stb	r4,60(sp)
    4034:	d8000405 	stb	zero,16(sp)
    4038:	d8014615 	stw	zero,1304(sp)
    403c:	d8c14c17 	ldw	r3,1328(sp)
    4040:	1880008c 	andi	r2,r3,2
    4044:	1005003a 	cmpeq	r2,r2,zero
    4048:	d8815015 	stw	r2,1344(sp)
    404c:	1000031e 	bne	r2,zero,405c <___vfprintf_internal_r+0x3e0>
    4050:	d9014517 	ldw	r4,1300(sp)
    4054:	21000084 	addi	r4,r4,2
    4058:	d9014515 	stw	r4,1300(sp)
    405c:	d9414c17 	ldw	r5,1328(sp)
    4060:	2940210c 	andi	r5,r5,132
    4064:	d9414e15 	stw	r5,1336(sp)
    4068:	28002d1e 	bne	r5,zero,4120 <___vfprintf_internal_r+0x4a4>
    406c:	d9814a17 	ldw	r6,1320(sp)
    4070:	d8814517 	ldw	r2,1300(sp)
    4074:	30a1c83a 	sub	r16,r6,r2
    4078:	0400290e 	bge	zero,r16,4120 <___vfprintf_internal_r+0x4a4>
    407c:	00800404 	movi	r2,16
    4080:	1404580e 	bge	r2,r16,51e4 <___vfprintf_internal_r+0x1568>
    4084:	dc800e17 	ldw	r18,56(sp)
    4088:	dc400d17 	ldw	r17,52(sp)
    408c:	1027883a 	mov	r19,r2
    4090:	07000074 	movhi	fp,1
    4094:	e70f3484 	addi	fp,fp,15570
    4098:	050001c4 	movi	r20,7
    409c:	00000306 	br	40ac <___vfprintf_internal_r+0x430>
    40a0:	843ffc04 	addi	r16,r16,-16
    40a4:	ad400204 	addi	r21,r21,8
    40a8:	9c00130e 	bge	r19,r16,40f8 <___vfprintf_internal_r+0x47c>
    40ac:	94800404 	addi	r18,r18,16
    40b0:	8c400044 	addi	r17,r17,1
    40b4:	af000015 	stw	fp,0(r21)
    40b8:	acc00115 	stw	r19,4(r21)
    40bc:	dc800e15 	stw	r18,56(sp)
    40c0:	dc400d15 	stw	r17,52(sp)
    40c4:	a47ff60e 	bge	r20,r17,40a0 <___vfprintf_internal_r+0x424>
    40c8:	d9014f17 	ldw	r4,1340(sp)
    40cc:	b00b883a 	mov	r5,r22
    40d0:	d9800c04 	addi	r6,sp,48
    40d4:	d9c15115 	stw	r7,1348(sp)
    40d8:	0003c240 	call	3c24 <__sprint_r>
    40dc:	d9c15117 	ldw	r7,1348(sp)
    40e0:	10009e1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    40e4:	843ffc04 	addi	r16,r16,-16
    40e8:	dc800e17 	ldw	r18,56(sp)
    40ec:	dc400d17 	ldw	r17,52(sp)
    40f0:	dd401904 	addi	r21,sp,100
    40f4:	9c3fed16 	blt	r19,r16,40ac <___vfprintf_internal_r+0x430>
    40f8:	9425883a 	add	r18,r18,r16
    40fc:	8c400044 	addi	r17,r17,1
    4100:	008001c4 	movi	r2,7
    4104:	af000015 	stw	fp,0(r21)
    4108:	ac000115 	stw	r16,4(r21)
    410c:	dc800e15 	stw	r18,56(sp)
    4110:	dc400d15 	stw	r17,52(sp)
    4114:	1441f516 	blt	r2,r17,48ec <___vfprintf_internal_r+0xc70>
    4118:	ad400204 	addi	r21,r21,8
    411c:	00000206 	br	4128 <___vfprintf_internal_r+0x4ac>
    4120:	dc800e17 	ldw	r18,56(sp)
    4124:	dc400d17 	ldw	r17,52(sp)
    4128:	d8800407 	ldb	r2,16(sp)
    412c:	10000b26 	beq	r2,zero,415c <___vfprintf_internal_r+0x4e0>
    4130:	00800044 	movi	r2,1
    4134:	94800044 	addi	r18,r18,1
    4138:	8c400044 	addi	r17,r17,1
    413c:	a8800115 	stw	r2,4(r21)
    4140:	d8c00404 	addi	r3,sp,16
    4144:	008001c4 	movi	r2,7
    4148:	a8c00015 	stw	r3,0(r21)
    414c:	dc800e15 	stw	r18,56(sp)
    4150:	dc400d15 	stw	r17,52(sp)
    4154:	1441da16 	blt	r2,r17,48c0 <___vfprintf_internal_r+0xc44>
    4158:	ad400204 	addi	r21,r21,8
    415c:	d9015017 	ldw	r4,1344(sp)
    4160:	20000b1e 	bne	r4,zero,4190 <___vfprintf_internal_r+0x514>
    4164:	d8800444 	addi	r2,sp,17
    4168:	94800084 	addi	r18,r18,2
    416c:	8c400044 	addi	r17,r17,1
    4170:	a8800015 	stw	r2,0(r21)
    4174:	00c00084 	movi	r3,2
    4178:	008001c4 	movi	r2,7
    417c:	a8c00115 	stw	r3,4(r21)
    4180:	dc800e15 	stw	r18,56(sp)
    4184:	dc400d15 	stw	r17,52(sp)
    4188:	1441c216 	blt	r2,r17,4894 <___vfprintf_internal_r+0xc18>
    418c:	ad400204 	addi	r21,r21,8
    4190:	d9414e17 	ldw	r5,1336(sp)
    4194:	00802004 	movi	r2,128
    4198:	2880b126 	beq	r5,r2,4460 <___vfprintf_internal_r+0x7e4>
    419c:	d8c14617 	ldw	r3,1304(sp)
    41a0:	19e1c83a 	sub	r16,r3,r7
    41a4:	0400260e 	bge	zero,r16,4240 <___vfprintf_internal_r+0x5c4>
    41a8:	00800404 	movi	r2,16
    41ac:	1403c90e 	bge	r2,r16,50d4 <___vfprintf_internal_r+0x1458>
    41b0:	1027883a 	mov	r19,r2
    41b4:	07000074 	movhi	fp,1
    41b8:	e70f3084 	addi	fp,fp,15554
    41bc:	050001c4 	movi	r20,7
    41c0:	00000306 	br	41d0 <___vfprintf_internal_r+0x554>
    41c4:	843ffc04 	addi	r16,r16,-16
    41c8:	ad400204 	addi	r21,r21,8
    41cc:	9c00130e 	bge	r19,r16,421c <___vfprintf_internal_r+0x5a0>
    41d0:	94800404 	addi	r18,r18,16
    41d4:	8c400044 	addi	r17,r17,1
    41d8:	af000015 	stw	fp,0(r21)
    41dc:	acc00115 	stw	r19,4(r21)
    41e0:	dc800e15 	stw	r18,56(sp)
    41e4:	dc400d15 	stw	r17,52(sp)
    41e8:	a47ff60e 	bge	r20,r17,41c4 <___vfprintf_internal_r+0x548>
    41ec:	d9014f17 	ldw	r4,1340(sp)
    41f0:	b00b883a 	mov	r5,r22
    41f4:	d9800c04 	addi	r6,sp,48
    41f8:	d9c15115 	stw	r7,1348(sp)
    41fc:	0003c240 	call	3c24 <__sprint_r>
    4200:	d9c15117 	ldw	r7,1348(sp)
    4204:	1000551e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4208:	843ffc04 	addi	r16,r16,-16
    420c:	dc800e17 	ldw	r18,56(sp)
    4210:	dc400d17 	ldw	r17,52(sp)
    4214:	dd401904 	addi	r21,sp,100
    4218:	9c3fed16 	blt	r19,r16,41d0 <___vfprintf_internal_r+0x554>
    421c:	9425883a 	add	r18,r18,r16
    4220:	8c400044 	addi	r17,r17,1
    4224:	008001c4 	movi	r2,7
    4228:	af000015 	stw	fp,0(r21)
    422c:	ac000115 	stw	r16,4(r21)
    4230:	dc800e15 	stw	r18,56(sp)
    4234:	dc400d15 	stw	r17,52(sp)
    4238:	14418216 	blt	r2,r17,4844 <___vfprintf_internal_r+0xbc8>
    423c:	ad400204 	addi	r21,r21,8
    4240:	d9014c17 	ldw	r4,1328(sp)
    4244:	2080400c 	andi	r2,r4,256
    4248:	10004a1e 	bne	r2,zero,4374 <___vfprintf_internal_r+0x6f8>
    424c:	d9414117 	ldw	r5,1284(sp)
    4250:	91e5883a 	add	r18,r18,r7
    4254:	8c400044 	addi	r17,r17,1
    4258:	008001c4 	movi	r2,7
    425c:	a9400015 	stw	r5,0(r21)
    4260:	a9c00115 	stw	r7,4(r21)
    4264:	dc800e15 	stw	r18,56(sp)
    4268:	dc400d15 	stw	r17,52(sp)
    426c:	14416716 	blt	r2,r17,480c <___vfprintf_internal_r+0xb90>
    4270:	a8c00204 	addi	r3,r21,8
    4274:	d9814c17 	ldw	r6,1328(sp)
    4278:	3080010c 	andi	r2,r6,4
    427c:	10002826 	beq	r2,zero,4320 <___vfprintf_internal_r+0x6a4>
    4280:	d8814a17 	ldw	r2,1320(sp)
    4284:	d9014517 	ldw	r4,1300(sp)
    4288:	1121c83a 	sub	r16,r2,r4
    428c:	0400240e 	bge	zero,r16,4320 <___vfprintf_internal_r+0x6a4>
    4290:	00800404 	movi	r2,16
    4294:	14044f0e 	bge	r2,r16,53d4 <___vfprintf_internal_r+0x1758>
    4298:	dc400d17 	ldw	r17,52(sp)
    429c:	1027883a 	mov	r19,r2
    42a0:	07000074 	movhi	fp,1
    42a4:	e70f3484 	addi	fp,fp,15570
    42a8:	050001c4 	movi	r20,7
    42ac:	00000306 	br	42bc <___vfprintf_internal_r+0x640>
    42b0:	843ffc04 	addi	r16,r16,-16
    42b4:	18c00204 	addi	r3,r3,8
    42b8:	9c00110e 	bge	r19,r16,4300 <___vfprintf_internal_r+0x684>
    42bc:	94800404 	addi	r18,r18,16
    42c0:	8c400044 	addi	r17,r17,1
    42c4:	1f000015 	stw	fp,0(r3)
    42c8:	1cc00115 	stw	r19,4(r3)
    42cc:	dc800e15 	stw	r18,56(sp)
    42d0:	dc400d15 	stw	r17,52(sp)
    42d4:	a47ff60e 	bge	r20,r17,42b0 <___vfprintf_internal_r+0x634>
    42d8:	d9014f17 	ldw	r4,1340(sp)
    42dc:	b00b883a 	mov	r5,r22
    42e0:	d9800c04 	addi	r6,sp,48
    42e4:	0003c240 	call	3c24 <__sprint_r>
    42e8:	10001c1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    42ec:	843ffc04 	addi	r16,r16,-16
    42f0:	dc800e17 	ldw	r18,56(sp)
    42f4:	dc400d17 	ldw	r17,52(sp)
    42f8:	d8c01904 	addi	r3,sp,100
    42fc:	9c3fef16 	blt	r19,r16,42bc <___vfprintf_internal_r+0x640>
    4300:	9425883a 	add	r18,r18,r16
    4304:	8c400044 	addi	r17,r17,1
    4308:	008001c4 	movi	r2,7
    430c:	1f000015 	stw	fp,0(r3)
    4310:	1c000115 	stw	r16,4(r3)
    4314:	dc800e15 	stw	r18,56(sp)
    4318:	dc400d15 	stw	r17,52(sp)
    431c:	1440cb16 	blt	r2,r17,464c <___vfprintf_internal_r+0x9d0>
    4320:	d8814a17 	ldw	r2,1320(sp)
    4324:	d9414517 	ldw	r5,1300(sp)
    4328:	1140010e 	bge	r2,r5,4330 <___vfprintf_internal_r+0x6b4>
    432c:	2805883a 	mov	r2,r5
    4330:	d9814b17 	ldw	r6,1324(sp)
    4334:	308d883a 	add	r6,r6,r2
    4338:	d9814b15 	stw	r6,1324(sp)
    433c:	90013b1e 	bne	r18,zero,482c <___vfprintf_internal_r+0xbb0>
    4340:	d9c14017 	ldw	r7,1280(sp)
    4344:	dd401904 	addi	r21,sp,100
    4348:	d8000d15 	stw	zero,52(sp)
    434c:	003ea706 	br	3dec <___vfprintf_internal_r+0x170>
    4350:	d8800e17 	ldw	r2,56(sp)
    4354:	10053f1e 	bne	r2,zero,5854 <___vfprintf_internal_r+0x1bd8>
    4358:	d8000d15 	stw	zero,52(sp)
    435c:	b080030b 	ldhu	r2,12(r22)
    4360:	1080100c 	andi	r2,r2,64
    4364:	103e8726 	beq	r2,zero,3d84 <___vfprintf_internal_r+0x108>
    4368:	00bfffc4 	movi	r2,-1
    436c:	d8814b15 	stw	r2,1324(sp)
    4370:	003e8406 	br	3d84 <___vfprintf_internal_r+0x108>
    4374:	d9814d17 	ldw	r6,1332(sp)
    4378:	00801944 	movi	r2,101
    437c:	11806e16 	blt	r2,r6,4538 <___vfprintf_internal_r+0x8bc>
    4380:	d9414717 	ldw	r5,1308(sp)
    4384:	00c00044 	movi	r3,1
    4388:	1943430e 	bge	r3,r5,5098 <___vfprintf_internal_r+0x141c>
    438c:	d8814117 	ldw	r2,1284(sp)
    4390:	94800044 	addi	r18,r18,1
    4394:	8c400044 	addi	r17,r17,1
    4398:	a8800015 	stw	r2,0(r21)
    439c:	008001c4 	movi	r2,7
    43a0:	a8c00115 	stw	r3,4(r21)
    43a4:	dc800e15 	stw	r18,56(sp)
    43a8:	dc400d15 	stw	r17,52(sp)
    43ac:	1441ca16 	blt	r2,r17,4ad8 <___vfprintf_internal_r+0xe5c>
    43b0:	a8c00204 	addi	r3,r21,8
    43b4:	d9014917 	ldw	r4,1316(sp)
    43b8:	00800044 	movi	r2,1
    43bc:	94800044 	addi	r18,r18,1
    43c0:	8c400044 	addi	r17,r17,1
    43c4:	18800115 	stw	r2,4(r3)
    43c8:	008001c4 	movi	r2,7
    43cc:	19000015 	stw	r4,0(r3)
    43d0:	dc800e15 	stw	r18,56(sp)
    43d4:	dc400d15 	stw	r17,52(sp)
    43d8:	1441b616 	blt	r2,r17,4ab4 <___vfprintf_internal_r+0xe38>
    43dc:	1cc00204 	addi	r19,r3,8
    43e0:	d9014217 	ldw	r4,1288(sp)
    43e4:	d9414317 	ldw	r5,1292(sp)
    43e8:	000d883a 	mov	r6,zero
    43ec:	000f883a 	mov	r7,zero
    43f0:	000c4080 	call	c408 <__nedf2>
    43f4:	10017426 	beq	r2,zero,49c8 <___vfprintf_internal_r+0xd4c>
    43f8:	d9414717 	ldw	r5,1308(sp)
    43fc:	d9814117 	ldw	r6,1284(sp)
    4400:	8c400044 	addi	r17,r17,1
    4404:	2c85883a 	add	r2,r5,r18
    4408:	14bfffc4 	addi	r18,r2,-1
    440c:	28bfffc4 	addi	r2,r5,-1
    4410:	30c00044 	addi	r3,r6,1
    4414:	98800115 	stw	r2,4(r19)
    4418:	008001c4 	movi	r2,7
    441c:	98c00015 	stw	r3,0(r19)
    4420:	dc800e15 	stw	r18,56(sp)
    4424:	dc400d15 	stw	r17,52(sp)
    4428:	14418e16 	blt	r2,r17,4a64 <___vfprintf_internal_r+0xde8>
    442c:	9cc00204 	addi	r19,r19,8
    4430:	d9414817 	ldw	r5,1312(sp)
    4434:	d8800804 	addi	r2,sp,32
    4438:	8c400044 	addi	r17,r17,1
    443c:	9165883a 	add	r18,r18,r5
    4440:	98800015 	stw	r2,0(r19)
    4444:	008001c4 	movi	r2,7
    4448:	99400115 	stw	r5,4(r19)
    444c:	dc800e15 	stw	r18,56(sp)
    4450:	dc400d15 	stw	r17,52(sp)
    4454:	1440ed16 	blt	r2,r17,480c <___vfprintf_internal_r+0xb90>
    4458:	98c00204 	addi	r3,r19,8
    445c:	003f8506 	br	4274 <___vfprintf_internal_r+0x5f8>
    4460:	d9814a17 	ldw	r6,1320(sp)
    4464:	d8814517 	ldw	r2,1300(sp)
    4468:	30a1c83a 	sub	r16,r6,r2
    446c:	043f4b0e 	bge	zero,r16,419c <___vfprintf_internal_r+0x520>
    4470:	00800404 	movi	r2,16
    4474:	1404340e 	bge	r2,r16,5548 <___vfprintf_internal_r+0x18cc>
    4478:	1027883a 	mov	r19,r2
    447c:	07000074 	movhi	fp,1
    4480:	e70f3084 	addi	fp,fp,15554
    4484:	050001c4 	movi	r20,7
    4488:	00000306 	br	4498 <___vfprintf_internal_r+0x81c>
    448c:	843ffc04 	addi	r16,r16,-16
    4490:	ad400204 	addi	r21,r21,8
    4494:	9c00130e 	bge	r19,r16,44e4 <___vfprintf_internal_r+0x868>
    4498:	94800404 	addi	r18,r18,16
    449c:	8c400044 	addi	r17,r17,1
    44a0:	af000015 	stw	fp,0(r21)
    44a4:	acc00115 	stw	r19,4(r21)
    44a8:	dc800e15 	stw	r18,56(sp)
    44ac:	dc400d15 	stw	r17,52(sp)
    44b0:	a47ff60e 	bge	r20,r17,448c <___vfprintf_internal_r+0x810>
    44b4:	d9014f17 	ldw	r4,1340(sp)
    44b8:	b00b883a 	mov	r5,r22
    44bc:	d9800c04 	addi	r6,sp,48
    44c0:	d9c15115 	stw	r7,1348(sp)
    44c4:	0003c240 	call	3c24 <__sprint_r>
    44c8:	d9c15117 	ldw	r7,1348(sp)
    44cc:	103fa31e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    44d0:	843ffc04 	addi	r16,r16,-16
    44d4:	dc800e17 	ldw	r18,56(sp)
    44d8:	dc400d17 	ldw	r17,52(sp)
    44dc:	dd401904 	addi	r21,sp,100
    44e0:	9c3fed16 	blt	r19,r16,4498 <___vfprintf_internal_r+0x81c>
    44e4:	9425883a 	add	r18,r18,r16
    44e8:	8c400044 	addi	r17,r17,1
    44ec:	008001c4 	movi	r2,7
    44f0:	af000015 	stw	fp,0(r21)
    44f4:	ac000115 	stw	r16,4(r21)
    44f8:	dc800e15 	stw	r18,56(sp)
    44fc:	dc400d15 	stw	r17,52(sp)
    4500:	14416116 	blt	r2,r17,4a88 <___vfprintf_internal_r+0xe0c>
    4504:	ad400204 	addi	r21,r21,8
    4508:	003f2406 	br	419c <___vfprintf_internal_r+0x520>
    450c:	d9014f17 	ldw	r4,1340(sp)
    4510:	00076ec0 	call	76ec <__sinit>
    4514:	d9c15117 	ldw	r7,1348(sp)
    4518:	003def06 	br	3cd8 <___vfprintf_internal_r+0x5c>
    451c:	d9014f17 	ldw	r4,1340(sp)
    4520:	b00b883a 	mov	r5,r22
    4524:	d9c15115 	stw	r7,1348(sp)
    4528:	0005b4c0 	call	5b4c <__swsetup_r>
    452c:	d9c15117 	ldw	r7,1348(sp)
    4530:	103dee26 	beq	r2,zero,3cec <___vfprintf_internal_r+0x70>
    4534:	003f8c06 	br	4368 <___vfprintf_internal_r+0x6ec>
    4538:	d9014217 	ldw	r4,1288(sp)
    453c:	d9414317 	ldw	r5,1292(sp)
    4540:	000d883a 	mov	r6,zero
    4544:	000f883a 	mov	r7,zero
    4548:	000c3800 	call	c380 <__eqdf2>
    454c:	1000f21e 	bne	r2,zero,4918 <___vfprintf_internal_r+0xc9c>
    4550:	00800074 	movhi	r2,1
    4554:	108f3004 	addi	r2,r2,15552
    4558:	94800044 	addi	r18,r18,1
    455c:	8c400044 	addi	r17,r17,1
    4560:	a8800015 	stw	r2,0(r21)
    4564:	00c00044 	movi	r3,1
    4568:	008001c4 	movi	r2,7
    456c:	a8c00115 	stw	r3,4(r21)
    4570:	dc800e15 	stw	r18,56(sp)
    4574:	dc400d15 	stw	r17,52(sp)
    4578:	1442fa16 	blt	r2,r17,5164 <___vfprintf_internal_r+0x14e8>
    457c:	a8c00204 	addi	r3,r21,8
    4580:	d8800517 	ldw	r2,20(sp)
    4584:	d9014717 	ldw	r4,1308(sp)
    4588:	11015c0e 	bge	r2,r4,4afc <___vfprintf_internal_r+0xe80>
    458c:	dc400d17 	ldw	r17,52(sp)
    4590:	d9814917 	ldw	r6,1316(sp)
    4594:	00800044 	movi	r2,1
    4598:	94800044 	addi	r18,r18,1
    459c:	8c400044 	addi	r17,r17,1
    45a0:	18800115 	stw	r2,4(r3)
    45a4:	008001c4 	movi	r2,7
    45a8:	19800015 	stw	r6,0(r3)
    45ac:	dc800e15 	stw	r18,56(sp)
    45b0:	dc400d15 	stw	r17,52(sp)
    45b4:	14431016 	blt	r2,r17,51f8 <___vfprintf_internal_r+0x157c>
    45b8:	18c00204 	addi	r3,r3,8
    45bc:	d8814717 	ldw	r2,1308(sp)
    45c0:	143fffc4 	addi	r16,r2,-1
    45c4:	043f2b0e 	bge	zero,r16,4274 <___vfprintf_internal_r+0x5f8>
    45c8:	00800404 	movi	r2,16
    45cc:	1402a20e 	bge	r2,r16,5058 <___vfprintf_internal_r+0x13dc>
    45d0:	dc400d17 	ldw	r17,52(sp)
    45d4:	1027883a 	mov	r19,r2
    45d8:	07000074 	movhi	fp,1
    45dc:	e70f3084 	addi	fp,fp,15554
    45e0:	050001c4 	movi	r20,7
    45e4:	00000306 	br	45f4 <___vfprintf_internal_r+0x978>
    45e8:	18c00204 	addi	r3,r3,8
    45ec:	843ffc04 	addi	r16,r16,-16
    45f0:	9c029c0e 	bge	r19,r16,5064 <___vfprintf_internal_r+0x13e8>
    45f4:	94800404 	addi	r18,r18,16
    45f8:	8c400044 	addi	r17,r17,1
    45fc:	1f000015 	stw	fp,0(r3)
    4600:	1cc00115 	stw	r19,4(r3)
    4604:	dc800e15 	stw	r18,56(sp)
    4608:	dc400d15 	stw	r17,52(sp)
    460c:	a47ff60e 	bge	r20,r17,45e8 <___vfprintf_internal_r+0x96c>
    4610:	d9014f17 	ldw	r4,1340(sp)
    4614:	b00b883a 	mov	r5,r22
    4618:	d9800c04 	addi	r6,sp,48
    461c:	0003c240 	call	3c24 <__sprint_r>
    4620:	103f4e1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4624:	dc800e17 	ldw	r18,56(sp)
    4628:	dc400d17 	ldw	r17,52(sp)
    462c:	d8c01904 	addi	r3,sp,100
    4630:	003fee06 	br	45ec <___vfprintf_internal_r+0x970>
    4634:	d8802c0b 	ldhu	r2,176(sp)
    4638:	00ffffc4 	movi	r3,-1
    463c:	d8c14b15 	stw	r3,1324(sp)
    4640:	1080100c 	andi	r2,r2,64
    4644:	103dcc1e 	bne	r2,zero,3d78 <___vfprintf_internal_r+0xfc>
    4648:	003dce06 	br	3d84 <___vfprintf_internal_r+0x108>
    464c:	d9014f17 	ldw	r4,1340(sp)
    4650:	b00b883a 	mov	r5,r22
    4654:	d9800c04 	addi	r6,sp,48
    4658:	0003c240 	call	3c24 <__sprint_r>
    465c:	103f3f1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4660:	dc800e17 	ldw	r18,56(sp)
    4664:	003f2e06 	br	4320 <___vfprintf_internal_r+0x6a4>
    4668:	d9414c17 	ldw	r5,1328(sp)
    466c:	29400414 	ori	r5,r5,16
    4670:	d9414c15 	stw	r5,1328(sp)
    4674:	d9814c17 	ldw	r6,1328(sp)
    4678:	3080080c 	andi	r2,r6,32
    467c:	10014f1e 	bne	r2,zero,4bbc <___vfprintf_internal_r+0xf40>
    4680:	d8c14c17 	ldw	r3,1328(sp)
    4684:	1880040c 	andi	r2,r3,16
    4688:	1002ea1e 	bne	r2,zero,5234 <___vfprintf_internal_r+0x15b8>
    468c:	d9014c17 	ldw	r4,1328(sp)
    4690:	2080100c 	andi	r2,r4,64
    4694:	1002e726 	beq	r2,zero,5234 <___vfprintf_internal_r+0x15b8>
    4698:	3880000f 	ldh	r2,0(r7)
    469c:	39c00104 	addi	r7,r7,4
    46a0:	d9c14015 	stw	r7,1280(sp)
    46a4:	1023d7fa 	srai	r17,r2,31
    46a8:	1021883a 	mov	r16,r2
    46ac:	88037216 	blt	r17,zero,5478 <___vfprintf_internal_r+0x17fc>
    46b0:	01000044 	movi	r4,1
    46b4:	98000416 	blt	r19,zero,46c8 <___vfprintf_internal_r+0xa4c>
    46b8:	d8c14c17 	ldw	r3,1328(sp)
    46bc:	00bfdfc4 	movi	r2,-129
    46c0:	1886703a 	and	r3,r3,r2
    46c4:	d8c14c15 	stw	r3,1328(sp)
    46c8:	8444b03a 	or	r2,r16,r17
    46cc:	1002261e 	bne	r2,zero,4f68 <___vfprintf_internal_r+0x12ec>
    46d0:	9802251e 	bne	r19,zero,4f68 <___vfprintf_internal_r+0x12ec>
    46d4:	20803fcc 	andi	r2,r4,255
    46d8:	10029b26 	beq	r2,zero,5148 <___vfprintf_internal_r+0x14cc>
    46dc:	d8c01904 	addi	r3,sp,100
    46e0:	dd000f04 	addi	r20,sp,60
    46e4:	d8c14115 	stw	r3,1284(sp)
    46e8:	d8c14117 	ldw	r3,1284(sp)
    46ec:	dcc14515 	stw	r19,1300(sp)
    46f0:	a0c5c83a 	sub	r2,r20,r3
    46f4:	11c00a04 	addi	r7,r2,40
    46f8:	99c0010e 	bge	r19,r7,4700 <___vfprintf_internal_r+0xa84>
    46fc:	d9c14515 	stw	r7,1300(sp)
    4700:	dcc14615 	stw	r19,1304(sp)
    4704:	d8800407 	ldb	r2,16(sp)
    4708:	103e4c26 	beq	r2,zero,403c <___vfprintf_internal_r+0x3c0>
    470c:	d8814517 	ldw	r2,1300(sp)
    4710:	10800044 	addi	r2,r2,1
    4714:	d8814515 	stw	r2,1300(sp)
    4718:	003e4806 	br	403c <___vfprintf_internal_r+0x3c0>
    471c:	d9814c17 	ldw	r6,1328(sp)
    4720:	31800414 	ori	r6,r6,16
    4724:	d9814c15 	stw	r6,1328(sp)
    4728:	d8c14c17 	ldw	r3,1328(sp)
    472c:	1880080c 	andi	r2,r3,32
    4730:	1001271e 	bne	r2,zero,4bd0 <___vfprintf_internal_r+0xf54>
    4734:	d9414c17 	ldw	r5,1328(sp)
    4738:	2880040c 	andi	r2,r5,16
    473c:	1002b61e 	bne	r2,zero,5218 <___vfprintf_internal_r+0x159c>
    4740:	d9814c17 	ldw	r6,1328(sp)
    4744:	3080100c 	andi	r2,r6,64
    4748:	1002b326 	beq	r2,zero,5218 <___vfprintf_internal_r+0x159c>
    474c:	3c00000b 	ldhu	r16,0(r7)
    4750:	0009883a 	mov	r4,zero
    4754:	39c00104 	addi	r7,r7,4
    4758:	0023883a 	mov	r17,zero
    475c:	d9c14015 	stw	r7,1280(sp)
    4760:	d8000405 	stb	zero,16(sp)
    4764:	003fd306 	br	46b4 <___vfprintf_internal_r+0xa38>
    4768:	d9014c17 	ldw	r4,1328(sp)
    476c:	21000414 	ori	r4,r4,16
    4770:	d9014c15 	stw	r4,1328(sp)
    4774:	d9414c17 	ldw	r5,1328(sp)
    4778:	2880080c 	andi	r2,r5,32
    477c:	1001081e 	bne	r2,zero,4ba0 <___vfprintf_internal_r+0xf24>
    4780:	d8c14c17 	ldw	r3,1328(sp)
    4784:	1880040c 	andi	r2,r3,16
    4788:	1002b01e 	bne	r2,zero,524c <___vfprintf_internal_r+0x15d0>
    478c:	d9014c17 	ldw	r4,1328(sp)
    4790:	2080100c 	andi	r2,r4,64
    4794:	1002ad26 	beq	r2,zero,524c <___vfprintf_internal_r+0x15d0>
    4798:	3c00000b 	ldhu	r16,0(r7)
    479c:	01000044 	movi	r4,1
    47a0:	39c00104 	addi	r7,r7,4
    47a4:	0023883a 	mov	r17,zero
    47a8:	d9c14015 	stw	r7,1280(sp)
    47ac:	d8000405 	stb	zero,16(sp)
    47b0:	003fc006 	br	46b4 <___vfprintf_internal_r+0xa38>
    47b4:	d9014f17 	ldw	r4,1340(sp)
    47b8:	b00b883a 	mov	r5,r22
    47bc:	d9800c04 	addi	r6,sp,48
    47c0:	0003c240 	call	3c24 <__sprint_r>
    47c4:	103ee51e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    47c8:	dc800e17 	ldw	r18,56(sp)
    47cc:	d8c01904 	addi	r3,sp,100
    47d0:	d9814c17 	ldw	r6,1328(sp)
    47d4:	3080004c 	andi	r2,r6,1
    47d8:	1005003a 	cmpeq	r2,r2,zero
    47dc:	103ea51e 	bne	r2,zero,4274 <___vfprintf_internal_r+0x5f8>
    47e0:	00800044 	movi	r2,1
    47e4:	dc400d17 	ldw	r17,52(sp)
    47e8:	18800115 	stw	r2,4(r3)
    47ec:	d8814917 	ldw	r2,1316(sp)
    47f0:	94800044 	addi	r18,r18,1
    47f4:	8c400044 	addi	r17,r17,1
    47f8:	18800015 	stw	r2,0(r3)
    47fc:	008001c4 	movi	r2,7
    4800:	dc800e15 	stw	r18,56(sp)
    4804:	dc400d15 	stw	r17,52(sp)
    4808:	14421e0e 	bge	r2,r17,5084 <___vfprintf_internal_r+0x1408>
    480c:	d9014f17 	ldw	r4,1340(sp)
    4810:	b00b883a 	mov	r5,r22
    4814:	d9800c04 	addi	r6,sp,48
    4818:	0003c240 	call	3c24 <__sprint_r>
    481c:	103ecf1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4820:	dc800e17 	ldw	r18,56(sp)
    4824:	d8c01904 	addi	r3,sp,100
    4828:	003e9206 	br	4274 <___vfprintf_internal_r+0x5f8>
    482c:	d9014f17 	ldw	r4,1340(sp)
    4830:	b00b883a 	mov	r5,r22
    4834:	d9800c04 	addi	r6,sp,48
    4838:	0003c240 	call	3c24 <__sprint_r>
    483c:	103ec026 	beq	r2,zero,4340 <___vfprintf_internal_r+0x6c4>
    4840:	003ec606 	br	435c <___vfprintf_internal_r+0x6e0>
    4844:	d9014f17 	ldw	r4,1340(sp)
    4848:	b00b883a 	mov	r5,r22
    484c:	d9800c04 	addi	r6,sp,48
    4850:	d9c15115 	stw	r7,1348(sp)
    4854:	0003c240 	call	3c24 <__sprint_r>
    4858:	d9c15117 	ldw	r7,1348(sp)
    485c:	103ebf1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4860:	dc800e17 	ldw	r18,56(sp)
    4864:	dc400d17 	ldw	r17,52(sp)
    4868:	dd401904 	addi	r21,sp,100
    486c:	003e7406 	br	4240 <___vfprintf_internal_r+0x5c4>
    4870:	d9014f17 	ldw	r4,1340(sp)
    4874:	b00b883a 	mov	r5,r22
    4878:	d9800c04 	addi	r6,sp,48
    487c:	d9c15115 	stw	r7,1348(sp)
    4880:	0003c240 	call	3c24 <__sprint_r>
    4884:	d9c15117 	ldw	r7,1348(sp)
    4888:	103eb41e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    488c:	dd401904 	addi	r21,sp,100
    4890:	003d6d06 	br	3e48 <___vfprintf_internal_r+0x1cc>
    4894:	d9014f17 	ldw	r4,1340(sp)
    4898:	b00b883a 	mov	r5,r22
    489c:	d9800c04 	addi	r6,sp,48
    48a0:	d9c15115 	stw	r7,1348(sp)
    48a4:	0003c240 	call	3c24 <__sprint_r>
    48a8:	d9c15117 	ldw	r7,1348(sp)
    48ac:	103eab1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    48b0:	dc800e17 	ldw	r18,56(sp)
    48b4:	dc400d17 	ldw	r17,52(sp)
    48b8:	dd401904 	addi	r21,sp,100
    48bc:	003e3406 	br	4190 <___vfprintf_internal_r+0x514>
    48c0:	d9014f17 	ldw	r4,1340(sp)
    48c4:	b00b883a 	mov	r5,r22
    48c8:	d9800c04 	addi	r6,sp,48
    48cc:	d9c15115 	stw	r7,1348(sp)
    48d0:	0003c240 	call	3c24 <__sprint_r>
    48d4:	d9c15117 	ldw	r7,1348(sp)
    48d8:	103ea01e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    48dc:	dc800e17 	ldw	r18,56(sp)
    48e0:	dc400d17 	ldw	r17,52(sp)
    48e4:	dd401904 	addi	r21,sp,100
    48e8:	003e1c06 	br	415c <___vfprintf_internal_r+0x4e0>
    48ec:	d9014f17 	ldw	r4,1340(sp)
    48f0:	b00b883a 	mov	r5,r22
    48f4:	d9800c04 	addi	r6,sp,48
    48f8:	d9c15115 	stw	r7,1348(sp)
    48fc:	0003c240 	call	3c24 <__sprint_r>
    4900:	d9c15117 	ldw	r7,1348(sp)
    4904:	103e951e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4908:	dc800e17 	ldw	r18,56(sp)
    490c:	dc400d17 	ldw	r17,52(sp)
    4910:	dd401904 	addi	r21,sp,100
    4914:	003e0406 	br	4128 <___vfprintf_internal_r+0x4ac>
    4918:	d9000517 	ldw	r4,20(sp)
    491c:	0102520e 	bge	zero,r4,5268 <___vfprintf_internal_r+0x15ec>
    4920:	d9814717 	ldw	r6,1308(sp)
    4924:	21807a16 	blt	r4,r6,4b10 <___vfprintf_internal_r+0xe94>
    4928:	d8814117 	ldw	r2,1284(sp)
    492c:	91a5883a 	add	r18,r18,r6
    4930:	8c400044 	addi	r17,r17,1
    4934:	a8800015 	stw	r2,0(r21)
    4938:	008001c4 	movi	r2,7
    493c:	a9800115 	stw	r6,4(r21)
    4940:	dc800e15 	stw	r18,56(sp)
    4944:	dc400d15 	stw	r17,52(sp)
    4948:	1442f616 	blt	r2,r17,5524 <___vfprintf_internal_r+0x18a8>
    494c:	a8c00204 	addi	r3,r21,8
    4950:	d9414717 	ldw	r5,1308(sp)
    4954:	2161c83a 	sub	r16,r4,r5
    4958:	043f9d0e 	bge	zero,r16,47d0 <___vfprintf_internal_r+0xb54>
    495c:	00800404 	movi	r2,16
    4960:	1402130e 	bge	r2,r16,51b0 <___vfprintf_internal_r+0x1534>
    4964:	dc400d17 	ldw	r17,52(sp)
    4968:	1027883a 	mov	r19,r2
    496c:	07000074 	movhi	fp,1
    4970:	e70f3084 	addi	fp,fp,15554
    4974:	050001c4 	movi	r20,7
    4978:	00000306 	br	4988 <___vfprintf_internal_r+0xd0c>
    497c:	18c00204 	addi	r3,r3,8
    4980:	843ffc04 	addi	r16,r16,-16
    4984:	9c020d0e 	bge	r19,r16,51bc <___vfprintf_internal_r+0x1540>
    4988:	94800404 	addi	r18,r18,16
    498c:	8c400044 	addi	r17,r17,1
    4990:	1f000015 	stw	fp,0(r3)
    4994:	1cc00115 	stw	r19,4(r3)
    4998:	dc800e15 	stw	r18,56(sp)
    499c:	dc400d15 	stw	r17,52(sp)
    49a0:	a47ff60e 	bge	r20,r17,497c <___vfprintf_internal_r+0xd00>
    49a4:	d9014f17 	ldw	r4,1340(sp)
    49a8:	b00b883a 	mov	r5,r22
    49ac:	d9800c04 	addi	r6,sp,48
    49b0:	0003c240 	call	3c24 <__sprint_r>
    49b4:	103e691e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    49b8:	dc800e17 	ldw	r18,56(sp)
    49bc:	dc400d17 	ldw	r17,52(sp)
    49c0:	d8c01904 	addi	r3,sp,100
    49c4:	003fee06 	br	4980 <___vfprintf_internal_r+0xd04>
    49c8:	d8814717 	ldw	r2,1308(sp)
    49cc:	143fffc4 	addi	r16,r2,-1
    49d0:	043e970e 	bge	zero,r16,4430 <___vfprintf_internal_r+0x7b4>
    49d4:	00800404 	movi	r2,16
    49d8:	1400180e 	bge	r2,r16,4a3c <___vfprintf_internal_r+0xdc0>
    49dc:	1029883a 	mov	r20,r2
    49e0:	07000074 	movhi	fp,1
    49e4:	e70f3084 	addi	fp,fp,15554
    49e8:	054001c4 	movi	r21,7
    49ec:	00000306 	br	49fc <___vfprintf_internal_r+0xd80>
    49f0:	9cc00204 	addi	r19,r19,8
    49f4:	843ffc04 	addi	r16,r16,-16
    49f8:	a400120e 	bge	r20,r16,4a44 <___vfprintf_internal_r+0xdc8>
    49fc:	94800404 	addi	r18,r18,16
    4a00:	8c400044 	addi	r17,r17,1
    4a04:	9f000015 	stw	fp,0(r19)
    4a08:	9d000115 	stw	r20,4(r19)
    4a0c:	dc800e15 	stw	r18,56(sp)
    4a10:	dc400d15 	stw	r17,52(sp)
    4a14:	ac7ff60e 	bge	r21,r17,49f0 <___vfprintf_internal_r+0xd74>
    4a18:	d9014f17 	ldw	r4,1340(sp)
    4a1c:	b00b883a 	mov	r5,r22
    4a20:	d9800c04 	addi	r6,sp,48
    4a24:	0003c240 	call	3c24 <__sprint_r>
    4a28:	103e4c1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4a2c:	dc800e17 	ldw	r18,56(sp)
    4a30:	dc400d17 	ldw	r17,52(sp)
    4a34:	dcc01904 	addi	r19,sp,100
    4a38:	003fee06 	br	49f4 <___vfprintf_internal_r+0xd78>
    4a3c:	07000074 	movhi	fp,1
    4a40:	e70f3084 	addi	fp,fp,15554
    4a44:	9425883a 	add	r18,r18,r16
    4a48:	8c400044 	addi	r17,r17,1
    4a4c:	008001c4 	movi	r2,7
    4a50:	9f000015 	stw	fp,0(r19)
    4a54:	9c000115 	stw	r16,4(r19)
    4a58:	dc800e15 	stw	r18,56(sp)
    4a5c:	dc400d15 	stw	r17,52(sp)
    4a60:	147e720e 	bge	r2,r17,442c <___vfprintf_internal_r+0x7b0>
    4a64:	d9014f17 	ldw	r4,1340(sp)
    4a68:	b00b883a 	mov	r5,r22
    4a6c:	d9800c04 	addi	r6,sp,48
    4a70:	0003c240 	call	3c24 <__sprint_r>
    4a74:	103e391e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4a78:	dc800e17 	ldw	r18,56(sp)
    4a7c:	dc400d17 	ldw	r17,52(sp)
    4a80:	dcc01904 	addi	r19,sp,100
    4a84:	003e6a06 	br	4430 <___vfprintf_internal_r+0x7b4>
    4a88:	d9014f17 	ldw	r4,1340(sp)
    4a8c:	b00b883a 	mov	r5,r22
    4a90:	d9800c04 	addi	r6,sp,48
    4a94:	d9c15115 	stw	r7,1348(sp)
    4a98:	0003c240 	call	3c24 <__sprint_r>
    4a9c:	d9c15117 	ldw	r7,1348(sp)
    4aa0:	103e2e1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4aa4:	dc800e17 	ldw	r18,56(sp)
    4aa8:	dc400d17 	ldw	r17,52(sp)
    4aac:	dd401904 	addi	r21,sp,100
    4ab0:	003dba06 	br	419c <___vfprintf_internal_r+0x520>
    4ab4:	d9014f17 	ldw	r4,1340(sp)
    4ab8:	b00b883a 	mov	r5,r22
    4abc:	d9800c04 	addi	r6,sp,48
    4ac0:	0003c240 	call	3c24 <__sprint_r>
    4ac4:	103e251e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4ac8:	dc800e17 	ldw	r18,56(sp)
    4acc:	dc400d17 	ldw	r17,52(sp)
    4ad0:	dcc01904 	addi	r19,sp,100
    4ad4:	003e4206 	br	43e0 <___vfprintf_internal_r+0x764>
    4ad8:	d9014f17 	ldw	r4,1340(sp)
    4adc:	b00b883a 	mov	r5,r22
    4ae0:	d9800c04 	addi	r6,sp,48
    4ae4:	0003c240 	call	3c24 <__sprint_r>
    4ae8:	103e1c1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    4aec:	dc800e17 	ldw	r18,56(sp)
    4af0:	dc400d17 	ldw	r17,52(sp)
    4af4:	d8c01904 	addi	r3,sp,100
    4af8:	003e2e06 	br	43b4 <___vfprintf_internal_r+0x738>
    4afc:	d9414c17 	ldw	r5,1328(sp)
    4b00:	2880004c 	andi	r2,r5,1
    4b04:	1005003a 	cmpeq	r2,r2,zero
    4b08:	103dda1e 	bne	r2,zero,4274 <___vfprintf_internal_r+0x5f8>
    4b0c:	003e9f06 	br	458c <___vfprintf_internal_r+0x910>
    4b10:	d8c14117 	ldw	r3,1284(sp)
    4b14:	9125883a 	add	r18,r18,r4
    4b18:	8c400044 	addi	r17,r17,1
    4b1c:	008001c4 	movi	r2,7
    4b20:	a8c00015 	stw	r3,0(r21)
    4b24:	a9000115 	stw	r4,4(r21)
    4b28:	dc800e15 	stw	r18,56(sp)
    4b2c:	dc400d15 	stw	r17,52(sp)
    4b30:	14426616 	blt	r2,r17,54cc <___vfprintf_internal_r+0x1850>
    4b34:	a8c00204 	addi	r3,r21,8
    4b38:	d9414917 	ldw	r5,1316(sp)
    4b3c:	00800044 	movi	r2,1
    4b40:	94800044 	addi	r18,r18,1
    4b44:	8c400044 	addi	r17,r17,1
    4b48:	18800115 	stw	r2,4(r3)
    4b4c:	008001c4 	movi	r2,7
    4b50:	19400015 	stw	r5,0(r3)
    4b54:	dc800e15 	stw	r18,56(sp)
    4b58:	dc400d15 	stw	r17,52(sp)
    4b5c:	2021883a 	mov	r16,r4
    4b60:	14425016 	blt	r2,r17,54a4 <___vfprintf_internal_r+0x1828>
    4b64:	19400204 	addi	r5,r3,8
    4b68:	d9814717 	ldw	r6,1308(sp)
    4b6c:	8c400044 	addi	r17,r17,1
    4b70:	dc400d15 	stw	r17,52(sp)
    4b74:	3107c83a 	sub	r3,r6,r4
    4b78:	d9014117 	ldw	r4,1284(sp)
    4b7c:	90e5883a 	add	r18,r18,r3
    4b80:	28c00115 	stw	r3,4(r5)
    4b84:	8105883a 	add	r2,r16,r4
    4b88:	28800015 	stw	r2,0(r5)
    4b8c:	008001c4 	movi	r2,7
    4b90:	dc800e15 	stw	r18,56(sp)
    4b94:	147f1d16 	blt	r2,r17,480c <___vfprintf_internal_r+0xb90>
    4b98:	28c00204 	addi	r3,r5,8
    4b9c:	003db506 	br	4274 <___vfprintf_internal_r+0x5f8>
    4ba0:	3c000017 	ldw	r16,0(r7)
    4ba4:	3c400117 	ldw	r17,4(r7)
    4ba8:	39800204 	addi	r6,r7,8
    4bac:	01000044 	movi	r4,1
    4bb0:	d9814015 	stw	r6,1280(sp)
    4bb4:	d8000405 	stb	zero,16(sp)
    4bb8:	003ebe06 	br	46b4 <___vfprintf_internal_r+0xa38>
    4bbc:	3c000017 	ldw	r16,0(r7)
    4bc0:	3c400117 	ldw	r17,4(r7)
    4bc4:	38800204 	addi	r2,r7,8
    4bc8:	d8814015 	stw	r2,1280(sp)
    4bcc:	003eb706 	br	46ac <___vfprintf_internal_r+0xa30>
    4bd0:	3c000017 	ldw	r16,0(r7)
    4bd4:	3c400117 	ldw	r17,4(r7)
    4bd8:	39000204 	addi	r4,r7,8
    4bdc:	d9014015 	stw	r4,1280(sp)
    4be0:	0009883a 	mov	r4,zero
    4be4:	d8000405 	stb	zero,16(sp)
    4be8:	003eb206 	br	46b4 <___vfprintf_internal_r+0xa38>
    4bec:	38c00017 	ldw	r3,0(r7)
    4bf0:	39c00104 	addi	r7,r7,4
    4bf4:	d8c14a15 	stw	r3,1320(sp)
    4bf8:	1800d10e 	bge	r3,zero,4f40 <___vfprintf_internal_r+0x12c4>
    4bfc:	00c7c83a 	sub	r3,zero,r3
    4c00:	d8c14a15 	stw	r3,1320(sp)
    4c04:	d9014c17 	ldw	r4,1328(sp)
    4c08:	b8c00007 	ldb	r3,0(r23)
    4c0c:	21000114 	ori	r4,r4,4
    4c10:	d9014c15 	stw	r4,1328(sp)
    4c14:	003c9806 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4c18:	d9814c17 	ldw	r6,1328(sp)
    4c1c:	3080080c 	andi	r2,r6,32
    4c20:	1001f026 	beq	r2,zero,53e4 <___vfprintf_internal_r+0x1768>
    4c24:	d9014b17 	ldw	r4,1324(sp)
    4c28:	38800017 	ldw	r2,0(r7)
    4c2c:	39c00104 	addi	r7,r7,4
    4c30:	d9c14015 	stw	r7,1280(sp)
    4c34:	2007d7fa 	srai	r3,r4,31
    4c38:	d9c14017 	ldw	r7,1280(sp)
    4c3c:	11000015 	stw	r4,0(r2)
    4c40:	10c00115 	stw	r3,4(r2)
    4c44:	003c6906 	br	3dec <___vfprintf_internal_r+0x170>
    4c48:	b8c00007 	ldb	r3,0(r23)
    4c4c:	00801b04 	movi	r2,108
    4c50:	18824f26 	beq	r3,r2,5590 <___vfprintf_internal_r+0x1914>
    4c54:	d9414c17 	ldw	r5,1328(sp)
    4c58:	29400414 	ori	r5,r5,16
    4c5c:	d9414c15 	stw	r5,1328(sp)
    4c60:	003c8506 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4c64:	d9814c17 	ldw	r6,1328(sp)
    4c68:	b8c00007 	ldb	r3,0(r23)
    4c6c:	31800814 	ori	r6,r6,32
    4c70:	d9814c15 	stw	r6,1328(sp)
    4c74:	003c8006 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4c78:	d8814c17 	ldw	r2,1328(sp)
    4c7c:	3c000017 	ldw	r16,0(r7)
    4c80:	00c01e04 	movi	r3,120
    4c84:	10800094 	ori	r2,r2,2
    4c88:	d8814c15 	stw	r2,1328(sp)
    4c8c:	39c00104 	addi	r7,r7,4
    4c90:	01400074 	movhi	r5,1
    4c94:	294f1904 	addi	r5,r5,15460
    4c98:	00800c04 	movi	r2,48
    4c9c:	0023883a 	mov	r17,zero
    4ca0:	01000084 	movi	r4,2
    4ca4:	d9c14015 	stw	r7,1280(sp)
    4ca8:	d8c14d15 	stw	r3,1332(sp)
    4cac:	d9414415 	stw	r5,1296(sp)
    4cb0:	d8800445 	stb	r2,17(sp)
    4cb4:	d8c00485 	stb	r3,18(sp)
    4cb8:	d8000405 	stb	zero,16(sp)
    4cbc:	003e7d06 	br	46b4 <___vfprintf_internal_r+0xa38>
    4cc0:	d8814c17 	ldw	r2,1328(sp)
    4cc4:	b8c00007 	ldb	r3,0(r23)
    4cc8:	10801014 	ori	r2,r2,64
    4ccc:	d8814c15 	stw	r2,1328(sp)
    4cd0:	003c6906 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4cd4:	d9414c17 	ldw	r5,1328(sp)
    4cd8:	2880020c 	andi	r2,r5,8
    4cdc:	1001df26 	beq	r2,zero,545c <___vfprintf_internal_r+0x17e0>
    4ce0:	39800017 	ldw	r6,0(r7)
    4ce4:	38800204 	addi	r2,r7,8
    4ce8:	d8814015 	stw	r2,1280(sp)
    4cec:	d9814215 	stw	r6,1288(sp)
    4cf0:	39c00117 	ldw	r7,4(r7)
    4cf4:	d9c14315 	stw	r7,1292(sp)
    4cf8:	d9014217 	ldw	r4,1288(sp)
    4cfc:	d9414317 	ldw	r5,1292(sp)
    4d00:	000a4e40 	call	a4e4 <__isinfd>
    4d04:	10021726 	beq	r2,zero,5564 <___vfprintf_internal_r+0x18e8>
    4d08:	d9014217 	ldw	r4,1288(sp)
    4d0c:	d9414317 	ldw	r5,1292(sp)
    4d10:	000d883a 	mov	r6,zero
    4d14:	000f883a 	mov	r7,zero
    4d18:	000c5a00 	call	c5a0 <__ltdf2>
    4d1c:	1002ca16 	blt	r2,zero,5848 <___vfprintf_internal_r+0x1bcc>
    4d20:	d9414d17 	ldw	r5,1332(sp)
    4d24:	008011c4 	movi	r2,71
    4d28:	11420a16 	blt	r2,r5,5554 <___vfprintf_internal_r+0x18d8>
    4d2c:	01800074 	movhi	r6,1
    4d30:	318f1e04 	addi	r6,r6,15480
    4d34:	d9814115 	stw	r6,1284(sp)
    4d38:	d9014c17 	ldw	r4,1328(sp)
    4d3c:	00c000c4 	movi	r3,3
    4d40:	00bfdfc4 	movi	r2,-129
    4d44:	2088703a 	and	r4,r4,r2
    4d48:	180f883a 	mov	r7,r3
    4d4c:	d8c14515 	stw	r3,1300(sp)
    4d50:	d9014c15 	stw	r4,1328(sp)
    4d54:	d8014615 	stw	zero,1304(sp)
    4d58:	003e6a06 	br	4704 <___vfprintf_internal_r+0xa88>
    4d5c:	38800017 	ldw	r2,0(r7)
    4d60:	00c00044 	movi	r3,1
    4d64:	39c00104 	addi	r7,r7,4
    4d68:	d9c14015 	stw	r7,1280(sp)
    4d6c:	d9000f04 	addi	r4,sp,60
    4d70:	180f883a 	mov	r7,r3
    4d74:	d8c14515 	stw	r3,1300(sp)
    4d78:	d9014115 	stw	r4,1284(sp)
    4d7c:	d8800f05 	stb	r2,60(sp)
    4d80:	d8000405 	stb	zero,16(sp)
    4d84:	003cac06 	br	4038 <___vfprintf_internal_r+0x3bc>
    4d88:	01400074 	movhi	r5,1
    4d8c:	294f2404 	addi	r5,r5,15504
    4d90:	d9414415 	stw	r5,1296(sp)
    4d94:	d9814c17 	ldw	r6,1328(sp)
    4d98:	3080080c 	andi	r2,r6,32
    4d9c:	1000f926 	beq	r2,zero,5184 <___vfprintf_internal_r+0x1508>
    4da0:	3c000017 	ldw	r16,0(r7)
    4da4:	3c400117 	ldw	r17,4(r7)
    4da8:	38800204 	addi	r2,r7,8
    4dac:	d8814015 	stw	r2,1280(sp)
    4db0:	d9414c17 	ldw	r5,1328(sp)
    4db4:	2880004c 	andi	r2,r5,1
    4db8:	1005003a 	cmpeq	r2,r2,zero
    4dbc:	1000b31e 	bne	r2,zero,508c <___vfprintf_internal_r+0x1410>
    4dc0:	8444b03a 	or	r2,r16,r17
    4dc4:	1000b126 	beq	r2,zero,508c <___vfprintf_internal_r+0x1410>
    4dc8:	d9814d17 	ldw	r6,1332(sp)
    4dcc:	29400094 	ori	r5,r5,2
    4dd0:	00800c04 	movi	r2,48
    4dd4:	01000084 	movi	r4,2
    4dd8:	d9414c15 	stw	r5,1328(sp)
    4ddc:	d8800445 	stb	r2,17(sp)
    4de0:	d9800485 	stb	r6,18(sp)
    4de4:	d8000405 	stb	zero,16(sp)
    4de8:	003e3206 	br	46b4 <___vfprintf_internal_r+0xa38>
    4dec:	01800074 	movhi	r6,1
    4df0:	318f1904 	addi	r6,r6,15460
    4df4:	d9814415 	stw	r6,1296(sp)
    4df8:	003fe606 	br	4d94 <___vfprintf_internal_r+0x1118>
    4dfc:	00800ac4 	movi	r2,43
    4e00:	d8800405 	stb	r2,16(sp)
    4e04:	b8c00007 	ldb	r3,0(r23)
    4e08:	003c1b06 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4e0c:	d8814c17 	ldw	r2,1328(sp)
    4e10:	b8c00007 	ldb	r3,0(r23)
    4e14:	10800054 	ori	r2,r2,1
    4e18:	d8814c15 	stw	r2,1328(sp)
    4e1c:	003c1606 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4e20:	d8800407 	ldb	r2,16(sp)
    4e24:	1000461e 	bne	r2,zero,4f40 <___vfprintf_internal_r+0x12c4>
    4e28:	00800804 	movi	r2,32
    4e2c:	d8800405 	stb	r2,16(sp)
    4e30:	b8c00007 	ldb	r3,0(r23)
    4e34:	003c1006 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4e38:	d9814c17 	ldw	r6,1328(sp)
    4e3c:	b8c00007 	ldb	r3,0(r23)
    4e40:	31800214 	ori	r6,r6,8
    4e44:	d9814c15 	stw	r6,1328(sp)
    4e48:	003c0b06 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4e4c:	0007883a 	mov	r3,zero
    4e50:	01000244 	movi	r4,9
    4e54:	188002a4 	muli	r2,r3,10
    4e58:	b8c00007 	ldb	r3,0(r23)
    4e5c:	d9814d17 	ldw	r6,1332(sp)
    4e60:	bdc00044 	addi	r23,r23,1
    4e64:	d8c14d15 	stw	r3,1332(sp)
    4e68:	d9414d17 	ldw	r5,1332(sp)
    4e6c:	3085883a 	add	r2,r6,r2
    4e70:	10fff404 	addi	r3,r2,-48
    4e74:	28bff404 	addi	r2,r5,-48
    4e78:	20bff62e 	bgeu	r4,r2,4e54 <___vfprintf_internal_r+0x11d8>
    4e7c:	d8c14a15 	stw	r3,1320(sp)
    4e80:	003bff06 	br	3e80 <___vfprintf_internal_r+0x204>
    4e84:	d9414c17 	ldw	r5,1328(sp)
    4e88:	b8c00007 	ldb	r3,0(r23)
    4e8c:	29402014 	ori	r5,r5,128
    4e90:	d9414c15 	stw	r5,1328(sp)
    4e94:	003bf806 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4e98:	b8c00007 	ldb	r3,0(r23)
    4e9c:	00800a84 	movi	r2,42
    4ea0:	bdc00044 	addi	r23,r23,1
    4ea4:	18831526 	beq	r3,r2,5afc <___vfprintf_internal_r+0x1e80>
    4ea8:	d8c14d15 	stw	r3,1332(sp)
    4eac:	18bff404 	addi	r2,r3,-48
    4eb0:	00c00244 	movi	r3,9
    4eb4:	18827836 	bltu	r3,r2,5898 <___vfprintf_internal_r+0x1c1c>
    4eb8:	000d883a 	mov	r6,zero
    4ebc:	308002a4 	muli	r2,r6,10
    4ec0:	b9800007 	ldb	r6,0(r23)
    4ec4:	d9414d17 	ldw	r5,1332(sp)
    4ec8:	bdc00044 	addi	r23,r23,1
    4ecc:	d9814d15 	stw	r6,1332(sp)
    4ed0:	d9014d17 	ldw	r4,1332(sp)
    4ed4:	1145883a 	add	r2,r2,r5
    4ed8:	11bff404 	addi	r6,r2,-48
    4edc:	20bff404 	addi	r2,r4,-48
    4ee0:	18bff62e 	bgeu	r3,r2,4ebc <___vfprintf_internal_r+0x1240>
    4ee4:	3027883a 	mov	r19,r6
    4ee8:	303be50e 	bge	r6,zero,3e80 <___vfprintf_internal_r+0x204>
    4eec:	04ffffc4 	movi	r19,-1
    4ef0:	003be306 	br	3e80 <___vfprintf_internal_r+0x204>
    4ef4:	d8000405 	stb	zero,16(sp)
    4ef8:	39800017 	ldw	r6,0(r7)
    4efc:	39c00104 	addi	r7,r7,4
    4f00:	d9c14015 	stw	r7,1280(sp)
    4f04:	d9814115 	stw	r6,1284(sp)
    4f08:	3001c926 	beq	r6,zero,5630 <___vfprintf_internal_r+0x19b4>
    4f0c:	98000e16 	blt	r19,zero,4f48 <___vfprintf_internal_r+0x12cc>
    4f10:	d9014117 	ldw	r4,1284(sp)
    4f14:	000b883a 	mov	r5,zero
    4f18:	980d883a 	mov	r6,r19
    4f1c:	0008d380 	call	8d38 <memchr>
    4f20:	10025926 	beq	r2,zero,5888 <___vfprintf_internal_r+0x1c0c>
    4f24:	d8c14117 	ldw	r3,1284(sp)
    4f28:	10cfc83a 	sub	r7,r2,r3
    4f2c:	99c19e16 	blt	r19,r7,55a8 <___vfprintf_internal_r+0x192c>
    4f30:	d9c14515 	stw	r7,1300(sp)
    4f34:	38000916 	blt	r7,zero,4f5c <___vfprintf_internal_r+0x12e0>
    4f38:	d8014615 	stw	zero,1304(sp)
    4f3c:	003df106 	br	4704 <___vfprintf_internal_r+0xa88>
    4f40:	b8c00007 	ldb	r3,0(r23)
    4f44:	003bcc06 	br	3e78 <___vfprintf_internal_r+0x1fc>
    4f48:	d9014117 	ldw	r4,1284(sp)
    4f4c:	000a7cc0 	call	a7cc <strlen>
    4f50:	d8814515 	stw	r2,1300(sp)
    4f54:	100f883a 	mov	r7,r2
    4f58:	103ff70e 	bge	r2,zero,4f38 <___vfprintf_internal_r+0x12bc>
    4f5c:	d8014515 	stw	zero,1300(sp)
    4f60:	d8014615 	stw	zero,1304(sp)
    4f64:	003de706 	br	4704 <___vfprintf_internal_r+0xa88>
    4f68:	20c03fcc 	andi	r3,r4,255
    4f6c:	00800044 	movi	r2,1
    4f70:	18802d26 	beq	r3,r2,5028 <___vfprintf_internal_r+0x13ac>
    4f74:	18800e36 	bltu	r3,r2,4fb0 <___vfprintf_internal_r+0x1334>
    4f78:	00800084 	movi	r2,2
    4f7c:	1880fa26 	beq	r3,r2,5368 <___vfprintf_internal_r+0x16ec>
    4f80:	01000074 	movhi	r4,1
    4f84:	210f2904 	addi	r4,r4,15524
    4f88:	000a7cc0 	call	a7cc <strlen>
    4f8c:	100f883a 	mov	r7,r2
    4f90:	dcc14515 	stw	r19,1300(sp)
    4f94:	9880010e 	bge	r19,r2,4f9c <___vfprintf_internal_r+0x1320>
    4f98:	d8814515 	stw	r2,1300(sp)
    4f9c:	00800074 	movhi	r2,1
    4fa0:	108f2904 	addi	r2,r2,15524
    4fa4:	dcc14615 	stw	r19,1304(sp)
    4fa8:	d8814115 	stw	r2,1284(sp)
    4fac:	003dd506 	br	4704 <___vfprintf_internal_r+0xa88>
    4fb0:	d9401904 	addi	r5,sp,100
    4fb4:	dd000f04 	addi	r20,sp,60
    4fb8:	d9414115 	stw	r5,1284(sp)
    4fbc:	880a977a 	slli	r5,r17,29
    4fc0:	d9814117 	ldw	r6,1284(sp)
    4fc4:	8004d0fa 	srli	r2,r16,3
    4fc8:	8806d0fa 	srli	r3,r17,3
    4fcc:	810001cc 	andi	r4,r16,7
    4fd0:	2884b03a 	or	r2,r5,r2
    4fd4:	31bfffc4 	addi	r6,r6,-1
    4fd8:	21000c04 	addi	r4,r4,48
    4fdc:	d9814115 	stw	r6,1284(sp)
    4fe0:	10cab03a 	or	r5,r2,r3
    4fe4:	31000005 	stb	r4,0(r6)
    4fe8:	1021883a 	mov	r16,r2
    4fec:	1823883a 	mov	r17,r3
    4ff0:	283ff21e 	bne	r5,zero,4fbc <___vfprintf_internal_r+0x1340>
    4ff4:	d8c14c17 	ldw	r3,1328(sp)
    4ff8:	1880004c 	andi	r2,r3,1
    4ffc:	1005003a 	cmpeq	r2,r2,zero
    5000:	103db91e 	bne	r2,zero,46e8 <___vfprintf_internal_r+0xa6c>
    5004:	20803fcc 	andi	r2,r4,255
    5008:	1080201c 	xori	r2,r2,128
    500c:	10bfe004 	addi	r2,r2,-128
    5010:	00c00c04 	movi	r3,48
    5014:	10fdb426 	beq	r2,r3,46e8 <___vfprintf_internal_r+0xa6c>
    5018:	31bfffc4 	addi	r6,r6,-1
    501c:	d9814115 	stw	r6,1284(sp)
    5020:	30c00005 	stb	r3,0(r6)
    5024:	003db006 	br	46e8 <___vfprintf_internal_r+0xa6c>
    5028:	88800068 	cmpgeui	r2,r17,1
    502c:	10002c1e 	bne	r2,zero,50e0 <___vfprintf_internal_r+0x1464>
    5030:	8800021e 	bne	r17,zero,503c <___vfprintf_internal_r+0x13c0>
    5034:	00800244 	movi	r2,9
    5038:	14002936 	bltu	r2,r16,50e0 <___vfprintf_internal_r+0x1464>
    503c:	d90018c4 	addi	r4,sp,99
    5040:	dd000f04 	addi	r20,sp,60
    5044:	d9014115 	stw	r4,1284(sp)
    5048:	d9014117 	ldw	r4,1284(sp)
    504c:	80800c04 	addi	r2,r16,48
    5050:	20800005 	stb	r2,0(r4)
    5054:	003da406 	br	46e8 <___vfprintf_internal_r+0xa6c>
    5058:	dc400d17 	ldw	r17,52(sp)
    505c:	07000074 	movhi	fp,1
    5060:	e70f3084 	addi	fp,fp,15554
    5064:	9425883a 	add	r18,r18,r16
    5068:	8c400044 	addi	r17,r17,1
    506c:	008001c4 	movi	r2,7
    5070:	1f000015 	stw	fp,0(r3)
    5074:	1c000115 	stw	r16,4(r3)
    5078:	dc800e15 	stw	r18,56(sp)
    507c:	dc400d15 	stw	r17,52(sp)
    5080:	147de216 	blt	r2,r17,480c <___vfprintf_internal_r+0xb90>
    5084:	18c00204 	addi	r3,r3,8
    5088:	003c7a06 	br	4274 <___vfprintf_internal_r+0x5f8>
    508c:	01000084 	movi	r4,2
    5090:	d8000405 	stb	zero,16(sp)
    5094:	003d8706 	br	46b4 <___vfprintf_internal_r+0xa38>
    5098:	d9814c17 	ldw	r6,1328(sp)
    509c:	30c4703a 	and	r2,r6,r3
    50a0:	1005003a 	cmpeq	r2,r2,zero
    50a4:	103cb926 	beq	r2,zero,438c <___vfprintf_internal_r+0x710>
    50a8:	d9014117 	ldw	r4,1284(sp)
    50ac:	94800044 	addi	r18,r18,1
    50b0:	8c400044 	addi	r17,r17,1
    50b4:	008001c4 	movi	r2,7
    50b8:	a9000015 	stw	r4,0(r21)
    50bc:	a8c00115 	stw	r3,4(r21)
    50c0:	dc800e15 	stw	r18,56(sp)
    50c4:	dc400d15 	stw	r17,52(sp)
    50c8:	147e6616 	blt	r2,r17,4a64 <___vfprintf_internal_r+0xde8>
    50cc:	acc00204 	addi	r19,r21,8
    50d0:	003cd706 	br	4430 <___vfprintf_internal_r+0x7b4>
    50d4:	07000074 	movhi	fp,1
    50d8:	e70f3084 	addi	fp,fp,15554
    50dc:	003c4f06 	br	421c <___vfprintf_internal_r+0x5a0>
    50e0:	dd000f04 	addi	r20,sp,60
    50e4:	dc801904 	addi	r18,sp,100
    50e8:	8009883a 	mov	r4,r16
    50ec:	880b883a 	mov	r5,r17
    50f0:	01800284 	movi	r6,10
    50f4:	000f883a 	mov	r7,zero
    50f8:	000b2b00 	call	b2b0 <__umoddi3>
    50fc:	12000c04 	addi	r8,r2,48
    5100:	94bfffc4 	addi	r18,r18,-1
    5104:	8009883a 	mov	r4,r16
    5108:	880b883a 	mov	r5,r17
    510c:	01800284 	movi	r6,10
    5110:	000f883a 	mov	r7,zero
    5114:	92000005 	stb	r8,0(r18)
    5118:	000acd40 	call	acd4 <__udivdi3>
    511c:	1009883a 	mov	r4,r2
    5120:	1021883a 	mov	r16,r2
    5124:	18800068 	cmpgeui	r2,r3,1
    5128:	1823883a 	mov	r17,r3
    512c:	103fee1e 	bne	r2,zero,50e8 <___vfprintf_internal_r+0x146c>
    5130:	1800021e 	bne	r3,zero,513c <___vfprintf_internal_r+0x14c0>
    5134:	00800244 	movi	r2,9
    5138:	113feb36 	bltu	r2,r4,50e8 <___vfprintf_internal_r+0x146c>
    513c:	94bfffc4 	addi	r18,r18,-1
    5140:	dc814115 	stw	r18,1284(sp)
    5144:	003fc006 	br	5048 <___vfprintf_internal_r+0x13cc>
    5148:	d9014c17 	ldw	r4,1328(sp)
    514c:	2080004c 	andi	r2,r4,1
    5150:	10009a1e 	bne	r2,zero,53bc <___vfprintf_internal_r+0x1740>
    5154:	d9401904 	addi	r5,sp,100
    5158:	dd000f04 	addi	r20,sp,60
    515c:	d9414115 	stw	r5,1284(sp)
    5160:	003d6106 	br	46e8 <___vfprintf_internal_r+0xa6c>
    5164:	d9014f17 	ldw	r4,1340(sp)
    5168:	b00b883a 	mov	r5,r22
    516c:	d9800c04 	addi	r6,sp,48
    5170:	0003c240 	call	3c24 <__sprint_r>
    5174:	103c791e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    5178:	dc800e17 	ldw	r18,56(sp)
    517c:	d8c01904 	addi	r3,sp,100
    5180:	003cff06 	br	4580 <___vfprintf_internal_r+0x904>
    5184:	d8c14c17 	ldw	r3,1328(sp)
    5188:	1880040c 	andi	r2,r3,16
    518c:	1000711e 	bne	r2,zero,5354 <___vfprintf_internal_r+0x16d8>
    5190:	d9014c17 	ldw	r4,1328(sp)
    5194:	2080100c 	andi	r2,r4,64
    5198:	10006e26 	beq	r2,zero,5354 <___vfprintf_internal_r+0x16d8>
    519c:	3c00000b 	ldhu	r16,0(r7)
    51a0:	0023883a 	mov	r17,zero
    51a4:	39c00104 	addi	r7,r7,4
    51a8:	d9c14015 	stw	r7,1280(sp)
    51ac:	003f0006 	br	4db0 <___vfprintf_internal_r+0x1134>
    51b0:	dc400d17 	ldw	r17,52(sp)
    51b4:	07000074 	movhi	fp,1
    51b8:	e70f3084 	addi	fp,fp,15554
    51bc:	9425883a 	add	r18,r18,r16
    51c0:	8c400044 	addi	r17,r17,1
    51c4:	008001c4 	movi	r2,7
    51c8:	1f000015 	stw	fp,0(r3)
    51cc:	1c000115 	stw	r16,4(r3)
    51d0:	dc800e15 	stw	r18,56(sp)
    51d4:	dc400d15 	stw	r17,52(sp)
    51d8:	147d7616 	blt	r2,r17,47b4 <___vfprintf_internal_r+0xb38>
    51dc:	18c00204 	addi	r3,r3,8
    51e0:	003d7b06 	br	47d0 <___vfprintf_internal_r+0xb54>
    51e4:	dc800e17 	ldw	r18,56(sp)
    51e8:	dc400d17 	ldw	r17,52(sp)
    51ec:	07000074 	movhi	fp,1
    51f0:	e70f3484 	addi	fp,fp,15570
    51f4:	003bc006 	br	40f8 <___vfprintf_internal_r+0x47c>
    51f8:	d9014f17 	ldw	r4,1340(sp)
    51fc:	b00b883a 	mov	r5,r22
    5200:	d9800c04 	addi	r6,sp,48
    5204:	0003c240 	call	3c24 <__sprint_r>
    5208:	103c541e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    520c:	dc800e17 	ldw	r18,56(sp)
    5210:	d8c01904 	addi	r3,sp,100
    5214:	003ce906 	br	45bc <___vfprintf_internal_r+0x940>
    5218:	3c000017 	ldw	r16,0(r7)
    521c:	0009883a 	mov	r4,zero
    5220:	39c00104 	addi	r7,r7,4
    5224:	0023883a 	mov	r17,zero
    5228:	d9c14015 	stw	r7,1280(sp)
    522c:	d8000405 	stb	zero,16(sp)
    5230:	003d2006 	br	46b4 <___vfprintf_internal_r+0xa38>
    5234:	38800017 	ldw	r2,0(r7)
    5238:	39c00104 	addi	r7,r7,4
    523c:	d9c14015 	stw	r7,1280(sp)
    5240:	1023d7fa 	srai	r17,r2,31
    5244:	1021883a 	mov	r16,r2
    5248:	003d1806 	br	46ac <___vfprintf_internal_r+0xa30>
    524c:	3c000017 	ldw	r16,0(r7)
    5250:	01000044 	movi	r4,1
    5254:	39c00104 	addi	r7,r7,4
    5258:	0023883a 	mov	r17,zero
    525c:	d9c14015 	stw	r7,1280(sp)
    5260:	d8000405 	stb	zero,16(sp)
    5264:	003d1306 	br	46b4 <___vfprintf_internal_r+0xa38>
    5268:	00800074 	movhi	r2,1
    526c:	108f3004 	addi	r2,r2,15552
    5270:	94800044 	addi	r18,r18,1
    5274:	8c400044 	addi	r17,r17,1
    5278:	a8800015 	stw	r2,0(r21)
    527c:	00c00044 	movi	r3,1
    5280:	008001c4 	movi	r2,7
    5284:	a8c00115 	stw	r3,4(r21)
    5288:	dc800e15 	stw	r18,56(sp)
    528c:	dc400d15 	stw	r17,52(sp)
    5290:	1440ca16 	blt	r2,r17,55bc <___vfprintf_internal_r+0x1940>
    5294:	a8c00204 	addi	r3,r21,8
    5298:	2000061e 	bne	r4,zero,52b4 <___vfprintf_internal_r+0x1638>
    529c:	d9414717 	ldw	r5,1308(sp)
    52a0:	2800041e 	bne	r5,zero,52b4 <___vfprintf_internal_r+0x1638>
    52a4:	d9814c17 	ldw	r6,1328(sp)
    52a8:	3080004c 	andi	r2,r6,1
    52ac:	1005003a 	cmpeq	r2,r2,zero
    52b0:	103bf01e 	bne	r2,zero,4274 <___vfprintf_internal_r+0x5f8>
    52b4:	00800044 	movi	r2,1
    52b8:	dc400d17 	ldw	r17,52(sp)
    52bc:	18800115 	stw	r2,4(r3)
    52c0:	d8814917 	ldw	r2,1316(sp)
    52c4:	94800044 	addi	r18,r18,1
    52c8:	8c400044 	addi	r17,r17,1
    52cc:	18800015 	stw	r2,0(r3)
    52d0:	008001c4 	movi	r2,7
    52d4:	dc800e15 	stw	r18,56(sp)
    52d8:	dc400d15 	stw	r17,52(sp)
    52dc:	1440ca16 	blt	r2,r17,5608 <___vfprintf_internal_r+0x198c>
    52e0:	18c00204 	addi	r3,r3,8
    52e4:	0121c83a 	sub	r16,zero,r4
    52e8:	0400500e 	bge	zero,r16,542c <___vfprintf_internal_r+0x17b0>
    52ec:	00800404 	movi	r2,16
    52f0:	1400800e 	bge	r2,r16,54f4 <___vfprintf_internal_r+0x1878>
    52f4:	1027883a 	mov	r19,r2
    52f8:	07000074 	movhi	fp,1
    52fc:	e70f3084 	addi	fp,fp,15554
    5300:	050001c4 	movi	r20,7
    5304:	00000306 	br	5314 <___vfprintf_internal_r+0x1698>
    5308:	18c00204 	addi	r3,r3,8
    530c:	843ffc04 	addi	r16,r16,-16
    5310:	9c007a0e 	bge	r19,r16,54fc <___vfprintf_internal_r+0x1880>
    5314:	94800404 	addi	r18,r18,16
    5318:	8c400044 	addi	r17,r17,1
    531c:	1f000015 	stw	fp,0(r3)
    5320:	1cc00115 	stw	r19,4(r3)
    5324:	dc800e15 	stw	r18,56(sp)
    5328:	dc400d15 	stw	r17,52(sp)
    532c:	a47ff60e 	bge	r20,r17,5308 <___vfprintf_internal_r+0x168c>
    5330:	d9014f17 	ldw	r4,1340(sp)
    5334:	b00b883a 	mov	r5,r22
    5338:	d9800c04 	addi	r6,sp,48
    533c:	0003c240 	call	3c24 <__sprint_r>
    5340:	103c061e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    5344:	dc800e17 	ldw	r18,56(sp)
    5348:	dc400d17 	ldw	r17,52(sp)
    534c:	d8c01904 	addi	r3,sp,100
    5350:	003fee06 	br	530c <___vfprintf_internal_r+0x1690>
    5354:	3c000017 	ldw	r16,0(r7)
    5358:	0023883a 	mov	r17,zero
    535c:	39c00104 	addi	r7,r7,4
    5360:	d9c14015 	stw	r7,1280(sp)
    5364:	003e9206 	br	4db0 <___vfprintf_internal_r+0x1134>
    5368:	d9401904 	addi	r5,sp,100
    536c:	dd000f04 	addi	r20,sp,60
    5370:	d9414115 	stw	r5,1284(sp)
    5374:	d9814417 	ldw	r6,1296(sp)
    5378:	880a973a 	slli	r5,r17,28
    537c:	8004d13a 	srli	r2,r16,4
    5380:	810003cc 	andi	r4,r16,15
    5384:	3109883a 	add	r4,r6,r4
    5388:	2884b03a 	or	r2,r5,r2
    538c:	21400003 	ldbu	r5,0(r4)
    5390:	d9014117 	ldw	r4,1284(sp)
    5394:	8806d13a 	srli	r3,r17,4
    5398:	1021883a 	mov	r16,r2
    539c:	213fffc4 	addi	r4,r4,-1
    53a0:	d9014115 	stw	r4,1284(sp)
    53a4:	d9814117 	ldw	r6,1284(sp)
    53a8:	10c8b03a 	or	r4,r2,r3
    53ac:	1823883a 	mov	r17,r3
    53b0:	31400005 	stb	r5,0(r6)
    53b4:	203fef1e 	bne	r4,zero,5374 <___vfprintf_internal_r+0x16f8>
    53b8:	003ccb06 	br	46e8 <___vfprintf_internal_r+0xa6c>
    53bc:	00800c04 	movi	r2,48
    53c0:	d98018c4 	addi	r6,sp,99
    53c4:	dd000f04 	addi	r20,sp,60
    53c8:	d88018c5 	stb	r2,99(sp)
    53cc:	d9814115 	stw	r6,1284(sp)
    53d0:	003cc506 	br	46e8 <___vfprintf_internal_r+0xa6c>
    53d4:	dc400d17 	ldw	r17,52(sp)
    53d8:	07000074 	movhi	fp,1
    53dc:	e70f3484 	addi	fp,fp,15570
    53e0:	003bc706 	br	4300 <___vfprintf_internal_r+0x684>
    53e4:	d9414c17 	ldw	r5,1328(sp)
    53e8:	2880040c 	andi	r2,r5,16
    53ec:	10007c26 	beq	r2,zero,55e0 <___vfprintf_internal_r+0x1964>
    53f0:	38800017 	ldw	r2,0(r7)
    53f4:	39c00104 	addi	r7,r7,4
    53f8:	d9c14015 	stw	r7,1280(sp)
    53fc:	d9814b17 	ldw	r6,1324(sp)
    5400:	d9c14017 	ldw	r7,1280(sp)
    5404:	11800015 	stw	r6,0(r2)
    5408:	003a7806 	br	3dec <___vfprintf_internal_r+0x170>
    540c:	d9014f17 	ldw	r4,1340(sp)
    5410:	b00b883a 	mov	r5,r22
    5414:	d9800c04 	addi	r6,sp,48
    5418:	0003c240 	call	3c24 <__sprint_r>
    541c:	103bcf1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    5420:	dc800e17 	ldw	r18,56(sp)
    5424:	dc400d17 	ldw	r17,52(sp)
    5428:	d8c01904 	addi	r3,sp,100
    542c:	d9014717 	ldw	r4,1308(sp)
    5430:	d9414117 	ldw	r5,1284(sp)
    5434:	8c400044 	addi	r17,r17,1
    5438:	9125883a 	add	r18,r18,r4
    543c:	008001c4 	movi	r2,7
    5440:	19400015 	stw	r5,0(r3)
    5444:	19000115 	stw	r4,4(r3)
    5448:	dc800e15 	stw	r18,56(sp)
    544c:	dc400d15 	stw	r17,52(sp)
    5450:	147cee16 	blt	r2,r17,480c <___vfprintf_internal_r+0xb90>
    5454:	18c00204 	addi	r3,r3,8
    5458:	003b8606 	br	4274 <___vfprintf_internal_r+0x5f8>
    545c:	38c00017 	ldw	r3,0(r7)
    5460:	39000204 	addi	r4,r7,8
    5464:	d9014015 	stw	r4,1280(sp)
    5468:	d8c14215 	stw	r3,1288(sp)
    546c:	39c00117 	ldw	r7,4(r7)
    5470:	d9c14315 	stw	r7,1292(sp)
    5474:	003e2006 	br	4cf8 <___vfprintf_internal_r+0x107c>
    5478:	0005883a 	mov	r2,zero
    547c:	1409c83a 	sub	r4,r2,r16
    5480:	1105803a 	cmpltu	r2,r2,r4
    5484:	044bc83a 	sub	r5,zero,r17
    5488:	2885c83a 	sub	r2,r5,r2
    548c:	2021883a 	mov	r16,r4
    5490:	1023883a 	mov	r17,r2
    5494:	01000044 	movi	r4,1
    5498:	00800b44 	movi	r2,45
    549c:	d8800405 	stb	r2,16(sp)
    54a0:	003c8406 	br	46b4 <___vfprintf_internal_r+0xa38>
    54a4:	d9014f17 	ldw	r4,1340(sp)
    54a8:	b00b883a 	mov	r5,r22
    54ac:	d9800c04 	addi	r6,sp,48
    54b0:	0003c240 	call	3c24 <__sprint_r>
    54b4:	103ba91e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    54b8:	dc800e17 	ldw	r18,56(sp)
    54bc:	dc400d17 	ldw	r17,52(sp)
    54c0:	d9000517 	ldw	r4,20(sp)
    54c4:	d9401904 	addi	r5,sp,100
    54c8:	003da706 	br	4b68 <___vfprintf_internal_r+0xeec>
    54cc:	d9014f17 	ldw	r4,1340(sp)
    54d0:	b00b883a 	mov	r5,r22
    54d4:	d9800c04 	addi	r6,sp,48
    54d8:	0003c240 	call	3c24 <__sprint_r>
    54dc:	103b9f1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    54e0:	dc800e17 	ldw	r18,56(sp)
    54e4:	dc400d17 	ldw	r17,52(sp)
    54e8:	d9000517 	ldw	r4,20(sp)
    54ec:	d8c01904 	addi	r3,sp,100
    54f0:	003d9106 	br	4b38 <___vfprintf_internal_r+0xebc>
    54f4:	07000074 	movhi	fp,1
    54f8:	e70f3084 	addi	fp,fp,15554
    54fc:	9425883a 	add	r18,r18,r16
    5500:	8c400044 	addi	r17,r17,1
    5504:	008001c4 	movi	r2,7
    5508:	1f000015 	stw	fp,0(r3)
    550c:	1c000115 	stw	r16,4(r3)
    5510:	dc800e15 	stw	r18,56(sp)
    5514:	dc400d15 	stw	r17,52(sp)
    5518:	147fbc16 	blt	r2,r17,540c <___vfprintf_internal_r+0x1790>
    551c:	18c00204 	addi	r3,r3,8
    5520:	003fc206 	br	542c <___vfprintf_internal_r+0x17b0>
    5524:	d9014f17 	ldw	r4,1340(sp)
    5528:	b00b883a 	mov	r5,r22
    552c:	d9800c04 	addi	r6,sp,48
    5530:	0003c240 	call	3c24 <__sprint_r>
    5534:	103b891e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    5538:	dc800e17 	ldw	r18,56(sp)
    553c:	d9000517 	ldw	r4,20(sp)
    5540:	d8c01904 	addi	r3,sp,100
    5544:	003d0206 	br	4950 <___vfprintf_internal_r+0xcd4>
    5548:	07000074 	movhi	fp,1
    554c:	e70f3084 	addi	fp,fp,15554
    5550:	003be406 	br	44e4 <___vfprintf_internal_r+0x868>
    5554:	00800074 	movhi	r2,1
    5558:	108f1f04 	addi	r2,r2,15484
    555c:	d8814115 	stw	r2,1284(sp)
    5560:	003df506 	br	4d38 <___vfprintf_internal_r+0x10bc>
    5564:	d9014217 	ldw	r4,1288(sp)
    5568:	d9414317 	ldw	r5,1292(sp)
    556c:	000a5240 	call	a524 <__isnand>
    5570:	10003926 	beq	r2,zero,5658 <___vfprintf_internal_r+0x19dc>
    5574:	d9414d17 	ldw	r5,1332(sp)
    5578:	008011c4 	movi	r2,71
    557c:	1140ce16 	blt	r2,r5,58b8 <___vfprintf_internal_r+0x1c3c>
    5580:	01800074 	movhi	r6,1
    5584:	318f2004 	addi	r6,r6,15488
    5588:	d9814115 	stw	r6,1284(sp)
    558c:	003dea06 	br	4d38 <___vfprintf_internal_r+0x10bc>
    5590:	d9014c17 	ldw	r4,1328(sp)
    5594:	bdc00044 	addi	r23,r23,1
    5598:	b8c00007 	ldb	r3,0(r23)
    559c:	21000814 	ori	r4,r4,32
    55a0:	d9014c15 	stw	r4,1328(sp)
    55a4:	003a3406 	br	3e78 <___vfprintf_internal_r+0x1fc>
    55a8:	dcc14515 	stw	r19,1300(sp)
    55ac:	98011016 	blt	r19,zero,59f0 <___vfprintf_internal_r+0x1d74>
    55b0:	980f883a 	mov	r7,r19
    55b4:	d8014615 	stw	zero,1304(sp)
    55b8:	003c5206 	br	4704 <___vfprintf_internal_r+0xa88>
    55bc:	d9014f17 	ldw	r4,1340(sp)
    55c0:	b00b883a 	mov	r5,r22
    55c4:	d9800c04 	addi	r6,sp,48
    55c8:	0003c240 	call	3c24 <__sprint_r>
    55cc:	103b631e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    55d0:	dc800e17 	ldw	r18,56(sp)
    55d4:	d9000517 	ldw	r4,20(sp)
    55d8:	d8c01904 	addi	r3,sp,100
    55dc:	003f2e06 	br	5298 <___vfprintf_internal_r+0x161c>
    55e0:	d8c14c17 	ldw	r3,1328(sp)
    55e4:	1880100c 	andi	r2,r3,64
    55e8:	1000a026 	beq	r2,zero,586c <___vfprintf_internal_r+0x1bf0>
    55ec:	38800017 	ldw	r2,0(r7)
    55f0:	39c00104 	addi	r7,r7,4
    55f4:	d9c14015 	stw	r7,1280(sp)
    55f8:	d9014b17 	ldw	r4,1324(sp)
    55fc:	d9c14017 	ldw	r7,1280(sp)
    5600:	1100000d 	sth	r4,0(r2)
    5604:	0039f906 	br	3dec <___vfprintf_internal_r+0x170>
    5608:	d9014f17 	ldw	r4,1340(sp)
    560c:	b00b883a 	mov	r5,r22
    5610:	d9800c04 	addi	r6,sp,48
    5614:	0003c240 	call	3c24 <__sprint_r>
    5618:	103b501e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    561c:	dc800e17 	ldw	r18,56(sp)
    5620:	dc400d17 	ldw	r17,52(sp)
    5624:	d9000517 	ldw	r4,20(sp)
    5628:	d8c01904 	addi	r3,sp,100
    562c:	003f2d06 	br	52e4 <___vfprintf_internal_r+0x1668>
    5630:	00800184 	movi	r2,6
    5634:	14c09a36 	bltu	r2,r19,58a0 <___vfprintf_internal_r+0x1c24>
    5638:	dcc14515 	stw	r19,1300(sp)
    563c:	9800010e 	bge	r19,zero,5644 <___vfprintf_internal_r+0x19c8>
    5640:	d8014515 	stw	zero,1300(sp)
    5644:	00800074 	movhi	r2,1
    5648:	108f2204 	addi	r2,r2,15496
    564c:	980f883a 	mov	r7,r19
    5650:	d8814115 	stw	r2,1284(sp)
    5654:	003a7806 	br	4038 <___vfprintf_internal_r+0x3bc>
    5658:	00bfffc4 	movi	r2,-1
    565c:	9880e226 	beq	r19,r2,59e8 <___vfprintf_internal_r+0x1d6c>
    5660:	d9414d17 	ldw	r5,1332(sp)
    5664:	008019c4 	movi	r2,103
    5668:	2880dc26 	beq	r5,r2,59dc <___vfprintf_internal_r+0x1d60>
    566c:	008011c4 	movi	r2,71
    5670:	2880da26 	beq	r5,r2,59dc <___vfprintf_internal_r+0x1d60>
    5674:	d9414c17 	ldw	r5,1328(sp)
    5678:	d9014317 	ldw	r4,1292(sp)
    567c:	d9814217 	ldw	r6,1288(sp)
    5680:	29404014 	ori	r5,r5,256
    5684:	d9414c15 	stw	r5,1328(sp)
    5688:	2000cc16 	blt	r4,zero,59bc <___vfprintf_internal_r+0x1d40>
    568c:	3021883a 	mov	r16,r6
    5690:	2023883a 	mov	r17,r4
    5694:	0039883a 	mov	fp,zero
    5698:	d9414d17 	ldw	r5,1332(sp)
    569c:	00801984 	movi	r2,102
    56a0:	2880b726 	beq	r5,r2,5980 <___vfprintf_internal_r+0x1d04>
    56a4:	00801184 	movi	r2,70
    56a8:	2880b526 	beq	r5,r2,5980 <___vfprintf_internal_r+0x1d04>
    56ac:	00801944 	movi	r2,101
    56b0:	2880c826 	beq	r5,r2,59d4 <___vfprintf_internal_r+0x1d58>
    56b4:	00801144 	movi	r2,69
    56b8:	2880c626 	beq	r5,r2,59d4 <___vfprintf_internal_r+0x1d58>
    56bc:	9829883a 	mov	r20,r19
    56c0:	d9014f17 	ldw	r4,1340(sp)
    56c4:	d8800504 	addi	r2,sp,20
    56c8:	880d883a 	mov	r6,r17
    56cc:	d8800115 	stw	r2,4(sp)
    56d0:	d8c00604 	addi	r3,sp,24
    56d4:	d8800704 	addi	r2,sp,28
    56d8:	800b883a 	mov	r5,r16
    56dc:	01c00084 	movi	r7,2
    56e0:	d8c00215 	stw	r3,8(sp)
    56e4:	d8800315 	stw	r2,12(sp)
    56e8:	dd000015 	stw	r20,0(sp)
    56ec:	0005ea00 	call	5ea0 <_dtoa_r>
    56f0:	d9814d17 	ldw	r6,1332(sp)
    56f4:	d8814115 	stw	r2,1284(sp)
    56f8:	008019c4 	movi	r2,103
    56fc:	30809526 	beq	r6,r2,5954 <___vfprintf_internal_r+0x1cd8>
    5700:	d8c14d17 	ldw	r3,1332(sp)
    5704:	008011c4 	movi	r2,71
    5708:	18809226 	beq	r3,r2,5954 <___vfprintf_internal_r+0x1cd8>
    570c:	d9414117 	ldw	r5,1284(sp)
    5710:	d9814d17 	ldw	r6,1332(sp)
    5714:	00801984 	movi	r2,102
    5718:	2d25883a 	add	r18,r5,r20
    571c:	30808626 	beq	r6,r2,5938 <___vfprintf_internal_r+0x1cbc>
    5720:	00801184 	movi	r2,70
    5724:	30808426 	beq	r6,r2,5938 <___vfprintf_internal_r+0x1cbc>
    5728:	000d883a 	mov	r6,zero
    572c:	000f883a 	mov	r7,zero
    5730:	880b883a 	mov	r5,r17
    5734:	8009883a 	mov	r4,r16
    5738:	000c3800 	call	c380 <__eqdf2>
    573c:	1000751e 	bne	r2,zero,5914 <___vfprintf_internal_r+0x1c98>
    5740:	9005883a 	mov	r2,r18
    5744:	dc800715 	stw	r18,28(sp)
    5748:	d9014117 	ldw	r4,1284(sp)
    574c:	d9414d17 	ldw	r5,1332(sp)
    5750:	00c019c4 	movi	r3,103
    5754:	1125c83a 	sub	r18,r2,r4
    5758:	28c06826 	beq	r5,r3,58fc <___vfprintf_internal_r+0x1c80>
    575c:	008011c4 	movi	r2,71
    5760:	28806626 	beq	r5,r2,58fc <___vfprintf_internal_r+0x1c80>
    5764:	d9000517 	ldw	r4,20(sp)
    5768:	d8c14d17 	ldw	r3,1332(sp)
    576c:	00801944 	movi	r2,101
    5770:	10c05516 	blt	r2,r3,58c8 <___vfprintf_internal_r+0x1c4c>
    5774:	213fffc4 	addi	r4,r4,-1
    5778:	d9000515 	stw	r4,20(sp)
    577c:	d8c00805 	stb	r3,32(sp)
    5780:	2021883a 	mov	r16,r4
    5784:	2000c116 	blt	r4,zero,5a8c <___vfprintf_internal_r+0x1e10>
    5788:	00800ac4 	movi	r2,43
    578c:	d8800845 	stb	r2,33(sp)
    5790:	00800244 	movi	r2,9
    5794:	1400af0e 	bge	r2,r16,5a54 <___vfprintf_internal_r+0x1dd8>
    5798:	1027883a 	mov	r19,r2
    579c:	dc400b84 	addi	r17,sp,46
    57a0:	8009883a 	mov	r4,r16
    57a4:	01400284 	movi	r5,10
    57a8:	00034480 	call	3448 <__modsi3>
    57ac:	10800c04 	addi	r2,r2,48
    57b0:	8c7fffc4 	addi	r17,r17,-1
    57b4:	8009883a 	mov	r4,r16
    57b8:	01400284 	movi	r5,10
    57bc:	88800005 	stb	r2,0(r17)
    57c0:	00033e80 	call	33e8 <__divsi3>
    57c4:	1021883a 	mov	r16,r2
    57c8:	98bff516 	blt	r19,r2,57a0 <___vfprintf_internal_r+0x1b24>
    57cc:	10c00c04 	addi	r3,r2,48
    57d0:	d88009c4 	addi	r2,sp,39
    57d4:	108001c4 	addi	r2,r2,7
    57d8:	897fffc4 	addi	r5,r17,-1
    57dc:	88ffffc5 	stb	r3,-1(r17)
    57e0:	2880a72e 	bgeu	r5,r2,5a80 <___vfprintf_internal_r+0x1e04>
    57e4:	1009883a 	mov	r4,r2
    57e8:	d9800804 	addi	r6,sp,32
    57ec:	d8c00884 	addi	r3,sp,34
    57f0:	28800003 	ldbu	r2,0(r5)
    57f4:	29400044 	addi	r5,r5,1
    57f8:	18800005 	stb	r2,0(r3)
    57fc:	18c00044 	addi	r3,r3,1
    5800:	293ffb36 	bltu	r5,r4,57f0 <___vfprintf_internal_r+0x1b74>
    5804:	1987c83a 	sub	r3,r3,r6
    5808:	00800044 	movi	r2,1
    580c:	d8c14815 	stw	r3,1312(sp)
    5810:	90cf883a 	add	r7,r18,r3
    5814:	1480960e 	bge	r2,r18,5a70 <___vfprintf_internal_r+0x1df4>
    5818:	39c00044 	addi	r7,r7,1
    581c:	d9c14515 	stw	r7,1300(sp)
    5820:	38003416 	blt	r7,zero,58f4 <___vfprintf_internal_r+0x1c78>
    5824:	e0803fcc 	andi	r2,fp,255
    5828:	1080201c 	xori	r2,r2,128
    582c:	10bfe004 	addi	r2,r2,-128
    5830:	10004e26 	beq	r2,zero,596c <___vfprintf_internal_r+0x1cf0>
    5834:	00800b44 	movi	r2,45
    5838:	dc814715 	stw	r18,1308(sp)
    583c:	d8014615 	stw	zero,1304(sp)
    5840:	d8800405 	stb	r2,16(sp)
    5844:	003bb106 	br	470c <___vfprintf_internal_r+0xa90>
    5848:	00800b44 	movi	r2,45
    584c:	d8800405 	stb	r2,16(sp)
    5850:	003d3306 	br	4d20 <___vfprintf_internal_r+0x10a4>
    5854:	d9014f17 	ldw	r4,1340(sp)
    5858:	b00b883a 	mov	r5,r22
    585c:	d9800c04 	addi	r6,sp,48
    5860:	0003c240 	call	3c24 <__sprint_r>
    5864:	103abd1e 	bne	r2,zero,435c <___vfprintf_internal_r+0x6e0>
    5868:	003abb06 	br	4358 <___vfprintf_internal_r+0x6dc>
    586c:	38800017 	ldw	r2,0(r7)
    5870:	39c00104 	addi	r7,r7,4
    5874:	d9c14015 	stw	r7,1280(sp)
    5878:	d9414b17 	ldw	r5,1324(sp)
    587c:	d9c14017 	ldw	r7,1280(sp)
    5880:	11400015 	stw	r5,0(r2)
    5884:	00395906 	br	3dec <___vfprintf_internal_r+0x170>
    5888:	980f883a 	mov	r7,r19
    588c:	dcc14515 	stw	r19,1300(sp)
    5890:	d8014615 	stw	zero,1304(sp)
    5894:	003b9b06 	br	4704 <___vfprintf_internal_r+0xa88>
    5898:	0027883a 	mov	r19,zero
    589c:	00397806 	br	3e80 <___vfprintf_internal_r+0x204>
    58a0:	00c00074 	movhi	r3,1
    58a4:	18cf2204 	addi	r3,r3,15496
    58a8:	100f883a 	mov	r7,r2
    58ac:	d8814515 	stw	r2,1300(sp)
    58b0:	d8c14115 	stw	r3,1284(sp)
    58b4:	0039e006 	br	4038 <___vfprintf_internal_r+0x3bc>
    58b8:	00800074 	movhi	r2,1
    58bc:	108f2104 	addi	r2,r2,15492
    58c0:	d8814115 	stw	r2,1284(sp)
    58c4:	003d1c06 	br	4d38 <___vfprintf_internal_r+0x10bc>
    58c8:	d9414d17 	ldw	r5,1332(sp)
    58cc:	00801984 	movi	r2,102
    58d0:	28804926 	beq	r5,r2,59f8 <___vfprintf_internal_r+0x1d7c>
    58d4:	200f883a 	mov	r7,r4
    58d8:	24805716 	blt	r4,r18,5a38 <___vfprintf_internal_r+0x1dbc>
    58dc:	d9414c17 	ldw	r5,1328(sp)
    58e0:	2880004c 	andi	r2,r5,1
    58e4:	10000126 	beq	r2,zero,58ec <___vfprintf_internal_r+0x1c70>
    58e8:	21c00044 	addi	r7,r4,1
    58ec:	d9c14515 	stw	r7,1300(sp)
    58f0:	383fcc0e 	bge	r7,zero,5824 <___vfprintf_internal_r+0x1ba8>
    58f4:	d8014515 	stw	zero,1300(sp)
    58f8:	003fca06 	br	5824 <___vfprintf_internal_r+0x1ba8>
    58fc:	d9000517 	ldw	r4,20(sp)
    5900:	00bfff04 	movi	r2,-4
    5904:	1100480e 	bge	r2,r4,5a28 <___vfprintf_internal_r+0x1dac>
    5908:	99004716 	blt	r19,r4,5a28 <___vfprintf_internal_r+0x1dac>
    590c:	d8c14d15 	stw	r3,1332(sp)
    5910:	003ff006 	br	58d4 <___vfprintf_internal_r+0x1c58>
    5914:	d8800717 	ldw	r2,28(sp)
    5918:	14bf8b2e 	bgeu	r2,r18,5748 <___vfprintf_internal_r+0x1acc>
    591c:	9007883a 	mov	r3,r18
    5920:	01000c04 	movi	r4,48
    5924:	11000005 	stb	r4,0(r2)
    5928:	10800044 	addi	r2,r2,1
    592c:	d8800715 	stw	r2,28(sp)
    5930:	18bffc1e 	bne	r3,r2,5924 <___vfprintf_internal_r+0x1ca8>
    5934:	003f8406 	br	5748 <___vfprintf_internal_r+0x1acc>
    5938:	d8814117 	ldw	r2,1284(sp)
    593c:	10c00007 	ldb	r3,0(r2)
    5940:	00800c04 	movi	r2,48
    5944:	18805b26 	beq	r3,r2,5ab4 <___vfprintf_internal_r+0x1e38>
    5948:	d9000517 	ldw	r4,20(sp)
    594c:	9125883a 	add	r18,r18,r4
    5950:	003f7506 	br	5728 <___vfprintf_internal_r+0x1aac>
    5954:	d9014c17 	ldw	r4,1328(sp)
    5958:	2080004c 	andi	r2,r4,1
    595c:	1005003a 	cmpeq	r2,r2,zero
    5960:	103f6a26 	beq	r2,zero,570c <___vfprintf_internal_r+0x1a90>
    5964:	d8800717 	ldw	r2,28(sp)
    5968:	003f7706 	br	5748 <___vfprintf_internal_r+0x1acc>
    596c:	d9c14515 	stw	r7,1300(sp)
    5970:	38004d16 	blt	r7,zero,5aa8 <___vfprintf_internal_r+0x1e2c>
    5974:	dc814715 	stw	r18,1308(sp)
    5978:	d8014615 	stw	zero,1304(sp)
    597c:	003b6106 	br	4704 <___vfprintf_internal_r+0xa88>
    5980:	d9014f17 	ldw	r4,1340(sp)
    5984:	d8800504 	addi	r2,sp,20
    5988:	d8800115 	stw	r2,4(sp)
    598c:	d8c00604 	addi	r3,sp,24
    5990:	d8800704 	addi	r2,sp,28
    5994:	800b883a 	mov	r5,r16
    5998:	880d883a 	mov	r6,r17
    599c:	01c000c4 	movi	r7,3
    59a0:	d8c00215 	stw	r3,8(sp)
    59a4:	d8800315 	stw	r2,12(sp)
    59a8:	dcc00015 	stw	r19,0(sp)
    59ac:	9829883a 	mov	r20,r19
    59b0:	0005ea00 	call	5ea0 <_dtoa_r>
    59b4:	d8814115 	stw	r2,1284(sp)
    59b8:	003f5106 	br	5700 <___vfprintf_internal_r+0x1a84>
    59bc:	d8c14217 	ldw	r3,1288(sp)
    59c0:	d9014317 	ldw	r4,1292(sp)
    59c4:	07000b44 	movi	fp,45
    59c8:	1821883a 	mov	r16,r3
    59cc:	2460003c 	xorhi	r17,r4,32768
    59d0:	003f3106 	br	5698 <___vfprintf_internal_r+0x1a1c>
    59d4:	9d000044 	addi	r20,r19,1
    59d8:	003f3906 	br	56c0 <___vfprintf_internal_r+0x1a44>
    59dc:	983f251e 	bne	r19,zero,5674 <___vfprintf_internal_r+0x19f8>
    59e0:	04c00044 	movi	r19,1
    59e4:	003f2306 	br	5674 <___vfprintf_internal_r+0x19f8>
    59e8:	04c00184 	movi	r19,6
    59ec:	003f2106 	br	5674 <___vfprintf_internal_r+0x19f8>
    59f0:	d8014515 	stw	zero,1300(sp)
    59f4:	003eee06 	br	55b0 <___vfprintf_internal_r+0x1934>
    59f8:	200f883a 	mov	r7,r4
    59fc:	0100370e 	bge	zero,r4,5adc <___vfprintf_internal_r+0x1e60>
    5a00:	9800031e 	bne	r19,zero,5a10 <___vfprintf_internal_r+0x1d94>
    5a04:	d9814c17 	ldw	r6,1328(sp)
    5a08:	3080004c 	andi	r2,r6,1
    5a0c:	103fb726 	beq	r2,zero,58ec <___vfprintf_internal_r+0x1c70>
    5a10:	20800044 	addi	r2,r4,1
    5a14:	98a7883a 	add	r19,r19,r2
    5a18:	dcc14515 	stw	r19,1300(sp)
    5a1c:	980f883a 	mov	r7,r19
    5a20:	983f800e 	bge	r19,zero,5824 <___vfprintf_internal_r+0x1ba8>
    5a24:	003fb306 	br	58f4 <___vfprintf_internal_r+0x1c78>
    5a28:	d9814d17 	ldw	r6,1332(sp)
    5a2c:	31bfff84 	addi	r6,r6,-2
    5a30:	d9814d15 	stw	r6,1332(sp)
    5a34:	003f4c06 	br	5768 <___vfprintf_internal_r+0x1aec>
    5a38:	0100180e 	bge	zero,r4,5a9c <___vfprintf_internal_r+0x1e20>
    5a3c:	00800044 	movi	r2,1
    5a40:	1485883a 	add	r2,r2,r18
    5a44:	d8814515 	stw	r2,1300(sp)
    5a48:	100f883a 	mov	r7,r2
    5a4c:	103f750e 	bge	r2,zero,5824 <___vfprintf_internal_r+0x1ba8>
    5a50:	003fa806 	br	58f4 <___vfprintf_internal_r+0x1c78>
    5a54:	80c00c04 	addi	r3,r16,48
    5a58:	00800c04 	movi	r2,48
    5a5c:	d8c008c5 	stb	r3,35(sp)
    5a60:	d9800804 	addi	r6,sp,32
    5a64:	d8c00904 	addi	r3,sp,36
    5a68:	d8800885 	stb	r2,34(sp)
    5a6c:	003f6506 	br	5804 <___vfprintf_internal_r+0x1b88>
    5a70:	d9014c17 	ldw	r4,1328(sp)
    5a74:	2084703a 	and	r2,r4,r2
    5a78:	103f9c26 	beq	r2,zero,58ec <___vfprintf_internal_r+0x1c70>
    5a7c:	003f6606 	br	5818 <___vfprintf_internal_r+0x1b9c>
    5a80:	d9800804 	addi	r6,sp,32
    5a84:	d8c00884 	addi	r3,sp,34
    5a88:	003f5e06 	br	5804 <___vfprintf_internal_r+0x1b88>
    5a8c:	00800b44 	movi	r2,45
    5a90:	0121c83a 	sub	r16,zero,r4
    5a94:	d8800845 	stb	r2,33(sp)
    5a98:	003f3d06 	br	5790 <___vfprintf_internal_r+0x1b14>
    5a9c:	00800084 	movi	r2,2
    5aa0:	1105c83a 	sub	r2,r2,r4
    5aa4:	003fe606 	br	5a40 <___vfprintf_internal_r+0x1dc4>
    5aa8:	d8014515 	stw	zero,1300(sp)
    5aac:	dc814715 	stw	r18,1308(sp)
    5ab0:	003fb106 	br	5978 <___vfprintf_internal_r+0x1cfc>
    5ab4:	000d883a 	mov	r6,zero
    5ab8:	000f883a 	mov	r7,zero
    5abc:	8009883a 	mov	r4,r16
    5ac0:	880b883a 	mov	r5,r17
    5ac4:	000c4080 	call	c408 <__nedf2>
    5ac8:	103f9f26 	beq	r2,zero,5948 <___vfprintf_internal_r+0x1ccc>
    5acc:	00800044 	movi	r2,1
    5ad0:	1509c83a 	sub	r4,r2,r20
    5ad4:	d9000515 	stw	r4,20(sp)
    5ad8:	003f9b06 	br	5948 <___vfprintf_internal_r+0x1ccc>
    5adc:	98000d1e 	bne	r19,zero,5b14 <___vfprintf_internal_r+0x1e98>
    5ae0:	d8c14c17 	ldw	r3,1328(sp)
    5ae4:	1880004c 	andi	r2,r3,1
    5ae8:	10000a1e 	bne	r2,zero,5b14 <___vfprintf_internal_r+0x1e98>
    5aec:	01000044 	movi	r4,1
    5af0:	200f883a 	mov	r7,r4
    5af4:	d9014515 	stw	r4,1300(sp)
    5af8:	003f4a06 	br	5824 <___vfprintf_internal_r+0x1ba8>
    5afc:	3cc00017 	ldw	r19,0(r7)
    5b00:	39c00104 	addi	r7,r7,4
    5b04:	983d0e0e 	bge	r19,zero,4f40 <___vfprintf_internal_r+0x12c4>
    5b08:	b8c00007 	ldb	r3,0(r23)
    5b0c:	04ffffc4 	movi	r19,-1
    5b10:	0038d906 	br	3e78 <___vfprintf_internal_r+0x1fc>
    5b14:	9cc00084 	addi	r19,r19,2
    5b18:	dcc14515 	stw	r19,1300(sp)
    5b1c:	980f883a 	mov	r7,r19
    5b20:	983f400e 	bge	r19,zero,5824 <___vfprintf_internal_r+0x1ba8>
    5b24:	003f7306 	br	58f4 <___vfprintf_internal_r+0x1c78>

00005b28 <__vfprintf_internal>:
    5b28:	00800074 	movhi	r2,1
    5b2c:	10981d04 	addi	r2,r2,24692
    5b30:	2013883a 	mov	r9,r4
    5b34:	11000017 	ldw	r4,0(r2)
    5b38:	2805883a 	mov	r2,r5
    5b3c:	300f883a 	mov	r7,r6
    5b40:	480b883a 	mov	r5,r9
    5b44:	100d883a 	mov	r6,r2
    5b48:	0003c7c1 	jmpi	3c7c <___vfprintf_internal_r>

00005b4c <__swsetup_r>:
    5b4c:	00800074 	movhi	r2,1
    5b50:	10981d04 	addi	r2,r2,24692
    5b54:	10c00017 	ldw	r3,0(r2)
    5b58:	defffd04 	addi	sp,sp,-12
    5b5c:	dc400115 	stw	r17,4(sp)
    5b60:	dc000015 	stw	r16,0(sp)
    5b64:	dfc00215 	stw	ra,8(sp)
    5b68:	2023883a 	mov	r17,r4
    5b6c:	2821883a 	mov	r16,r5
    5b70:	18000226 	beq	r3,zero,5b7c <__swsetup_r+0x30>
    5b74:	18800e17 	ldw	r2,56(r3)
    5b78:	10001f26 	beq	r2,zero,5bf8 <__swsetup_r+0xac>
    5b7c:	8100030b 	ldhu	r4,12(r16)
    5b80:	2080020c 	andi	r2,r4,8
    5b84:	10002826 	beq	r2,zero,5c28 <__swsetup_r+0xdc>
    5b88:	81400417 	ldw	r5,16(r16)
    5b8c:	28001d26 	beq	r5,zero,5c04 <__swsetup_r+0xb8>
    5b90:	2080004c 	andi	r2,r4,1
    5b94:	1005003a 	cmpeq	r2,r2,zero
    5b98:	10000b26 	beq	r2,zero,5bc8 <__swsetup_r+0x7c>
    5b9c:	2080008c 	andi	r2,r4,2
    5ba0:	10001226 	beq	r2,zero,5bec <__swsetup_r+0xa0>
    5ba4:	0005883a 	mov	r2,zero
    5ba8:	80800215 	stw	r2,8(r16)
    5bac:	28000b26 	beq	r5,zero,5bdc <__swsetup_r+0x90>
    5bb0:	0005883a 	mov	r2,zero
    5bb4:	dfc00217 	ldw	ra,8(sp)
    5bb8:	dc400117 	ldw	r17,4(sp)
    5bbc:	dc000017 	ldw	r16,0(sp)
    5bc0:	dec00304 	addi	sp,sp,12
    5bc4:	f800283a 	ret
    5bc8:	80800517 	ldw	r2,20(r16)
    5bcc:	80000215 	stw	zero,8(r16)
    5bd0:	0085c83a 	sub	r2,zero,r2
    5bd4:	80800615 	stw	r2,24(r16)
    5bd8:	283ff51e 	bne	r5,zero,5bb0 <__swsetup_r+0x64>
    5bdc:	2080200c 	andi	r2,r4,128
    5be0:	103ff326 	beq	r2,zero,5bb0 <__swsetup_r+0x64>
    5be4:	00bfffc4 	movi	r2,-1
    5be8:	003ff206 	br	5bb4 <__swsetup_r+0x68>
    5bec:	80800517 	ldw	r2,20(r16)
    5bf0:	80800215 	stw	r2,8(r16)
    5bf4:	003fed06 	br	5bac <__swsetup_r+0x60>
    5bf8:	1809883a 	mov	r4,r3
    5bfc:	00076ec0 	call	76ec <__sinit>
    5c00:	003fde06 	br	5b7c <__swsetup_r+0x30>
    5c04:	20c0a00c 	andi	r3,r4,640
    5c08:	00808004 	movi	r2,512
    5c0c:	18bfe026 	beq	r3,r2,5b90 <__swsetup_r+0x44>
    5c10:	8809883a 	mov	r4,r17
    5c14:	800b883a 	mov	r5,r16
    5c18:	00084640 	call	8464 <__smakebuf_r>
    5c1c:	8100030b 	ldhu	r4,12(r16)
    5c20:	81400417 	ldw	r5,16(r16)
    5c24:	003fda06 	br	5b90 <__swsetup_r+0x44>
    5c28:	2080040c 	andi	r2,r4,16
    5c2c:	103fed26 	beq	r2,zero,5be4 <__swsetup_r+0x98>
    5c30:	2080010c 	andi	r2,r4,4
    5c34:	10001226 	beq	r2,zero,5c80 <__swsetup_r+0x134>
    5c38:	81400c17 	ldw	r5,48(r16)
    5c3c:	28000526 	beq	r5,zero,5c54 <__swsetup_r+0x108>
    5c40:	80801004 	addi	r2,r16,64
    5c44:	28800226 	beq	r5,r2,5c50 <__swsetup_r+0x104>
    5c48:	8809883a 	mov	r4,r17
    5c4c:	0007a700 	call	7a70 <_free_r>
    5c50:	80000c15 	stw	zero,48(r16)
    5c54:	8080030b 	ldhu	r2,12(r16)
    5c58:	81400417 	ldw	r5,16(r16)
    5c5c:	80000115 	stw	zero,4(r16)
    5c60:	10bff6cc 	andi	r2,r2,65499
    5c64:	8080030d 	sth	r2,12(r16)
    5c68:	81400015 	stw	r5,0(r16)
    5c6c:	8080030b 	ldhu	r2,12(r16)
    5c70:	10800214 	ori	r2,r2,8
    5c74:	113fffcc 	andi	r4,r2,65535
    5c78:	8080030d 	sth	r2,12(r16)
    5c7c:	003fc306 	br	5b8c <__swsetup_r+0x40>
    5c80:	81400417 	ldw	r5,16(r16)
    5c84:	003ff906 	br	5c6c <__swsetup_r+0x120>

00005c88 <quorem>:
    5c88:	28c00417 	ldw	r3,16(r5)
    5c8c:	20800417 	ldw	r2,16(r4)
    5c90:	defff604 	addi	sp,sp,-40
    5c94:	ddc00715 	stw	r23,28(sp)
    5c98:	dd400515 	stw	r21,20(sp)
    5c9c:	dfc00915 	stw	ra,36(sp)
    5ca0:	df000815 	stw	fp,32(sp)
    5ca4:	dd800615 	stw	r22,24(sp)
    5ca8:	dd000415 	stw	r20,16(sp)
    5cac:	dcc00315 	stw	r19,12(sp)
    5cb0:	dc800215 	stw	r18,8(sp)
    5cb4:	dc400115 	stw	r17,4(sp)
    5cb8:	dc000015 	stw	r16,0(sp)
    5cbc:	202f883a 	mov	r23,r4
    5cc0:	282b883a 	mov	r21,r5
    5cc4:	10c07416 	blt	r2,r3,5e98 <quorem+0x210>
    5cc8:	1c7fffc4 	addi	r17,r3,-1
    5ccc:	8c45883a 	add	r2,r17,r17
    5cd0:	1085883a 	add	r2,r2,r2
    5cd4:	2c000504 	addi	r16,r5,20
    5cd8:	24c00504 	addi	r19,r4,20
    5cdc:	14ed883a 	add	r22,r2,r19
    5ce0:	80a5883a 	add	r18,r16,r2
    5ce4:	b7000017 	ldw	fp,0(r22)
    5ce8:	91400017 	ldw	r5,0(r18)
    5cec:	e009883a 	mov	r4,fp
    5cf0:	29400044 	addi	r5,r5,1
    5cf4:	00034a80 	call	34a8 <__udivsi3>
    5cf8:	1029883a 	mov	r20,r2
    5cfc:	10003c1e 	bne	r2,zero,5df0 <quorem+0x168>
    5d00:	a80b883a 	mov	r5,r21
    5d04:	b809883a 	mov	r4,r23
    5d08:	00090580 	call	9058 <__mcmp>
    5d0c:	10002b16 	blt	r2,zero,5dbc <quorem+0x134>
    5d10:	a5000044 	addi	r20,r20,1
    5d14:	980f883a 	mov	r7,r19
    5d18:	0011883a 	mov	r8,zero
    5d1c:	0009883a 	mov	r4,zero
    5d20:	81400017 	ldw	r5,0(r16)
    5d24:	38c00017 	ldw	r3,0(r7)
    5d28:	84000104 	addi	r16,r16,4
    5d2c:	28bfffcc 	andi	r2,r5,65535
    5d30:	2085883a 	add	r2,r4,r2
    5d34:	11bfffcc 	andi	r6,r2,65535
    5d38:	193fffcc 	andi	r4,r3,65535
    5d3c:	1004d43a 	srli	r2,r2,16
    5d40:	280ad43a 	srli	r5,r5,16
    5d44:	2189c83a 	sub	r4,r4,r6
    5d48:	2209883a 	add	r4,r4,r8
    5d4c:	1806d43a 	srli	r3,r3,16
    5d50:	288b883a 	add	r5,r5,r2
    5d54:	200dd43a 	srai	r6,r4,16
    5d58:	28bfffcc 	andi	r2,r5,65535
    5d5c:	1887c83a 	sub	r3,r3,r2
    5d60:	1987883a 	add	r3,r3,r6
    5d64:	3900000d 	sth	r4,0(r7)
    5d68:	38c0008d 	sth	r3,2(r7)
    5d6c:	2808d43a 	srli	r4,r5,16
    5d70:	39c00104 	addi	r7,r7,4
    5d74:	1811d43a 	srai	r8,r3,16
    5d78:	943fe92e 	bgeu	r18,r16,5d20 <quorem+0x98>
    5d7c:	8c45883a 	add	r2,r17,r17
    5d80:	1085883a 	add	r2,r2,r2
    5d84:	9885883a 	add	r2,r19,r2
    5d88:	10c00017 	ldw	r3,0(r2)
    5d8c:	18000b1e 	bne	r3,zero,5dbc <quorem+0x134>
    5d90:	113fff04 	addi	r4,r2,-4
    5d94:	9900082e 	bgeu	r19,r4,5db8 <quorem+0x130>
    5d98:	10bfff17 	ldw	r2,-4(r2)
    5d9c:	10000326 	beq	r2,zero,5dac <quorem+0x124>
    5da0:	00000506 	br	5db8 <quorem+0x130>
    5da4:	20800017 	ldw	r2,0(r4)
    5da8:	1000031e 	bne	r2,zero,5db8 <quorem+0x130>
    5dac:	213fff04 	addi	r4,r4,-4
    5db0:	8c7fffc4 	addi	r17,r17,-1
    5db4:	993ffb36 	bltu	r19,r4,5da4 <quorem+0x11c>
    5db8:	bc400415 	stw	r17,16(r23)
    5dbc:	a005883a 	mov	r2,r20
    5dc0:	dfc00917 	ldw	ra,36(sp)
    5dc4:	df000817 	ldw	fp,32(sp)
    5dc8:	ddc00717 	ldw	r23,28(sp)
    5dcc:	dd800617 	ldw	r22,24(sp)
    5dd0:	dd400517 	ldw	r21,20(sp)
    5dd4:	dd000417 	ldw	r20,16(sp)
    5dd8:	dcc00317 	ldw	r19,12(sp)
    5ddc:	dc800217 	ldw	r18,8(sp)
    5de0:	dc400117 	ldw	r17,4(sp)
    5de4:	dc000017 	ldw	r16,0(sp)
    5de8:	dec00a04 	addi	sp,sp,40
    5dec:	f800283a 	ret
    5df0:	980f883a 	mov	r7,r19
    5df4:	8011883a 	mov	r8,r16
    5df8:	0013883a 	mov	r9,zero
    5dfc:	000d883a 	mov	r6,zero
    5e00:	40c00017 	ldw	r3,0(r8)
    5e04:	39000017 	ldw	r4,0(r7)
    5e08:	42000104 	addi	r8,r8,4
    5e0c:	18bfffcc 	andi	r2,r3,65535
    5e10:	a085383a 	mul	r2,r20,r2
    5e14:	1806d43a 	srli	r3,r3,16
    5e18:	217fffcc 	andi	r5,r4,65535
    5e1c:	3085883a 	add	r2,r6,r2
    5e20:	11bfffcc 	andi	r6,r2,65535
    5e24:	a0c7383a 	mul	r3,r20,r3
    5e28:	1004d43a 	srli	r2,r2,16
    5e2c:	298bc83a 	sub	r5,r5,r6
    5e30:	2a4b883a 	add	r5,r5,r9
    5e34:	2008d43a 	srli	r4,r4,16
    5e38:	1887883a 	add	r3,r3,r2
    5e3c:	280dd43a 	srai	r6,r5,16
    5e40:	18bfffcc 	andi	r2,r3,65535
    5e44:	2089c83a 	sub	r4,r4,r2
    5e48:	2189883a 	add	r4,r4,r6
    5e4c:	3900008d 	sth	r4,2(r7)
    5e50:	3940000d 	sth	r5,0(r7)
    5e54:	180cd43a 	srli	r6,r3,16
    5e58:	39c00104 	addi	r7,r7,4
    5e5c:	2013d43a 	srai	r9,r4,16
    5e60:	923fe72e 	bgeu	r18,r8,5e00 <quorem+0x178>
    5e64:	e03fa61e 	bne	fp,zero,5d00 <quorem+0x78>
    5e68:	b0ffff04 	addi	r3,r22,-4
    5e6c:	98c0082e 	bgeu	r19,r3,5e90 <quorem+0x208>
    5e70:	b0bfff17 	ldw	r2,-4(r22)
    5e74:	10000326 	beq	r2,zero,5e84 <quorem+0x1fc>
    5e78:	00000506 	br	5e90 <quorem+0x208>
    5e7c:	18800017 	ldw	r2,0(r3)
    5e80:	1000031e 	bne	r2,zero,5e90 <quorem+0x208>
    5e84:	18ffff04 	addi	r3,r3,-4
    5e88:	8c7fffc4 	addi	r17,r17,-1
    5e8c:	98fffb36 	bltu	r19,r3,5e7c <quorem+0x1f4>
    5e90:	bc400415 	stw	r17,16(r23)
    5e94:	003f9a06 	br	5d00 <quorem+0x78>
    5e98:	0005883a 	mov	r2,zero
    5e9c:	003fc806 	br	5dc0 <quorem+0x138>

00005ea0 <_dtoa_r>:
    5ea0:	22001017 	ldw	r8,64(r4)
    5ea4:	deffda04 	addi	sp,sp,-152
    5ea8:	dd402115 	stw	r21,132(sp)
    5eac:	dd002015 	stw	r20,128(sp)
    5eb0:	dc801e15 	stw	r18,120(sp)
    5eb4:	dc401d15 	stw	r17,116(sp)
    5eb8:	dfc02515 	stw	ra,148(sp)
    5ebc:	df002415 	stw	fp,144(sp)
    5ec0:	ddc02315 	stw	r23,140(sp)
    5ec4:	dd802215 	stw	r22,136(sp)
    5ec8:	dcc01f15 	stw	r19,124(sp)
    5ecc:	dc001c15 	stw	r16,112(sp)
    5ed0:	d9001615 	stw	r4,88(sp)
    5ed4:	3023883a 	mov	r17,r6
    5ed8:	2829883a 	mov	r20,r5
    5edc:	d9c01715 	stw	r7,92(sp)
    5ee0:	dc802817 	ldw	r18,160(sp)
    5ee4:	302b883a 	mov	r21,r6
    5ee8:	40000a26 	beq	r8,zero,5f14 <_dtoa_r+0x74>
    5eec:	20801117 	ldw	r2,68(r4)
    5ef0:	400b883a 	mov	r5,r8
    5ef4:	40800115 	stw	r2,4(r8)
    5ef8:	20c01117 	ldw	r3,68(r4)
    5efc:	00800044 	movi	r2,1
    5f00:	10c4983a 	sll	r2,r2,r3
    5f04:	40800215 	stw	r2,8(r8)
    5f08:	0008efc0 	call	8efc <_Bfree>
    5f0c:	d8c01617 	ldw	r3,88(sp)
    5f10:	18001015 	stw	zero,64(r3)
    5f14:	8800a316 	blt	r17,zero,61a4 <_dtoa_r+0x304>
    5f18:	90000015 	stw	zero,0(r18)
    5f1c:	a8dffc2c 	andhi	r3,r21,32752
    5f20:	009ffc34 	movhi	r2,32752
    5f24:	18809126 	beq	r3,r2,616c <_dtoa_r+0x2cc>
    5f28:	000d883a 	mov	r6,zero
    5f2c:	000f883a 	mov	r7,zero
    5f30:	a009883a 	mov	r4,r20
    5f34:	a80b883a 	mov	r5,r21
    5f38:	dd001215 	stw	r20,72(sp)
    5f3c:	dd401315 	stw	r21,76(sp)
    5f40:	000c4080 	call	c408 <__nedf2>
    5f44:	1000171e 	bne	r2,zero,5fa4 <_dtoa_r+0x104>
    5f48:	d9802717 	ldw	r6,156(sp)
    5f4c:	00800044 	movi	r2,1
    5f50:	30800015 	stw	r2,0(r6)
    5f54:	d8802917 	ldw	r2,164(sp)
    5f58:	10029b26 	beq	r2,zero,69c8 <_dtoa_r+0xb28>
    5f5c:	d9002917 	ldw	r4,164(sp)
    5f60:	00800074 	movhi	r2,1
    5f64:	108f3044 	addi	r2,r2,15553
    5f68:	10ffffc4 	addi	r3,r2,-1
    5f6c:	20800015 	stw	r2,0(r4)
    5f70:	1805883a 	mov	r2,r3
    5f74:	dfc02517 	ldw	ra,148(sp)
    5f78:	df002417 	ldw	fp,144(sp)
    5f7c:	ddc02317 	ldw	r23,140(sp)
    5f80:	dd802217 	ldw	r22,136(sp)
    5f84:	dd402117 	ldw	r21,132(sp)
    5f88:	dd002017 	ldw	r20,128(sp)
    5f8c:	dcc01f17 	ldw	r19,124(sp)
    5f90:	dc801e17 	ldw	r18,120(sp)
    5f94:	dc401d17 	ldw	r17,116(sp)
    5f98:	dc001c17 	ldw	r16,112(sp)
    5f9c:	dec02604 	addi	sp,sp,152
    5fa0:	f800283a 	ret
    5fa4:	d9001617 	ldw	r4,88(sp)
    5fa8:	d9401217 	ldw	r5,72(sp)
    5fac:	d8800104 	addi	r2,sp,4
    5fb0:	a80d883a 	mov	r6,r21
    5fb4:	d9c00204 	addi	r7,sp,8
    5fb8:	d8800015 	stw	r2,0(sp)
    5fbc:	00095380 	call	9538 <__d2b>
    5fc0:	d8800715 	stw	r2,28(sp)
    5fc4:	a804d53a 	srli	r2,r21,20
    5fc8:	1101ffcc 	andi	r4,r2,2047
    5fcc:	20008626 	beq	r4,zero,61e8 <_dtoa_r+0x348>
    5fd0:	d8c01217 	ldw	r3,72(sp)
    5fd4:	00800434 	movhi	r2,16
    5fd8:	10bfffc4 	addi	r2,r2,-1
    5fdc:	ddc00117 	ldw	r23,4(sp)
    5fe0:	a884703a 	and	r2,r21,r2
    5fe4:	1811883a 	mov	r8,r3
    5fe8:	124ffc34 	orhi	r9,r2,16368
    5fec:	25bf0044 	addi	r22,r4,-1023
    5ff0:	d8000815 	stw	zero,32(sp)
    5ff4:	0005883a 	mov	r2,zero
    5ff8:	00cffe34 	movhi	r3,16376
    5ffc:	480b883a 	mov	r5,r9
    6000:	4009883a 	mov	r4,r8
    6004:	180f883a 	mov	r7,r3
    6008:	100d883a 	mov	r6,r2
    600c:	000bc700 	call	bc70 <__subdf3>
    6010:	0218dbf4 	movhi	r8,25455
    6014:	4210d844 	addi	r8,r8,17249
    6018:	024ff4f4 	movhi	r9,16339
    601c:	4a61e9c4 	addi	r9,r9,-30809
    6020:	480f883a 	mov	r7,r9
    6024:	400d883a 	mov	r6,r8
    6028:	180b883a 	mov	r5,r3
    602c:	1009883a 	mov	r4,r2
    6030:	000bd640 	call	bd64 <__muldf3>
    6034:	0222d874 	movhi	r8,35681
    6038:	42322cc4 	addi	r8,r8,-14157
    603c:	024ff1f4 	movhi	r9,16327
    6040:	4a628a04 	addi	r9,r9,-30168
    6044:	480f883a 	mov	r7,r9
    6048:	400d883a 	mov	r6,r8
    604c:	180b883a 	mov	r5,r3
    6050:	1009883a 	mov	r4,r2
    6054:	000bcf00 	call	bcf0 <__adddf3>
    6058:	b009883a 	mov	r4,r22
    605c:	1021883a 	mov	r16,r2
    6060:	1823883a 	mov	r17,r3
    6064:	000c6280 	call	c628 <__floatsidf>
    6068:	021427f4 	movhi	r8,20639
    606c:	421e7ec4 	addi	r8,r8,31227
    6070:	024ff4f4 	movhi	r9,16339
    6074:	4a5104c4 	addi	r9,r9,17427
    6078:	480f883a 	mov	r7,r9
    607c:	400d883a 	mov	r6,r8
    6080:	180b883a 	mov	r5,r3
    6084:	1009883a 	mov	r4,r2
    6088:	000bd640 	call	bd64 <__muldf3>
    608c:	180f883a 	mov	r7,r3
    6090:	880b883a 	mov	r5,r17
    6094:	100d883a 	mov	r6,r2
    6098:	8009883a 	mov	r4,r16
    609c:	000bcf00 	call	bcf0 <__adddf3>
    60a0:	1009883a 	mov	r4,r2
    60a4:	180b883a 	mov	r5,r3
    60a8:	1021883a 	mov	r16,r2
    60ac:	1823883a 	mov	r17,r3
    60b0:	000c7200 	call	c720 <__fixdfsi>
    60b4:	000d883a 	mov	r6,zero
    60b8:	000f883a 	mov	r7,zero
    60bc:	8009883a 	mov	r4,r16
    60c0:	880b883a 	mov	r5,r17
    60c4:	d8800d15 	stw	r2,52(sp)
    60c8:	000c5a00 	call	c5a0 <__ltdf2>
    60cc:	10031716 	blt	r2,zero,6d2c <_dtoa_r+0xe8c>
    60d0:	d8c00d17 	ldw	r3,52(sp)
    60d4:	00800584 	movi	r2,22
    60d8:	10c1482e 	bgeu	r2,r3,65fc <_dtoa_r+0x75c>
    60dc:	01000044 	movi	r4,1
    60e0:	d9000c15 	stw	r4,48(sp)
    60e4:	bd85c83a 	sub	r2,r23,r22
    60e8:	11bfffc4 	addi	r6,r2,-1
    60ec:	30030b16 	blt	r6,zero,6d1c <_dtoa_r+0xe7c>
    60f0:	d9800a15 	stw	r6,40(sp)
    60f4:	d8001115 	stw	zero,68(sp)
    60f8:	d8c00d17 	ldw	r3,52(sp)
    60fc:	1802ff16 	blt	r3,zero,6cfc <_dtoa_r+0xe5c>
    6100:	d9000a17 	ldw	r4,40(sp)
    6104:	d8c00915 	stw	r3,36(sp)
    6108:	d8001015 	stw	zero,64(sp)
    610c:	20c9883a 	add	r4,r4,r3
    6110:	d9000a15 	stw	r4,40(sp)
    6114:	d9001717 	ldw	r4,92(sp)
    6118:	00800244 	movi	r2,9
    611c:	11004636 	bltu	r2,r4,6238 <_dtoa_r+0x398>
    6120:	00800144 	movi	r2,5
    6124:	11020416 	blt	r2,r4,6938 <_dtoa_r+0xa98>
    6128:	04400044 	movi	r17,1
    612c:	d8c01717 	ldw	r3,92(sp)
    6130:	00800144 	movi	r2,5
    6134:	10c1ed36 	bltu	r2,r3,68ec <_dtoa_r+0xa4c>
    6138:	18c5883a 	add	r2,r3,r3
    613c:	1085883a 	add	r2,r2,r2
    6140:	00c00034 	movhi	r3,0
    6144:	18d85504 	addi	r3,r3,24916
    6148:	10c5883a 	add	r2,r2,r3
    614c:	11000017 	ldw	r4,0(r2)
    6150:	2000683a 	jmp	r4
    6154:	00006240 	call	624 <amplitude_circute_get_status+0x48>
    6158:	00006240 	call	624 <amplitude_circute_get_status+0x48>
    615c:	00006c40 	call	6c4 <audio_ISR+0x20>
    6160:	00006c18 	cmpnei	zero,zero,432
    6164:	00006c5c 	xori	zero,zero,433
    6168:	00006c68 	cmpgeui	zero,zero,433
    616c:	d9002717 	ldw	r4,156(sp)
    6170:	0089c3c4 	movi	r2,9999
    6174:	20800015 	stw	r2,0(r4)
    6178:	a0001026 	beq	r20,zero,61bc <_dtoa_r+0x31c>
    617c:	00c00074 	movhi	r3,1
    6180:	18cf3c04 	addi	r3,r3,15600
    6184:	d9802917 	ldw	r6,164(sp)
    6188:	303f7926 	beq	r6,zero,5f70 <_dtoa_r+0xd0>
    618c:	188000c7 	ldb	r2,3(r3)
    6190:	190000c4 	addi	r4,r3,3
    6194:	1000101e 	bne	r2,zero,61d8 <_dtoa_r+0x338>
    6198:	d8802917 	ldw	r2,164(sp)
    619c:	11000015 	stw	r4,0(r2)
    61a0:	003f7306 	br	5f70 <_dtoa_r+0xd0>
    61a4:	00a00034 	movhi	r2,32768
    61a8:	10bfffc4 	addi	r2,r2,-1
    61ac:	00c00044 	movi	r3,1
    61b0:	88aa703a 	and	r21,r17,r2
    61b4:	90c00015 	stw	r3,0(r18)
    61b8:	003f5806 	br	5f1c <_dtoa_r+0x7c>
    61bc:	00800434 	movhi	r2,16
    61c0:	10bfffc4 	addi	r2,r2,-1
    61c4:	a884703a 	and	r2,r21,r2
    61c8:	103fec1e 	bne	r2,zero,617c <_dtoa_r+0x2dc>
    61cc:	00c00074 	movhi	r3,1
    61d0:	18cf3904 	addi	r3,r3,15588
    61d4:	003feb06 	br	6184 <_dtoa_r+0x2e4>
    61d8:	d8802917 	ldw	r2,164(sp)
    61dc:	19000204 	addi	r4,r3,8
    61e0:	11000015 	stw	r4,0(r2)
    61e4:	003f6206 	br	5f70 <_dtoa_r+0xd0>
    61e8:	ddc00117 	ldw	r23,4(sp)
    61ec:	d8800217 	ldw	r2,8(sp)
    61f0:	01000804 	movi	r4,32
    61f4:	b8c10c84 	addi	r3,r23,1074
    61f8:	18a3883a 	add	r17,r3,r2
    61fc:	2441b80e 	bge	r4,r17,68e0 <_dtoa_r+0xa40>
    6200:	00c01004 	movi	r3,64
    6204:	1c47c83a 	sub	r3,r3,r17
    6208:	88bff804 	addi	r2,r17,-32
    620c:	a8c6983a 	sll	r3,r21,r3
    6210:	a084d83a 	srl	r2,r20,r2
    6214:	1888b03a 	or	r4,r3,r2
    6218:	000c7f80 	call	c7f8 <__floatunsidf>
    621c:	1011883a 	mov	r8,r2
    6220:	00bf8434 	movhi	r2,65040
    6224:	01000044 	movi	r4,1
    6228:	10d3883a 	add	r9,r2,r3
    622c:	8dbef344 	addi	r22,r17,-1075
    6230:	d9000815 	stw	r4,32(sp)
    6234:	003f6f06 	br	5ff4 <_dtoa_r+0x154>
    6238:	d8001715 	stw	zero,92(sp)
    623c:	04400044 	movi	r17,1
    6240:	00bfffc4 	movi	r2,-1
    6244:	00c00044 	movi	r3,1
    6248:	d8800e15 	stw	r2,56(sp)
    624c:	d8002615 	stw	zero,152(sp)
    6250:	d8800f15 	stw	r2,60(sp)
    6254:	d8c00b15 	stw	r3,44(sp)
    6258:	1021883a 	mov	r16,r2
    625c:	d8801617 	ldw	r2,88(sp)
    6260:	10001115 	stw	zero,68(r2)
    6264:	d8801617 	ldw	r2,88(sp)
    6268:	11401117 	ldw	r5,68(r2)
    626c:	1009883a 	mov	r4,r2
    6270:	000947c0 	call	947c <_Balloc>
    6274:	d8c01617 	ldw	r3,88(sp)
    6278:	d8800515 	stw	r2,20(sp)
    627c:	18801015 	stw	r2,64(r3)
    6280:	00800384 	movi	r2,14
    6284:	14006836 	bltu	r2,r16,6428 <_dtoa_r+0x588>
    6288:	8805003a 	cmpeq	r2,r17,zero
    628c:	1000661e 	bne	r2,zero,6428 <_dtoa_r+0x588>
    6290:	d9000d17 	ldw	r4,52(sp)
    6294:	0102300e 	bge	zero,r4,6b58 <_dtoa_r+0xcb8>
    6298:	208003cc 	andi	r2,r4,15
    629c:	100490fa 	slli	r2,r2,3
    62a0:	2025d13a 	srai	r18,r4,4
    62a4:	00c00074 	movhi	r3,1
    62a8:	18cf4e04 	addi	r3,r3,15672
    62ac:	10c5883a 	add	r2,r2,r3
    62b0:	90c0040c 	andi	r3,r18,16
    62b4:	14000017 	ldw	r16,0(r2)
    62b8:	14400117 	ldw	r17,4(r2)
    62bc:	18036a1e 	bne	r3,zero,7068 <_dtoa_r+0x11c8>
    62c0:	05800084 	movi	r22,2
    62c4:	90001026 	beq	r18,zero,6308 <_dtoa_r+0x468>
    62c8:	04c00074 	movhi	r19,1
    62cc:	9ccf8004 	addi	r19,r19,15872
    62d0:	9080004c 	andi	r2,r18,1
    62d4:	1005003a 	cmpeq	r2,r2,zero
    62d8:	1000081e 	bne	r2,zero,62fc <_dtoa_r+0x45c>
    62dc:	99800017 	ldw	r6,0(r19)
    62e0:	99c00117 	ldw	r7,4(r19)
    62e4:	880b883a 	mov	r5,r17
    62e8:	8009883a 	mov	r4,r16
    62ec:	000bd640 	call	bd64 <__muldf3>
    62f0:	1021883a 	mov	r16,r2
    62f4:	b5800044 	addi	r22,r22,1
    62f8:	1823883a 	mov	r17,r3
    62fc:	9025d07a 	srai	r18,r18,1
    6300:	9cc00204 	addi	r19,r19,8
    6304:	903ff21e 	bne	r18,zero,62d0 <_dtoa_r+0x430>
    6308:	a80b883a 	mov	r5,r21
    630c:	a009883a 	mov	r4,r20
    6310:	880f883a 	mov	r7,r17
    6314:	800d883a 	mov	r6,r16
    6318:	000c1280 	call	c128 <__divdf3>
    631c:	1029883a 	mov	r20,r2
    6320:	182b883a 	mov	r21,r3
    6324:	d8c00c17 	ldw	r3,48(sp)
    6328:	1805003a 	cmpeq	r2,r3,zero
    632c:	1000081e 	bne	r2,zero,6350 <_dtoa_r+0x4b0>
    6330:	0005883a 	mov	r2,zero
    6334:	00cffc34 	movhi	r3,16368
    6338:	180f883a 	mov	r7,r3
    633c:	a009883a 	mov	r4,r20
    6340:	a80b883a 	mov	r5,r21
    6344:	100d883a 	mov	r6,r2
    6348:	000c5a00 	call	c5a0 <__ltdf2>
    634c:	1003fe16 	blt	r2,zero,7348 <_dtoa_r+0x14a8>
    6350:	b009883a 	mov	r4,r22
    6354:	000c6280 	call	c628 <__floatsidf>
    6358:	180b883a 	mov	r5,r3
    635c:	1009883a 	mov	r4,r2
    6360:	a00d883a 	mov	r6,r20
    6364:	a80f883a 	mov	r7,r21
    6368:	000bd640 	call	bd64 <__muldf3>
    636c:	0011883a 	mov	r8,zero
    6370:	02500734 	movhi	r9,16412
    6374:	1009883a 	mov	r4,r2
    6378:	180b883a 	mov	r5,r3
    637c:	480f883a 	mov	r7,r9
    6380:	400d883a 	mov	r6,r8
    6384:	000bcf00 	call	bcf0 <__adddf3>
    6388:	d9000f17 	ldw	r4,60(sp)
    638c:	102d883a 	mov	r22,r2
    6390:	00bf3034 	movhi	r2,64704
    6394:	18b9883a 	add	fp,r3,r2
    6398:	e02f883a 	mov	r23,fp
    639c:	20028f1e 	bne	r4,zero,6ddc <_dtoa_r+0xf3c>
    63a0:	0005883a 	mov	r2,zero
    63a4:	00d00534 	movhi	r3,16404
    63a8:	a009883a 	mov	r4,r20
    63ac:	a80b883a 	mov	r5,r21
    63b0:	180f883a 	mov	r7,r3
    63b4:	100d883a 	mov	r6,r2
    63b8:	000bc700 	call	bc70 <__subdf3>
    63bc:	1009883a 	mov	r4,r2
    63c0:	e00f883a 	mov	r7,fp
    63c4:	180b883a 	mov	r5,r3
    63c8:	b00d883a 	mov	r6,r22
    63cc:	1025883a 	mov	r18,r2
    63d0:	1827883a 	mov	r19,r3
    63d4:	000c4900 	call	c490 <__gtdf2>
    63d8:	00834f16 	blt	zero,r2,7118 <_dtoa_r+0x1278>
    63dc:	e0e0003c 	xorhi	r3,fp,32768
    63e0:	9009883a 	mov	r4,r18
    63e4:	980b883a 	mov	r5,r19
    63e8:	180f883a 	mov	r7,r3
    63ec:	b00d883a 	mov	r6,r22
    63f0:	000c5a00 	call	c5a0 <__ltdf2>
    63f4:	1000080e 	bge	r2,zero,6418 <_dtoa_r+0x578>
    63f8:	0027883a 	mov	r19,zero
    63fc:	0025883a 	mov	r18,zero
    6400:	d8802617 	ldw	r2,152(sp)
    6404:	df000517 	ldw	fp,20(sp)
    6408:	d8000615 	stw	zero,24(sp)
    640c:	0084303a 	nor	r2,zero,r2
    6410:	d8800d15 	stw	r2,52(sp)
    6414:	00019b06 	br	6a84 <_dtoa_r+0xbe4>
    6418:	d9801217 	ldw	r6,72(sp)
    641c:	d8801317 	ldw	r2,76(sp)
    6420:	3029883a 	mov	r20,r6
    6424:	102b883a 	mov	r21,r2
    6428:	d8c00217 	ldw	r3,8(sp)
    642c:	18008516 	blt	r3,zero,6644 <_dtoa_r+0x7a4>
    6430:	d9000d17 	ldw	r4,52(sp)
    6434:	00800384 	movi	r2,14
    6438:	11008216 	blt	r2,r4,6644 <_dtoa_r+0x7a4>
    643c:	200490fa 	slli	r2,r4,3
    6440:	d9802617 	ldw	r6,152(sp)
    6444:	00c00074 	movhi	r3,1
    6448:	18cf4e04 	addi	r3,r3,15672
    644c:	10c5883a 	add	r2,r2,r3
    6450:	14800017 	ldw	r18,0(r2)
    6454:	14c00117 	ldw	r19,4(r2)
    6458:	30031e16 	blt	r6,zero,70d4 <_dtoa_r+0x1234>
    645c:	d9000517 	ldw	r4,20(sp)
    6460:	d8c00f17 	ldw	r3,60(sp)
    6464:	a823883a 	mov	r17,r21
    6468:	a021883a 	mov	r16,r20
    646c:	192b883a 	add	r21,r3,r4
    6470:	2039883a 	mov	fp,r4
    6474:	00000f06 	br	64b4 <_dtoa_r+0x614>
    6478:	0005883a 	mov	r2,zero
    647c:	00d00934 	movhi	r3,16420
    6480:	5009883a 	mov	r4,r10
    6484:	580b883a 	mov	r5,r11
    6488:	180f883a 	mov	r7,r3
    648c:	100d883a 	mov	r6,r2
    6490:	000bd640 	call	bd64 <__muldf3>
    6494:	180b883a 	mov	r5,r3
    6498:	000d883a 	mov	r6,zero
    649c:	000f883a 	mov	r7,zero
    64a0:	1009883a 	mov	r4,r2
    64a4:	1021883a 	mov	r16,r2
    64a8:	1823883a 	mov	r17,r3
    64ac:	000c4080 	call	c408 <__nedf2>
    64b0:	10004526 	beq	r2,zero,65c8 <_dtoa_r+0x728>
    64b4:	900d883a 	mov	r6,r18
    64b8:	980f883a 	mov	r7,r19
    64bc:	8009883a 	mov	r4,r16
    64c0:	880b883a 	mov	r5,r17
    64c4:	000c1280 	call	c128 <__divdf3>
    64c8:	180b883a 	mov	r5,r3
    64cc:	1009883a 	mov	r4,r2
    64d0:	000c7200 	call	c720 <__fixdfsi>
    64d4:	1009883a 	mov	r4,r2
    64d8:	1029883a 	mov	r20,r2
    64dc:	000c6280 	call	c628 <__floatsidf>
    64e0:	180f883a 	mov	r7,r3
    64e4:	9009883a 	mov	r4,r18
    64e8:	980b883a 	mov	r5,r19
    64ec:	100d883a 	mov	r6,r2
    64f0:	000bd640 	call	bd64 <__muldf3>
    64f4:	180f883a 	mov	r7,r3
    64f8:	880b883a 	mov	r5,r17
    64fc:	8009883a 	mov	r4,r16
    6500:	100d883a 	mov	r6,r2
    6504:	000bc700 	call	bc70 <__subdf3>
    6508:	1015883a 	mov	r10,r2
    650c:	a0800c04 	addi	r2,r20,48
    6510:	e0800005 	stb	r2,0(fp)
    6514:	e7000044 	addi	fp,fp,1
    6518:	1817883a 	mov	r11,r3
    651c:	e57fd61e 	bne	fp,r21,6478 <_dtoa_r+0x5d8>
    6520:	500d883a 	mov	r6,r10
    6524:	180f883a 	mov	r7,r3
    6528:	5009883a 	mov	r4,r10
    652c:	180b883a 	mov	r5,r3
    6530:	000bcf00 	call	bcf0 <__adddf3>
    6534:	100d883a 	mov	r6,r2
    6538:	9009883a 	mov	r4,r18
    653c:	980b883a 	mov	r5,r19
    6540:	180f883a 	mov	r7,r3
    6544:	1021883a 	mov	r16,r2
    6548:	1823883a 	mov	r17,r3
    654c:	000c5a00 	call	c5a0 <__ltdf2>
    6550:	10000816 	blt	r2,zero,6574 <_dtoa_r+0x6d4>
    6554:	980b883a 	mov	r5,r19
    6558:	800d883a 	mov	r6,r16
    655c:	880f883a 	mov	r7,r17
    6560:	9009883a 	mov	r4,r18
    6564:	000c3800 	call	c380 <__eqdf2>
    6568:	1000171e 	bne	r2,zero,65c8 <_dtoa_r+0x728>
    656c:	a080004c 	andi	r2,r20,1
    6570:	10001526 	beq	r2,zero,65c8 <_dtoa_r+0x728>
    6574:	d8800d17 	ldw	r2,52(sp)
    6578:	d8800415 	stw	r2,16(sp)
    657c:	e009883a 	mov	r4,fp
    6580:	213fffc4 	addi	r4,r4,-1
    6584:	20c00007 	ldb	r3,0(r4)
    6588:	00800e44 	movi	r2,57
    658c:	1880081e 	bne	r3,r2,65b0 <_dtoa_r+0x710>
    6590:	d8800517 	ldw	r2,20(sp)
    6594:	113ffa1e 	bne	r2,r4,6580 <_dtoa_r+0x6e0>
    6598:	d8c00417 	ldw	r3,16(sp)
    659c:	d9800517 	ldw	r6,20(sp)
    65a0:	00800c04 	movi	r2,48
    65a4:	18c00044 	addi	r3,r3,1
    65a8:	d8c00415 	stw	r3,16(sp)
    65ac:	30800005 	stb	r2,0(r6)
    65b0:	20800003 	ldbu	r2,0(r4)
    65b4:	d8c00417 	ldw	r3,16(sp)
    65b8:	27000044 	addi	fp,r4,1
    65bc:	10800044 	addi	r2,r2,1
    65c0:	d8c00d15 	stw	r3,52(sp)
    65c4:	20800005 	stb	r2,0(r4)
    65c8:	d9001617 	ldw	r4,88(sp)
    65cc:	d9400717 	ldw	r5,28(sp)
    65d0:	0008efc0 	call	8efc <_Bfree>
    65d4:	e0000005 	stb	zero,0(fp)
    65d8:	d9800d17 	ldw	r6,52(sp)
    65dc:	d8c02717 	ldw	r3,156(sp)
    65e0:	d9002917 	ldw	r4,164(sp)
    65e4:	30800044 	addi	r2,r6,1
    65e8:	18800015 	stw	r2,0(r3)
    65ec:	20029c26 	beq	r4,zero,7060 <_dtoa_r+0x11c0>
    65f0:	d8c00517 	ldw	r3,20(sp)
    65f4:	27000015 	stw	fp,0(r4)
    65f8:	003e5d06 	br	5f70 <_dtoa_r+0xd0>
    65fc:	d9800d17 	ldw	r6,52(sp)
    6600:	00c00074 	movhi	r3,1
    6604:	18cf4e04 	addi	r3,r3,15672
    6608:	d9001217 	ldw	r4,72(sp)
    660c:	300490fa 	slli	r2,r6,3
    6610:	d9401317 	ldw	r5,76(sp)
    6614:	10c5883a 	add	r2,r2,r3
    6618:	12000017 	ldw	r8,0(r2)
    661c:	12400117 	ldw	r9,4(r2)
    6620:	400d883a 	mov	r6,r8
    6624:	480f883a 	mov	r7,r9
    6628:	000c5a00 	call	c5a0 <__ltdf2>
    662c:	1000030e 	bge	r2,zero,663c <_dtoa_r+0x79c>
    6630:	d8800d17 	ldw	r2,52(sp)
    6634:	10bfffc4 	addi	r2,r2,-1
    6638:	d8800d15 	stw	r2,52(sp)
    663c:	d8000c15 	stw	zero,48(sp)
    6640:	003ea806 	br	60e4 <_dtoa_r+0x244>
    6644:	d9000b17 	ldw	r4,44(sp)
    6648:	202cc03a 	cmpne	r22,r4,zero
    664c:	b000c71e 	bne	r22,zero,696c <_dtoa_r+0xacc>
    6650:	dc001117 	ldw	r16,68(sp)
    6654:	dc801017 	ldw	r18,64(sp)
    6658:	0027883a 	mov	r19,zero
    665c:	04000b0e 	bge	zero,r16,668c <_dtoa_r+0x7ec>
    6660:	d8c00a17 	ldw	r3,40(sp)
    6664:	00c0090e 	bge	zero,r3,668c <_dtoa_r+0x7ec>
    6668:	8005883a 	mov	r2,r16
    666c:	1c011316 	blt	r3,r16,6abc <_dtoa_r+0xc1c>
    6670:	d9000a17 	ldw	r4,40(sp)
    6674:	d9801117 	ldw	r6,68(sp)
    6678:	80a1c83a 	sub	r16,r16,r2
    667c:	2089c83a 	sub	r4,r4,r2
    6680:	308dc83a 	sub	r6,r6,r2
    6684:	d9000a15 	stw	r4,40(sp)
    6688:	d9801115 	stw	r6,68(sp)
    668c:	d8801017 	ldw	r2,64(sp)
    6690:	0080150e 	bge	zero,r2,66e8 <_dtoa_r+0x848>
    6694:	d8c00b17 	ldw	r3,44(sp)
    6698:	1805003a 	cmpeq	r2,r3,zero
    669c:	1001c91e 	bne	r2,zero,6dc4 <_dtoa_r+0xf24>
    66a0:	04800e0e 	bge	zero,r18,66dc <_dtoa_r+0x83c>
    66a4:	d9001617 	ldw	r4,88(sp)
    66a8:	980b883a 	mov	r5,r19
    66ac:	900d883a 	mov	r6,r18
    66b0:	0009cb00 	call	9cb0 <__pow5mult>
    66b4:	d9001617 	ldw	r4,88(sp)
    66b8:	d9800717 	ldw	r6,28(sp)
    66bc:	100b883a 	mov	r5,r2
    66c0:	1027883a 	mov	r19,r2
    66c4:	000998c0 	call	998c <__multiply>
    66c8:	d9001617 	ldw	r4,88(sp)
    66cc:	d9400717 	ldw	r5,28(sp)
    66d0:	1023883a 	mov	r17,r2
    66d4:	0008efc0 	call	8efc <_Bfree>
    66d8:	dc400715 	stw	r17,28(sp)
    66dc:	d9001017 	ldw	r4,64(sp)
    66e0:	248dc83a 	sub	r6,r4,r18
    66e4:	30010e1e 	bne	r6,zero,6b20 <_dtoa_r+0xc80>
    66e8:	d9001617 	ldw	r4,88(sp)
    66ec:	04400044 	movi	r17,1
    66f0:	880b883a 	mov	r5,r17
    66f4:	0009b740 	call	9b74 <__i2b>
    66f8:	d9800917 	ldw	r6,36(sp)
    66fc:	1025883a 	mov	r18,r2
    6700:	0180040e 	bge	zero,r6,6714 <_dtoa_r+0x874>
    6704:	d9001617 	ldw	r4,88(sp)
    6708:	100b883a 	mov	r5,r2
    670c:	0009cb00 	call	9cb0 <__pow5mult>
    6710:	1025883a 	mov	r18,r2
    6714:	d8801717 	ldw	r2,92(sp)
    6718:	8880f30e 	bge	r17,r2,6ae8 <_dtoa_r+0xc48>
    671c:	0023883a 	mov	r17,zero
    6720:	d9800917 	ldw	r6,36(sp)
    6724:	30019e1e 	bne	r6,zero,6da0 <_dtoa_r+0xf00>
    6728:	00c00044 	movi	r3,1
    672c:	d9000a17 	ldw	r4,40(sp)
    6730:	20c5883a 	add	r2,r4,r3
    6734:	10c007cc 	andi	r3,r2,31
    6738:	1800841e 	bne	r3,zero,694c <_dtoa_r+0xaac>
    673c:	00800704 	movi	r2,28
    6740:	d9000a17 	ldw	r4,40(sp)
    6744:	d9801117 	ldw	r6,68(sp)
    6748:	80a1883a 	add	r16,r16,r2
    674c:	2089883a 	add	r4,r4,r2
    6750:	308d883a 	add	r6,r6,r2
    6754:	d9000a15 	stw	r4,40(sp)
    6758:	d9801115 	stw	r6,68(sp)
    675c:	d8801117 	ldw	r2,68(sp)
    6760:	0080050e 	bge	zero,r2,6778 <_dtoa_r+0x8d8>
    6764:	d9400717 	ldw	r5,28(sp)
    6768:	d9001617 	ldw	r4,88(sp)
    676c:	100d883a 	mov	r6,r2
    6770:	00098400 	call	9840 <__lshift>
    6774:	d8800715 	stw	r2,28(sp)
    6778:	d8c00a17 	ldw	r3,40(sp)
    677c:	00c0050e 	bge	zero,r3,6794 <_dtoa_r+0x8f4>
    6780:	d9001617 	ldw	r4,88(sp)
    6784:	900b883a 	mov	r5,r18
    6788:	180d883a 	mov	r6,r3
    678c:	00098400 	call	9840 <__lshift>
    6790:	1025883a 	mov	r18,r2
    6794:	d9000c17 	ldw	r4,48(sp)
    6798:	2005003a 	cmpeq	r2,r4,zero
    679c:	10016f26 	beq	r2,zero,6d5c <_dtoa_r+0xebc>
    67a0:	d9000f17 	ldw	r4,60(sp)
    67a4:	0102170e 	bge	zero,r4,7004 <_dtoa_r+0x1164>
    67a8:	d9800b17 	ldw	r6,44(sp)
    67ac:	3005003a 	cmpeq	r2,r6,zero
    67b0:	1000881e 	bne	r2,zero,69d4 <_dtoa_r+0xb34>
    67b4:	0400050e 	bge	zero,r16,67cc <_dtoa_r+0x92c>
    67b8:	d9001617 	ldw	r4,88(sp)
    67bc:	980b883a 	mov	r5,r19
    67c0:	800d883a 	mov	r6,r16
    67c4:	00098400 	call	9840 <__lshift>
    67c8:	1027883a 	mov	r19,r2
    67cc:	8804c03a 	cmpne	r2,r17,zero
    67d0:	1002541e 	bne	r2,zero,7124 <_dtoa_r+0x1284>
    67d4:	980b883a 	mov	r5,r19
    67d8:	dd800517 	ldw	r22,20(sp)
    67dc:	dcc00615 	stw	r19,24(sp)
    67e0:	a700004c 	andi	fp,r20,1
    67e4:	2827883a 	mov	r19,r5
    67e8:	d9000717 	ldw	r4,28(sp)
    67ec:	900b883a 	mov	r5,r18
    67f0:	0005c880 	call	5c88 <quorem>
    67f4:	d9000717 	ldw	r4,28(sp)
    67f8:	d9400617 	ldw	r5,24(sp)
    67fc:	1023883a 	mov	r17,r2
    6800:	8dc00c04 	addi	r23,r17,48
    6804:	00090580 	call	9058 <__mcmp>
    6808:	d9001617 	ldw	r4,88(sp)
    680c:	900b883a 	mov	r5,r18
    6810:	980d883a 	mov	r6,r19
    6814:	1029883a 	mov	r20,r2
    6818:	00096b40 	call	96b4 <__mdiff>
    681c:	102b883a 	mov	r21,r2
    6820:	10800317 	ldw	r2,12(r2)
    6824:	1001281e 	bne	r2,zero,6cc8 <_dtoa_r+0xe28>
    6828:	d9000717 	ldw	r4,28(sp)
    682c:	a80b883a 	mov	r5,r21
    6830:	00090580 	call	9058 <__mcmp>
    6834:	d9001617 	ldw	r4,88(sp)
    6838:	1021883a 	mov	r16,r2
    683c:	a80b883a 	mov	r5,r21
    6840:	0008efc0 	call	8efc <_Bfree>
    6844:	8000041e 	bne	r16,zero,6858 <_dtoa_r+0x9b8>
    6848:	d8801717 	ldw	r2,92(sp)
    684c:	1000021e 	bne	r2,zero,6858 <_dtoa_r+0x9b8>
    6850:	e004c03a 	cmpne	r2,fp,zero
    6854:	10011726 	beq	r2,zero,6cb4 <_dtoa_r+0xe14>
    6858:	a0010616 	blt	r20,zero,6c74 <_dtoa_r+0xdd4>
    685c:	a000041e 	bne	r20,zero,6870 <_dtoa_r+0x9d0>
    6860:	d8c01717 	ldw	r3,92(sp)
    6864:	1800021e 	bne	r3,zero,6870 <_dtoa_r+0x9d0>
    6868:	e004c03a 	cmpne	r2,fp,zero
    686c:	10010126 	beq	r2,zero,6c74 <_dtoa_r+0xdd4>
    6870:	04023d16 	blt	zero,r16,7168 <_dtoa_r+0x12c8>
    6874:	b5c00005 	stb	r23,0(r22)
    6878:	d9800517 	ldw	r6,20(sp)
    687c:	d9000f17 	ldw	r4,60(sp)
    6880:	b5800044 	addi	r22,r22,1
    6884:	3105883a 	add	r2,r6,r4
    6888:	b0806526 	beq	r22,r2,6a20 <_dtoa_r+0xb80>
    688c:	d9400717 	ldw	r5,28(sp)
    6890:	d9001617 	ldw	r4,88(sp)
    6894:	01800284 	movi	r6,10
    6898:	000f883a 	mov	r7,zero
    689c:	0009bb00 	call	9bb0 <__multadd>
    68a0:	d8800715 	stw	r2,28(sp)
    68a4:	d8800617 	ldw	r2,24(sp)
    68a8:	14c10c26 	beq	r2,r19,6cdc <_dtoa_r+0xe3c>
    68ac:	d9400617 	ldw	r5,24(sp)
    68b0:	d9001617 	ldw	r4,88(sp)
    68b4:	01800284 	movi	r6,10
    68b8:	000f883a 	mov	r7,zero
    68bc:	0009bb00 	call	9bb0 <__multadd>
    68c0:	d9001617 	ldw	r4,88(sp)
    68c4:	980b883a 	mov	r5,r19
    68c8:	01800284 	movi	r6,10
    68cc:	000f883a 	mov	r7,zero
    68d0:	d8800615 	stw	r2,24(sp)
    68d4:	0009bb00 	call	9bb0 <__multadd>
    68d8:	1027883a 	mov	r19,r2
    68dc:	003fc206 	br	67e8 <_dtoa_r+0x948>
    68e0:	2445c83a 	sub	r2,r4,r17
    68e4:	a088983a 	sll	r4,r20,r2
    68e8:	003e4b06 	br	6218 <_dtoa_r+0x378>
    68ec:	01bfffc4 	movi	r6,-1
    68f0:	00800044 	movi	r2,1
    68f4:	d9800e15 	stw	r6,56(sp)
    68f8:	d9800f15 	stw	r6,60(sp)
    68fc:	d8800b15 	stw	r2,44(sp)
    6900:	d8c01617 	ldw	r3,88(sp)
    6904:	008005c4 	movi	r2,23
    6908:	18001115 	stw	zero,68(r3)
    690c:	1580082e 	bgeu	r2,r22,6930 <_dtoa_r+0xa90>
    6910:	00c00104 	movi	r3,4
    6914:	0009883a 	mov	r4,zero
    6918:	18c7883a 	add	r3,r3,r3
    691c:	18800504 	addi	r2,r3,20
    6920:	21000044 	addi	r4,r4,1
    6924:	b0bffc2e 	bgeu	r22,r2,6918 <_dtoa_r+0xa78>
    6928:	d9801617 	ldw	r6,88(sp)
    692c:	31001115 	stw	r4,68(r6)
    6930:	dc000f17 	ldw	r16,60(sp)
    6934:	003e4b06 	br	6264 <_dtoa_r+0x3c4>
    6938:	d9801717 	ldw	r6,92(sp)
    693c:	0023883a 	mov	r17,zero
    6940:	31bfff04 	addi	r6,r6,-4
    6944:	d9801715 	stw	r6,92(sp)
    6948:	003df806 	br	612c <_dtoa_r+0x28c>
    694c:	00800804 	movi	r2,32
    6950:	10c9c83a 	sub	r4,r2,r3
    6954:	00c00104 	movi	r3,4
    6958:	19005a16 	blt	r3,r4,6ac4 <_dtoa_r+0xc24>
    695c:	008000c4 	movi	r2,3
    6960:	113f7e16 	blt	r2,r4,675c <_dtoa_r+0x8bc>
    6964:	20800704 	addi	r2,r4,28
    6968:	003f7506 	br	6740 <_dtoa_r+0x8a0>
    696c:	d9801717 	ldw	r6,92(sp)
    6970:	00800044 	movi	r2,1
    6974:	1180a10e 	bge	r2,r6,6bfc <_dtoa_r+0xd5c>
    6978:	d9800f17 	ldw	r6,60(sp)
    697c:	d8c01017 	ldw	r3,64(sp)
    6980:	30bfffc4 	addi	r2,r6,-1
    6984:	1881c616 	blt	r3,r2,70a0 <_dtoa_r+0x1200>
    6988:	18a5c83a 	sub	r18,r3,r2
    698c:	d8800f17 	ldw	r2,60(sp)
    6990:	10026216 	blt	r2,zero,731c <_dtoa_r+0x147c>
    6994:	dc001117 	ldw	r16,68(sp)
    6998:	1007883a 	mov	r3,r2
    699c:	d9800a17 	ldw	r6,40(sp)
    69a0:	d8801117 	ldw	r2,68(sp)
    69a4:	d9001617 	ldw	r4,88(sp)
    69a8:	30cd883a 	add	r6,r6,r3
    69ac:	10c5883a 	add	r2,r2,r3
    69b0:	01400044 	movi	r5,1
    69b4:	d9800a15 	stw	r6,40(sp)
    69b8:	d8801115 	stw	r2,68(sp)
    69bc:	0009b740 	call	9b74 <__i2b>
    69c0:	1027883a 	mov	r19,r2
    69c4:	003f2506 	br	665c <_dtoa_r+0x7bc>
    69c8:	00c00074 	movhi	r3,1
    69cc:	18cf3004 	addi	r3,r3,15552
    69d0:	003d6706 	br	5f70 <_dtoa_r+0xd0>
    69d4:	dd800517 	ldw	r22,20(sp)
    69d8:	04000044 	movi	r16,1
    69dc:	00000706 	br	69fc <_dtoa_r+0xb5c>
    69e0:	d9400717 	ldw	r5,28(sp)
    69e4:	d9001617 	ldw	r4,88(sp)
    69e8:	01800284 	movi	r6,10
    69ec:	000f883a 	mov	r7,zero
    69f0:	0009bb00 	call	9bb0 <__multadd>
    69f4:	d8800715 	stw	r2,28(sp)
    69f8:	84000044 	addi	r16,r16,1
    69fc:	d9000717 	ldw	r4,28(sp)
    6a00:	900b883a 	mov	r5,r18
    6a04:	0005c880 	call	5c88 <quorem>
    6a08:	15c00c04 	addi	r23,r2,48
    6a0c:	b5c00005 	stb	r23,0(r22)
    6a10:	d8c00f17 	ldw	r3,60(sp)
    6a14:	b5800044 	addi	r22,r22,1
    6a18:	80fff116 	blt	r16,r3,69e0 <_dtoa_r+0xb40>
    6a1c:	d8000615 	stw	zero,24(sp)
    6a20:	d9400717 	ldw	r5,28(sp)
    6a24:	d9001617 	ldw	r4,88(sp)
    6a28:	01800044 	movi	r6,1
    6a2c:	00098400 	call	9840 <__lshift>
    6a30:	1009883a 	mov	r4,r2
    6a34:	900b883a 	mov	r5,r18
    6a38:	d8800715 	stw	r2,28(sp)
    6a3c:	00090580 	call	9058 <__mcmp>
    6a40:	00803c0e 	bge	zero,r2,6b34 <_dtoa_r+0xc94>
    6a44:	b009883a 	mov	r4,r22
    6a48:	213fffc4 	addi	r4,r4,-1
    6a4c:	21400003 	ldbu	r5,0(r4)
    6a50:	00800e44 	movi	r2,57
    6a54:	28c03fcc 	andi	r3,r5,255
    6a58:	18c0201c 	xori	r3,r3,128
    6a5c:	18ffe004 	addi	r3,r3,-128
    6a60:	1881981e 	bne	r3,r2,70c4 <_dtoa_r+0x1224>
    6a64:	d9800517 	ldw	r6,20(sp)
    6a68:	21bff71e 	bne	r4,r6,6a48 <_dtoa_r+0xba8>
    6a6c:	d8800d17 	ldw	r2,52(sp)
    6a70:	37000044 	addi	fp,r6,1
    6a74:	10800044 	addi	r2,r2,1
    6a78:	d8800d15 	stw	r2,52(sp)
    6a7c:	00800c44 	movi	r2,49
    6a80:	30800005 	stb	r2,0(r6)
    6a84:	d9001617 	ldw	r4,88(sp)
    6a88:	900b883a 	mov	r5,r18
    6a8c:	0008efc0 	call	8efc <_Bfree>
    6a90:	983ecd26 	beq	r19,zero,65c8 <_dtoa_r+0x728>
    6a94:	d8c00617 	ldw	r3,24(sp)
    6a98:	18000426 	beq	r3,zero,6aac <_dtoa_r+0xc0c>
    6a9c:	1cc00326 	beq	r3,r19,6aac <_dtoa_r+0xc0c>
    6aa0:	d9001617 	ldw	r4,88(sp)
    6aa4:	180b883a 	mov	r5,r3
    6aa8:	0008efc0 	call	8efc <_Bfree>
    6aac:	d9001617 	ldw	r4,88(sp)
    6ab0:	980b883a 	mov	r5,r19
    6ab4:	0008efc0 	call	8efc <_Bfree>
    6ab8:	003ec306 	br	65c8 <_dtoa_r+0x728>
    6abc:	1805883a 	mov	r2,r3
    6ac0:	003eeb06 	br	6670 <_dtoa_r+0x7d0>
    6ac4:	d9800a17 	ldw	r6,40(sp)
    6ac8:	d8c01117 	ldw	r3,68(sp)
    6acc:	20bfff04 	addi	r2,r4,-4
    6ad0:	308d883a 	add	r6,r6,r2
    6ad4:	1887883a 	add	r3,r3,r2
    6ad8:	80a1883a 	add	r16,r16,r2
    6adc:	d9800a15 	stw	r6,40(sp)
    6ae0:	d8c01115 	stw	r3,68(sp)
    6ae4:	003f1d06 	br	675c <_dtoa_r+0x8bc>
    6ae8:	a03f0c1e 	bne	r20,zero,671c <_dtoa_r+0x87c>
    6aec:	00800434 	movhi	r2,16
    6af0:	10bfffc4 	addi	r2,r2,-1
    6af4:	a884703a 	and	r2,r21,r2
    6af8:	103f081e 	bne	r2,zero,671c <_dtoa_r+0x87c>
    6afc:	a89ffc2c 	andhi	r2,r21,32752
    6b00:	103f0626 	beq	r2,zero,671c <_dtoa_r+0x87c>
    6b04:	d8c01117 	ldw	r3,68(sp)
    6b08:	d9000a17 	ldw	r4,40(sp)
    6b0c:	18c00044 	addi	r3,r3,1
    6b10:	21000044 	addi	r4,r4,1
    6b14:	d8c01115 	stw	r3,68(sp)
    6b18:	d9000a15 	stw	r4,40(sp)
    6b1c:	003f0006 	br	6720 <_dtoa_r+0x880>
    6b20:	d9400717 	ldw	r5,28(sp)
    6b24:	d9001617 	ldw	r4,88(sp)
    6b28:	0009cb00 	call	9cb0 <__pow5mult>
    6b2c:	d8800715 	stw	r2,28(sp)
    6b30:	003eed06 	br	66e8 <_dtoa_r+0x848>
    6b34:	1000021e 	bne	r2,zero,6b40 <_dtoa_r+0xca0>
    6b38:	b880004c 	andi	r2,r23,1
    6b3c:	103fc11e 	bne	r2,zero,6a44 <_dtoa_r+0xba4>
    6b40:	b5bfffc4 	addi	r22,r22,-1
    6b44:	b0c00007 	ldb	r3,0(r22)
    6b48:	00800c04 	movi	r2,48
    6b4c:	18bffc26 	beq	r3,r2,6b40 <_dtoa_r+0xca0>
    6b50:	b7000044 	addi	fp,r22,1
    6b54:	003fcb06 	br	6a84 <_dtoa_r+0xbe4>
    6b58:	d9800d17 	ldw	r6,52(sp)
    6b5c:	018fc83a 	sub	r7,zero,r6
    6b60:	3801f726 	beq	r7,zero,7340 <_dtoa_r+0x14a0>
    6b64:	398003cc 	andi	r6,r7,15
    6b68:	300c90fa 	slli	r6,r6,3
    6b6c:	01400074 	movhi	r5,1
    6b70:	294f4e04 	addi	r5,r5,15672
    6b74:	d9001217 	ldw	r4,72(sp)
    6b78:	314d883a 	add	r6,r6,r5
    6b7c:	30c00117 	ldw	r3,4(r6)
    6b80:	30800017 	ldw	r2,0(r6)
    6b84:	d9401317 	ldw	r5,76(sp)
    6b88:	3821d13a 	srai	r16,r7,4
    6b8c:	100d883a 	mov	r6,r2
    6b90:	180f883a 	mov	r7,r3
    6b94:	000bd640 	call	bd64 <__muldf3>
    6b98:	1011883a 	mov	r8,r2
    6b9c:	1813883a 	mov	r9,r3
    6ba0:	1029883a 	mov	r20,r2
    6ba4:	182b883a 	mov	r21,r3
    6ba8:	8001e526 	beq	r16,zero,7340 <_dtoa_r+0x14a0>
    6bac:	05800084 	movi	r22,2
    6bb0:	04400074 	movhi	r17,1
    6bb4:	8c4f8004 	addi	r17,r17,15872
    6bb8:	8080004c 	andi	r2,r16,1
    6bbc:	1005003a 	cmpeq	r2,r2,zero
    6bc0:	1000081e 	bne	r2,zero,6be4 <_dtoa_r+0xd44>
    6bc4:	89800017 	ldw	r6,0(r17)
    6bc8:	89c00117 	ldw	r7,4(r17)
    6bcc:	480b883a 	mov	r5,r9
    6bd0:	4009883a 	mov	r4,r8
    6bd4:	000bd640 	call	bd64 <__muldf3>
    6bd8:	1011883a 	mov	r8,r2
    6bdc:	b5800044 	addi	r22,r22,1
    6be0:	1813883a 	mov	r9,r3
    6be4:	8021d07a 	srai	r16,r16,1
    6be8:	8c400204 	addi	r17,r17,8
    6bec:	803ff21e 	bne	r16,zero,6bb8 <_dtoa_r+0xd18>
    6bf0:	4029883a 	mov	r20,r8
    6bf4:	482b883a 	mov	r21,r9
    6bf8:	003dca06 	br	6324 <_dtoa_r+0x484>
    6bfc:	d9000817 	ldw	r4,32(sp)
    6c00:	2005003a 	cmpeq	r2,r4,zero
    6c04:	1001f61e 	bne	r2,zero,73e0 <_dtoa_r+0x1540>
    6c08:	dc001117 	ldw	r16,68(sp)
    6c0c:	dc801017 	ldw	r18,64(sp)
    6c10:	18c10cc4 	addi	r3,r3,1075
    6c14:	003f6106 	br	699c <_dtoa_r+0xafc>
    6c18:	d8000b15 	stw	zero,44(sp)
    6c1c:	d9802617 	ldw	r6,152(sp)
    6c20:	d8c00d17 	ldw	r3,52(sp)
    6c24:	30800044 	addi	r2,r6,1
    6c28:	18ad883a 	add	r22,r3,r2
    6c2c:	b13fffc4 	addi	r4,r22,-1
    6c30:	d9000e15 	stw	r4,56(sp)
    6c34:	0581f60e 	bge	zero,r22,7410 <_dtoa_r+0x1570>
    6c38:	dd800f15 	stw	r22,60(sp)
    6c3c:	003f3006 	br	6900 <_dtoa_r+0xa60>
    6c40:	d8000b15 	stw	zero,44(sp)
    6c44:	d9002617 	ldw	r4,152(sp)
    6c48:	0101eb0e 	bge	zero,r4,73f8 <_dtoa_r+0x1558>
    6c4c:	202d883a 	mov	r22,r4
    6c50:	d9000e15 	stw	r4,56(sp)
    6c54:	d9000f15 	stw	r4,60(sp)
    6c58:	003f2906 	br	6900 <_dtoa_r+0xa60>
    6c5c:	01800044 	movi	r6,1
    6c60:	d9800b15 	stw	r6,44(sp)
    6c64:	003ff706 	br	6c44 <_dtoa_r+0xda4>
    6c68:	01000044 	movi	r4,1
    6c6c:	d9000b15 	stw	r4,44(sp)
    6c70:	003fea06 	br	6c1c <_dtoa_r+0xd7c>
    6c74:	04000c0e 	bge	zero,r16,6ca8 <_dtoa_r+0xe08>
    6c78:	d9400717 	ldw	r5,28(sp)
    6c7c:	d9001617 	ldw	r4,88(sp)
    6c80:	01800044 	movi	r6,1
    6c84:	00098400 	call	9840 <__lshift>
    6c88:	1009883a 	mov	r4,r2
    6c8c:	900b883a 	mov	r5,r18
    6c90:	d8800715 	stw	r2,28(sp)
    6c94:	00090580 	call	9058 <__mcmp>
    6c98:	0081e00e 	bge	zero,r2,741c <_dtoa_r+0x157c>
    6c9c:	bdc00044 	addi	r23,r23,1
    6ca0:	00800e84 	movi	r2,58
    6ca4:	b881a226 	beq	r23,r2,7330 <_dtoa_r+0x1490>
    6ca8:	b7000044 	addi	fp,r22,1
    6cac:	b5c00005 	stb	r23,0(r22)
    6cb0:	003f7406 	br	6a84 <_dtoa_r+0xbe4>
    6cb4:	00800e44 	movi	r2,57
    6cb8:	b8819d26 	beq	r23,r2,7330 <_dtoa_r+0x1490>
    6cbc:	053ffa0e 	bge	zero,r20,6ca8 <_dtoa_r+0xe08>
    6cc0:	8dc00c44 	addi	r23,r17,49
    6cc4:	003ff806 	br	6ca8 <_dtoa_r+0xe08>
    6cc8:	d9001617 	ldw	r4,88(sp)
    6ccc:	a80b883a 	mov	r5,r21
    6cd0:	04000044 	movi	r16,1
    6cd4:	0008efc0 	call	8efc <_Bfree>
    6cd8:	003edf06 	br	6858 <_dtoa_r+0x9b8>
    6cdc:	d9001617 	ldw	r4,88(sp)
    6ce0:	980b883a 	mov	r5,r19
    6ce4:	01800284 	movi	r6,10
    6ce8:	000f883a 	mov	r7,zero
    6cec:	0009bb00 	call	9bb0 <__multadd>
    6cf0:	1027883a 	mov	r19,r2
    6cf4:	d8800615 	stw	r2,24(sp)
    6cf8:	003ebb06 	br	67e8 <_dtoa_r+0x948>
    6cfc:	d9801117 	ldw	r6,68(sp)
    6d00:	d8800d17 	ldw	r2,52(sp)
    6d04:	d8000915 	stw	zero,36(sp)
    6d08:	308dc83a 	sub	r6,r6,r2
    6d0c:	0087c83a 	sub	r3,zero,r2
    6d10:	d9801115 	stw	r6,68(sp)
    6d14:	d8c01015 	stw	r3,64(sp)
    6d18:	003cfe06 	br	6114 <_dtoa_r+0x274>
    6d1c:	018dc83a 	sub	r6,zero,r6
    6d20:	d9801115 	stw	r6,68(sp)
    6d24:	d8000a15 	stw	zero,40(sp)
    6d28:	003cf306 	br	60f8 <_dtoa_r+0x258>
    6d2c:	d9000d17 	ldw	r4,52(sp)
    6d30:	000c6280 	call	c628 <__floatsidf>
    6d34:	880b883a 	mov	r5,r17
    6d38:	8009883a 	mov	r4,r16
    6d3c:	180f883a 	mov	r7,r3
    6d40:	100d883a 	mov	r6,r2
    6d44:	000c4080 	call	c408 <__nedf2>
    6d48:	103ce126 	beq	r2,zero,60d0 <_dtoa_r+0x230>
    6d4c:	d9800d17 	ldw	r6,52(sp)
    6d50:	31bfffc4 	addi	r6,r6,-1
    6d54:	d9800d15 	stw	r6,52(sp)
    6d58:	003cdd06 	br	60d0 <_dtoa_r+0x230>
    6d5c:	d9000717 	ldw	r4,28(sp)
    6d60:	900b883a 	mov	r5,r18
    6d64:	00090580 	call	9058 <__mcmp>
    6d68:	103e8d0e 	bge	r2,zero,67a0 <_dtoa_r+0x900>
    6d6c:	d9400717 	ldw	r5,28(sp)
    6d70:	d9001617 	ldw	r4,88(sp)
    6d74:	01800284 	movi	r6,10
    6d78:	000f883a 	mov	r7,zero
    6d7c:	0009bb00 	call	9bb0 <__multadd>
    6d80:	d9800d17 	ldw	r6,52(sp)
    6d84:	d8800715 	stw	r2,28(sp)
    6d88:	31bfffc4 	addi	r6,r6,-1
    6d8c:	d9800d15 	stw	r6,52(sp)
    6d90:	b001a71e 	bne	r22,zero,7430 <_dtoa_r+0x1590>
    6d94:	d8800e17 	ldw	r2,56(sp)
    6d98:	d8800f15 	stw	r2,60(sp)
    6d9c:	003e8006 	br	67a0 <_dtoa_r+0x900>
    6da0:	90800417 	ldw	r2,16(r18)
    6da4:	1085883a 	add	r2,r2,r2
    6da8:	1085883a 	add	r2,r2,r2
    6dac:	1485883a 	add	r2,r2,r18
    6db0:	11000417 	ldw	r4,16(r2)
    6db4:	0008f240 	call	8f24 <__hi0bits>
    6db8:	00c00804 	movi	r3,32
    6dbc:	1887c83a 	sub	r3,r3,r2
    6dc0:	003e5a06 	br	672c <_dtoa_r+0x88c>
    6dc4:	d9400717 	ldw	r5,28(sp)
    6dc8:	d9801017 	ldw	r6,64(sp)
    6dcc:	d9001617 	ldw	r4,88(sp)
    6dd0:	0009cb00 	call	9cb0 <__pow5mult>
    6dd4:	d8800715 	stw	r2,28(sp)
    6dd8:	003e4306 	br	66e8 <_dtoa_r+0x848>
    6ddc:	d9800f17 	ldw	r6,60(sp)
    6de0:	d8800d17 	ldw	r2,52(sp)
    6de4:	d9800315 	stw	r6,12(sp)
    6de8:	d8800415 	stw	r2,16(sp)
    6dec:	d8c00b17 	ldw	r3,44(sp)
    6df0:	1805003a 	cmpeq	r2,r3,zero
    6df4:	1000e21e 	bne	r2,zero,7180 <_dtoa_r+0x12e0>
    6df8:	d9000317 	ldw	r4,12(sp)
    6dfc:	0005883a 	mov	r2,zero
    6e00:	00cff834 	movhi	r3,16352
    6e04:	200c90fa 	slli	r6,r4,3
    6e08:	01000074 	movhi	r4,1
    6e0c:	210f4e04 	addi	r4,r4,15672
    6e10:	180b883a 	mov	r5,r3
    6e14:	310d883a 	add	r6,r6,r4
    6e18:	327fff17 	ldw	r9,-4(r6)
    6e1c:	323ffe17 	ldw	r8,-8(r6)
    6e20:	1009883a 	mov	r4,r2
    6e24:	480f883a 	mov	r7,r9
    6e28:	400d883a 	mov	r6,r8
    6e2c:	000c1280 	call	c128 <__divdf3>
    6e30:	180b883a 	mov	r5,r3
    6e34:	b00d883a 	mov	r6,r22
    6e38:	b80f883a 	mov	r7,r23
    6e3c:	1009883a 	mov	r4,r2
    6e40:	000bc700 	call	bc70 <__subdf3>
    6e44:	a80b883a 	mov	r5,r21
    6e48:	a009883a 	mov	r4,r20
    6e4c:	d8c01915 	stw	r3,100(sp)
    6e50:	d8801815 	stw	r2,96(sp)
    6e54:	000c7200 	call	c720 <__fixdfsi>
    6e58:	1009883a 	mov	r4,r2
    6e5c:	1027883a 	mov	r19,r2
    6e60:	000c6280 	call	c628 <__floatsidf>
    6e64:	a80b883a 	mov	r5,r21
    6e68:	a009883a 	mov	r4,r20
    6e6c:	180f883a 	mov	r7,r3
    6e70:	100d883a 	mov	r6,r2
    6e74:	000bc700 	call	bc70 <__subdf3>
    6e78:	d9801817 	ldw	r6,96(sp)
    6e7c:	1823883a 	mov	r17,r3
    6e80:	d8801415 	stw	r2,80(sp)
    6e84:	302d883a 	mov	r22,r6
    6e88:	d9800517 	ldw	r6,20(sp)
    6e8c:	9cc00c04 	addi	r19,r19,48
    6e90:	dc401515 	stw	r17,84(sp)
    6e94:	d8c01917 	ldw	r3,100(sp)
    6e98:	34c00005 	stb	r19,0(r6)
    6e9c:	d8800517 	ldw	r2,20(sp)
    6ea0:	d9401917 	ldw	r5,100(sp)
    6ea4:	d9801417 	ldw	r6,80(sp)
    6ea8:	b009883a 	mov	r4,r22
    6eac:	880f883a 	mov	r7,r17
    6eb0:	182f883a 	mov	r23,r3
    6eb4:	17000044 	addi	fp,r2,1
    6eb8:	000c4900 	call	c490 <__gtdf2>
    6ebc:	00804e16 	blt	zero,r2,6ff8 <_dtoa_r+0x1158>
    6ec0:	d9801417 	ldw	r6,80(sp)
    6ec4:	0005883a 	mov	r2,zero
    6ec8:	00cffc34 	movhi	r3,16368
    6ecc:	180b883a 	mov	r5,r3
    6ed0:	880f883a 	mov	r7,r17
    6ed4:	1009883a 	mov	r4,r2
    6ed8:	000bc700 	call	bc70 <__subdf3>
    6edc:	d9401917 	ldw	r5,100(sp)
    6ee0:	180f883a 	mov	r7,r3
    6ee4:	b009883a 	mov	r4,r22
    6ee8:	100d883a 	mov	r6,r2
    6eec:	000c4900 	call	c490 <__gtdf2>
    6ef0:	00bda216 	blt	zero,r2,657c <_dtoa_r+0x6dc>
    6ef4:	d8c00317 	ldw	r3,12(sp)
    6ef8:	00800044 	movi	r2,1
    6efc:	10c01216 	blt	r2,r3,6f48 <_dtoa_r+0x10a8>
    6f00:	003d4506 	br	6418 <_dtoa_r+0x578>
    6f04:	d9801417 	ldw	r6,80(sp)
    6f08:	0005883a 	mov	r2,zero
    6f0c:	00cffc34 	movhi	r3,16368
    6f10:	180b883a 	mov	r5,r3
    6f14:	880f883a 	mov	r7,r17
    6f18:	1009883a 	mov	r4,r2
    6f1c:	000bc700 	call	bc70 <__subdf3>
    6f20:	d9c01b17 	ldw	r7,108(sp)
    6f24:	180b883a 	mov	r5,r3
    6f28:	1009883a 	mov	r4,r2
    6f2c:	b00d883a 	mov	r6,r22
    6f30:	000c5a00 	call	c5a0 <__ltdf2>
    6f34:	103d9116 	blt	r2,zero,657c <_dtoa_r+0x6dc>
    6f38:	d9800517 	ldw	r6,20(sp)
    6f3c:	d9000317 	ldw	r4,12(sp)
    6f40:	3105883a 	add	r2,r6,r4
    6f44:	e0bd3426 	beq	fp,r2,6418 <_dtoa_r+0x578>
    6f48:	04500934 	movhi	r17,16420
    6f4c:	0021883a 	mov	r16,zero
    6f50:	b80b883a 	mov	r5,r23
    6f54:	b009883a 	mov	r4,r22
    6f58:	800d883a 	mov	r6,r16
    6f5c:	880f883a 	mov	r7,r17
    6f60:	000bd640 	call	bd64 <__muldf3>
    6f64:	d9401517 	ldw	r5,84(sp)
    6f68:	d9001417 	ldw	r4,80(sp)
    6f6c:	880f883a 	mov	r7,r17
    6f70:	000d883a 	mov	r6,zero
    6f74:	d8801a15 	stw	r2,104(sp)
    6f78:	d8c01b15 	stw	r3,108(sp)
    6f7c:	000bd640 	call	bd64 <__muldf3>
    6f80:	180b883a 	mov	r5,r3
    6f84:	1009883a 	mov	r4,r2
    6f88:	1823883a 	mov	r17,r3
    6f8c:	1021883a 	mov	r16,r2
    6f90:	000c7200 	call	c720 <__fixdfsi>
    6f94:	1009883a 	mov	r4,r2
    6f98:	102b883a 	mov	r21,r2
    6f9c:	000c6280 	call	c628 <__floatsidf>
    6fa0:	880b883a 	mov	r5,r17
    6fa4:	8009883a 	mov	r4,r16
    6fa8:	180f883a 	mov	r7,r3
    6fac:	100d883a 	mov	r6,r2
    6fb0:	000bc700 	call	bc70 <__subdf3>
    6fb4:	1021883a 	mov	r16,r2
    6fb8:	d9001b17 	ldw	r4,108(sp)
    6fbc:	1823883a 	mov	r17,r3
    6fc0:	dc001415 	stw	r16,80(sp)
    6fc4:	ad400c04 	addi	r21,r21,48
    6fc8:	dc401515 	stw	r17,84(sp)
    6fcc:	d8801a17 	ldw	r2,104(sp)
    6fd0:	e5400005 	stb	r21,0(fp)
    6fd4:	202f883a 	mov	r23,r4
    6fd8:	d9c01b17 	ldw	r7,108(sp)
    6fdc:	d9001417 	ldw	r4,80(sp)
    6fe0:	880b883a 	mov	r5,r17
    6fe4:	100d883a 	mov	r6,r2
    6fe8:	102d883a 	mov	r22,r2
    6fec:	e7000044 	addi	fp,fp,1
    6ff0:	000c5a00 	call	c5a0 <__ltdf2>
    6ff4:	103fc30e 	bge	r2,zero,6f04 <_dtoa_r+0x1064>
    6ff8:	d9000417 	ldw	r4,16(sp)
    6ffc:	d9000d15 	stw	r4,52(sp)
    7000:	003d7106 	br	65c8 <_dtoa_r+0x728>
    7004:	d9801717 	ldw	r6,92(sp)
    7008:	00800084 	movi	r2,2
    700c:	11bde60e 	bge	r2,r6,67a8 <_dtoa_r+0x908>
    7010:	203cfb1e 	bne	r4,zero,6400 <_dtoa_r+0x560>
    7014:	d9001617 	ldw	r4,88(sp)
    7018:	900b883a 	mov	r5,r18
    701c:	01800144 	movi	r6,5
    7020:	000f883a 	mov	r7,zero
    7024:	0009bb00 	call	9bb0 <__multadd>
    7028:	d9000717 	ldw	r4,28(sp)
    702c:	100b883a 	mov	r5,r2
    7030:	1025883a 	mov	r18,r2
    7034:	00090580 	call	9058 <__mcmp>
    7038:	00bcf10e 	bge	zero,r2,6400 <_dtoa_r+0x560>
    703c:	d8c00d17 	ldw	r3,52(sp)
    7040:	d9000517 	ldw	r4,20(sp)
    7044:	d8000615 	stw	zero,24(sp)
    7048:	18c00044 	addi	r3,r3,1
    704c:	d8c00d15 	stw	r3,52(sp)
    7050:	00800c44 	movi	r2,49
    7054:	27000044 	addi	fp,r4,1
    7058:	20800005 	stb	r2,0(r4)
    705c:	003e8906 	br	6a84 <_dtoa_r+0xbe4>
    7060:	d8c00517 	ldw	r3,20(sp)
    7064:	003bc206 	br	5f70 <_dtoa_r+0xd0>
    7068:	01800074 	movhi	r6,1
    706c:	318f8004 	addi	r6,r6,15872
    7070:	30c00917 	ldw	r3,36(r6)
    7074:	30800817 	ldw	r2,32(r6)
    7078:	d9001217 	ldw	r4,72(sp)
    707c:	d9401317 	ldw	r5,76(sp)
    7080:	180f883a 	mov	r7,r3
    7084:	100d883a 	mov	r6,r2
    7088:	000c1280 	call	c128 <__divdf3>
    708c:	948003cc 	andi	r18,r18,15
    7090:	058000c4 	movi	r22,3
    7094:	1029883a 	mov	r20,r2
    7098:	182b883a 	mov	r21,r3
    709c:	003c8906 	br	62c4 <_dtoa_r+0x424>
    70a0:	d9001017 	ldw	r4,64(sp)
    70a4:	d9800917 	ldw	r6,36(sp)
    70a8:	0025883a 	mov	r18,zero
    70ac:	1105c83a 	sub	r2,r2,r4
    70b0:	2089883a 	add	r4,r4,r2
    70b4:	308d883a 	add	r6,r6,r2
    70b8:	d9001015 	stw	r4,64(sp)
    70bc:	d9800915 	stw	r6,36(sp)
    70c0:	003e3206 	br	698c <_dtoa_r+0xaec>
    70c4:	28800044 	addi	r2,r5,1
    70c8:	27000044 	addi	fp,r4,1
    70cc:	20800005 	stb	r2,0(r4)
    70d0:	003e6c06 	br	6a84 <_dtoa_r+0xbe4>
    70d4:	d8800f17 	ldw	r2,60(sp)
    70d8:	00bce016 	blt	zero,r2,645c <_dtoa_r+0x5bc>
    70dc:	d9800f17 	ldw	r6,60(sp)
    70e0:	303cc51e 	bne	r6,zero,63f8 <_dtoa_r+0x558>
    70e4:	0005883a 	mov	r2,zero
    70e8:	00d00534 	movhi	r3,16404
    70ec:	980b883a 	mov	r5,r19
    70f0:	180f883a 	mov	r7,r3
    70f4:	9009883a 	mov	r4,r18
    70f8:	100d883a 	mov	r6,r2
    70fc:	000bd640 	call	bd64 <__muldf3>
    7100:	180b883a 	mov	r5,r3
    7104:	a80f883a 	mov	r7,r21
    7108:	1009883a 	mov	r4,r2
    710c:	a00d883a 	mov	r6,r20
    7110:	000c5180 	call	c518 <__gedf2>
    7114:	103cb80e 	bge	r2,zero,63f8 <_dtoa_r+0x558>
    7118:	0027883a 	mov	r19,zero
    711c:	0025883a 	mov	r18,zero
    7120:	003fc606 	br	703c <_dtoa_r+0x119c>
    7124:	99400117 	ldw	r5,4(r19)
    7128:	d9001617 	ldw	r4,88(sp)
    712c:	000947c0 	call	947c <_Balloc>
    7130:	99800417 	ldw	r6,16(r19)
    7134:	11000304 	addi	r4,r2,12
    7138:	99400304 	addi	r5,r19,12
    713c:	318d883a 	add	r6,r6,r6
    7140:	318d883a 	add	r6,r6,r6
    7144:	31800204 	addi	r6,r6,8
    7148:	1023883a 	mov	r17,r2
    714c:	0003a740 	call	3a74 <memcpy>
    7150:	d9001617 	ldw	r4,88(sp)
    7154:	880b883a 	mov	r5,r17
    7158:	01800044 	movi	r6,1
    715c:	00098400 	call	9840 <__lshift>
    7160:	100b883a 	mov	r5,r2
    7164:	003d9c06 	br	67d8 <_dtoa_r+0x938>
    7168:	00800e44 	movi	r2,57
    716c:	b8807026 	beq	r23,r2,7330 <_dtoa_r+0x1490>
    7170:	b8800044 	addi	r2,r23,1
    7174:	b7000044 	addi	fp,r22,1
    7178:	b0800005 	stb	r2,0(r22)
    717c:	003e4106 	br	6a84 <_dtoa_r+0xbe4>
    7180:	d8800317 	ldw	r2,12(sp)
    7184:	01800074 	movhi	r6,1
    7188:	318f4e04 	addi	r6,r6,15672
    718c:	b009883a 	mov	r4,r22
    7190:	100e90fa 	slli	r7,r2,3
    7194:	b80b883a 	mov	r5,r23
    7198:	398f883a 	add	r7,r7,r6
    719c:	38bffe17 	ldw	r2,-8(r7)
    71a0:	d9800517 	ldw	r6,20(sp)
    71a4:	38ffff17 	ldw	r3,-4(r7)
    71a8:	37000044 	addi	fp,r6,1
    71ac:	180f883a 	mov	r7,r3
    71b0:	100d883a 	mov	r6,r2
    71b4:	000bd640 	call	bd64 <__muldf3>
    71b8:	a80b883a 	mov	r5,r21
    71bc:	a009883a 	mov	r4,r20
    71c0:	182f883a 	mov	r23,r3
    71c4:	102d883a 	mov	r22,r2
    71c8:	000c7200 	call	c720 <__fixdfsi>
    71cc:	1009883a 	mov	r4,r2
    71d0:	1027883a 	mov	r19,r2
    71d4:	000c6280 	call	c628 <__floatsidf>
    71d8:	a80b883a 	mov	r5,r21
    71dc:	a009883a 	mov	r4,r20
    71e0:	180f883a 	mov	r7,r3
    71e4:	100d883a 	mov	r6,r2
    71e8:	000bc700 	call	bc70 <__subdf3>
    71ec:	180b883a 	mov	r5,r3
    71f0:	d8c00517 	ldw	r3,20(sp)
    71f4:	9cc00c04 	addi	r19,r19,48
    71f8:	1009883a 	mov	r4,r2
    71fc:	1cc00005 	stb	r19,0(r3)
    7200:	2021883a 	mov	r16,r4
    7204:	d9000317 	ldw	r4,12(sp)
    7208:	00800044 	movi	r2,1
    720c:	2823883a 	mov	r17,r5
    7210:	20802226 	beq	r4,r2,729c <_dtoa_r+0x13fc>
    7214:	1029883a 	mov	r20,r2
    7218:	0005883a 	mov	r2,zero
    721c:	00d00934 	movhi	r3,16420
    7220:	180f883a 	mov	r7,r3
    7224:	100d883a 	mov	r6,r2
    7228:	880b883a 	mov	r5,r17
    722c:	8009883a 	mov	r4,r16
    7230:	000bd640 	call	bd64 <__muldf3>
    7234:	180b883a 	mov	r5,r3
    7238:	1009883a 	mov	r4,r2
    723c:	1823883a 	mov	r17,r3
    7240:	1021883a 	mov	r16,r2
    7244:	000c7200 	call	c720 <__fixdfsi>
    7248:	1009883a 	mov	r4,r2
    724c:	102b883a 	mov	r21,r2
    7250:	000c6280 	call	c628 <__floatsidf>
    7254:	880b883a 	mov	r5,r17
    7258:	8009883a 	mov	r4,r16
    725c:	180f883a 	mov	r7,r3
    7260:	100d883a 	mov	r6,r2
    7264:	000bc700 	call	bc70 <__subdf3>
    7268:	180b883a 	mov	r5,r3
    726c:	d8c00517 	ldw	r3,20(sp)
    7270:	1009883a 	mov	r4,r2
    7274:	ad400c04 	addi	r21,r21,48
    7278:	1d05883a 	add	r2,r3,r20
    727c:	15400005 	stb	r21,0(r2)
    7280:	2021883a 	mov	r16,r4
    7284:	d9000317 	ldw	r4,12(sp)
    7288:	a5000044 	addi	r20,r20,1
    728c:	2823883a 	mov	r17,r5
    7290:	a13fe11e 	bne	r20,r4,7218 <_dtoa_r+0x1378>
    7294:	e505883a 	add	r2,fp,r20
    7298:	173fffc4 	addi	fp,r2,-1
    729c:	0025883a 	mov	r18,zero
    72a0:	04cff834 	movhi	r19,16352
    72a4:	b009883a 	mov	r4,r22
    72a8:	b80b883a 	mov	r5,r23
    72ac:	900d883a 	mov	r6,r18
    72b0:	980f883a 	mov	r7,r19
    72b4:	000bcf00 	call	bcf0 <__adddf3>
    72b8:	180b883a 	mov	r5,r3
    72bc:	1009883a 	mov	r4,r2
    72c0:	800d883a 	mov	r6,r16
    72c4:	880f883a 	mov	r7,r17
    72c8:	000c5a00 	call	c5a0 <__ltdf2>
    72cc:	103cab16 	blt	r2,zero,657c <_dtoa_r+0x6dc>
    72d0:	0009883a 	mov	r4,zero
    72d4:	980b883a 	mov	r5,r19
    72d8:	b80f883a 	mov	r7,r23
    72dc:	b00d883a 	mov	r6,r22
    72e0:	000bc700 	call	bc70 <__subdf3>
    72e4:	180b883a 	mov	r5,r3
    72e8:	880f883a 	mov	r7,r17
    72ec:	1009883a 	mov	r4,r2
    72f0:	800d883a 	mov	r6,r16
    72f4:	000c4900 	call	c490 <__gtdf2>
    72f8:	00bc470e 	bge	zero,r2,6418 <_dtoa_r+0x578>
    72fc:	00c00c04 	movi	r3,48
    7300:	e73fffc4 	addi	fp,fp,-1
    7304:	e0800007 	ldb	r2,0(fp)
    7308:	10fffd26 	beq	r2,r3,7300 <_dtoa_r+0x1460>
    730c:	d9800417 	ldw	r6,16(sp)
    7310:	e7000044 	addi	fp,fp,1
    7314:	d9800d15 	stw	r6,52(sp)
    7318:	003cab06 	br	65c8 <_dtoa_r+0x728>
    731c:	d8c00f17 	ldw	r3,60(sp)
    7320:	d9001117 	ldw	r4,68(sp)
    7324:	20e1c83a 	sub	r16,r4,r3
    7328:	0007883a 	mov	r3,zero
    732c:	003d9b06 	br	699c <_dtoa_r+0xafc>
    7330:	00800e44 	movi	r2,57
    7334:	b0800005 	stb	r2,0(r22)
    7338:	b5800044 	addi	r22,r22,1
    733c:	003dc106 	br	6a44 <_dtoa_r+0xba4>
    7340:	05800084 	movi	r22,2
    7344:	003bf706 	br	6324 <_dtoa_r+0x484>
    7348:	d9000f17 	ldw	r4,60(sp)
    734c:	013c000e 	bge	zero,r4,6350 <_dtoa_r+0x4b0>
    7350:	d9800e17 	ldw	r6,56(sp)
    7354:	01bc300e 	bge	zero,r6,6418 <_dtoa_r+0x578>
    7358:	0005883a 	mov	r2,zero
    735c:	00d00934 	movhi	r3,16420
    7360:	a80b883a 	mov	r5,r21
    7364:	180f883a 	mov	r7,r3
    7368:	a009883a 	mov	r4,r20
    736c:	100d883a 	mov	r6,r2
    7370:	000bd640 	call	bd64 <__muldf3>
    7374:	b1000044 	addi	r4,r22,1
    7378:	1021883a 	mov	r16,r2
    737c:	1823883a 	mov	r17,r3
    7380:	000c6280 	call	c628 <__floatsidf>
    7384:	880b883a 	mov	r5,r17
    7388:	8009883a 	mov	r4,r16
    738c:	180f883a 	mov	r7,r3
    7390:	100d883a 	mov	r6,r2
    7394:	000bd640 	call	bd64 <__muldf3>
    7398:	0011883a 	mov	r8,zero
    739c:	02500734 	movhi	r9,16412
    73a0:	180b883a 	mov	r5,r3
    73a4:	480f883a 	mov	r7,r9
    73a8:	1009883a 	mov	r4,r2
    73ac:	400d883a 	mov	r6,r8
    73b0:	000bcf00 	call	bcf0 <__adddf3>
    73b4:	102d883a 	mov	r22,r2
    73b8:	00bf3034 	movhi	r2,64704
    73bc:	10ef883a 	add	r23,r2,r3
    73c0:	d8800d17 	ldw	r2,52(sp)
    73c4:	d8c00e17 	ldw	r3,56(sp)
    73c8:	8029883a 	mov	r20,r16
    73cc:	10bfffc4 	addi	r2,r2,-1
    73d0:	882b883a 	mov	r21,r17
    73d4:	d8800415 	stw	r2,16(sp)
    73d8:	d8c00315 	stw	r3,12(sp)
    73dc:	003e8306 	br	6dec <_dtoa_r+0xf4c>
    73e0:	d8800117 	ldw	r2,4(sp)
    73e4:	dc001117 	ldw	r16,68(sp)
    73e8:	dc801017 	ldw	r18,64(sp)
    73ec:	00c00d84 	movi	r3,54
    73f0:	1887c83a 	sub	r3,r3,r2
    73f4:	003d6906 	br	699c <_dtoa_r+0xafc>
    73f8:	01800044 	movi	r6,1
    73fc:	3021883a 	mov	r16,r6
    7400:	d9800f15 	stw	r6,60(sp)
    7404:	d9802615 	stw	r6,152(sp)
    7408:	d9800e15 	stw	r6,56(sp)
    740c:	003b9306 	br	625c <_dtoa_r+0x3bc>
    7410:	b021883a 	mov	r16,r22
    7414:	dd800f15 	stw	r22,60(sp)
    7418:	003b9006 	br	625c <_dtoa_r+0x3bc>
    741c:	103e221e 	bne	r2,zero,6ca8 <_dtoa_r+0xe08>
    7420:	b880004c 	andi	r2,r23,1
    7424:	1005003a 	cmpeq	r2,r2,zero
    7428:	103e1f1e 	bne	r2,zero,6ca8 <_dtoa_r+0xe08>
    742c:	003e1b06 	br	6c9c <_dtoa_r+0xdfc>
    7430:	d9001617 	ldw	r4,88(sp)
    7434:	980b883a 	mov	r5,r19
    7438:	01800284 	movi	r6,10
    743c:	000f883a 	mov	r7,zero
    7440:	0009bb00 	call	9bb0 <__multadd>
    7444:	d8c00e17 	ldw	r3,56(sp)
    7448:	1027883a 	mov	r19,r2
    744c:	d8c00f15 	stw	r3,60(sp)
    7450:	003cd306 	br	67a0 <_dtoa_r+0x900>

00007454 <_fflush_r>:
    7454:	defffb04 	addi	sp,sp,-20
    7458:	dcc00315 	stw	r19,12(sp)
    745c:	dc800215 	stw	r18,8(sp)
    7460:	dfc00415 	stw	ra,16(sp)
    7464:	dc400115 	stw	r17,4(sp)
    7468:	dc000015 	stw	r16,0(sp)
    746c:	2027883a 	mov	r19,r4
    7470:	2825883a 	mov	r18,r5
    7474:	20000226 	beq	r4,zero,7480 <_fflush_r+0x2c>
    7478:	20800e17 	ldw	r2,56(r4)
    747c:	10005626 	beq	r2,zero,75d8 <_fflush_r+0x184>
    7480:	9100030b 	ldhu	r4,12(r18)
    7484:	20ffffcc 	andi	r3,r4,65535
    7488:	18e0001c 	xori	r3,r3,32768
    748c:	18e00004 	addi	r3,r3,-32768
    7490:	1880020c 	andi	r2,r3,8
    7494:	1000261e 	bne	r2,zero,7530 <_fflush_r+0xdc>
    7498:	90c00117 	ldw	r3,4(r18)
    749c:	20820014 	ori	r2,r4,2048
    74a0:	9080030d 	sth	r2,12(r18)
    74a4:	1009883a 	mov	r4,r2
    74a8:	00c0400e 	bge	zero,r3,75ac <_fflush_r+0x158>
    74ac:	92000a17 	ldw	r8,40(r18)
    74b0:	40004026 	beq	r8,zero,75b4 <_fflush_r+0x160>
    74b4:	2084000c 	andi	r2,r4,4096
    74b8:	10005326 	beq	r2,zero,7608 <_fflush_r+0x1b4>
    74bc:	94001417 	ldw	r16,80(r18)
    74c0:	9080030b 	ldhu	r2,12(r18)
    74c4:	1080010c 	andi	r2,r2,4
    74c8:	1000481e 	bne	r2,zero,75ec <_fflush_r+0x198>
    74cc:	91400717 	ldw	r5,28(r18)
    74d0:	9809883a 	mov	r4,r19
    74d4:	800d883a 	mov	r6,r16
    74d8:	000f883a 	mov	r7,zero
    74dc:	403ee83a 	callr	r8
    74e0:	8080261e 	bne	r16,r2,757c <_fflush_r+0x128>
    74e4:	9080030b 	ldhu	r2,12(r18)
    74e8:	91000417 	ldw	r4,16(r18)
    74ec:	90000115 	stw	zero,4(r18)
    74f0:	10bdffcc 	andi	r2,r2,63487
    74f4:	10ffffcc 	andi	r3,r2,65535
    74f8:	18c4000c 	andi	r3,r3,4096
    74fc:	9080030d 	sth	r2,12(r18)
    7500:	91000015 	stw	r4,0(r18)
    7504:	18002b26 	beq	r3,zero,75b4 <_fflush_r+0x160>
    7508:	0007883a 	mov	r3,zero
    750c:	1805883a 	mov	r2,r3
    7510:	94001415 	stw	r16,80(r18)
    7514:	dfc00417 	ldw	ra,16(sp)
    7518:	dcc00317 	ldw	r19,12(sp)
    751c:	dc800217 	ldw	r18,8(sp)
    7520:	dc400117 	ldw	r17,4(sp)
    7524:	dc000017 	ldw	r16,0(sp)
    7528:	dec00504 	addi	sp,sp,20
    752c:	f800283a 	ret
    7530:	94400417 	ldw	r17,16(r18)
    7534:	88001f26 	beq	r17,zero,75b4 <_fflush_r+0x160>
    7538:	90800017 	ldw	r2,0(r18)
    753c:	18c000cc 	andi	r3,r3,3
    7540:	94400015 	stw	r17,0(r18)
    7544:	1461c83a 	sub	r16,r2,r17
    7548:	18002526 	beq	r3,zero,75e0 <_fflush_r+0x18c>
    754c:	0005883a 	mov	r2,zero
    7550:	90800215 	stw	r2,8(r18)
    7554:	0400170e 	bge	zero,r16,75b4 <_fflush_r+0x160>
    7558:	90c00917 	ldw	r3,36(r18)
    755c:	91400717 	ldw	r5,28(r18)
    7560:	880d883a 	mov	r6,r17
    7564:	800f883a 	mov	r7,r16
    7568:	9809883a 	mov	r4,r19
    756c:	183ee83a 	callr	r3
    7570:	88a3883a 	add	r17,r17,r2
    7574:	80a1c83a 	sub	r16,r16,r2
    7578:	00bff616 	blt	zero,r2,7554 <_fflush_r+0x100>
    757c:	9080030b 	ldhu	r2,12(r18)
    7580:	00ffffc4 	movi	r3,-1
    7584:	10801014 	ori	r2,r2,64
    7588:	9080030d 	sth	r2,12(r18)
    758c:	1805883a 	mov	r2,r3
    7590:	dfc00417 	ldw	ra,16(sp)
    7594:	dcc00317 	ldw	r19,12(sp)
    7598:	dc800217 	ldw	r18,8(sp)
    759c:	dc400117 	ldw	r17,4(sp)
    75a0:	dc000017 	ldw	r16,0(sp)
    75a4:	dec00504 	addi	sp,sp,20
    75a8:	f800283a 	ret
    75ac:	90800f17 	ldw	r2,60(r18)
    75b0:	00bfbe16 	blt	zero,r2,74ac <_fflush_r+0x58>
    75b4:	0007883a 	mov	r3,zero
    75b8:	1805883a 	mov	r2,r3
    75bc:	dfc00417 	ldw	ra,16(sp)
    75c0:	dcc00317 	ldw	r19,12(sp)
    75c4:	dc800217 	ldw	r18,8(sp)
    75c8:	dc400117 	ldw	r17,4(sp)
    75cc:	dc000017 	ldw	r16,0(sp)
    75d0:	dec00504 	addi	sp,sp,20
    75d4:	f800283a 	ret
    75d8:	00076ec0 	call	76ec <__sinit>
    75dc:	003fa806 	br	7480 <_fflush_r+0x2c>
    75e0:	90800517 	ldw	r2,20(r18)
    75e4:	90800215 	stw	r2,8(r18)
    75e8:	003fda06 	br	7554 <_fflush_r+0x100>
    75ec:	90800117 	ldw	r2,4(r18)
    75f0:	90c00c17 	ldw	r3,48(r18)
    75f4:	80a1c83a 	sub	r16,r16,r2
    75f8:	183fb426 	beq	r3,zero,74cc <_fflush_r+0x78>
    75fc:	90800f17 	ldw	r2,60(r18)
    7600:	80a1c83a 	sub	r16,r16,r2
    7604:	003fb106 	br	74cc <_fflush_r+0x78>
    7608:	91400717 	ldw	r5,28(r18)
    760c:	9809883a 	mov	r4,r19
    7610:	000d883a 	mov	r6,zero
    7614:	01c00044 	movi	r7,1
    7618:	403ee83a 	callr	r8
    761c:	1021883a 	mov	r16,r2
    7620:	00bfffc4 	movi	r2,-1
    7624:	80800226 	beq	r16,r2,7630 <_fflush_r+0x1dc>
    7628:	92000a17 	ldw	r8,40(r18)
    762c:	003fa406 	br	74c0 <_fflush_r+0x6c>
    7630:	98c00017 	ldw	r3,0(r19)
    7634:	00800744 	movi	r2,29
    7638:	18bfde26 	beq	r3,r2,75b4 <_fflush_r+0x160>
    763c:	9080030b 	ldhu	r2,12(r18)
    7640:	8007883a 	mov	r3,r16
    7644:	10801014 	ori	r2,r2,64
    7648:	9080030d 	sth	r2,12(r18)
    764c:	003fcf06 	br	758c <_fflush_r+0x138>

00007650 <fflush>:
    7650:	01400034 	movhi	r5,0
    7654:	295d1504 	addi	r5,r5,29780
    7658:	2007883a 	mov	r3,r4
    765c:	20000526 	beq	r4,zero,7674 <fflush+0x24>
    7660:	00800074 	movhi	r2,1
    7664:	10981d04 	addi	r2,r2,24692
    7668:	11000017 	ldw	r4,0(r2)
    766c:	180b883a 	mov	r5,r3
    7670:	00074541 	jmpi	7454 <_fflush_r>
    7674:	00800074 	movhi	r2,1
    7678:	10981e04 	addi	r2,r2,24696
    767c:	11000017 	ldw	r4,0(r2)
    7680:	00082201 	jmpi	8220 <_fwalk_reent>

00007684 <std>:
    7684:	00800074 	movhi	r2,1
    7688:	10a97104 	addi	r2,r2,-23100
    768c:	20800b15 	stw	r2,44(r4)
    7690:	00800074 	movhi	r2,1
    7694:	10a9ac04 	addi	r2,r2,-22864
    7698:	20800815 	stw	r2,32(r4)
    769c:	00c00074 	movhi	r3,1
    76a0:	18e98d04 	addi	r3,r3,-22988
    76a4:	00800074 	movhi	r2,1
    76a8:	10a97304 	addi	r2,r2,-23092
    76ac:	2140030d 	sth	r5,12(r4)
    76b0:	2180038d 	sth	r6,14(r4)
    76b4:	20c00915 	stw	r3,36(r4)
    76b8:	20800a15 	stw	r2,40(r4)
    76bc:	20000015 	stw	zero,0(r4)
    76c0:	20000115 	stw	zero,4(r4)
    76c4:	20000215 	stw	zero,8(r4)
    76c8:	20000415 	stw	zero,16(r4)
    76cc:	20000515 	stw	zero,20(r4)
    76d0:	20000615 	stw	zero,24(r4)
    76d4:	21000715 	stw	r4,28(r4)
    76d8:	f800283a 	ret

000076dc <__sfp_lock_acquire>:
    76dc:	f800283a 	ret

000076e0 <__sfp_lock_release>:
    76e0:	f800283a 	ret

000076e4 <__sinit_lock_acquire>:
    76e4:	f800283a 	ret

000076e8 <__sinit_lock_release>:
    76e8:	f800283a 	ret

000076ec <__sinit>:
    76ec:	20800e17 	ldw	r2,56(r4)
    76f0:	defffd04 	addi	sp,sp,-12
    76f4:	dc400115 	stw	r17,4(sp)
    76f8:	dc000015 	stw	r16,0(sp)
    76fc:	dfc00215 	stw	ra,8(sp)
    7700:	04400044 	movi	r17,1
    7704:	01400104 	movi	r5,4
    7708:	000d883a 	mov	r6,zero
    770c:	2021883a 	mov	r16,r4
    7710:	2200bb04 	addi	r8,r4,748
    7714:	200f883a 	mov	r7,r4
    7718:	10000526 	beq	r2,zero,7730 <__sinit+0x44>
    771c:	dfc00217 	ldw	ra,8(sp)
    7720:	dc400117 	ldw	r17,4(sp)
    7724:	dc000017 	ldw	r16,0(sp)
    7728:	dec00304 	addi	sp,sp,12
    772c:	f800283a 	ret
    7730:	21000117 	ldw	r4,4(r4)
    7734:	00800034 	movhi	r2,0
    7738:	109df404 	addi	r2,r2,30672
    773c:	00c000c4 	movi	r3,3
    7740:	80800f15 	stw	r2,60(r16)
    7744:	80c0b915 	stw	r3,740(r16)
    7748:	8200ba15 	stw	r8,744(r16)
    774c:	84400e15 	stw	r17,56(r16)
    7750:	8000b815 	stw	zero,736(r16)
    7754:	00076840 	call	7684 <std>
    7758:	81000217 	ldw	r4,8(r16)
    775c:	880d883a 	mov	r6,r17
    7760:	800f883a 	mov	r7,r16
    7764:	01400284 	movi	r5,10
    7768:	00076840 	call	7684 <std>
    776c:	81000317 	ldw	r4,12(r16)
    7770:	800f883a 	mov	r7,r16
    7774:	01400484 	movi	r5,18
    7778:	01800084 	movi	r6,2
    777c:	dfc00217 	ldw	ra,8(sp)
    7780:	dc400117 	ldw	r17,4(sp)
    7784:	dc000017 	ldw	r16,0(sp)
    7788:	dec00304 	addi	sp,sp,12
    778c:	00076841 	jmpi	7684 <std>

00007790 <__fp_lock>:
    7790:	0005883a 	mov	r2,zero
    7794:	f800283a 	ret

00007798 <__fp_unlock>:
    7798:	0005883a 	mov	r2,zero
    779c:	f800283a 	ret

000077a0 <__fp_unlock_all>:
    77a0:	00800074 	movhi	r2,1
    77a4:	10981d04 	addi	r2,r2,24692
    77a8:	11000017 	ldw	r4,0(r2)
    77ac:	01400034 	movhi	r5,0
    77b0:	295de604 	addi	r5,r5,30616
    77b4:	00082e81 	jmpi	82e8 <_fwalk>

000077b8 <__fp_lock_all>:
    77b8:	00800074 	movhi	r2,1
    77bc:	10981d04 	addi	r2,r2,24692
    77c0:	11000017 	ldw	r4,0(r2)
    77c4:	01400034 	movhi	r5,0
    77c8:	295de404 	addi	r5,r5,30608
    77cc:	00082e81 	jmpi	82e8 <_fwalk>

000077d0 <_cleanup_r>:
    77d0:	01400074 	movhi	r5,1
    77d4:	296abb04 	addi	r5,r5,-21780
    77d8:	00082e81 	jmpi	82e8 <_fwalk>

000077dc <_cleanup>:
    77dc:	00800074 	movhi	r2,1
    77e0:	10981e04 	addi	r2,r2,24696
    77e4:	11000017 	ldw	r4,0(r2)
    77e8:	00077d01 	jmpi	77d0 <_cleanup_r>

000077ec <__sfmoreglue>:
    77ec:	defffc04 	addi	sp,sp,-16
    77f0:	dc400115 	stw	r17,4(sp)
    77f4:	2c401724 	muli	r17,r5,92
    77f8:	dc800215 	stw	r18,8(sp)
    77fc:	2825883a 	mov	r18,r5
    7800:	89400304 	addi	r5,r17,12
    7804:	dc000015 	stw	r16,0(sp)
    7808:	dfc00315 	stw	ra,12(sp)
    780c:	00085f80 	call	85f8 <_malloc_r>
    7810:	0021883a 	mov	r16,zero
    7814:	880d883a 	mov	r6,r17
    7818:	000b883a 	mov	r5,zero
    781c:	10000626 	beq	r2,zero,7838 <__sfmoreglue+0x4c>
    7820:	11000304 	addi	r4,r2,12
    7824:	14800115 	stw	r18,4(r2)
    7828:	10000015 	stw	zero,0(r2)
    782c:	11000215 	stw	r4,8(r2)
    7830:	1021883a 	mov	r16,r2
    7834:	0003b140 	call	3b14 <memset>
    7838:	8005883a 	mov	r2,r16
    783c:	dfc00317 	ldw	ra,12(sp)
    7840:	dc800217 	ldw	r18,8(sp)
    7844:	dc400117 	ldw	r17,4(sp)
    7848:	dc000017 	ldw	r16,0(sp)
    784c:	dec00404 	addi	sp,sp,16
    7850:	f800283a 	ret

00007854 <__sfp>:
    7854:	defffd04 	addi	sp,sp,-12
    7858:	00800074 	movhi	r2,1
    785c:	10981e04 	addi	r2,r2,24696
    7860:	dc000015 	stw	r16,0(sp)
    7864:	14000017 	ldw	r16,0(r2)
    7868:	dc400115 	stw	r17,4(sp)
    786c:	dfc00215 	stw	ra,8(sp)
    7870:	80800e17 	ldw	r2,56(r16)
    7874:	2023883a 	mov	r17,r4
    7878:	10002626 	beq	r2,zero,7914 <__sfp+0xc0>
    787c:	8400b804 	addi	r16,r16,736
    7880:	80800117 	ldw	r2,4(r16)
    7884:	81000217 	ldw	r4,8(r16)
    7888:	10ffffc4 	addi	r3,r2,-1
    788c:	18000916 	blt	r3,zero,78b4 <__sfp+0x60>
    7890:	2080030f 	ldh	r2,12(r4)
    7894:	10000b26 	beq	r2,zero,78c4 <__sfp+0x70>
    7898:	017fffc4 	movi	r5,-1
    789c:	00000206 	br	78a8 <__sfp+0x54>
    78a0:	2080030f 	ldh	r2,12(r4)
    78a4:	10000726 	beq	r2,zero,78c4 <__sfp+0x70>
    78a8:	18ffffc4 	addi	r3,r3,-1
    78ac:	21001704 	addi	r4,r4,92
    78b0:	197ffb1e 	bne	r3,r5,78a0 <__sfp+0x4c>
    78b4:	80800017 	ldw	r2,0(r16)
    78b8:	10001926 	beq	r2,zero,7920 <__sfp+0xcc>
    78bc:	1021883a 	mov	r16,r2
    78c0:	003fef06 	br	7880 <__sfp+0x2c>
    78c4:	00bfffc4 	movi	r2,-1
    78c8:	00c00044 	movi	r3,1
    78cc:	2080038d 	sth	r2,14(r4)
    78d0:	20c0030d 	sth	r3,12(r4)
    78d4:	20000015 	stw	zero,0(r4)
    78d8:	20000215 	stw	zero,8(r4)
    78dc:	20000115 	stw	zero,4(r4)
    78e0:	20000415 	stw	zero,16(r4)
    78e4:	20000515 	stw	zero,20(r4)
    78e8:	20000615 	stw	zero,24(r4)
    78ec:	20000c15 	stw	zero,48(r4)
    78f0:	20000d15 	stw	zero,52(r4)
    78f4:	20001115 	stw	zero,68(r4)
    78f8:	20001215 	stw	zero,72(r4)
    78fc:	2005883a 	mov	r2,r4
    7900:	dfc00217 	ldw	ra,8(sp)
    7904:	dc400117 	ldw	r17,4(sp)
    7908:	dc000017 	ldw	r16,0(sp)
    790c:	dec00304 	addi	sp,sp,12
    7910:	f800283a 	ret
    7914:	8009883a 	mov	r4,r16
    7918:	00076ec0 	call	76ec <__sinit>
    791c:	003fd706 	br	787c <__sfp+0x28>
    7920:	8809883a 	mov	r4,r17
    7924:	01400104 	movi	r5,4
    7928:	00077ec0 	call	77ec <__sfmoreglue>
    792c:	80800015 	stw	r2,0(r16)
    7930:	103fe21e 	bne	r2,zero,78bc <__sfp+0x68>
    7934:	00800304 	movi	r2,12
    7938:	0009883a 	mov	r4,zero
    793c:	88800015 	stw	r2,0(r17)
    7940:	003fee06 	br	78fc <__sfp+0xa8>

00007944 <_malloc_trim_r>:
    7944:	defffb04 	addi	sp,sp,-20
    7948:	dcc00315 	stw	r19,12(sp)
    794c:	04c00074 	movhi	r19,1
    7950:	9cd1ac04 	addi	r19,r19,18096
    7954:	dc800215 	stw	r18,8(sp)
    7958:	dc400115 	stw	r17,4(sp)
    795c:	dc000015 	stw	r16,0(sp)
    7960:	2823883a 	mov	r17,r5
    7964:	2025883a 	mov	r18,r4
    7968:	dfc00415 	stw	ra,16(sp)
    796c:	000d3d00 	call	d3d0 <__malloc_lock>
    7970:	98800217 	ldw	r2,8(r19)
    7974:	9009883a 	mov	r4,r18
    7978:	000b883a 	mov	r5,zero
    797c:	10c00117 	ldw	r3,4(r2)
    7980:	00bfff04 	movi	r2,-4
    7984:	18a0703a 	and	r16,r3,r2
    7988:	8463c83a 	sub	r17,r16,r17
    798c:	8c43fbc4 	addi	r17,r17,4079
    7990:	8822d33a 	srli	r17,r17,12
    7994:	0083ffc4 	movi	r2,4095
    7998:	8c7fffc4 	addi	r17,r17,-1
    799c:	8822933a 	slli	r17,r17,12
    79a0:	1440060e 	bge	r2,r17,79bc <_malloc_trim_r+0x78>
    79a4:	000a5540 	call	a554 <_sbrk_r>
    79a8:	98c00217 	ldw	r3,8(r19)
    79ac:	9009883a 	mov	r4,r18
    79b0:	044bc83a 	sub	r5,zero,r17
    79b4:	80c7883a 	add	r3,r16,r3
    79b8:	10c00926 	beq	r2,r3,79e0 <_malloc_trim_r+0x9c>
    79bc:	000d3f00 	call	d3f0 <__malloc_unlock>
    79c0:	0005883a 	mov	r2,zero
    79c4:	dfc00417 	ldw	ra,16(sp)
    79c8:	dcc00317 	ldw	r19,12(sp)
    79cc:	dc800217 	ldw	r18,8(sp)
    79d0:	dc400117 	ldw	r17,4(sp)
    79d4:	dc000017 	ldw	r16,0(sp)
    79d8:	dec00504 	addi	sp,sp,20
    79dc:	f800283a 	ret
    79e0:	9009883a 	mov	r4,r18
    79e4:	000a5540 	call	a554 <_sbrk_r>
    79e8:	844dc83a 	sub	r6,r16,r17
    79ec:	00ffffc4 	movi	r3,-1
    79f0:	9009883a 	mov	r4,r18
    79f4:	000b883a 	mov	r5,zero
    79f8:	01c000b4 	movhi	r7,2
    79fc:	39e08104 	addi	r7,r7,-32252
    7a00:	31800054 	ori	r6,r6,1
    7a04:	10c00926 	beq	r2,r3,7a2c <_malloc_trim_r+0xe8>
    7a08:	38800017 	ldw	r2,0(r7)
    7a0c:	98c00217 	ldw	r3,8(r19)
    7a10:	9009883a 	mov	r4,r18
    7a14:	1445c83a 	sub	r2,r2,r17
    7a18:	38800015 	stw	r2,0(r7)
    7a1c:	19800115 	stw	r6,4(r3)
    7a20:	000d3f00 	call	d3f0 <__malloc_unlock>
    7a24:	00800044 	movi	r2,1
    7a28:	003fe606 	br	79c4 <_malloc_trim_r+0x80>
    7a2c:	000a5540 	call	a554 <_sbrk_r>
    7a30:	99800217 	ldw	r6,8(r19)
    7a34:	100f883a 	mov	r7,r2
    7a38:	9009883a 	mov	r4,r18
    7a3c:	1187c83a 	sub	r3,r2,r6
    7a40:	008003c4 	movi	r2,15
    7a44:	19400054 	ori	r5,r3,1
    7a48:	10ffdc0e 	bge	r2,r3,79bc <_malloc_trim_r+0x78>
    7a4c:	00800074 	movhi	r2,1
    7a50:	10982204 	addi	r2,r2,24712
    7a54:	10c00017 	ldw	r3,0(r2)
    7a58:	008000b4 	movhi	r2,2
    7a5c:	10a08104 	addi	r2,r2,-32252
    7a60:	31400115 	stw	r5,4(r6)
    7a64:	38c7c83a 	sub	r3,r7,r3
    7a68:	10c00015 	stw	r3,0(r2)
    7a6c:	003fd306 	br	79bc <_malloc_trim_r+0x78>

00007a70 <_free_r>:
    7a70:	defffd04 	addi	sp,sp,-12
    7a74:	dc400115 	stw	r17,4(sp)
    7a78:	dc000015 	stw	r16,0(sp)
    7a7c:	dfc00215 	stw	ra,8(sp)
    7a80:	2821883a 	mov	r16,r5
    7a84:	2023883a 	mov	r17,r4
    7a88:	28005a26 	beq	r5,zero,7bf4 <_free_r+0x184>
    7a8c:	000d3d00 	call	d3d0 <__malloc_lock>
    7a90:	823ffe04 	addi	r8,r16,-8
    7a94:	41400117 	ldw	r5,4(r8)
    7a98:	00bfff84 	movi	r2,-2
    7a9c:	02800074 	movhi	r10,1
    7aa0:	5291ac04 	addi	r10,r10,18096
    7aa4:	288e703a 	and	r7,r5,r2
    7aa8:	41cd883a 	add	r6,r8,r7
    7aac:	30c00117 	ldw	r3,4(r6)
    7ab0:	51000217 	ldw	r4,8(r10)
    7ab4:	00bfff04 	movi	r2,-4
    7ab8:	1892703a 	and	r9,r3,r2
    7abc:	5017883a 	mov	r11,r10
    7ac0:	31006726 	beq	r6,r4,7c60 <_free_r+0x1f0>
    7ac4:	2880004c 	andi	r2,r5,1
    7ac8:	1005003a 	cmpeq	r2,r2,zero
    7acc:	32400115 	stw	r9,4(r6)
    7ad0:	10001a1e 	bne	r2,zero,7b3c <_free_r+0xcc>
    7ad4:	000b883a 	mov	r5,zero
    7ad8:	3247883a 	add	r3,r6,r9
    7adc:	18800117 	ldw	r2,4(r3)
    7ae0:	1080004c 	andi	r2,r2,1
    7ae4:	1000231e 	bne	r2,zero,7b74 <_free_r+0x104>
    7ae8:	280ac03a 	cmpne	r5,r5,zero
    7aec:	3a4f883a 	add	r7,r7,r9
    7af0:	2800451e 	bne	r5,zero,7c08 <_free_r+0x198>
    7af4:	31000217 	ldw	r4,8(r6)
    7af8:	00800074 	movhi	r2,1
    7afc:	1091ae04 	addi	r2,r2,18104
    7b00:	20807b26 	beq	r4,r2,7cf0 <_free_r+0x280>
    7b04:	30800317 	ldw	r2,12(r6)
    7b08:	3a07883a 	add	r3,r7,r8
    7b0c:	19c00015 	stw	r7,0(r3)
    7b10:	11000215 	stw	r4,8(r2)
    7b14:	20800315 	stw	r2,12(r4)
    7b18:	38800054 	ori	r2,r7,1
    7b1c:	40800115 	stw	r2,4(r8)
    7b20:	28001a26 	beq	r5,zero,7b8c <_free_r+0x11c>
    7b24:	8809883a 	mov	r4,r17
    7b28:	dfc00217 	ldw	ra,8(sp)
    7b2c:	dc400117 	ldw	r17,4(sp)
    7b30:	dc000017 	ldw	r16,0(sp)
    7b34:	dec00304 	addi	sp,sp,12
    7b38:	000d3f01 	jmpi	d3f0 <__malloc_unlock>
    7b3c:	80bffe17 	ldw	r2,-8(r16)
    7b40:	50c00204 	addi	r3,r10,8
    7b44:	4091c83a 	sub	r8,r8,r2
    7b48:	41000217 	ldw	r4,8(r8)
    7b4c:	388f883a 	add	r7,r7,r2
    7b50:	20c06126 	beq	r4,r3,7cd8 <_free_r+0x268>
    7b54:	40800317 	ldw	r2,12(r8)
    7b58:	3247883a 	add	r3,r6,r9
    7b5c:	000b883a 	mov	r5,zero
    7b60:	11000215 	stw	r4,8(r2)
    7b64:	20800315 	stw	r2,12(r4)
    7b68:	18800117 	ldw	r2,4(r3)
    7b6c:	1080004c 	andi	r2,r2,1
    7b70:	103fdd26 	beq	r2,zero,7ae8 <_free_r+0x78>
    7b74:	38800054 	ori	r2,r7,1
    7b78:	3a07883a 	add	r3,r7,r8
    7b7c:	280ac03a 	cmpne	r5,r5,zero
    7b80:	40800115 	stw	r2,4(r8)
    7b84:	19c00015 	stw	r7,0(r3)
    7b88:	283fe61e 	bne	r5,zero,7b24 <_free_r+0xb4>
    7b8c:	00807fc4 	movi	r2,511
    7b90:	11c01f2e 	bgeu	r2,r7,7c10 <_free_r+0x1a0>
    7b94:	3806d27a 	srli	r3,r7,9
    7b98:	1800481e 	bne	r3,zero,7cbc <_free_r+0x24c>
    7b9c:	3804d0fa 	srli	r2,r7,3
    7ba0:	100690fa 	slli	r3,r2,3
    7ba4:	1acd883a 	add	r6,r3,r11
    7ba8:	31400217 	ldw	r5,8(r6)
    7bac:	31405926 	beq	r6,r5,7d14 <_free_r+0x2a4>
    7bb0:	28800117 	ldw	r2,4(r5)
    7bb4:	00ffff04 	movi	r3,-4
    7bb8:	10c4703a 	and	r2,r2,r3
    7bbc:	3880022e 	bgeu	r7,r2,7bc8 <_free_r+0x158>
    7bc0:	29400217 	ldw	r5,8(r5)
    7bc4:	317ffa1e 	bne	r6,r5,7bb0 <_free_r+0x140>
    7bc8:	29800317 	ldw	r6,12(r5)
    7bcc:	41800315 	stw	r6,12(r8)
    7bd0:	41400215 	stw	r5,8(r8)
    7bd4:	8809883a 	mov	r4,r17
    7bd8:	2a000315 	stw	r8,12(r5)
    7bdc:	32000215 	stw	r8,8(r6)
    7be0:	dfc00217 	ldw	ra,8(sp)
    7be4:	dc400117 	ldw	r17,4(sp)
    7be8:	dc000017 	ldw	r16,0(sp)
    7bec:	dec00304 	addi	sp,sp,12
    7bf0:	000d3f01 	jmpi	d3f0 <__malloc_unlock>
    7bf4:	dfc00217 	ldw	ra,8(sp)
    7bf8:	dc400117 	ldw	r17,4(sp)
    7bfc:	dc000017 	ldw	r16,0(sp)
    7c00:	dec00304 	addi	sp,sp,12
    7c04:	f800283a 	ret
    7c08:	31000217 	ldw	r4,8(r6)
    7c0c:	003fbd06 	br	7b04 <_free_r+0x94>
    7c10:	3806d0fa 	srli	r3,r7,3
    7c14:	00800044 	movi	r2,1
    7c18:	51400117 	ldw	r5,4(r10)
    7c1c:	180890fa 	slli	r4,r3,3
    7c20:	1807d0ba 	srai	r3,r3,2
    7c24:	22c9883a 	add	r4,r4,r11
    7c28:	21800217 	ldw	r6,8(r4)
    7c2c:	10c4983a 	sll	r2,r2,r3
    7c30:	41000315 	stw	r4,12(r8)
    7c34:	41800215 	stw	r6,8(r8)
    7c38:	288ab03a 	or	r5,r5,r2
    7c3c:	22000215 	stw	r8,8(r4)
    7c40:	8809883a 	mov	r4,r17
    7c44:	51400115 	stw	r5,4(r10)
    7c48:	32000315 	stw	r8,12(r6)
    7c4c:	dfc00217 	ldw	ra,8(sp)
    7c50:	dc400117 	ldw	r17,4(sp)
    7c54:	dc000017 	ldw	r16,0(sp)
    7c58:	dec00304 	addi	sp,sp,12
    7c5c:	000d3f01 	jmpi	d3f0 <__malloc_unlock>
    7c60:	2880004c 	andi	r2,r5,1
    7c64:	3a4d883a 	add	r6,r7,r9
    7c68:	1000071e 	bne	r2,zero,7c88 <_free_r+0x218>
    7c6c:	80bffe17 	ldw	r2,-8(r16)
    7c70:	4091c83a 	sub	r8,r8,r2
    7c74:	41000317 	ldw	r4,12(r8)
    7c78:	40c00217 	ldw	r3,8(r8)
    7c7c:	308d883a 	add	r6,r6,r2
    7c80:	20c00215 	stw	r3,8(r4)
    7c84:	19000315 	stw	r4,12(r3)
    7c88:	00800074 	movhi	r2,1
    7c8c:	10982104 	addi	r2,r2,24708
    7c90:	11000017 	ldw	r4,0(r2)
    7c94:	30c00054 	ori	r3,r6,1
    7c98:	52000215 	stw	r8,8(r10)
    7c9c:	40c00115 	stw	r3,4(r8)
    7ca0:	313fa036 	bltu	r6,r4,7b24 <_free_r+0xb4>
    7ca4:	008000b4 	movhi	r2,2
    7ca8:	10a07504 	addi	r2,r2,-32300
    7cac:	11400017 	ldw	r5,0(r2)
    7cb0:	8809883a 	mov	r4,r17
    7cb4:	00079440 	call	7944 <_malloc_trim_r>
    7cb8:	003f9a06 	br	7b24 <_free_r+0xb4>
    7cbc:	00800104 	movi	r2,4
    7cc0:	10c0072e 	bgeu	r2,r3,7ce0 <_free_r+0x270>
    7cc4:	00800504 	movi	r2,20
    7cc8:	10c01936 	bltu	r2,r3,7d30 <_free_r+0x2c0>
    7ccc:	188016c4 	addi	r2,r3,91
    7cd0:	100690fa 	slli	r3,r2,3
    7cd4:	003fb306 	br	7ba4 <_free_r+0x134>
    7cd8:	01400044 	movi	r5,1
    7cdc:	003f7e06 	br	7ad8 <_free_r+0x68>
    7ce0:	3804d1ba 	srli	r2,r7,6
    7ce4:	10800e04 	addi	r2,r2,56
    7ce8:	100690fa 	slli	r3,r2,3
    7cec:	003fad06 	br	7ba4 <_free_r+0x134>
    7cf0:	22000315 	stw	r8,12(r4)
    7cf4:	22000215 	stw	r8,8(r4)
    7cf8:	3a05883a 	add	r2,r7,r8
    7cfc:	38c00054 	ori	r3,r7,1
    7d00:	11c00015 	stw	r7,0(r2)
    7d04:	41000215 	stw	r4,8(r8)
    7d08:	40c00115 	stw	r3,4(r8)
    7d0c:	41000315 	stw	r4,12(r8)
    7d10:	003f8406 	br	7b24 <_free_r+0xb4>
    7d14:	1005d0ba 	srai	r2,r2,2
    7d18:	00c00044 	movi	r3,1
    7d1c:	51000117 	ldw	r4,4(r10)
    7d20:	1886983a 	sll	r3,r3,r2
    7d24:	20c8b03a 	or	r4,r4,r3
    7d28:	51000115 	stw	r4,4(r10)
    7d2c:	003fa706 	br	7bcc <_free_r+0x15c>
    7d30:	00801504 	movi	r2,84
    7d34:	10c00436 	bltu	r2,r3,7d48 <_free_r+0x2d8>
    7d38:	3804d33a 	srli	r2,r7,12
    7d3c:	10801b84 	addi	r2,r2,110
    7d40:	100690fa 	slli	r3,r2,3
    7d44:	003f9706 	br	7ba4 <_free_r+0x134>
    7d48:	00805504 	movi	r2,340
    7d4c:	10c00436 	bltu	r2,r3,7d60 <_free_r+0x2f0>
    7d50:	3804d3fa 	srli	r2,r7,15
    7d54:	10801dc4 	addi	r2,r2,119
    7d58:	100690fa 	slli	r3,r2,3
    7d5c:	003f9106 	br	7ba4 <_free_r+0x134>
    7d60:	00815504 	movi	r2,1364
    7d64:	10c0032e 	bgeu	r2,r3,7d74 <_free_r+0x304>
    7d68:	00801f84 	movi	r2,126
    7d6c:	00c0fc04 	movi	r3,1008
    7d70:	003f8c06 	br	7ba4 <_free_r+0x134>
    7d74:	3804d4ba 	srli	r2,r7,18
    7d78:	10801f04 	addi	r2,r2,124
    7d7c:	100690fa 	slli	r3,r2,3
    7d80:	003f8806 	br	7ba4 <_free_r+0x134>

00007d84 <__sfvwrite_r>:
    7d84:	30800217 	ldw	r2,8(r6)
    7d88:	defff504 	addi	sp,sp,-44
    7d8c:	df000915 	stw	fp,36(sp)
    7d90:	dd800715 	stw	r22,28(sp)
    7d94:	dc800315 	stw	r18,12(sp)
    7d98:	dfc00a15 	stw	ra,40(sp)
    7d9c:	ddc00815 	stw	r23,32(sp)
    7da0:	dd400615 	stw	r21,24(sp)
    7da4:	dd000515 	stw	r20,20(sp)
    7da8:	dcc00415 	stw	r19,16(sp)
    7dac:	dc400215 	stw	r17,8(sp)
    7db0:	dc000115 	stw	r16,4(sp)
    7db4:	302d883a 	mov	r22,r6
    7db8:	2039883a 	mov	fp,r4
    7dbc:	2825883a 	mov	r18,r5
    7dc0:	10001c26 	beq	r2,zero,7e34 <__sfvwrite_r+0xb0>
    7dc4:	29c0030b 	ldhu	r7,12(r5)
    7dc8:	3880020c 	andi	r2,r7,8
    7dcc:	10002726 	beq	r2,zero,7e6c <__sfvwrite_r+0xe8>
    7dd0:	28800417 	ldw	r2,16(r5)
    7dd4:	10002526 	beq	r2,zero,7e6c <__sfvwrite_r+0xe8>
    7dd8:	3880008c 	andi	r2,r7,2
    7ddc:	b5400017 	ldw	r21,0(r22)
    7de0:	10002826 	beq	r2,zero,7e84 <__sfvwrite_r+0x100>
    7de4:	0021883a 	mov	r16,zero
    7de8:	0023883a 	mov	r17,zero
    7dec:	880d883a 	mov	r6,r17
    7df0:	e009883a 	mov	r4,fp
    7df4:	00810004 	movi	r2,1024
    7df8:	80006e26 	beq	r16,zero,7fb4 <__sfvwrite_r+0x230>
    7dfc:	800f883a 	mov	r7,r16
    7e00:	91400717 	ldw	r5,28(r18)
    7e04:	1400012e 	bgeu	r2,r16,7e0c <__sfvwrite_r+0x88>
    7e08:	100f883a 	mov	r7,r2
    7e0c:	90c00917 	ldw	r3,36(r18)
    7e10:	183ee83a 	callr	r3
    7e14:	1007883a 	mov	r3,r2
    7e18:	80a1c83a 	sub	r16,r16,r2
    7e1c:	88a3883a 	add	r17,r17,r2
    7e20:	00806d0e 	bge	zero,r2,7fd8 <__sfvwrite_r+0x254>
    7e24:	b0800217 	ldw	r2,8(r22)
    7e28:	10c5c83a 	sub	r2,r2,r3
    7e2c:	b0800215 	stw	r2,8(r22)
    7e30:	103fee1e 	bne	r2,zero,7dec <__sfvwrite_r+0x68>
    7e34:	0009883a 	mov	r4,zero
    7e38:	2005883a 	mov	r2,r4
    7e3c:	dfc00a17 	ldw	ra,40(sp)
    7e40:	df000917 	ldw	fp,36(sp)
    7e44:	ddc00817 	ldw	r23,32(sp)
    7e48:	dd800717 	ldw	r22,28(sp)
    7e4c:	dd400617 	ldw	r21,24(sp)
    7e50:	dd000517 	ldw	r20,20(sp)
    7e54:	dcc00417 	ldw	r19,16(sp)
    7e58:	dc800317 	ldw	r18,12(sp)
    7e5c:	dc400217 	ldw	r17,8(sp)
    7e60:	dc000117 	ldw	r16,4(sp)
    7e64:	dec00b04 	addi	sp,sp,44
    7e68:	f800283a 	ret
    7e6c:	0005b4c0 	call	5b4c <__swsetup_r>
    7e70:	1000e41e 	bne	r2,zero,8204 <__sfvwrite_r+0x480>
    7e74:	91c0030b 	ldhu	r7,12(r18)
    7e78:	b5400017 	ldw	r21,0(r22)
    7e7c:	3880008c 	andi	r2,r7,2
    7e80:	103fd81e 	bne	r2,zero,7de4 <__sfvwrite_r+0x60>
    7e84:	3880004c 	andi	r2,r7,1
    7e88:	1005003a 	cmpeq	r2,r2,zero
    7e8c:	10005726 	beq	r2,zero,7fec <__sfvwrite_r+0x268>
    7e90:	0029883a 	mov	r20,zero
    7e94:	002f883a 	mov	r23,zero
    7e98:	a0004226 	beq	r20,zero,7fa4 <__sfvwrite_r+0x220>
    7e9c:	3880800c 	andi	r2,r7,512
    7ea0:	94000217 	ldw	r16,8(r18)
    7ea4:	10008b26 	beq	r2,zero,80d4 <__sfvwrite_r+0x350>
    7ea8:	800d883a 	mov	r6,r16
    7eac:	a400a536 	bltu	r20,r16,8144 <__sfvwrite_r+0x3c0>
    7eb0:	3881200c 	andi	r2,r7,1152
    7eb4:	10002726 	beq	r2,zero,7f54 <__sfvwrite_r+0x1d0>
    7eb8:	90800517 	ldw	r2,20(r18)
    7ebc:	92000417 	ldw	r8,16(r18)
    7ec0:	91400017 	ldw	r5,0(r18)
    7ec4:	1087883a 	add	r3,r2,r2
    7ec8:	1887883a 	add	r3,r3,r2
    7ecc:	1808d7fa 	srli	r4,r3,31
    7ed0:	2a21c83a 	sub	r16,r5,r8
    7ed4:	80800044 	addi	r2,r16,1
    7ed8:	20c9883a 	add	r4,r4,r3
    7edc:	2027d07a 	srai	r19,r4,1
    7ee0:	a085883a 	add	r2,r20,r2
    7ee4:	980d883a 	mov	r6,r19
    7ee8:	9880022e 	bgeu	r19,r2,7ef4 <__sfvwrite_r+0x170>
    7eec:	1027883a 	mov	r19,r2
    7ef0:	100d883a 	mov	r6,r2
    7ef4:	3881000c 	andi	r2,r7,1024
    7ef8:	1000b826 	beq	r2,zero,81dc <__sfvwrite_r+0x458>
    7efc:	300b883a 	mov	r5,r6
    7f00:	e009883a 	mov	r4,fp
    7f04:	00085f80 	call	85f8 <_malloc_r>
    7f08:	10003126 	beq	r2,zero,7fd0 <__sfvwrite_r+0x24c>
    7f0c:	91400417 	ldw	r5,16(r18)
    7f10:	1009883a 	mov	r4,r2
    7f14:	800d883a 	mov	r6,r16
    7f18:	1023883a 	mov	r17,r2
    7f1c:	0003a740 	call	3a74 <memcpy>
    7f20:	90c0030b 	ldhu	r3,12(r18)
    7f24:	00beffc4 	movi	r2,-1025
    7f28:	1886703a 	and	r3,r3,r2
    7f2c:	18c02014 	ori	r3,r3,128
    7f30:	90c0030d 	sth	r3,12(r18)
    7f34:	9c07c83a 	sub	r3,r19,r16
    7f38:	8c05883a 	add	r2,r17,r16
    7f3c:	a00d883a 	mov	r6,r20
    7f40:	a021883a 	mov	r16,r20
    7f44:	90800015 	stw	r2,0(r18)
    7f48:	90c00215 	stw	r3,8(r18)
    7f4c:	94400415 	stw	r17,16(r18)
    7f50:	94c00515 	stw	r19,20(r18)
    7f54:	91000017 	ldw	r4,0(r18)
    7f58:	b80b883a 	mov	r5,r23
    7f5c:	a023883a 	mov	r17,r20
    7f60:	0008e1c0 	call	8e1c <memmove>
    7f64:	90c00217 	ldw	r3,8(r18)
    7f68:	90800017 	ldw	r2,0(r18)
    7f6c:	a027883a 	mov	r19,r20
    7f70:	1c07c83a 	sub	r3,r3,r16
    7f74:	1405883a 	add	r2,r2,r16
    7f78:	90c00215 	stw	r3,8(r18)
    7f7c:	a021883a 	mov	r16,r20
    7f80:	90800015 	stw	r2,0(r18)
    7f84:	b0800217 	ldw	r2,8(r22)
    7f88:	1405c83a 	sub	r2,r2,r16
    7f8c:	b0800215 	stw	r2,8(r22)
    7f90:	103fa826 	beq	r2,zero,7e34 <__sfvwrite_r+0xb0>
    7f94:	a469c83a 	sub	r20,r20,r17
    7f98:	91c0030b 	ldhu	r7,12(r18)
    7f9c:	bcef883a 	add	r23,r23,r19
    7fa0:	a03fbe1e 	bne	r20,zero,7e9c <__sfvwrite_r+0x118>
    7fa4:	adc00017 	ldw	r23,0(r21)
    7fa8:	ad000117 	ldw	r20,4(r21)
    7fac:	ad400204 	addi	r21,r21,8
    7fb0:	003fb906 	br	7e98 <__sfvwrite_r+0x114>
    7fb4:	ac400017 	ldw	r17,0(r21)
    7fb8:	ac000117 	ldw	r16,4(r21)
    7fbc:	ad400204 	addi	r21,r21,8
    7fc0:	003f8a06 	br	7dec <__sfvwrite_r+0x68>
    7fc4:	91400417 	ldw	r5,16(r18)
    7fc8:	e009883a 	mov	r4,fp
    7fcc:	0007a700 	call	7a70 <_free_r>
    7fd0:	00800304 	movi	r2,12
    7fd4:	e0800015 	stw	r2,0(fp)
    7fd8:	9080030b 	ldhu	r2,12(r18)
    7fdc:	013fffc4 	movi	r4,-1
    7fe0:	10801014 	ori	r2,r2,64
    7fe4:	9080030d 	sth	r2,12(r18)
    7fe8:	003f9306 	br	7e38 <__sfvwrite_r+0xb4>
    7fec:	0027883a 	mov	r19,zero
    7ff0:	002f883a 	mov	r23,zero
    7ff4:	d8000015 	stw	zero,0(sp)
    7ff8:	0029883a 	mov	r20,zero
    7ffc:	98001e26 	beq	r19,zero,8078 <__sfvwrite_r+0x2f4>
    8000:	d8c00017 	ldw	r3,0(sp)
    8004:	1804c03a 	cmpne	r2,r3,zero
    8008:	10005e26 	beq	r2,zero,8184 <__sfvwrite_r+0x400>
    800c:	9821883a 	mov	r16,r19
    8010:	a4c0012e 	bgeu	r20,r19,8018 <__sfvwrite_r+0x294>
    8014:	a021883a 	mov	r16,r20
    8018:	91000017 	ldw	r4,0(r18)
    801c:	90800417 	ldw	r2,16(r18)
    8020:	91800217 	ldw	r6,8(r18)
    8024:	91c00517 	ldw	r7,20(r18)
    8028:	1100022e 	bgeu	r2,r4,8034 <__sfvwrite_r+0x2b0>
    802c:	31e3883a 	add	r17,r6,r7
    8030:	8c001616 	blt	r17,r16,808c <__sfvwrite_r+0x308>
    8034:	81c03816 	blt	r16,r7,8118 <__sfvwrite_r+0x394>
    8038:	90c00917 	ldw	r3,36(r18)
    803c:	91400717 	ldw	r5,28(r18)
    8040:	e009883a 	mov	r4,fp
    8044:	b80d883a 	mov	r6,r23
    8048:	183ee83a 	callr	r3
    804c:	1023883a 	mov	r17,r2
    8050:	00bfe10e 	bge	zero,r2,7fd8 <__sfvwrite_r+0x254>
    8054:	a469c83a 	sub	r20,r20,r17
    8058:	a0001826 	beq	r20,zero,80bc <__sfvwrite_r+0x338>
    805c:	b0800217 	ldw	r2,8(r22)
    8060:	1445c83a 	sub	r2,r2,r17
    8064:	b0800215 	stw	r2,8(r22)
    8068:	103f7226 	beq	r2,zero,7e34 <__sfvwrite_r+0xb0>
    806c:	9c67c83a 	sub	r19,r19,r17
    8070:	bc6f883a 	add	r23,r23,r17
    8074:	983fe21e 	bne	r19,zero,8000 <__sfvwrite_r+0x27c>
    8078:	adc00017 	ldw	r23,0(r21)
    807c:	acc00117 	ldw	r19,4(r21)
    8080:	ad400204 	addi	r21,r21,8
    8084:	d8000015 	stw	zero,0(sp)
    8088:	003fdc06 	br	7ffc <__sfvwrite_r+0x278>
    808c:	b80b883a 	mov	r5,r23
    8090:	880d883a 	mov	r6,r17
    8094:	0008e1c0 	call	8e1c <memmove>
    8098:	90c00017 	ldw	r3,0(r18)
    809c:	e009883a 	mov	r4,fp
    80a0:	900b883a 	mov	r5,r18
    80a4:	1c47883a 	add	r3,r3,r17
    80a8:	90c00015 	stw	r3,0(r18)
    80ac:	00074540 	call	7454 <_fflush_r>
    80b0:	103fc91e 	bne	r2,zero,7fd8 <__sfvwrite_r+0x254>
    80b4:	a469c83a 	sub	r20,r20,r17
    80b8:	a03fe81e 	bne	r20,zero,805c <__sfvwrite_r+0x2d8>
    80bc:	e009883a 	mov	r4,fp
    80c0:	900b883a 	mov	r5,r18
    80c4:	00074540 	call	7454 <_fflush_r>
    80c8:	103fc31e 	bne	r2,zero,7fd8 <__sfvwrite_r+0x254>
    80cc:	d8000015 	stw	zero,0(sp)
    80d0:	003fe206 	br	805c <__sfvwrite_r+0x2d8>
    80d4:	91000017 	ldw	r4,0(r18)
    80d8:	90800417 	ldw	r2,16(r18)
    80dc:	1100022e 	bgeu	r2,r4,80e8 <__sfvwrite_r+0x364>
    80e0:	8023883a 	mov	r17,r16
    80e4:	85003136 	bltu	r16,r20,81ac <__sfvwrite_r+0x428>
    80e8:	91c00517 	ldw	r7,20(r18)
    80ec:	a1c01836 	bltu	r20,r7,8150 <__sfvwrite_r+0x3cc>
    80f0:	90c00917 	ldw	r3,36(r18)
    80f4:	91400717 	ldw	r5,28(r18)
    80f8:	e009883a 	mov	r4,fp
    80fc:	b80d883a 	mov	r6,r23
    8100:	183ee83a 	callr	r3
    8104:	1021883a 	mov	r16,r2
    8108:	00bfb30e 	bge	zero,r2,7fd8 <__sfvwrite_r+0x254>
    810c:	1023883a 	mov	r17,r2
    8110:	1027883a 	mov	r19,r2
    8114:	003f9b06 	br	7f84 <__sfvwrite_r+0x200>
    8118:	b80b883a 	mov	r5,r23
    811c:	800d883a 	mov	r6,r16
    8120:	0008e1c0 	call	8e1c <memmove>
    8124:	90c00217 	ldw	r3,8(r18)
    8128:	90800017 	ldw	r2,0(r18)
    812c:	8023883a 	mov	r17,r16
    8130:	1c07c83a 	sub	r3,r3,r16
    8134:	1405883a 	add	r2,r2,r16
    8138:	90c00215 	stw	r3,8(r18)
    813c:	90800015 	stw	r2,0(r18)
    8140:	003fc406 	br	8054 <__sfvwrite_r+0x2d0>
    8144:	a00d883a 	mov	r6,r20
    8148:	a021883a 	mov	r16,r20
    814c:	003f8106 	br	7f54 <__sfvwrite_r+0x1d0>
    8150:	b80b883a 	mov	r5,r23
    8154:	a00d883a 	mov	r6,r20
    8158:	0008e1c0 	call	8e1c <memmove>
    815c:	90c00217 	ldw	r3,8(r18)
    8160:	90800017 	ldw	r2,0(r18)
    8164:	a021883a 	mov	r16,r20
    8168:	1d07c83a 	sub	r3,r3,r20
    816c:	1505883a 	add	r2,r2,r20
    8170:	a023883a 	mov	r17,r20
    8174:	a027883a 	mov	r19,r20
    8178:	90c00215 	stw	r3,8(r18)
    817c:	90800015 	stw	r2,0(r18)
    8180:	003f8006 	br	7f84 <__sfvwrite_r+0x200>
    8184:	b809883a 	mov	r4,r23
    8188:	01400284 	movi	r5,10
    818c:	980d883a 	mov	r6,r19
    8190:	0008d380 	call	8d38 <memchr>
    8194:	10001726 	beq	r2,zero,81f4 <__sfvwrite_r+0x470>
    8198:	15c5c83a 	sub	r2,r2,r23
    819c:	15000044 	addi	r20,r2,1
    81a0:	00800044 	movi	r2,1
    81a4:	d8800015 	stw	r2,0(sp)
    81a8:	003f9806 	br	800c <__sfvwrite_r+0x288>
    81ac:	b80b883a 	mov	r5,r23
    81b0:	800d883a 	mov	r6,r16
    81b4:	0008e1c0 	call	8e1c <memmove>
    81b8:	90c00017 	ldw	r3,0(r18)
    81bc:	e009883a 	mov	r4,fp
    81c0:	900b883a 	mov	r5,r18
    81c4:	1c07883a 	add	r3,r3,r16
    81c8:	90c00015 	stw	r3,0(r18)
    81cc:	8027883a 	mov	r19,r16
    81d0:	00074540 	call	7454 <_fflush_r>
    81d4:	103f6b26 	beq	r2,zero,7f84 <__sfvwrite_r+0x200>
    81d8:	003f7f06 	br	7fd8 <__sfvwrite_r+0x254>
    81dc:	400b883a 	mov	r5,r8
    81e0:	e009883a 	mov	r4,fp
    81e4:	0009ef00 	call	9ef0 <_realloc_r>
    81e8:	103f7626 	beq	r2,zero,7fc4 <__sfvwrite_r+0x240>
    81ec:	1023883a 	mov	r17,r2
    81f0:	003f5006 	br	7f34 <__sfvwrite_r+0x1b0>
    81f4:	00c00044 	movi	r3,1
    81f8:	9d000044 	addi	r20,r19,1
    81fc:	d8c00015 	stw	r3,0(sp)
    8200:	003f8206 	br	800c <__sfvwrite_r+0x288>
    8204:	9080030b 	ldhu	r2,12(r18)
    8208:	00c00244 	movi	r3,9
    820c:	013fffc4 	movi	r4,-1
    8210:	10801014 	ori	r2,r2,64
    8214:	9080030d 	sth	r2,12(r18)
    8218:	e0c00015 	stw	r3,0(fp)
    821c:	003f0606 	br	7e38 <__sfvwrite_r+0xb4>

00008220 <_fwalk_reent>:
    8220:	defff704 	addi	sp,sp,-36
    8224:	dcc00315 	stw	r19,12(sp)
    8228:	24c0b804 	addi	r19,r4,736
    822c:	dd800615 	stw	r22,24(sp)
    8230:	dd400515 	stw	r21,20(sp)
    8234:	dfc00815 	stw	ra,32(sp)
    8238:	ddc00715 	stw	r23,28(sp)
    823c:	dd000415 	stw	r20,16(sp)
    8240:	dc800215 	stw	r18,8(sp)
    8244:	dc400115 	stw	r17,4(sp)
    8248:	dc000015 	stw	r16,0(sp)
    824c:	202b883a 	mov	r21,r4
    8250:	282d883a 	mov	r22,r5
    8254:	00076dc0 	call	76dc <__sfp_lock_acquire>
    8258:	98002126 	beq	r19,zero,82e0 <_fwalk_reent+0xc0>
    825c:	002f883a 	mov	r23,zero
    8260:	9c800117 	ldw	r18,4(r19)
    8264:	9c000217 	ldw	r16,8(r19)
    8268:	90bfffc4 	addi	r2,r18,-1
    826c:	10000d16 	blt	r2,zero,82a4 <_fwalk_reent+0x84>
    8270:	0023883a 	mov	r17,zero
    8274:	053fffc4 	movi	r20,-1
    8278:	8080030f 	ldh	r2,12(r16)
    827c:	8c400044 	addi	r17,r17,1
    8280:	10000626 	beq	r2,zero,829c <_fwalk_reent+0x7c>
    8284:	8080038f 	ldh	r2,14(r16)
    8288:	800b883a 	mov	r5,r16
    828c:	a809883a 	mov	r4,r21
    8290:	15000226 	beq	r2,r20,829c <_fwalk_reent+0x7c>
    8294:	b03ee83a 	callr	r22
    8298:	b8aeb03a 	or	r23,r23,r2
    829c:	84001704 	addi	r16,r16,92
    82a0:	947ff51e 	bne	r18,r17,8278 <_fwalk_reent+0x58>
    82a4:	9cc00017 	ldw	r19,0(r19)
    82a8:	983fed1e 	bne	r19,zero,8260 <_fwalk_reent+0x40>
    82ac:	00076e00 	call	76e0 <__sfp_lock_release>
    82b0:	b805883a 	mov	r2,r23
    82b4:	dfc00817 	ldw	ra,32(sp)
    82b8:	ddc00717 	ldw	r23,28(sp)
    82bc:	dd800617 	ldw	r22,24(sp)
    82c0:	dd400517 	ldw	r21,20(sp)
    82c4:	dd000417 	ldw	r20,16(sp)
    82c8:	dcc00317 	ldw	r19,12(sp)
    82cc:	dc800217 	ldw	r18,8(sp)
    82d0:	dc400117 	ldw	r17,4(sp)
    82d4:	dc000017 	ldw	r16,0(sp)
    82d8:	dec00904 	addi	sp,sp,36
    82dc:	f800283a 	ret
    82e0:	002f883a 	mov	r23,zero
    82e4:	003ff106 	br	82ac <_fwalk_reent+0x8c>

000082e8 <_fwalk>:
    82e8:	defff804 	addi	sp,sp,-32
    82ec:	dcc00315 	stw	r19,12(sp)
    82f0:	24c0b804 	addi	r19,r4,736
    82f4:	dd400515 	stw	r21,20(sp)
    82f8:	dfc00715 	stw	ra,28(sp)
    82fc:	dd800615 	stw	r22,24(sp)
    8300:	dd000415 	stw	r20,16(sp)
    8304:	dc800215 	stw	r18,8(sp)
    8308:	dc400115 	stw	r17,4(sp)
    830c:	dc000015 	stw	r16,0(sp)
    8310:	282b883a 	mov	r21,r5
    8314:	00076dc0 	call	76dc <__sfp_lock_acquire>
    8318:	98001f26 	beq	r19,zero,8398 <_fwalk+0xb0>
    831c:	002d883a 	mov	r22,zero
    8320:	9c800117 	ldw	r18,4(r19)
    8324:	9c000217 	ldw	r16,8(r19)
    8328:	90bfffc4 	addi	r2,r18,-1
    832c:	10000c16 	blt	r2,zero,8360 <_fwalk+0x78>
    8330:	0023883a 	mov	r17,zero
    8334:	053fffc4 	movi	r20,-1
    8338:	8080030f 	ldh	r2,12(r16)
    833c:	8c400044 	addi	r17,r17,1
    8340:	10000526 	beq	r2,zero,8358 <_fwalk+0x70>
    8344:	8080038f 	ldh	r2,14(r16)
    8348:	8009883a 	mov	r4,r16
    834c:	15000226 	beq	r2,r20,8358 <_fwalk+0x70>
    8350:	a83ee83a 	callr	r21
    8354:	b0acb03a 	or	r22,r22,r2
    8358:	84001704 	addi	r16,r16,92
    835c:	947ff61e 	bne	r18,r17,8338 <_fwalk+0x50>
    8360:	9cc00017 	ldw	r19,0(r19)
    8364:	983fee1e 	bne	r19,zero,8320 <_fwalk+0x38>
    8368:	00076e00 	call	76e0 <__sfp_lock_release>
    836c:	b005883a 	mov	r2,r22
    8370:	dfc00717 	ldw	ra,28(sp)
    8374:	dd800617 	ldw	r22,24(sp)
    8378:	dd400517 	ldw	r21,20(sp)
    837c:	dd000417 	ldw	r20,16(sp)
    8380:	dcc00317 	ldw	r19,12(sp)
    8384:	dc800217 	ldw	r18,8(sp)
    8388:	dc400117 	ldw	r17,4(sp)
    838c:	dc000017 	ldw	r16,0(sp)
    8390:	dec00804 	addi	sp,sp,32
    8394:	f800283a 	ret
    8398:	002d883a 	mov	r22,zero
    839c:	003ff206 	br	8368 <_fwalk+0x80>

000083a0 <__locale_charset>:
    83a0:	d0a00317 	ldw	r2,-32756(gp)
    83a4:	f800283a 	ret

000083a8 <_localeconv_r>:
    83a8:	00800074 	movhi	r2,1
    83ac:	108f4204 	addi	r2,r2,15624
    83b0:	f800283a 	ret

000083b4 <localeconv>:
    83b4:	00800074 	movhi	r2,1
    83b8:	10981d04 	addi	r2,r2,24692
    83bc:	11000017 	ldw	r4,0(r2)
    83c0:	00083a81 	jmpi	83a8 <_localeconv_r>

000083c4 <_setlocale_r>:
    83c4:	defffc04 	addi	sp,sp,-16
    83c8:	00c00074 	movhi	r3,1
    83cc:	18cf3d04 	addi	r3,r3,15604
    83d0:	dc800215 	stw	r18,8(sp)
    83d4:	dc400115 	stw	r17,4(sp)
    83d8:	dc000015 	stw	r16,0(sp)
    83dc:	2023883a 	mov	r17,r4
    83e0:	2825883a 	mov	r18,r5
    83e4:	dfc00315 	stw	ra,12(sp)
    83e8:	3021883a 	mov	r16,r6
    83ec:	3009883a 	mov	r4,r6
    83f0:	180b883a 	mov	r5,r3
    83f4:	30000926 	beq	r6,zero,841c <_setlocale_r+0x58>
    83f8:	000a7100 	call	a710 <strcmp>
    83fc:	8009883a 	mov	r4,r16
    8400:	01400074 	movhi	r5,1
    8404:	294f2804 	addi	r5,r5,15520
    8408:	10000b1e 	bne	r2,zero,8438 <_setlocale_r+0x74>
    840c:	8c000d15 	stw	r16,52(r17)
    8410:	8c800c15 	stw	r18,48(r17)
    8414:	00c00074 	movhi	r3,1
    8418:	18cf3d04 	addi	r3,r3,15604
    841c:	1805883a 	mov	r2,r3
    8420:	dfc00317 	ldw	ra,12(sp)
    8424:	dc800217 	ldw	r18,8(sp)
    8428:	dc400117 	ldw	r17,4(sp)
    842c:	dc000017 	ldw	r16,0(sp)
    8430:	dec00404 	addi	sp,sp,16
    8434:	f800283a 	ret
    8438:	000a7100 	call	a710 <strcmp>
    843c:	0007883a 	mov	r3,zero
    8440:	103ff226 	beq	r2,zero,840c <_setlocale_r+0x48>
    8444:	003ff506 	br	841c <_setlocale_r+0x58>

00008448 <setlocale>:
    8448:	01800074 	movhi	r6,1
    844c:	31981d04 	addi	r6,r6,24692
    8450:	2007883a 	mov	r3,r4
    8454:	31000017 	ldw	r4,0(r6)
    8458:	280d883a 	mov	r6,r5
    845c:	180b883a 	mov	r5,r3
    8460:	00083c41 	jmpi	83c4 <_setlocale_r>

00008464 <__smakebuf_r>:
    8464:	2880030b 	ldhu	r2,12(r5)
    8468:	deffed04 	addi	sp,sp,-76
    846c:	dc401015 	stw	r17,64(sp)
    8470:	1080008c 	andi	r2,r2,2
    8474:	dc000f15 	stw	r16,60(sp)
    8478:	dfc01215 	stw	ra,72(sp)
    847c:	dc801115 	stw	r18,68(sp)
    8480:	2821883a 	mov	r16,r5
    8484:	2023883a 	mov	r17,r4
    8488:	10000b26 	beq	r2,zero,84b8 <__smakebuf_r+0x54>
    848c:	28c010c4 	addi	r3,r5,67
    8490:	00800044 	movi	r2,1
    8494:	28800515 	stw	r2,20(r5)
    8498:	28c00415 	stw	r3,16(r5)
    849c:	28c00015 	stw	r3,0(r5)
    84a0:	dfc01217 	ldw	ra,72(sp)
    84a4:	dc801117 	ldw	r18,68(sp)
    84a8:	dc401017 	ldw	r17,64(sp)
    84ac:	dc000f17 	ldw	r16,60(sp)
    84b0:	dec01304 	addi	sp,sp,76
    84b4:	f800283a 	ret
    84b8:	2940038f 	ldh	r5,14(r5)
    84bc:	28002116 	blt	r5,zero,8544 <__smakebuf_r+0xe0>
    84c0:	d80d883a 	mov	r6,sp
    84c4:	000ab000 	call	ab00 <_fstat_r>
    84c8:	10001e16 	blt	r2,zero,8544 <__smakebuf_r+0xe0>
    84cc:	d8800117 	ldw	r2,4(sp)
    84d0:	00e00014 	movui	r3,32768
    84d4:	113c000c 	andi	r4,r2,61440
    84d8:	20c03126 	beq	r4,r3,85a0 <__smakebuf_r+0x13c>
    84dc:	8080030b 	ldhu	r2,12(r16)
    84e0:	00c80004 	movi	r3,8192
    84e4:	10820014 	ori	r2,r2,2048
    84e8:	8080030d 	sth	r2,12(r16)
    84ec:	20c01e26 	beq	r4,r3,8568 <__smakebuf_r+0x104>
    84f0:	04810004 	movi	r18,1024
    84f4:	8809883a 	mov	r4,r17
    84f8:	900b883a 	mov	r5,r18
    84fc:	00085f80 	call	85f8 <_malloc_r>
    8500:	1009883a 	mov	r4,r2
    8504:	10003126 	beq	r2,zero,85cc <__smakebuf_r+0x168>
    8508:	80c0030b 	ldhu	r3,12(r16)
    850c:	00800034 	movhi	r2,0
    8510:	109df404 	addi	r2,r2,30672
    8514:	88800f15 	stw	r2,60(r17)
    8518:	18c02014 	ori	r3,r3,128
    851c:	84800515 	stw	r18,20(r16)
    8520:	80c0030d 	sth	r3,12(r16)
    8524:	81000415 	stw	r4,16(r16)
    8528:	81000015 	stw	r4,0(r16)
    852c:	dfc01217 	ldw	ra,72(sp)
    8530:	dc801117 	ldw	r18,68(sp)
    8534:	dc401017 	ldw	r17,64(sp)
    8538:	dc000f17 	ldw	r16,60(sp)
    853c:	dec01304 	addi	sp,sp,76
    8540:	f800283a 	ret
    8544:	80c0030b 	ldhu	r3,12(r16)
    8548:	1880200c 	andi	r2,r3,128
    854c:	10000426 	beq	r2,zero,8560 <__smakebuf_r+0xfc>
    8550:	04801004 	movi	r18,64
    8554:	18820014 	ori	r2,r3,2048
    8558:	8080030d 	sth	r2,12(r16)
    855c:	003fe506 	br	84f4 <__smakebuf_r+0x90>
    8560:	04810004 	movi	r18,1024
    8564:	003ffb06 	br	8554 <__smakebuf_r+0xf0>
    8568:	8140038f 	ldh	r5,14(r16)
    856c:	8809883a 	mov	r4,r17
    8570:	000ab740 	call	ab74 <_isatty_r>
    8574:	103fde26 	beq	r2,zero,84f0 <__smakebuf_r+0x8c>
    8578:	8080030b 	ldhu	r2,12(r16)
    857c:	80c010c4 	addi	r3,r16,67
    8580:	04810004 	movi	r18,1024
    8584:	10800054 	ori	r2,r2,1
    8588:	8080030d 	sth	r2,12(r16)
    858c:	00800044 	movi	r2,1
    8590:	80c00415 	stw	r3,16(r16)
    8594:	80800515 	stw	r2,20(r16)
    8598:	80c00015 	stw	r3,0(r16)
    859c:	003fd506 	br	84f4 <__smakebuf_r+0x90>
    85a0:	80c00a17 	ldw	r3,40(r16)
    85a4:	00800074 	movhi	r2,1
    85a8:	10a97304 	addi	r2,r2,-23092
    85ac:	18bfcb1e 	bne	r3,r2,84dc <__smakebuf_r+0x78>
    85b0:	8080030b 	ldhu	r2,12(r16)
    85b4:	00c10004 	movi	r3,1024
    85b8:	1825883a 	mov	r18,r3
    85bc:	10c4b03a 	or	r2,r2,r3
    85c0:	8080030d 	sth	r2,12(r16)
    85c4:	80c01315 	stw	r3,76(r16)
    85c8:	003fca06 	br	84f4 <__smakebuf_r+0x90>
    85cc:	8100030b 	ldhu	r4,12(r16)
    85d0:	2080800c 	andi	r2,r4,512
    85d4:	103fb21e 	bne	r2,zero,84a0 <__smakebuf_r+0x3c>
    85d8:	80c010c4 	addi	r3,r16,67
    85dc:	21000094 	ori	r4,r4,2
    85e0:	00800044 	movi	r2,1
    85e4:	80800515 	stw	r2,20(r16)
    85e8:	8100030d 	sth	r4,12(r16)
    85ec:	80c00415 	stw	r3,16(r16)
    85f0:	80c00015 	stw	r3,0(r16)
    85f4:	003faa06 	br	84a0 <__smakebuf_r+0x3c>

000085f8 <_malloc_r>:
    85f8:	defff604 	addi	sp,sp,-40
    85fc:	28c002c4 	addi	r3,r5,11
    8600:	00800584 	movi	r2,22
    8604:	dc800215 	stw	r18,8(sp)
    8608:	dfc00915 	stw	ra,36(sp)
    860c:	df000815 	stw	fp,32(sp)
    8610:	ddc00715 	stw	r23,28(sp)
    8614:	dd800615 	stw	r22,24(sp)
    8618:	dd400515 	stw	r21,20(sp)
    861c:	dd000415 	stw	r20,16(sp)
    8620:	dcc00315 	stw	r19,12(sp)
    8624:	dc400115 	stw	r17,4(sp)
    8628:	dc000015 	stw	r16,0(sp)
    862c:	2025883a 	mov	r18,r4
    8630:	10c01236 	bltu	r2,r3,867c <_malloc_r+0x84>
    8634:	04400404 	movi	r17,16
    8638:	8940142e 	bgeu	r17,r5,868c <_malloc_r+0x94>
    863c:	00800304 	movi	r2,12
    8640:	0007883a 	mov	r3,zero
    8644:	90800015 	stw	r2,0(r18)
    8648:	1805883a 	mov	r2,r3
    864c:	dfc00917 	ldw	ra,36(sp)
    8650:	df000817 	ldw	fp,32(sp)
    8654:	ddc00717 	ldw	r23,28(sp)
    8658:	dd800617 	ldw	r22,24(sp)
    865c:	dd400517 	ldw	r21,20(sp)
    8660:	dd000417 	ldw	r20,16(sp)
    8664:	dcc00317 	ldw	r19,12(sp)
    8668:	dc800217 	ldw	r18,8(sp)
    866c:	dc400117 	ldw	r17,4(sp)
    8670:	dc000017 	ldw	r16,0(sp)
    8674:	dec00a04 	addi	sp,sp,40
    8678:	f800283a 	ret
    867c:	00bffe04 	movi	r2,-8
    8680:	18a2703a 	and	r17,r3,r2
    8684:	883fed16 	blt	r17,zero,863c <_malloc_r+0x44>
    8688:	897fec36 	bltu	r17,r5,863c <_malloc_r+0x44>
    868c:	9009883a 	mov	r4,r18
    8690:	000d3d00 	call	d3d0 <__malloc_lock>
    8694:	00807dc4 	movi	r2,503
    8698:	14402b2e 	bgeu	r2,r17,8748 <_malloc_r+0x150>
    869c:	8806d27a 	srli	r3,r17,9
    86a0:	18003f1e 	bne	r3,zero,87a0 <_malloc_r+0x1a8>
    86a4:	880cd0fa 	srli	r6,r17,3
    86a8:	300490fa 	slli	r2,r6,3
    86ac:	02c00074 	movhi	r11,1
    86b0:	5ad1ac04 	addi	r11,r11,18096
    86b4:	12cb883a 	add	r5,r2,r11
    86b8:	2c000317 	ldw	r16,12(r5)
    86bc:	580f883a 	mov	r7,r11
    86c0:	2c00041e 	bne	r5,r16,86d4 <_malloc_r+0xdc>
    86c4:	00000a06 	br	86f0 <_malloc_r+0xf8>
    86c8:	1800860e 	bge	r3,zero,88e4 <_malloc_r+0x2ec>
    86cc:	84000317 	ldw	r16,12(r16)
    86d0:	2c000726 	beq	r5,r16,86f0 <_malloc_r+0xf8>
    86d4:	80800117 	ldw	r2,4(r16)
    86d8:	00ffff04 	movi	r3,-4
    86dc:	10c8703a 	and	r4,r2,r3
    86e0:	2447c83a 	sub	r3,r4,r17
    86e4:	008003c4 	movi	r2,15
    86e8:	10fff70e 	bge	r2,r3,86c8 <_malloc_r+0xd0>
    86ec:	31bfffc4 	addi	r6,r6,-1
    86f0:	32400044 	addi	r9,r6,1
    86f4:	02800074 	movhi	r10,1
    86f8:	5291ae04 	addi	r10,r10,18104
    86fc:	54000217 	ldw	r16,8(r10)
    8700:	8280a026 	beq	r16,r10,8984 <_malloc_r+0x38c>
    8704:	80800117 	ldw	r2,4(r16)
    8708:	00ffff04 	movi	r3,-4
    870c:	10ca703a 	and	r5,r2,r3
    8710:	2c4dc83a 	sub	r6,r5,r17
    8714:	008003c4 	movi	r2,15
    8718:	11808316 	blt	r2,r6,8928 <_malloc_r+0x330>
    871c:	52800315 	stw	r10,12(r10)
    8720:	52800215 	stw	r10,8(r10)
    8724:	30002916 	blt	r6,zero,87cc <_malloc_r+0x1d4>
    8728:	8147883a 	add	r3,r16,r5
    872c:	18800117 	ldw	r2,4(r3)
    8730:	9009883a 	mov	r4,r18
    8734:	10800054 	ori	r2,r2,1
    8738:	18800115 	stw	r2,4(r3)
    873c:	000d3f00 	call	d3f0 <__malloc_unlock>
    8740:	80c00204 	addi	r3,r16,8
    8744:	003fc006 	br	8648 <_malloc_r+0x50>
    8748:	02c00074 	movhi	r11,1
    874c:	5ad1ac04 	addi	r11,r11,18096
    8750:	8ac5883a 	add	r2,r17,r11
    8754:	14000317 	ldw	r16,12(r2)
    8758:	580f883a 	mov	r7,r11
    875c:	8806d0fa 	srli	r3,r17,3
    8760:	14006c26 	beq	r2,r16,8914 <_malloc_r+0x31c>
    8764:	80c00117 	ldw	r3,4(r16)
    8768:	00bfff04 	movi	r2,-4
    876c:	81800317 	ldw	r6,12(r16)
    8770:	1886703a 	and	r3,r3,r2
    8774:	80c7883a 	add	r3,r16,r3
    8778:	18800117 	ldw	r2,4(r3)
    877c:	81400217 	ldw	r5,8(r16)
    8780:	9009883a 	mov	r4,r18
    8784:	10800054 	ori	r2,r2,1
    8788:	18800115 	stw	r2,4(r3)
    878c:	31400215 	stw	r5,8(r6)
    8790:	29800315 	stw	r6,12(r5)
    8794:	000d3f00 	call	d3f0 <__malloc_unlock>
    8798:	80c00204 	addi	r3,r16,8
    879c:	003faa06 	br	8648 <_malloc_r+0x50>
    87a0:	00800104 	movi	r2,4
    87a4:	10c0052e 	bgeu	r2,r3,87bc <_malloc_r+0x1c4>
    87a8:	00800504 	movi	r2,20
    87ac:	10c07836 	bltu	r2,r3,8990 <_malloc_r+0x398>
    87b0:	198016c4 	addi	r6,r3,91
    87b4:	300490fa 	slli	r2,r6,3
    87b8:	003fbc06 	br	86ac <_malloc_r+0xb4>
    87bc:	8804d1ba 	srli	r2,r17,6
    87c0:	11800e04 	addi	r6,r2,56
    87c4:	300490fa 	slli	r2,r6,3
    87c8:	003fb806 	br	86ac <_malloc_r+0xb4>
    87cc:	00807fc4 	movi	r2,511
    87d0:	1140bb36 	bltu	r2,r5,8ac0 <_malloc_r+0x4c8>
    87d4:	2806d0fa 	srli	r3,r5,3
    87d8:	573ffe04 	addi	fp,r10,-8
    87dc:	00800044 	movi	r2,1
    87e0:	180890fa 	slli	r4,r3,3
    87e4:	1807d0ba 	srai	r3,r3,2
    87e8:	e1c00117 	ldw	r7,4(fp)
    87ec:	5909883a 	add	r4,r11,r4
    87f0:	21400217 	ldw	r5,8(r4)
    87f4:	10c4983a 	sll	r2,r2,r3
    87f8:	81000315 	stw	r4,12(r16)
    87fc:	81400215 	stw	r5,8(r16)
    8800:	388eb03a 	or	r7,r7,r2
    8804:	2c000315 	stw	r16,12(r5)
    8808:	24000215 	stw	r16,8(r4)
    880c:	e1c00115 	stw	r7,4(fp)
    8810:	4807883a 	mov	r3,r9
    8814:	4800cd16 	blt	r9,zero,8b4c <_malloc_r+0x554>
    8818:	1807d0ba 	srai	r3,r3,2
    881c:	00800044 	movi	r2,1
    8820:	10c8983a 	sll	r4,r2,r3
    8824:	39004436 	bltu	r7,r4,8938 <_malloc_r+0x340>
    8828:	21c4703a 	and	r2,r4,r7
    882c:	10000a1e 	bne	r2,zero,8858 <_malloc_r+0x260>
    8830:	2109883a 	add	r4,r4,r4
    8834:	00bfff04 	movi	r2,-4
    8838:	4884703a 	and	r2,r9,r2
    883c:	3906703a 	and	r3,r7,r4
    8840:	12400104 	addi	r9,r2,4
    8844:	1800041e 	bne	r3,zero,8858 <_malloc_r+0x260>
    8848:	2109883a 	add	r4,r4,r4
    884c:	3904703a 	and	r2,r7,r4
    8850:	4a400104 	addi	r9,r9,4
    8854:	103ffc26 	beq	r2,zero,8848 <_malloc_r+0x250>
    8858:	480490fa 	slli	r2,r9,3
    885c:	4819883a 	mov	r12,r9
    8860:	023fff04 	movi	r8,-4
    8864:	589b883a 	add	r13,r11,r2
    8868:	6807883a 	mov	r3,r13
    886c:	014003c4 	movi	r5,15
    8870:	1c000317 	ldw	r16,12(r3)
    8874:	1c00041e 	bne	r3,r16,8888 <_malloc_r+0x290>
    8878:	0000a706 	br	8b18 <_malloc_r+0x520>
    887c:	3000ab0e 	bge	r6,zero,8b2c <_malloc_r+0x534>
    8880:	84000317 	ldw	r16,12(r16)
    8884:	1c00a426 	beq	r3,r16,8b18 <_malloc_r+0x520>
    8888:	80800117 	ldw	r2,4(r16)
    888c:	1204703a 	and	r2,r2,r8
    8890:	144dc83a 	sub	r6,r2,r17
    8894:	29bff90e 	bge	r5,r6,887c <_malloc_r+0x284>
    8898:	81000317 	ldw	r4,12(r16)
    889c:	80c00217 	ldw	r3,8(r16)
    88a0:	89400054 	ori	r5,r17,1
    88a4:	8445883a 	add	r2,r16,r17
    88a8:	20c00215 	stw	r3,8(r4)
    88ac:	19000315 	stw	r4,12(r3)
    88b0:	81400115 	stw	r5,4(r16)
    88b4:	1187883a 	add	r3,r2,r6
    88b8:	31000054 	ori	r4,r6,1
    88bc:	50800315 	stw	r2,12(r10)
    88c0:	50800215 	stw	r2,8(r10)
    88c4:	19800015 	stw	r6,0(r3)
    88c8:	11000115 	stw	r4,4(r2)
    88cc:	12800215 	stw	r10,8(r2)
    88d0:	12800315 	stw	r10,12(r2)
    88d4:	9009883a 	mov	r4,r18
    88d8:	000d3f00 	call	d3f0 <__malloc_unlock>
    88dc:	80c00204 	addi	r3,r16,8
    88e0:	003f5906 	br	8648 <_malloc_r+0x50>
    88e4:	8109883a 	add	r4,r16,r4
    88e8:	20800117 	ldw	r2,4(r4)
    88ec:	80c00217 	ldw	r3,8(r16)
    88f0:	81400317 	ldw	r5,12(r16)
    88f4:	10800054 	ori	r2,r2,1
    88f8:	20800115 	stw	r2,4(r4)
    88fc:	28c00215 	stw	r3,8(r5)
    8900:	19400315 	stw	r5,12(r3)
    8904:	9009883a 	mov	r4,r18
    8908:	000d3f00 	call	d3f0 <__malloc_unlock>
    890c:	80c00204 	addi	r3,r16,8
    8910:	003f4d06 	br	8648 <_malloc_r+0x50>
    8914:	80800204 	addi	r2,r16,8
    8918:	14000317 	ldw	r16,12(r2)
    891c:	143f911e 	bne	r2,r16,8764 <_malloc_r+0x16c>
    8920:	1a400084 	addi	r9,r3,2
    8924:	003f7306 	br	86f4 <_malloc_r+0xfc>
    8928:	88c00054 	ori	r3,r17,1
    892c:	8445883a 	add	r2,r16,r17
    8930:	80c00115 	stw	r3,4(r16)
    8934:	003fdf06 	br	88b4 <_malloc_r+0x2bc>
    8938:	e4000217 	ldw	r16,8(fp)
    893c:	00bfff04 	movi	r2,-4
    8940:	80c00117 	ldw	r3,4(r16)
    8944:	802d883a 	mov	r22,r16
    8948:	18aa703a 	and	r21,r3,r2
    894c:	ac401636 	bltu	r21,r17,89a8 <_malloc_r+0x3b0>
    8950:	ac49c83a 	sub	r4,r21,r17
    8954:	008003c4 	movi	r2,15
    8958:	1100130e 	bge	r2,r4,89a8 <_malloc_r+0x3b0>
    895c:	88800054 	ori	r2,r17,1
    8960:	8447883a 	add	r3,r16,r17
    8964:	80800115 	stw	r2,4(r16)
    8968:	20800054 	ori	r2,r4,1
    896c:	18800115 	stw	r2,4(r3)
    8970:	e0c00215 	stw	r3,8(fp)
    8974:	9009883a 	mov	r4,r18
    8978:	000d3f00 	call	d3f0 <__malloc_unlock>
    897c:	80c00204 	addi	r3,r16,8
    8980:	003f3106 	br	8648 <_malloc_r+0x50>
    8984:	39c00117 	ldw	r7,4(r7)
    8988:	573ffe04 	addi	fp,r10,-8
    898c:	003fa006 	br	8810 <_malloc_r+0x218>
    8990:	00801504 	movi	r2,84
    8994:	10c06736 	bltu	r2,r3,8b34 <_malloc_r+0x53c>
    8998:	8804d33a 	srli	r2,r17,12
    899c:	11801b84 	addi	r6,r2,110
    89a0:	300490fa 	slli	r2,r6,3
    89a4:	003f4106 	br	86ac <_malloc_r+0xb4>
    89a8:	d0a85817 	ldw	r2,-24224(gp)
    89ac:	d0e00517 	ldw	r3,-32748(gp)
    89b0:	053fffc4 	movi	r20,-1
    89b4:	10800404 	addi	r2,r2,16
    89b8:	88a7883a 	add	r19,r17,r2
    89bc:	1d000326 	beq	r3,r20,89cc <_malloc_r+0x3d4>
    89c0:	98c3ffc4 	addi	r3,r19,4095
    89c4:	00bc0004 	movi	r2,-4096
    89c8:	18a6703a 	and	r19,r3,r2
    89cc:	9009883a 	mov	r4,r18
    89d0:	980b883a 	mov	r5,r19
    89d4:	000a5540 	call	a554 <_sbrk_r>
    89d8:	1009883a 	mov	r4,r2
    89dc:	15000426 	beq	r2,r20,89f0 <_malloc_r+0x3f8>
    89e0:	854b883a 	add	r5,r16,r21
    89e4:	1029883a 	mov	r20,r2
    89e8:	11405a2e 	bgeu	r2,r5,8b54 <_malloc_r+0x55c>
    89ec:	87000c26 	beq	r16,fp,8a20 <_malloc_r+0x428>
    89f0:	e4000217 	ldw	r16,8(fp)
    89f4:	80c00117 	ldw	r3,4(r16)
    89f8:	00bfff04 	movi	r2,-4
    89fc:	1884703a 	and	r2,r3,r2
    8a00:	14400336 	bltu	r2,r17,8a10 <_malloc_r+0x418>
    8a04:	1449c83a 	sub	r4,r2,r17
    8a08:	008003c4 	movi	r2,15
    8a0c:	113fd316 	blt	r2,r4,895c <_malloc_r+0x364>
    8a10:	9009883a 	mov	r4,r18
    8a14:	000d3f00 	call	d3f0 <__malloc_unlock>
    8a18:	0007883a 	mov	r3,zero
    8a1c:	003f0a06 	br	8648 <_malloc_r+0x50>
    8a20:	05c000b4 	movhi	r23,2
    8a24:	bde08104 	addi	r23,r23,-32252
    8a28:	b8800017 	ldw	r2,0(r23)
    8a2c:	988d883a 	add	r6,r19,r2
    8a30:	b9800015 	stw	r6,0(r23)
    8a34:	d0e00517 	ldw	r3,-32748(gp)
    8a38:	00bfffc4 	movi	r2,-1
    8a3c:	18808e26 	beq	r3,r2,8c78 <_malloc_r+0x680>
    8a40:	2145c83a 	sub	r2,r4,r5
    8a44:	3085883a 	add	r2,r6,r2
    8a48:	b8800015 	stw	r2,0(r23)
    8a4c:	20c001cc 	andi	r3,r4,7
    8a50:	18005f1e 	bne	r3,zero,8bd0 <_malloc_r+0x5d8>
    8a54:	000b883a 	mov	r5,zero
    8a58:	a4c5883a 	add	r2,r20,r19
    8a5c:	1083ffcc 	andi	r2,r2,4095
    8a60:	00c40004 	movi	r3,4096
    8a64:	1887c83a 	sub	r3,r3,r2
    8a68:	28e7883a 	add	r19,r5,r3
    8a6c:	9009883a 	mov	r4,r18
    8a70:	980b883a 	mov	r5,r19
    8a74:	000a5540 	call	a554 <_sbrk_r>
    8a78:	1007883a 	mov	r3,r2
    8a7c:	00bfffc4 	movi	r2,-1
    8a80:	18807a26 	beq	r3,r2,8c6c <_malloc_r+0x674>
    8a84:	1d05c83a 	sub	r2,r3,r20
    8a88:	9885883a 	add	r2,r19,r2
    8a8c:	10c00054 	ori	r3,r2,1
    8a90:	b8800017 	ldw	r2,0(r23)
    8a94:	a021883a 	mov	r16,r20
    8a98:	a0c00115 	stw	r3,4(r20)
    8a9c:	9885883a 	add	r2,r19,r2
    8aa0:	b8800015 	stw	r2,0(r23)
    8aa4:	e5000215 	stw	r20,8(fp)
    8aa8:	b7003626 	beq	r22,fp,8b84 <_malloc_r+0x58c>
    8aac:	018003c4 	movi	r6,15
    8ab0:	35404b36 	bltu	r6,r21,8be0 <_malloc_r+0x5e8>
    8ab4:	00800044 	movi	r2,1
    8ab8:	a0800115 	stw	r2,4(r20)
    8abc:	003fcd06 	br	89f4 <_malloc_r+0x3fc>
    8ac0:	2808d27a 	srli	r4,r5,9
    8ac4:	2000371e 	bne	r4,zero,8ba4 <_malloc_r+0x5ac>
    8ac8:	2808d0fa 	srli	r4,r5,3
    8acc:	200690fa 	slli	r3,r4,3
    8ad0:	1ad1883a 	add	r8,r3,r11
    8ad4:	41800217 	ldw	r6,8(r8)
    8ad8:	41805b26 	beq	r8,r6,8c48 <_malloc_r+0x650>
    8adc:	30800117 	ldw	r2,4(r6)
    8ae0:	00ffff04 	movi	r3,-4
    8ae4:	10c4703a 	and	r2,r2,r3
    8ae8:	2880022e 	bgeu	r5,r2,8af4 <_malloc_r+0x4fc>
    8aec:	31800217 	ldw	r6,8(r6)
    8af0:	41bffa1e 	bne	r8,r6,8adc <_malloc_r+0x4e4>
    8af4:	32000317 	ldw	r8,12(r6)
    8af8:	39c00117 	ldw	r7,4(r7)
    8afc:	82000315 	stw	r8,12(r16)
    8b00:	81800215 	stw	r6,8(r16)
    8b04:	07000074 	movhi	fp,1
    8b08:	e711ac04 	addi	fp,fp,18096
    8b0c:	34000315 	stw	r16,12(r6)
    8b10:	44000215 	stw	r16,8(r8)
    8b14:	003f3e06 	br	8810 <_malloc_r+0x218>
    8b18:	63000044 	addi	r12,r12,1
    8b1c:	608000cc 	andi	r2,r12,3
    8b20:	10005d26 	beq	r2,zero,8c98 <_malloc_r+0x6a0>
    8b24:	18c00204 	addi	r3,r3,8
    8b28:	003f5106 	br	8870 <_malloc_r+0x278>
    8b2c:	8089883a 	add	r4,r16,r2
    8b30:	003f6d06 	br	88e8 <_malloc_r+0x2f0>
    8b34:	00805504 	movi	r2,340
    8b38:	10c02036 	bltu	r2,r3,8bbc <_malloc_r+0x5c4>
    8b3c:	8804d3fa 	srli	r2,r17,15
    8b40:	11801dc4 	addi	r6,r2,119
    8b44:	300490fa 	slli	r2,r6,3
    8b48:	003ed806 	br	86ac <_malloc_r+0xb4>
    8b4c:	48c000c4 	addi	r3,r9,3
    8b50:	003f3106 	br	8818 <_malloc_r+0x220>
    8b54:	05c000b4 	movhi	r23,2
    8b58:	bde08104 	addi	r23,r23,-32252
    8b5c:	b8800017 	ldw	r2,0(r23)
    8b60:	988d883a 	add	r6,r19,r2
    8b64:	b9800015 	stw	r6,0(r23)
    8b68:	293fb21e 	bne	r5,r4,8a34 <_malloc_r+0x43c>
    8b6c:	2083ffcc 	andi	r2,r4,4095
    8b70:	103fb01e 	bne	r2,zero,8a34 <_malloc_r+0x43c>
    8b74:	e4000217 	ldw	r16,8(fp)
    8b78:	9d45883a 	add	r2,r19,r21
    8b7c:	10800054 	ori	r2,r2,1
    8b80:	80800115 	stw	r2,4(r16)
    8b84:	b8c00017 	ldw	r3,0(r23)
    8b88:	d0a85917 	ldw	r2,-24220(gp)
    8b8c:	10c0012e 	bgeu	r2,r3,8b94 <_malloc_r+0x59c>
    8b90:	d0e85915 	stw	r3,-24220(gp)
    8b94:	d0a85a17 	ldw	r2,-24216(gp)
    8b98:	10ff962e 	bgeu	r2,r3,89f4 <_malloc_r+0x3fc>
    8b9c:	d0e85a15 	stw	r3,-24216(gp)
    8ba0:	003f9406 	br	89f4 <_malloc_r+0x3fc>
    8ba4:	00800104 	movi	r2,4
    8ba8:	11001e36 	bltu	r2,r4,8c24 <_malloc_r+0x62c>
    8bac:	2804d1ba 	srli	r2,r5,6
    8bb0:	11000e04 	addi	r4,r2,56
    8bb4:	200690fa 	slli	r3,r4,3
    8bb8:	003fc506 	br	8ad0 <_malloc_r+0x4d8>
    8bbc:	00815504 	movi	r2,1364
    8bc0:	10c01d2e 	bgeu	r2,r3,8c38 <_malloc_r+0x640>
    8bc4:	01801f84 	movi	r6,126
    8bc8:	0080fc04 	movi	r2,1008
    8bcc:	003eb706 	br	86ac <_malloc_r+0xb4>
    8bd0:	00800204 	movi	r2,8
    8bd4:	10cbc83a 	sub	r5,r2,r3
    8bd8:	2169883a 	add	r20,r4,r5
    8bdc:	003f9e06 	br	8a58 <_malloc_r+0x460>
    8be0:	00bffe04 	movi	r2,-8
    8be4:	a93ffd04 	addi	r4,r21,-12
    8be8:	2088703a 	and	r4,r4,r2
    8bec:	b10b883a 	add	r5,r22,r4
    8bf0:	00c00144 	movi	r3,5
    8bf4:	28c00215 	stw	r3,8(r5)
    8bf8:	28c00115 	stw	r3,4(r5)
    8bfc:	b0800117 	ldw	r2,4(r22)
    8c00:	1080004c 	andi	r2,r2,1
    8c04:	2084b03a 	or	r2,r4,r2
    8c08:	b0800115 	stw	r2,4(r22)
    8c0c:	313fdd2e 	bgeu	r6,r4,8b84 <_malloc_r+0x58c>
    8c10:	b1400204 	addi	r5,r22,8
    8c14:	9009883a 	mov	r4,r18
    8c18:	0007a700 	call	7a70 <_free_r>
    8c1c:	e4000217 	ldw	r16,8(fp)
    8c20:	003fd806 	br	8b84 <_malloc_r+0x58c>
    8c24:	00800504 	movi	r2,20
    8c28:	11001536 	bltu	r2,r4,8c80 <_malloc_r+0x688>
    8c2c:	210016c4 	addi	r4,r4,91
    8c30:	200690fa 	slli	r3,r4,3
    8c34:	003fa606 	br	8ad0 <_malloc_r+0x4d8>
    8c38:	8804d4ba 	srli	r2,r17,18
    8c3c:	11801f04 	addi	r6,r2,124
    8c40:	300490fa 	slli	r2,r6,3
    8c44:	003e9906 	br	86ac <_malloc_r+0xb4>
    8c48:	2009d0ba 	srai	r4,r4,2
    8c4c:	01400074 	movhi	r5,1
    8c50:	2951ac04 	addi	r5,r5,18096
    8c54:	00c00044 	movi	r3,1
    8c58:	28800117 	ldw	r2,4(r5)
    8c5c:	1906983a 	sll	r3,r3,r4
    8c60:	10c4b03a 	or	r2,r2,r3
    8c64:	28800115 	stw	r2,4(r5)
    8c68:	003fa306 	br	8af8 <_malloc_r+0x500>
    8c6c:	0027883a 	mov	r19,zero
    8c70:	00c00044 	movi	r3,1
    8c74:	003f8606 	br	8a90 <_malloc_r+0x498>
    8c78:	d1200515 	stw	r4,-32748(gp)
    8c7c:	003f7306 	br	8a4c <_malloc_r+0x454>
    8c80:	00801504 	movi	r2,84
    8c84:	11001936 	bltu	r2,r4,8cec <_malloc_r+0x6f4>
    8c88:	2804d33a 	srli	r2,r5,12
    8c8c:	11001b84 	addi	r4,r2,110
    8c90:	200690fa 	slli	r3,r4,3
    8c94:	003f8e06 	br	8ad0 <_malloc_r+0x4d8>
    8c98:	480b883a 	mov	r5,r9
    8c9c:	6807883a 	mov	r3,r13
    8ca0:	288000cc 	andi	r2,r5,3
    8ca4:	18fffe04 	addi	r3,r3,-8
    8ca8:	297fffc4 	addi	r5,r5,-1
    8cac:	10001526 	beq	r2,zero,8d04 <_malloc_r+0x70c>
    8cb0:	18800217 	ldw	r2,8(r3)
    8cb4:	10fffa26 	beq	r2,r3,8ca0 <_malloc_r+0x6a8>
    8cb8:	2109883a 	add	r4,r4,r4
    8cbc:	393f1e36 	bltu	r7,r4,8938 <_malloc_r+0x340>
    8cc0:	203f1d26 	beq	r4,zero,8938 <_malloc_r+0x340>
    8cc4:	21c4703a 	and	r2,r4,r7
    8cc8:	10000226 	beq	r2,zero,8cd4 <_malloc_r+0x6dc>
    8ccc:	6013883a 	mov	r9,r12
    8cd0:	003ee106 	br	8858 <_malloc_r+0x260>
    8cd4:	2109883a 	add	r4,r4,r4
    8cd8:	3904703a 	and	r2,r7,r4
    8cdc:	63000104 	addi	r12,r12,4
    8ce0:	103ffc26 	beq	r2,zero,8cd4 <_malloc_r+0x6dc>
    8ce4:	6013883a 	mov	r9,r12
    8ce8:	003edb06 	br	8858 <_malloc_r+0x260>
    8cec:	00805504 	movi	r2,340
    8cf0:	11000836 	bltu	r2,r4,8d14 <_malloc_r+0x71c>
    8cf4:	2804d3fa 	srli	r2,r5,15
    8cf8:	11001dc4 	addi	r4,r2,119
    8cfc:	200690fa 	slli	r3,r4,3
    8d00:	003f7306 	br	8ad0 <_malloc_r+0x4d8>
    8d04:	0104303a 	nor	r2,zero,r4
    8d08:	388e703a 	and	r7,r7,r2
    8d0c:	e1c00115 	stw	r7,4(fp)
    8d10:	003fe906 	br	8cb8 <_malloc_r+0x6c0>
    8d14:	00815504 	movi	r2,1364
    8d18:	1100032e 	bgeu	r2,r4,8d28 <_malloc_r+0x730>
    8d1c:	01001f84 	movi	r4,126
    8d20:	00c0fc04 	movi	r3,1008
    8d24:	003f6a06 	br	8ad0 <_malloc_r+0x4d8>
    8d28:	2804d4ba 	srli	r2,r5,18
    8d2c:	11001f04 	addi	r4,r2,124
    8d30:	200690fa 	slli	r3,r4,3
    8d34:	003f6606 	br	8ad0 <_malloc_r+0x4d8>

00008d38 <memchr>:
    8d38:	008000c4 	movi	r2,3
    8d3c:	29403fcc 	andi	r5,r5,255
    8d40:	2007883a 	mov	r3,r4
    8d44:	1180022e 	bgeu	r2,r6,8d50 <memchr+0x18>
    8d48:	2084703a 	and	r2,r4,r2
    8d4c:	10000b26 	beq	r2,zero,8d7c <memchr+0x44>
    8d50:	313fffc4 	addi	r4,r6,-1
    8d54:	3000051e 	bne	r6,zero,8d6c <memchr+0x34>
    8d58:	00002c06 	br	8e0c <memchr+0xd4>
    8d5c:	213fffc4 	addi	r4,r4,-1
    8d60:	00bfffc4 	movi	r2,-1
    8d64:	18c00044 	addi	r3,r3,1
    8d68:	20802826 	beq	r4,r2,8e0c <memchr+0xd4>
    8d6c:	18800003 	ldbu	r2,0(r3)
    8d70:	28bffa1e 	bne	r5,r2,8d5c <memchr+0x24>
    8d74:	1805883a 	mov	r2,r3
    8d78:	f800283a 	ret
    8d7c:	0011883a 	mov	r8,zero
    8d80:	0007883a 	mov	r3,zero
    8d84:	01c00104 	movi	r7,4
    8d88:	4004923a 	slli	r2,r8,8
    8d8c:	18c00044 	addi	r3,r3,1
    8d90:	1151883a 	add	r8,r2,r5
    8d94:	19fffc1e 	bne	r3,r7,8d88 <memchr+0x50>
    8d98:	02bfbff4 	movhi	r10,65279
    8d9c:	52bfbfc4 	addi	r10,r10,-257
    8da0:	02602074 	movhi	r9,32897
    8da4:	4a602004 	addi	r9,r9,-32640
    8da8:	02c000c4 	movi	r11,3
    8dac:	20800017 	ldw	r2,0(r4)
    8db0:	31bfff04 	addi	r6,r6,-4
    8db4:	200f883a 	mov	r7,r4
    8db8:	1204f03a 	xor	r2,r2,r8
    8dbc:	1287883a 	add	r3,r2,r10
    8dc0:	1a46703a 	and	r3,r3,r9
    8dc4:	0084303a 	nor	r2,zero,r2
    8dc8:	10c4703a 	and	r2,r2,r3
    8dcc:	10000b26 	beq	r2,zero,8dfc <memchr+0xc4>
    8dd0:	20800003 	ldbu	r2,0(r4)
    8dd4:	28800f26 	beq	r5,r2,8e14 <memchr+0xdc>
    8dd8:	20800043 	ldbu	r2,1(r4)
    8ddc:	21c00044 	addi	r7,r4,1
    8de0:	28800c26 	beq	r5,r2,8e14 <memchr+0xdc>
    8de4:	20800083 	ldbu	r2,2(r4)
    8de8:	21c00084 	addi	r7,r4,2
    8dec:	28800926 	beq	r5,r2,8e14 <memchr+0xdc>
    8df0:	208000c3 	ldbu	r2,3(r4)
    8df4:	21c000c4 	addi	r7,r4,3
    8df8:	28800626 	beq	r5,r2,8e14 <memchr+0xdc>
    8dfc:	21000104 	addi	r4,r4,4
    8e00:	59bfea36 	bltu	r11,r6,8dac <memchr+0x74>
    8e04:	2007883a 	mov	r3,r4
    8e08:	003fd106 	br	8d50 <memchr+0x18>
    8e0c:	0005883a 	mov	r2,zero
    8e10:	f800283a 	ret
    8e14:	3805883a 	mov	r2,r7
    8e18:	f800283a 	ret

00008e1c <memmove>:
    8e1c:	2807883a 	mov	r3,r5
    8e20:	2011883a 	mov	r8,r4
    8e24:	29000c2e 	bgeu	r5,r4,8e58 <memmove+0x3c>
    8e28:	298f883a 	add	r7,r5,r6
    8e2c:	21c00a2e 	bgeu	r4,r7,8e58 <memmove+0x3c>
    8e30:	30000726 	beq	r6,zero,8e50 <memmove+0x34>
    8e34:	2187883a 	add	r3,r4,r6
    8e38:	198dc83a 	sub	r6,r3,r6
    8e3c:	39ffffc4 	addi	r7,r7,-1
    8e40:	38800003 	ldbu	r2,0(r7)
    8e44:	18ffffc4 	addi	r3,r3,-1
    8e48:	18800005 	stb	r2,0(r3)
    8e4c:	19bffb1e 	bne	r3,r6,8e3c <memmove+0x20>
    8e50:	2005883a 	mov	r2,r4
    8e54:	f800283a 	ret
    8e58:	01c003c4 	movi	r7,15
    8e5c:	39800a36 	bltu	r7,r6,8e88 <memmove+0x6c>
    8e60:	303ffb26 	beq	r6,zero,8e50 <memmove+0x34>
    8e64:	400f883a 	mov	r7,r8
    8e68:	320d883a 	add	r6,r6,r8
    8e6c:	28800003 	ldbu	r2,0(r5)
    8e70:	29400044 	addi	r5,r5,1
    8e74:	38800005 	stb	r2,0(r7)
    8e78:	39c00044 	addi	r7,r7,1
    8e7c:	39bffb1e 	bne	r7,r6,8e6c <memmove+0x50>
    8e80:	2005883a 	mov	r2,r4
    8e84:	f800283a 	ret
    8e88:	1904b03a 	or	r2,r3,r4
    8e8c:	108000cc 	andi	r2,r2,3
    8e90:	103ff31e 	bne	r2,zero,8e60 <memmove+0x44>
    8e94:	3811883a 	mov	r8,r7
    8e98:	180b883a 	mov	r5,r3
    8e9c:	200f883a 	mov	r7,r4
    8ea0:	28c00017 	ldw	r3,0(r5)
    8ea4:	31bffc04 	addi	r6,r6,-16
    8ea8:	38c00015 	stw	r3,0(r7)
    8eac:	28800117 	ldw	r2,4(r5)
    8eb0:	38800115 	stw	r2,4(r7)
    8eb4:	28c00217 	ldw	r3,8(r5)
    8eb8:	38c00215 	stw	r3,8(r7)
    8ebc:	28800317 	ldw	r2,12(r5)
    8ec0:	29400404 	addi	r5,r5,16
    8ec4:	38800315 	stw	r2,12(r7)
    8ec8:	39c00404 	addi	r7,r7,16
    8ecc:	41bff436 	bltu	r8,r6,8ea0 <memmove+0x84>
    8ed0:	008000c4 	movi	r2,3
    8ed4:	1180072e 	bgeu	r2,r6,8ef4 <memmove+0xd8>
    8ed8:	1007883a 	mov	r3,r2
    8edc:	28800017 	ldw	r2,0(r5)
    8ee0:	31bfff04 	addi	r6,r6,-4
    8ee4:	29400104 	addi	r5,r5,4
    8ee8:	38800015 	stw	r2,0(r7)
    8eec:	39c00104 	addi	r7,r7,4
    8ef0:	19bffa36 	bltu	r3,r6,8edc <memmove+0xc0>
    8ef4:	3811883a 	mov	r8,r7
    8ef8:	003fd906 	br	8e60 <memmove+0x44>

00008efc <_Bfree>:
    8efc:	28000826 	beq	r5,zero,8f20 <_Bfree+0x24>
    8f00:	28800117 	ldw	r2,4(r5)
    8f04:	21001317 	ldw	r4,76(r4)
    8f08:	1085883a 	add	r2,r2,r2
    8f0c:	1085883a 	add	r2,r2,r2
    8f10:	1105883a 	add	r2,r2,r4
    8f14:	10c00017 	ldw	r3,0(r2)
    8f18:	28c00015 	stw	r3,0(r5)
    8f1c:	11400015 	stw	r5,0(r2)
    8f20:	f800283a 	ret

00008f24 <__hi0bits>:
    8f24:	20bfffec 	andhi	r2,r4,65535
    8f28:	10001426 	beq	r2,zero,8f7c <__hi0bits+0x58>
    8f2c:	0007883a 	mov	r3,zero
    8f30:	20bfc02c 	andhi	r2,r4,65280
    8f34:	1000021e 	bne	r2,zero,8f40 <__hi0bits+0x1c>
    8f38:	2008923a 	slli	r4,r4,8
    8f3c:	18c00204 	addi	r3,r3,8
    8f40:	20bc002c 	andhi	r2,r4,61440
    8f44:	1000021e 	bne	r2,zero,8f50 <__hi0bits+0x2c>
    8f48:	2008913a 	slli	r4,r4,4
    8f4c:	18c00104 	addi	r3,r3,4
    8f50:	20b0002c 	andhi	r2,r4,49152
    8f54:	1000031e 	bne	r2,zero,8f64 <__hi0bits+0x40>
    8f58:	2105883a 	add	r2,r4,r4
    8f5c:	18c00084 	addi	r3,r3,2
    8f60:	1089883a 	add	r4,r2,r2
    8f64:	20000316 	blt	r4,zero,8f74 <__hi0bits+0x50>
    8f68:	2090002c 	andhi	r2,r4,16384
    8f6c:	10000626 	beq	r2,zero,8f88 <__hi0bits+0x64>
    8f70:	18c00044 	addi	r3,r3,1
    8f74:	1805883a 	mov	r2,r3
    8f78:	f800283a 	ret
    8f7c:	2008943a 	slli	r4,r4,16
    8f80:	00c00404 	movi	r3,16
    8f84:	003fea06 	br	8f30 <__hi0bits+0xc>
    8f88:	00c00804 	movi	r3,32
    8f8c:	1805883a 	mov	r2,r3
    8f90:	f800283a 	ret

00008f94 <__lo0bits>:
    8f94:	20c00017 	ldw	r3,0(r4)
    8f98:	188001cc 	andi	r2,r3,7
    8f9c:	10000a26 	beq	r2,zero,8fc8 <__lo0bits+0x34>
    8fa0:	1880004c 	andi	r2,r3,1
    8fa4:	1005003a 	cmpeq	r2,r2,zero
    8fa8:	10002126 	beq	r2,zero,9030 <__lo0bits+0x9c>
    8fac:	1880008c 	andi	r2,r3,2
    8fb0:	1000251e 	bne	r2,zero,9048 <__lo0bits+0xb4>
    8fb4:	1804d0ba 	srli	r2,r3,2
    8fb8:	01400084 	movi	r5,2
    8fbc:	20800015 	stw	r2,0(r4)
    8fc0:	2805883a 	mov	r2,r5
    8fc4:	f800283a 	ret
    8fc8:	18bfffcc 	andi	r2,r3,65535
    8fcc:	10001526 	beq	r2,zero,9024 <__lo0bits+0x90>
    8fd0:	000b883a 	mov	r5,zero
    8fd4:	18803fcc 	andi	r2,r3,255
    8fd8:	1000021e 	bne	r2,zero,8fe4 <__lo0bits+0x50>
    8fdc:	1806d23a 	srli	r3,r3,8
    8fe0:	29400204 	addi	r5,r5,8
    8fe4:	188003cc 	andi	r2,r3,15
    8fe8:	1000021e 	bne	r2,zero,8ff4 <__lo0bits+0x60>
    8fec:	1806d13a 	srli	r3,r3,4
    8ff0:	29400104 	addi	r5,r5,4
    8ff4:	188000cc 	andi	r2,r3,3
    8ff8:	1000021e 	bne	r2,zero,9004 <__lo0bits+0x70>
    8ffc:	1806d0ba 	srli	r3,r3,2
    9000:	29400084 	addi	r5,r5,2
    9004:	1880004c 	andi	r2,r3,1
    9008:	1000031e 	bne	r2,zero,9018 <__lo0bits+0x84>
    900c:	1806d07a 	srli	r3,r3,1
    9010:	18000a26 	beq	r3,zero,903c <__lo0bits+0xa8>
    9014:	29400044 	addi	r5,r5,1
    9018:	2805883a 	mov	r2,r5
    901c:	20c00015 	stw	r3,0(r4)
    9020:	f800283a 	ret
    9024:	1806d43a 	srli	r3,r3,16
    9028:	01400404 	movi	r5,16
    902c:	003fe906 	br	8fd4 <__lo0bits+0x40>
    9030:	000b883a 	mov	r5,zero
    9034:	2805883a 	mov	r2,r5
    9038:	f800283a 	ret
    903c:	01400804 	movi	r5,32
    9040:	2805883a 	mov	r2,r5
    9044:	f800283a 	ret
    9048:	1804d07a 	srli	r2,r3,1
    904c:	01400044 	movi	r5,1
    9050:	20800015 	stw	r2,0(r4)
    9054:	003fda06 	br	8fc0 <__lo0bits+0x2c>

00009058 <__mcmp>:
    9058:	20800417 	ldw	r2,16(r4)
    905c:	28c00417 	ldw	r3,16(r5)
    9060:	10cfc83a 	sub	r7,r2,r3
    9064:	38000c1e 	bne	r7,zero,9098 <__mcmp+0x40>
    9068:	18c5883a 	add	r2,r3,r3
    906c:	1085883a 	add	r2,r2,r2
    9070:	10c00504 	addi	r3,r2,20
    9074:	21000504 	addi	r4,r4,20
    9078:	28cb883a 	add	r5,r5,r3
    907c:	2085883a 	add	r2,r4,r2
    9080:	10bfff04 	addi	r2,r2,-4
    9084:	297fff04 	addi	r5,r5,-4
    9088:	11800017 	ldw	r6,0(r2)
    908c:	28c00017 	ldw	r3,0(r5)
    9090:	30c0031e 	bne	r6,r3,90a0 <__mcmp+0x48>
    9094:	20bffa36 	bltu	r4,r2,9080 <__mcmp+0x28>
    9098:	3805883a 	mov	r2,r7
    909c:	f800283a 	ret
    90a0:	30c00336 	bltu	r6,r3,90b0 <__mcmp+0x58>
    90a4:	01c00044 	movi	r7,1
    90a8:	3805883a 	mov	r2,r7
    90ac:	f800283a 	ret
    90b0:	01ffffc4 	movi	r7,-1
    90b4:	003ff806 	br	9098 <__mcmp+0x40>

000090b8 <__ulp>:
    90b8:	295ffc2c 	andhi	r5,r5,32752
    90bc:	013f3034 	movhi	r4,64704
    90c0:	290b883a 	add	r5,r5,r4
    90c4:	0145c83a 	sub	r2,zero,r5
    90c8:	1007d53a 	srai	r3,r2,20
    90cc:	000d883a 	mov	r6,zero
    90d0:	0140040e 	bge	zero,r5,90e4 <__ulp+0x2c>
    90d4:	280f883a 	mov	r7,r5
    90d8:	3807883a 	mov	r3,r7
    90dc:	3005883a 	mov	r2,r6
    90e0:	f800283a 	ret
    90e4:	008004c4 	movi	r2,19
    90e8:	193ffb04 	addi	r4,r3,-20
    90ec:	10c00c0e 	bge	r2,r3,9120 <__ulp+0x68>
    90f0:	008007c4 	movi	r2,31
    90f4:	1107c83a 	sub	r3,r2,r4
    90f8:	00800784 	movi	r2,30
    90fc:	01400044 	movi	r5,1
    9100:	11000216 	blt	r2,r4,910c <__ulp+0x54>
    9104:	00800044 	movi	r2,1
    9108:	10ca983a 	sll	r5,r2,r3
    910c:	000f883a 	mov	r7,zero
    9110:	280d883a 	mov	r6,r5
    9114:	3807883a 	mov	r3,r7
    9118:	3005883a 	mov	r2,r6
    911c:	f800283a 	ret
    9120:	00800234 	movhi	r2,8
    9124:	10cfd83a 	sra	r7,r2,r3
    9128:	000d883a 	mov	r6,zero
    912c:	3005883a 	mov	r2,r6
    9130:	3807883a 	mov	r3,r7
    9134:	f800283a 	ret

00009138 <__b2d>:
    9138:	20800417 	ldw	r2,16(r4)
    913c:	defff904 	addi	sp,sp,-28
    9140:	dd000415 	stw	r20,16(sp)
    9144:	1085883a 	add	r2,r2,r2
    9148:	25000504 	addi	r20,r4,20
    914c:	1085883a 	add	r2,r2,r2
    9150:	dc000015 	stw	r16,0(sp)
    9154:	a0a1883a 	add	r16,r20,r2
    9158:	dd400515 	stw	r21,20(sp)
    915c:	857fff17 	ldw	r21,-4(r16)
    9160:	dc400115 	stw	r17,4(sp)
    9164:	dfc00615 	stw	ra,24(sp)
    9168:	a809883a 	mov	r4,r21
    916c:	2823883a 	mov	r17,r5
    9170:	dcc00315 	stw	r19,12(sp)
    9174:	dc800215 	stw	r18,8(sp)
    9178:	0008f240 	call	8f24 <__hi0bits>
    917c:	100b883a 	mov	r5,r2
    9180:	00800804 	movi	r2,32
    9184:	1145c83a 	sub	r2,r2,r5
    9188:	88800015 	stw	r2,0(r17)
    918c:	00800284 	movi	r2,10
    9190:	80ffff04 	addi	r3,r16,-4
    9194:	11401416 	blt	r2,r5,91e8 <__b2d+0xb0>
    9198:	008002c4 	movi	r2,11
    919c:	1149c83a 	sub	r4,r2,r5
    91a0:	a0c02736 	bltu	r20,r3,9240 <__b2d+0x108>
    91a4:	000d883a 	mov	r6,zero
    91a8:	28800544 	addi	r2,r5,21
    91ac:	a906d83a 	srl	r3,r21,r4
    91b0:	a884983a 	sll	r2,r21,r2
    91b4:	1ccffc34 	orhi	r19,r3,16368
    91b8:	11a4b03a 	or	r18,r2,r6
    91bc:	9005883a 	mov	r2,r18
    91c0:	9807883a 	mov	r3,r19
    91c4:	dfc00617 	ldw	ra,24(sp)
    91c8:	dd400517 	ldw	r21,20(sp)
    91cc:	dd000417 	ldw	r20,16(sp)
    91d0:	dcc00317 	ldw	r19,12(sp)
    91d4:	dc800217 	ldw	r18,8(sp)
    91d8:	dc400117 	ldw	r17,4(sp)
    91dc:	dc000017 	ldw	r16,0(sp)
    91e0:	dec00704 	addi	sp,sp,28
    91e4:	f800283a 	ret
    91e8:	a0c00e36 	bltu	r20,r3,9224 <__b2d+0xec>
    91ec:	293ffd44 	addi	r4,r5,-11
    91f0:	000d883a 	mov	r6,zero
    91f4:	20000f26 	beq	r4,zero,9234 <__b2d+0xfc>
    91f8:	00800804 	movi	r2,32
    91fc:	110bc83a 	sub	r5,r2,r4
    9200:	a0c01236 	bltu	r20,r3,924c <__b2d+0x114>
    9204:	000f883a 	mov	r7,zero
    9208:	a904983a 	sll	r2,r21,r4
    920c:	3146d83a 	srl	r3,r6,r5
    9210:	3108983a 	sll	r4,r6,r4
    9214:	108ffc34 	orhi	r2,r2,16368
    9218:	18a6b03a 	or	r19,r3,r2
    921c:	3924b03a 	or	r18,r7,r4
    9220:	003fe606 	br	91bc <__b2d+0x84>
    9224:	293ffd44 	addi	r4,r5,-11
    9228:	81bffe17 	ldw	r6,-8(r16)
    922c:	80fffe04 	addi	r3,r16,-8
    9230:	203ff11e 	bne	r4,zero,91f8 <__b2d+0xc0>
    9234:	accffc34 	orhi	r19,r21,16368
    9238:	3025883a 	mov	r18,r6
    923c:	003fdf06 	br	91bc <__b2d+0x84>
    9240:	18bfff17 	ldw	r2,-4(r3)
    9244:	110cd83a 	srl	r6,r2,r4
    9248:	003fd706 	br	91a8 <__b2d+0x70>
    924c:	18bfff17 	ldw	r2,-4(r3)
    9250:	114ed83a 	srl	r7,r2,r5
    9254:	003fec06 	br	9208 <__b2d+0xd0>

00009258 <__ratio>:
    9258:	defff904 	addi	sp,sp,-28
    925c:	dc400215 	stw	r17,8(sp)
    9260:	2823883a 	mov	r17,r5
    9264:	d80b883a 	mov	r5,sp
    9268:	dfc00615 	stw	ra,24(sp)
    926c:	dd000515 	stw	r20,20(sp)
    9270:	dcc00415 	stw	r19,16(sp)
    9274:	dc800315 	stw	r18,12(sp)
    9278:	2025883a 	mov	r18,r4
    927c:	00091380 	call	9138 <__b2d>
    9280:	8809883a 	mov	r4,r17
    9284:	d9400104 	addi	r5,sp,4
    9288:	1027883a 	mov	r19,r2
    928c:	1829883a 	mov	r20,r3
    9290:	00091380 	call	9138 <__b2d>
    9294:	89000417 	ldw	r4,16(r17)
    9298:	91c00417 	ldw	r7,16(r18)
    929c:	d9800117 	ldw	r6,4(sp)
    92a0:	180b883a 	mov	r5,r3
    92a4:	390fc83a 	sub	r7,r7,r4
    92a8:	1009883a 	mov	r4,r2
    92ac:	d8800017 	ldw	r2,0(sp)
    92b0:	380e917a 	slli	r7,r7,5
    92b4:	2011883a 	mov	r8,r4
    92b8:	1185c83a 	sub	r2,r2,r6
    92bc:	11c5883a 	add	r2,r2,r7
    92c0:	1006953a 	slli	r3,r2,20
    92c4:	2813883a 	mov	r9,r5
    92c8:	00800d0e 	bge	zero,r2,9300 <__ratio+0xa8>
    92cc:	1d29883a 	add	r20,r3,r20
    92d0:	a00b883a 	mov	r5,r20
    92d4:	480f883a 	mov	r7,r9
    92d8:	9809883a 	mov	r4,r19
    92dc:	400d883a 	mov	r6,r8
    92e0:	000c1280 	call	c128 <__divdf3>
    92e4:	dfc00617 	ldw	ra,24(sp)
    92e8:	dd000517 	ldw	r20,20(sp)
    92ec:	dcc00417 	ldw	r19,16(sp)
    92f0:	dc800317 	ldw	r18,12(sp)
    92f4:	dc400217 	ldw	r17,8(sp)
    92f8:	dec00704 	addi	sp,sp,28
    92fc:	f800283a 	ret
    9300:	28d3c83a 	sub	r9,r5,r3
    9304:	003ff206 	br	92d0 <__ratio+0x78>

00009308 <_mprec_log10>:
    9308:	defffe04 	addi	sp,sp,-8
    930c:	008005c4 	movi	r2,23
    9310:	dc000015 	stw	r16,0(sp)
    9314:	dfc00115 	stw	ra,4(sp)
    9318:	2021883a 	mov	r16,r4
    931c:	11000c16 	blt	r2,r4,9350 <_mprec_log10+0x48>
    9320:	200490fa 	slli	r2,r4,3
    9324:	00c00074 	movhi	r3,1
    9328:	18cf4e04 	addi	r3,r3,15672
    932c:	10c5883a 	add	r2,r2,r3
    9330:	12400117 	ldw	r9,4(r2)
    9334:	12000017 	ldw	r8,0(r2)
    9338:	4807883a 	mov	r3,r9
    933c:	4005883a 	mov	r2,r8
    9340:	dfc00117 	ldw	ra,4(sp)
    9344:	dc000017 	ldw	r16,0(sp)
    9348:	dec00204 	addi	sp,sp,8
    934c:	f800283a 	ret
    9350:	0011883a 	mov	r8,zero
    9354:	024ffc34 	movhi	r9,16368
    9358:	0005883a 	mov	r2,zero
    935c:	00d00934 	movhi	r3,16420
    9360:	480b883a 	mov	r5,r9
    9364:	4009883a 	mov	r4,r8
    9368:	180f883a 	mov	r7,r3
    936c:	100d883a 	mov	r6,r2
    9370:	000bd640 	call	bd64 <__muldf3>
    9374:	843fffc4 	addi	r16,r16,-1
    9378:	1011883a 	mov	r8,r2
    937c:	1813883a 	mov	r9,r3
    9380:	803ff51e 	bne	r16,zero,9358 <_mprec_log10+0x50>
    9384:	4005883a 	mov	r2,r8
    9388:	4807883a 	mov	r3,r9
    938c:	dfc00117 	ldw	ra,4(sp)
    9390:	dc000017 	ldw	r16,0(sp)
    9394:	dec00204 	addi	sp,sp,8
    9398:	f800283a 	ret

0000939c <__copybits>:
    939c:	297fffc4 	addi	r5,r5,-1
    93a0:	30800417 	ldw	r2,16(r6)
    93a4:	280bd17a 	srai	r5,r5,5
    93a8:	31800504 	addi	r6,r6,20
    93ac:	1085883a 	add	r2,r2,r2
    93b0:	294b883a 	add	r5,r5,r5
    93b4:	294b883a 	add	r5,r5,r5
    93b8:	1085883a 	add	r2,r2,r2
    93bc:	290b883a 	add	r5,r5,r4
    93c0:	3087883a 	add	r3,r6,r2
    93c4:	29400104 	addi	r5,r5,4
    93c8:	30c0052e 	bgeu	r6,r3,93e0 <__copybits+0x44>
    93cc:	30800017 	ldw	r2,0(r6)
    93d0:	31800104 	addi	r6,r6,4
    93d4:	20800015 	stw	r2,0(r4)
    93d8:	21000104 	addi	r4,r4,4
    93dc:	30fffb36 	bltu	r6,r3,93cc <__copybits+0x30>
    93e0:	2140032e 	bgeu	r4,r5,93f0 <__copybits+0x54>
    93e4:	20000015 	stw	zero,0(r4)
    93e8:	21000104 	addi	r4,r4,4
    93ec:	217ffd36 	bltu	r4,r5,93e4 <__copybits+0x48>
    93f0:	f800283a 	ret

000093f4 <__any_on>:
    93f4:	20800417 	ldw	r2,16(r4)
    93f8:	2807d17a 	srai	r3,r5,5
    93fc:	21000504 	addi	r4,r4,20
    9400:	10c00d0e 	bge	r2,r3,9438 <__any_on+0x44>
    9404:	1085883a 	add	r2,r2,r2
    9408:	1085883a 	add	r2,r2,r2
    940c:	208d883a 	add	r6,r4,r2
    9410:	2180182e 	bgeu	r4,r6,9474 <__any_on+0x80>
    9414:	30bfff17 	ldw	r2,-4(r6)
    9418:	30ffff04 	addi	r3,r6,-4
    941c:	1000041e 	bne	r2,zero,9430 <__any_on+0x3c>
    9420:	20c0142e 	bgeu	r4,r3,9474 <__any_on+0x80>
    9424:	18ffff04 	addi	r3,r3,-4
    9428:	18800017 	ldw	r2,0(r3)
    942c:	103ffc26 	beq	r2,zero,9420 <__any_on+0x2c>
    9430:	00800044 	movi	r2,1
    9434:	f800283a 	ret
    9438:	18800a0e 	bge	r3,r2,9464 <__any_on+0x70>
    943c:	294007cc 	andi	r5,r5,31
    9440:	28000826 	beq	r5,zero,9464 <__any_on+0x70>
    9444:	18c5883a 	add	r2,r3,r3
    9448:	1085883a 	add	r2,r2,r2
    944c:	208d883a 	add	r6,r4,r2
    9450:	30c00017 	ldw	r3,0(r6)
    9454:	1944d83a 	srl	r2,r3,r5
    9458:	1144983a 	sll	r2,r2,r5
    945c:	18bff41e 	bne	r3,r2,9430 <__any_on+0x3c>
    9460:	003feb06 	br	9410 <__any_on+0x1c>
    9464:	18c5883a 	add	r2,r3,r3
    9468:	1085883a 	add	r2,r2,r2
    946c:	208d883a 	add	r6,r4,r2
    9470:	003fe706 	br	9410 <__any_on+0x1c>
    9474:	0005883a 	mov	r2,zero
    9478:	f800283a 	ret

0000947c <_Balloc>:
    947c:	20c01317 	ldw	r3,76(r4)
    9480:	defffb04 	addi	sp,sp,-20
    9484:	dcc00315 	stw	r19,12(sp)
    9488:	dc800215 	stw	r18,8(sp)
    948c:	dfc00415 	stw	ra,16(sp)
    9490:	2825883a 	mov	r18,r5
    9494:	dc400115 	stw	r17,4(sp)
    9498:	dc000015 	stw	r16,0(sp)
    949c:	2027883a 	mov	r19,r4
    94a0:	01800404 	movi	r6,16
    94a4:	01400104 	movi	r5,4
    94a8:	18001726 	beq	r3,zero,9508 <_Balloc+0x8c>
    94ac:	01400044 	movi	r5,1
    94b0:	9485883a 	add	r2,r18,r18
    94b4:	2ca2983a 	sll	r17,r5,r18
    94b8:	1085883a 	add	r2,r2,r2
    94bc:	10c7883a 	add	r3,r2,r3
    94c0:	1c000017 	ldw	r16,0(r3)
    94c4:	8c4d883a 	add	r6,r17,r17
    94c8:	318d883a 	add	r6,r6,r6
    94cc:	9809883a 	mov	r4,r19
    94d0:	31800504 	addi	r6,r6,20
    94d4:	80001226 	beq	r16,zero,9520 <_Balloc+0xa4>
    94d8:	80800017 	ldw	r2,0(r16)
    94dc:	18800015 	stw	r2,0(r3)
    94e0:	80000415 	stw	zero,16(r16)
    94e4:	80000315 	stw	zero,12(r16)
    94e8:	8005883a 	mov	r2,r16
    94ec:	dfc00417 	ldw	ra,16(sp)
    94f0:	dcc00317 	ldw	r19,12(sp)
    94f4:	dc800217 	ldw	r18,8(sp)
    94f8:	dc400117 	ldw	r17,4(sp)
    94fc:	dc000017 	ldw	r16,0(sp)
    9500:	dec00504 	addi	sp,sp,20
    9504:	f800283a 	ret
    9508:	000a8b80 	call	a8b8 <_calloc_r>
    950c:	1007883a 	mov	r3,r2
    9510:	0021883a 	mov	r16,zero
    9514:	98801315 	stw	r2,76(r19)
    9518:	103fe41e 	bne	r2,zero,94ac <_Balloc+0x30>
    951c:	003ff206 	br	94e8 <_Balloc+0x6c>
    9520:	000a8b80 	call	a8b8 <_calloc_r>
    9524:	103ff026 	beq	r2,zero,94e8 <_Balloc+0x6c>
    9528:	1021883a 	mov	r16,r2
    952c:	14800115 	stw	r18,4(r2)
    9530:	14400215 	stw	r17,8(r2)
    9534:	003fea06 	br	94e0 <_Balloc+0x64>

00009538 <__d2b>:
    9538:	defff504 	addi	sp,sp,-44
    953c:	dcc00515 	stw	r19,20(sp)
    9540:	04c00044 	movi	r19,1
    9544:	dc000215 	stw	r16,8(sp)
    9548:	2821883a 	mov	r16,r5
    954c:	980b883a 	mov	r5,r19
    9550:	ddc00915 	stw	r23,36(sp)
    9554:	dd800815 	stw	r22,32(sp)
    9558:	dd400715 	stw	r21,28(sp)
    955c:	dd000615 	stw	r20,24(sp)
    9560:	dc800415 	stw	r18,16(sp)
    9564:	dc400315 	stw	r17,12(sp)
    9568:	dfc00a15 	stw	ra,40(sp)
    956c:	3023883a 	mov	r17,r6
    9570:	382d883a 	mov	r22,r7
    9574:	ddc00b17 	ldw	r23,44(sp)
    9578:	000947c0 	call	947c <_Balloc>
    957c:	1025883a 	mov	r18,r2
    9580:	00a00034 	movhi	r2,32768
    9584:	10bfffc4 	addi	r2,r2,-1
    9588:	8888703a 	and	r4,r17,r2
    958c:	202ad53a 	srli	r21,r4,20
    9590:	00800434 	movhi	r2,16
    9594:	10bfffc4 	addi	r2,r2,-1
    9598:	8886703a 	and	r3,r17,r2
    959c:	a829003a 	cmpeq	r20,r21,zero
    95a0:	800b883a 	mov	r5,r16
    95a4:	d8c00115 	stw	r3,4(sp)
    95a8:	94000504 	addi	r16,r18,20
    95ac:	a000021e 	bne	r20,zero,95b8 <__d2b+0x80>
    95b0:	18c00434 	orhi	r3,r3,16
    95b4:	d8c00115 	stw	r3,4(sp)
    95b8:	28002726 	beq	r5,zero,9658 <__d2b+0x120>
    95bc:	d809883a 	mov	r4,sp
    95c0:	d9400015 	stw	r5,0(sp)
    95c4:	0008f940 	call	8f94 <__lo0bits>
    95c8:	100d883a 	mov	r6,r2
    95cc:	10003526 	beq	r2,zero,96a4 <__d2b+0x16c>
    95d0:	d8c00117 	ldw	r3,4(sp)
    95d4:	00800804 	movi	r2,32
    95d8:	1185c83a 	sub	r2,r2,r6
    95dc:	d9000017 	ldw	r4,0(sp)
    95e0:	1886983a 	sll	r3,r3,r2
    95e4:	1906b03a 	or	r3,r3,r4
    95e8:	90c00515 	stw	r3,20(r18)
    95ec:	d8c00117 	ldw	r3,4(sp)
    95f0:	1986d83a 	srl	r3,r3,r6
    95f4:	d8c00115 	stw	r3,4(sp)
    95f8:	180b003a 	cmpeq	r5,r3,zero
    95fc:	00800084 	movi	r2,2
    9600:	114bc83a 	sub	r5,r2,r5
    9604:	80c00115 	stw	r3,4(r16)
    9608:	91400415 	stw	r5,16(r18)
    960c:	a0001a1e 	bne	r20,zero,9678 <__d2b+0x140>
    9610:	3545883a 	add	r2,r6,r21
    9614:	10bef344 	addi	r2,r2,-1075
    9618:	00c00d44 	movi	r3,53
    961c:	b0800015 	stw	r2,0(r22)
    9620:	1987c83a 	sub	r3,r3,r6
    9624:	b8c00015 	stw	r3,0(r23)
    9628:	9005883a 	mov	r2,r18
    962c:	dfc00a17 	ldw	ra,40(sp)
    9630:	ddc00917 	ldw	r23,36(sp)
    9634:	dd800817 	ldw	r22,32(sp)
    9638:	dd400717 	ldw	r21,28(sp)
    963c:	dd000617 	ldw	r20,24(sp)
    9640:	dcc00517 	ldw	r19,20(sp)
    9644:	dc800417 	ldw	r18,16(sp)
    9648:	dc400317 	ldw	r17,12(sp)
    964c:	dc000217 	ldw	r16,8(sp)
    9650:	dec00b04 	addi	sp,sp,44
    9654:	f800283a 	ret
    9658:	d9000104 	addi	r4,sp,4
    965c:	0008f940 	call	8f94 <__lo0bits>
    9660:	11800804 	addi	r6,r2,32
    9664:	d8800117 	ldw	r2,4(sp)
    9668:	94c00415 	stw	r19,16(r18)
    966c:	980b883a 	mov	r5,r19
    9670:	90800515 	stw	r2,20(r18)
    9674:	a03fe626 	beq	r20,zero,9610 <__d2b+0xd8>
    9678:	2945883a 	add	r2,r5,r5
    967c:	1085883a 	add	r2,r2,r2
    9680:	1405883a 	add	r2,r2,r16
    9684:	113fff17 	ldw	r4,-4(r2)
    9688:	30fef384 	addi	r3,r6,-1074
    968c:	2820917a 	slli	r16,r5,5
    9690:	b0c00015 	stw	r3,0(r22)
    9694:	0008f240 	call	8f24 <__hi0bits>
    9698:	80a1c83a 	sub	r16,r16,r2
    969c:	bc000015 	stw	r16,0(r23)
    96a0:	003fe106 	br	9628 <__d2b+0xf0>
    96a4:	d8800017 	ldw	r2,0(sp)
    96a8:	90800515 	stw	r2,20(r18)
    96ac:	d8c00117 	ldw	r3,4(sp)
    96b0:	003fd106 	br	95f8 <__d2b+0xc0>

000096b4 <__mdiff>:
    96b4:	defffb04 	addi	sp,sp,-20
    96b8:	dc000015 	stw	r16,0(sp)
    96bc:	2821883a 	mov	r16,r5
    96c0:	dc800215 	stw	r18,8(sp)
    96c4:	300b883a 	mov	r5,r6
    96c8:	2025883a 	mov	r18,r4
    96cc:	8009883a 	mov	r4,r16
    96d0:	dc400115 	stw	r17,4(sp)
    96d4:	dfc00415 	stw	ra,16(sp)
    96d8:	dcc00315 	stw	r19,12(sp)
    96dc:	3023883a 	mov	r17,r6
    96e0:	00090580 	call	9058 <__mcmp>
    96e4:	10004226 	beq	r2,zero,97f0 <__mdiff+0x13c>
    96e8:	10005016 	blt	r2,zero,982c <__mdiff+0x178>
    96ec:	0027883a 	mov	r19,zero
    96f0:	81400117 	ldw	r5,4(r16)
    96f4:	9009883a 	mov	r4,r18
    96f8:	000947c0 	call	947c <_Balloc>
    96fc:	1019883a 	mov	r12,r2
    9700:	82800417 	ldw	r10,16(r16)
    9704:	88800417 	ldw	r2,16(r17)
    9708:	81800504 	addi	r6,r16,20
    970c:	5287883a 	add	r3,r10,r10
    9710:	1085883a 	add	r2,r2,r2
    9714:	18c7883a 	add	r3,r3,r3
    9718:	1085883a 	add	r2,r2,r2
    971c:	8a000504 	addi	r8,r17,20
    9720:	64c00315 	stw	r19,12(r12)
    9724:	30db883a 	add	r13,r6,r3
    9728:	4097883a 	add	r11,r8,r2
    972c:	61c00504 	addi	r7,r12,20
    9730:	0013883a 	mov	r9,zero
    9734:	31000017 	ldw	r4,0(r6)
    9738:	41400017 	ldw	r5,0(r8)
    973c:	42000104 	addi	r8,r8,4
    9740:	20bfffcc 	andi	r2,r4,65535
    9744:	28ffffcc 	andi	r3,r5,65535
    9748:	10c5c83a 	sub	r2,r2,r3
    974c:	1245883a 	add	r2,r2,r9
    9750:	2008d43a 	srli	r4,r4,16
    9754:	280ad43a 	srli	r5,r5,16
    9758:	1007d43a 	srai	r3,r2,16
    975c:	3880000d 	sth	r2,0(r7)
    9760:	2149c83a 	sub	r4,r4,r5
    9764:	20c9883a 	add	r4,r4,r3
    9768:	3900008d 	sth	r4,2(r7)
    976c:	31800104 	addi	r6,r6,4
    9770:	39c00104 	addi	r7,r7,4
    9774:	2013d43a 	srai	r9,r4,16
    9778:	42ffee36 	bltu	r8,r11,9734 <__mdiff+0x80>
    977c:	33400c2e 	bgeu	r6,r13,97b0 <__mdiff+0xfc>
    9780:	30800017 	ldw	r2,0(r6)
    9784:	31800104 	addi	r6,r6,4
    9788:	10ffffcc 	andi	r3,r2,65535
    978c:	1a47883a 	add	r3,r3,r9
    9790:	1004d43a 	srli	r2,r2,16
    9794:	1809d43a 	srai	r4,r3,16
    9798:	38c0000d 	sth	r3,0(r7)
    979c:	1105883a 	add	r2,r2,r4
    97a0:	3880008d 	sth	r2,2(r7)
    97a4:	1013d43a 	srai	r9,r2,16
    97a8:	39c00104 	addi	r7,r7,4
    97ac:	337ff436 	bltu	r6,r13,9780 <__mdiff+0xcc>
    97b0:	38bfff17 	ldw	r2,-4(r7)
    97b4:	38ffff04 	addi	r3,r7,-4
    97b8:	1000041e 	bne	r2,zero,97cc <__mdiff+0x118>
    97bc:	18ffff04 	addi	r3,r3,-4
    97c0:	18800017 	ldw	r2,0(r3)
    97c4:	52bfffc4 	addi	r10,r10,-1
    97c8:	103ffc26 	beq	r2,zero,97bc <__mdiff+0x108>
    97cc:	6005883a 	mov	r2,r12
    97d0:	62800415 	stw	r10,16(r12)
    97d4:	dfc00417 	ldw	ra,16(sp)
    97d8:	dcc00317 	ldw	r19,12(sp)
    97dc:	dc800217 	ldw	r18,8(sp)
    97e0:	dc400117 	ldw	r17,4(sp)
    97e4:	dc000017 	ldw	r16,0(sp)
    97e8:	dec00504 	addi	sp,sp,20
    97ec:	f800283a 	ret
    97f0:	9009883a 	mov	r4,r18
    97f4:	000b883a 	mov	r5,zero
    97f8:	000947c0 	call	947c <_Balloc>
    97fc:	1019883a 	mov	r12,r2
    9800:	00800044 	movi	r2,1
    9804:	60800415 	stw	r2,16(r12)
    9808:	6005883a 	mov	r2,r12
    980c:	60000515 	stw	zero,20(r12)
    9810:	dfc00417 	ldw	ra,16(sp)
    9814:	dcc00317 	ldw	r19,12(sp)
    9818:	dc800217 	ldw	r18,8(sp)
    981c:	dc400117 	ldw	r17,4(sp)
    9820:	dc000017 	ldw	r16,0(sp)
    9824:	dec00504 	addi	sp,sp,20
    9828:	f800283a 	ret
    982c:	880d883a 	mov	r6,r17
    9830:	04c00044 	movi	r19,1
    9834:	8023883a 	mov	r17,r16
    9838:	3021883a 	mov	r16,r6
    983c:	003fac06 	br	96f0 <__mdiff+0x3c>

00009840 <__lshift>:
    9840:	defff904 	addi	sp,sp,-28
    9844:	28800417 	ldw	r2,16(r5)
    9848:	dc000015 	stw	r16,0(sp)
    984c:	3021d17a 	srai	r16,r6,5
    9850:	28c00217 	ldw	r3,8(r5)
    9854:	10800044 	addi	r2,r2,1
    9858:	dc400115 	stw	r17,4(sp)
    985c:	80a3883a 	add	r17,r16,r2
    9860:	dd400515 	stw	r21,20(sp)
    9864:	dd000415 	stw	r20,16(sp)
    9868:	dc800215 	stw	r18,8(sp)
    986c:	dfc00615 	stw	ra,24(sp)
    9870:	2825883a 	mov	r18,r5
    9874:	dcc00315 	stw	r19,12(sp)
    9878:	3029883a 	mov	r20,r6
    987c:	202b883a 	mov	r21,r4
    9880:	29400117 	ldw	r5,4(r5)
    9884:	1c40030e 	bge	r3,r17,9894 <__lshift+0x54>
    9888:	18c7883a 	add	r3,r3,r3
    988c:	29400044 	addi	r5,r5,1
    9890:	1c7ffd16 	blt	r3,r17,9888 <__lshift+0x48>
    9894:	a809883a 	mov	r4,r21
    9898:	000947c0 	call	947c <_Balloc>
    989c:	1027883a 	mov	r19,r2
    98a0:	11400504 	addi	r5,r2,20
    98a4:	0400090e 	bge	zero,r16,98cc <__lshift+0x8c>
    98a8:	2805883a 	mov	r2,r5
    98ac:	0007883a 	mov	r3,zero
    98b0:	18c00044 	addi	r3,r3,1
    98b4:	10000015 	stw	zero,0(r2)
    98b8:	10800104 	addi	r2,r2,4
    98bc:	80fffc1e 	bne	r16,r3,98b0 <__lshift+0x70>
    98c0:	8405883a 	add	r2,r16,r16
    98c4:	1085883a 	add	r2,r2,r2
    98c8:	288b883a 	add	r5,r5,r2
    98cc:	90800417 	ldw	r2,16(r18)
    98d0:	91000504 	addi	r4,r18,20
    98d4:	a18007cc 	andi	r6,r20,31
    98d8:	1085883a 	add	r2,r2,r2
    98dc:	1085883a 	add	r2,r2,r2
    98e0:	208f883a 	add	r7,r4,r2
    98e4:	30001e26 	beq	r6,zero,9960 <__lshift+0x120>
    98e8:	00800804 	movi	r2,32
    98ec:	1191c83a 	sub	r8,r2,r6
    98f0:	0007883a 	mov	r3,zero
    98f4:	20800017 	ldw	r2,0(r4)
    98f8:	1184983a 	sll	r2,r2,r6
    98fc:	1884b03a 	or	r2,r3,r2
    9900:	28800015 	stw	r2,0(r5)
    9904:	20c00017 	ldw	r3,0(r4)
    9908:	21000104 	addi	r4,r4,4
    990c:	29400104 	addi	r5,r5,4
    9910:	1a06d83a 	srl	r3,r3,r8
    9914:	21fff736 	bltu	r4,r7,98f4 <__lshift+0xb4>
    9918:	28c00015 	stw	r3,0(r5)
    991c:	18000126 	beq	r3,zero,9924 <__lshift+0xe4>
    9920:	8c400044 	addi	r17,r17,1
    9924:	88bfffc4 	addi	r2,r17,-1
    9928:	98800415 	stw	r2,16(r19)
    992c:	a809883a 	mov	r4,r21
    9930:	900b883a 	mov	r5,r18
    9934:	0008efc0 	call	8efc <_Bfree>
    9938:	9805883a 	mov	r2,r19
    993c:	dfc00617 	ldw	ra,24(sp)
    9940:	dd400517 	ldw	r21,20(sp)
    9944:	dd000417 	ldw	r20,16(sp)
    9948:	dcc00317 	ldw	r19,12(sp)
    994c:	dc800217 	ldw	r18,8(sp)
    9950:	dc400117 	ldw	r17,4(sp)
    9954:	dc000017 	ldw	r16,0(sp)
    9958:	dec00704 	addi	sp,sp,28
    995c:	f800283a 	ret
    9960:	20800017 	ldw	r2,0(r4)
    9964:	21000104 	addi	r4,r4,4
    9968:	28800015 	stw	r2,0(r5)
    996c:	29400104 	addi	r5,r5,4
    9970:	21ffec2e 	bgeu	r4,r7,9924 <__lshift+0xe4>
    9974:	20800017 	ldw	r2,0(r4)
    9978:	21000104 	addi	r4,r4,4
    997c:	28800015 	stw	r2,0(r5)
    9980:	29400104 	addi	r5,r5,4
    9984:	21fff636 	bltu	r4,r7,9960 <__lshift+0x120>
    9988:	003fe606 	br	9924 <__lshift+0xe4>

0000998c <__multiply>:
    998c:	defff904 	addi	sp,sp,-28
    9990:	dcc00315 	stw	r19,12(sp)
    9994:	dc800215 	stw	r18,8(sp)
    9998:	2cc00417 	ldw	r19,16(r5)
    999c:	34800417 	ldw	r18,16(r6)
    99a0:	dd000415 	stw	r20,16(sp)
    99a4:	dc400115 	stw	r17,4(sp)
    99a8:	dfc00615 	stw	ra,24(sp)
    99ac:	dd400515 	stw	r21,20(sp)
    99b0:	dc000015 	stw	r16,0(sp)
    99b4:	2823883a 	mov	r17,r5
    99b8:	3029883a 	mov	r20,r6
    99bc:	9c80040e 	bge	r19,r18,99d0 <__multiply+0x44>
    99c0:	9027883a 	mov	r19,r18
    99c4:	2c800417 	ldw	r18,16(r5)
    99c8:	2829883a 	mov	r20,r5
    99cc:	3023883a 	mov	r17,r6
    99d0:	88800217 	ldw	r2,8(r17)
    99d4:	9ca1883a 	add	r16,r19,r18
    99d8:	89400117 	ldw	r5,4(r17)
    99dc:	1400010e 	bge	r2,r16,99e4 <__multiply+0x58>
    99e0:	29400044 	addi	r5,r5,1
    99e4:	000947c0 	call	947c <_Balloc>
    99e8:	102b883a 	mov	r21,r2
    99ec:	8405883a 	add	r2,r16,r16
    99f0:	1085883a 	add	r2,r2,r2
    99f4:	a9000504 	addi	r4,r21,20
    99f8:	209d883a 	add	r14,r4,r2
    99fc:	2380042e 	bgeu	r4,r14,9a10 <__multiply+0x84>
    9a00:	2005883a 	mov	r2,r4
    9a04:	10000015 	stw	zero,0(r2)
    9a08:	10800104 	addi	r2,r2,4
    9a0c:	13bffd36 	bltu	r2,r14,9a04 <__multiply+0x78>
    9a10:	9485883a 	add	r2,r18,r18
    9a14:	9cc7883a 	add	r3,r19,r19
    9a18:	a1800504 	addi	r6,r20,20
    9a1c:	1085883a 	add	r2,r2,r2
    9a20:	8b400504 	addi	r13,r17,20
    9a24:	18c7883a 	add	r3,r3,r3
    9a28:	309f883a 	add	r15,r6,r2
    9a2c:	68d7883a 	add	r11,r13,r3
    9a30:	33c03b2e 	bgeu	r6,r15,9b20 <__multiply+0x194>
    9a34:	2019883a 	mov	r12,r4
    9a38:	30800017 	ldw	r2,0(r6)
    9a3c:	127fffcc 	andi	r9,r2,65535
    9a40:	48001826 	beq	r9,zero,9aa4 <__multiply+0x118>
    9a44:	6811883a 	mov	r8,r13
    9a48:	600f883a 	mov	r7,r12
    9a4c:	0015883a 	mov	r10,zero
    9a50:	40c00017 	ldw	r3,0(r8)
    9a54:	39400017 	ldw	r5,0(r7)
    9a58:	42000104 	addi	r8,r8,4
    9a5c:	193fffcc 	andi	r4,r3,65535
    9a60:	4909383a 	mul	r4,r9,r4
    9a64:	1806d43a 	srli	r3,r3,16
    9a68:	28bfffcc 	andi	r2,r5,65535
    9a6c:	5085883a 	add	r2,r10,r2
    9a70:	2089883a 	add	r4,r4,r2
    9a74:	48c7383a 	mul	r3,r9,r3
    9a78:	280ad43a 	srli	r5,r5,16
    9a7c:	2004d43a 	srli	r2,r4,16
    9a80:	3900000d 	sth	r4,0(r7)
    9a84:	1947883a 	add	r3,r3,r5
    9a88:	10c5883a 	add	r2,r2,r3
    9a8c:	3880008d 	sth	r2,2(r7)
    9a90:	1014d43a 	srli	r10,r2,16
    9a94:	39c00104 	addi	r7,r7,4
    9a98:	42ffed36 	bltu	r8,r11,9a50 <__multiply+0xc4>
    9a9c:	3a800015 	stw	r10,0(r7)
    9aa0:	30800017 	ldw	r2,0(r6)
    9aa4:	1012d43a 	srli	r9,r2,16
    9aa8:	48001926 	beq	r9,zero,9b10 <__multiply+0x184>
    9aac:	60800017 	ldw	r2,0(r12)
    9ab0:	6811883a 	mov	r8,r13
    9ab4:	600f883a 	mov	r7,r12
    9ab8:	0015883a 	mov	r10,zero
    9abc:	100b883a 	mov	r5,r2
    9ac0:	41000017 	ldw	r4,0(r8)
    9ac4:	2806d43a 	srli	r3,r5,16
    9ac8:	3880000d 	sth	r2,0(r7)
    9acc:	20bfffcc 	andi	r2,r4,65535
    9ad0:	4885383a 	mul	r2,r9,r2
    9ad4:	50c7883a 	add	r3,r10,r3
    9ad8:	2008d43a 	srli	r4,r4,16
    9adc:	10c5883a 	add	r2,r2,r3
    9ae0:	3880008d 	sth	r2,2(r7)
    9ae4:	39c00104 	addi	r7,r7,4
    9ae8:	39400017 	ldw	r5,0(r7)
    9aec:	4909383a 	mul	r4,r9,r4
    9af0:	1004d43a 	srli	r2,r2,16
    9af4:	28ffffcc 	andi	r3,r5,65535
    9af8:	20c9883a 	add	r4,r4,r3
    9afc:	1105883a 	add	r2,r2,r4
    9b00:	42000104 	addi	r8,r8,4
    9b04:	1014d43a 	srli	r10,r2,16
    9b08:	42ffed36 	bltu	r8,r11,9ac0 <__multiply+0x134>
    9b0c:	38800015 	stw	r2,0(r7)
    9b10:	31800104 	addi	r6,r6,4
    9b14:	33c0022e 	bgeu	r6,r15,9b20 <__multiply+0x194>
    9b18:	63000104 	addi	r12,r12,4
    9b1c:	003fc606 	br	9a38 <__multiply+0xac>
    9b20:	0400090e 	bge	zero,r16,9b48 <__multiply+0x1bc>
    9b24:	70bfff17 	ldw	r2,-4(r14)
    9b28:	70ffff04 	addi	r3,r14,-4
    9b2c:	10000326 	beq	r2,zero,9b3c <__multiply+0x1b0>
    9b30:	00000506 	br	9b48 <__multiply+0x1bc>
    9b34:	18800017 	ldw	r2,0(r3)
    9b38:	1000031e 	bne	r2,zero,9b48 <__multiply+0x1bc>
    9b3c:	843fffc4 	addi	r16,r16,-1
    9b40:	18ffff04 	addi	r3,r3,-4
    9b44:	803ffb1e 	bne	r16,zero,9b34 <__multiply+0x1a8>
    9b48:	a805883a 	mov	r2,r21
    9b4c:	ac000415 	stw	r16,16(r21)
    9b50:	dfc00617 	ldw	ra,24(sp)
    9b54:	dd400517 	ldw	r21,20(sp)
    9b58:	dd000417 	ldw	r20,16(sp)
    9b5c:	dcc00317 	ldw	r19,12(sp)
    9b60:	dc800217 	ldw	r18,8(sp)
    9b64:	dc400117 	ldw	r17,4(sp)
    9b68:	dc000017 	ldw	r16,0(sp)
    9b6c:	dec00704 	addi	sp,sp,28
    9b70:	f800283a 	ret

00009b74 <__i2b>:
    9b74:	defffd04 	addi	sp,sp,-12
    9b78:	dc000015 	stw	r16,0(sp)
    9b7c:	04000044 	movi	r16,1
    9b80:	dc800115 	stw	r18,4(sp)
    9b84:	2825883a 	mov	r18,r5
    9b88:	800b883a 	mov	r5,r16
    9b8c:	dfc00215 	stw	ra,8(sp)
    9b90:	000947c0 	call	947c <_Balloc>
    9b94:	14000415 	stw	r16,16(r2)
    9b98:	14800515 	stw	r18,20(r2)
    9b9c:	dfc00217 	ldw	ra,8(sp)
    9ba0:	dc800117 	ldw	r18,4(sp)
    9ba4:	dc000017 	ldw	r16,0(sp)
    9ba8:	dec00304 	addi	sp,sp,12
    9bac:	f800283a 	ret

00009bb0 <__multadd>:
    9bb0:	defffa04 	addi	sp,sp,-24
    9bb4:	dc800215 	stw	r18,8(sp)
    9bb8:	2c800417 	ldw	r18,16(r5)
    9bbc:	dd000415 	stw	r20,16(sp)
    9bc0:	dcc00315 	stw	r19,12(sp)
    9bc4:	dc000015 	stw	r16,0(sp)
    9bc8:	dfc00515 	stw	ra,20(sp)
    9bcc:	3821883a 	mov	r16,r7
    9bd0:	dc400115 	stw	r17,4(sp)
    9bd4:	2827883a 	mov	r19,r5
    9bd8:	2029883a 	mov	r20,r4
    9bdc:	2a000504 	addi	r8,r5,20
    9be0:	000f883a 	mov	r7,zero
    9be4:	40800017 	ldw	r2,0(r8)
    9be8:	39c00044 	addi	r7,r7,1
    9bec:	10ffffcc 	andi	r3,r2,65535
    9bf0:	1987383a 	mul	r3,r3,r6
    9bf4:	1004d43a 	srli	r2,r2,16
    9bf8:	1c07883a 	add	r3,r3,r16
    9bfc:	180ad43a 	srli	r5,r3,16
    9c00:	1185383a 	mul	r2,r2,r6
    9c04:	18ffffcc 	andi	r3,r3,65535
    9c08:	1145883a 	add	r2,r2,r5
    9c0c:	1008943a 	slli	r4,r2,16
    9c10:	1020d43a 	srli	r16,r2,16
    9c14:	20c9883a 	add	r4,r4,r3
    9c18:	41000015 	stw	r4,0(r8)
    9c1c:	42000104 	addi	r8,r8,4
    9c20:	3cbff016 	blt	r7,r18,9be4 <__multadd+0x34>
    9c24:	80000826 	beq	r16,zero,9c48 <__multadd+0x98>
    9c28:	98800217 	ldw	r2,8(r19)
    9c2c:	90800f0e 	bge	r18,r2,9c6c <__multadd+0xbc>
    9c30:	9485883a 	add	r2,r18,r18
    9c34:	1085883a 	add	r2,r2,r2
    9c38:	14c5883a 	add	r2,r2,r19
    9c3c:	90c00044 	addi	r3,r18,1
    9c40:	14000515 	stw	r16,20(r2)
    9c44:	98c00415 	stw	r3,16(r19)
    9c48:	9805883a 	mov	r2,r19
    9c4c:	dfc00517 	ldw	ra,20(sp)
    9c50:	dd000417 	ldw	r20,16(sp)
    9c54:	dcc00317 	ldw	r19,12(sp)
    9c58:	dc800217 	ldw	r18,8(sp)
    9c5c:	dc400117 	ldw	r17,4(sp)
    9c60:	dc000017 	ldw	r16,0(sp)
    9c64:	dec00604 	addi	sp,sp,24
    9c68:	f800283a 	ret
    9c6c:	99400117 	ldw	r5,4(r19)
    9c70:	a009883a 	mov	r4,r20
    9c74:	29400044 	addi	r5,r5,1
    9c78:	000947c0 	call	947c <_Balloc>
    9c7c:	99800417 	ldw	r6,16(r19)
    9c80:	99400304 	addi	r5,r19,12
    9c84:	11000304 	addi	r4,r2,12
    9c88:	318d883a 	add	r6,r6,r6
    9c8c:	318d883a 	add	r6,r6,r6
    9c90:	31800204 	addi	r6,r6,8
    9c94:	1023883a 	mov	r17,r2
    9c98:	0003a740 	call	3a74 <memcpy>
    9c9c:	980b883a 	mov	r5,r19
    9ca0:	a009883a 	mov	r4,r20
    9ca4:	0008efc0 	call	8efc <_Bfree>
    9ca8:	8827883a 	mov	r19,r17
    9cac:	003fe006 	br	9c30 <__multadd+0x80>

00009cb0 <__pow5mult>:
    9cb0:	defffa04 	addi	sp,sp,-24
    9cb4:	308000cc 	andi	r2,r6,3
    9cb8:	dd000415 	stw	r20,16(sp)
    9cbc:	dcc00315 	stw	r19,12(sp)
    9cc0:	dc000015 	stw	r16,0(sp)
    9cc4:	dfc00515 	stw	ra,20(sp)
    9cc8:	dc800215 	stw	r18,8(sp)
    9ccc:	dc400115 	stw	r17,4(sp)
    9cd0:	3021883a 	mov	r16,r6
    9cd4:	2027883a 	mov	r19,r4
    9cd8:	2829883a 	mov	r20,r5
    9cdc:	10002b1e 	bne	r2,zero,9d8c <__pow5mult+0xdc>
    9ce0:	8025d0ba 	srai	r18,r16,2
    9ce4:	90001b26 	beq	r18,zero,9d54 <__pow5mult+0xa4>
    9ce8:	9c001217 	ldw	r16,72(r19)
    9cec:	8000081e 	bne	r16,zero,9d10 <__pow5mult+0x60>
    9cf0:	00003006 	br	9db4 <__pow5mult+0x104>
    9cf4:	800b883a 	mov	r5,r16
    9cf8:	800d883a 	mov	r6,r16
    9cfc:	9809883a 	mov	r4,r19
    9d00:	90001426 	beq	r18,zero,9d54 <__pow5mult+0xa4>
    9d04:	80800017 	ldw	r2,0(r16)
    9d08:	10001b26 	beq	r2,zero,9d78 <__pow5mult+0xc8>
    9d0c:	1021883a 	mov	r16,r2
    9d10:	9080004c 	andi	r2,r18,1
    9d14:	1005003a 	cmpeq	r2,r2,zero
    9d18:	9025d07a 	srai	r18,r18,1
    9d1c:	800d883a 	mov	r6,r16
    9d20:	9809883a 	mov	r4,r19
    9d24:	a00b883a 	mov	r5,r20
    9d28:	103ff21e 	bne	r2,zero,9cf4 <__pow5mult+0x44>
    9d2c:	000998c0 	call	998c <__multiply>
    9d30:	a00b883a 	mov	r5,r20
    9d34:	9809883a 	mov	r4,r19
    9d38:	1023883a 	mov	r17,r2
    9d3c:	0008efc0 	call	8efc <_Bfree>
    9d40:	8829883a 	mov	r20,r17
    9d44:	800b883a 	mov	r5,r16
    9d48:	800d883a 	mov	r6,r16
    9d4c:	9809883a 	mov	r4,r19
    9d50:	903fec1e 	bne	r18,zero,9d04 <__pow5mult+0x54>
    9d54:	a005883a 	mov	r2,r20
    9d58:	dfc00517 	ldw	ra,20(sp)
    9d5c:	dd000417 	ldw	r20,16(sp)
    9d60:	dcc00317 	ldw	r19,12(sp)
    9d64:	dc800217 	ldw	r18,8(sp)
    9d68:	dc400117 	ldw	r17,4(sp)
    9d6c:	dc000017 	ldw	r16,0(sp)
    9d70:	dec00604 	addi	sp,sp,24
    9d74:	f800283a 	ret
    9d78:	000998c0 	call	998c <__multiply>
    9d7c:	80800015 	stw	r2,0(r16)
    9d80:	1021883a 	mov	r16,r2
    9d84:	10000015 	stw	zero,0(r2)
    9d88:	003fe106 	br	9d10 <__pow5mult+0x60>
    9d8c:	1085883a 	add	r2,r2,r2
    9d90:	00c00074 	movhi	r3,1
    9d94:	18cf9404 	addi	r3,r3,15952
    9d98:	1085883a 	add	r2,r2,r2
    9d9c:	10c5883a 	add	r2,r2,r3
    9da0:	11bfff17 	ldw	r6,-4(r2)
    9da4:	000f883a 	mov	r7,zero
    9da8:	0009bb00 	call	9bb0 <__multadd>
    9dac:	1029883a 	mov	r20,r2
    9db0:	003fcb06 	br	9ce0 <__pow5mult+0x30>
    9db4:	9809883a 	mov	r4,r19
    9db8:	01409c44 	movi	r5,625
    9dbc:	0009b740 	call	9b74 <__i2b>
    9dc0:	98801215 	stw	r2,72(r19)
    9dc4:	1021883a 	mov	r16,r2
    9dc8:	10000015 	stw	zero,0(r2)
    9dcc:	003fd006 	br	9d10 <__pow5mult+0x60>

00009dd0 <__s2b>:
    9dd0:	defff904 	addi	sp,sp,-28
    9dd4:	dcc00315 	stw	r19,12(sp)
    9dd8:	dc800215 	stw	r18,8(sp)
    9ddc:	2827883a 	mov	r19,r5
    9de0:	2025883a 	mov	r18,r4
    9de4:	01400244 	movi	r5,9
    9de8:	39000204 	addi	r4,r7,8
    9dec:	dd000415 	stw	r20,16(sp)
    9df0:	dc400115 	stw	r17,4(sp)
    9df4:	dfc00615 	stw	ra,24(sp)
    9df8:	dd400515 	stw	r21,20(sp)
    9dfc:	dc000015 	stw	r16,0(sp)
    9e00:	3829883a 	mov	r20,r7
    9e04:	3023883a 	mov	r17,r6
    9e08:	00033e80 	call	33e8 <__divsi3>
    9e0c:	00c00044 	movi	r3,1
    9e10:	1880350e 	bge	r3,r2,9ee8 <__s2b+0x118>
    9e14:	000b883a 	mov	r5,zero
    9e18:	18c7883a 	add	r3,r3,r3
    9e1c:	29400044 	addi	r5,r5,1
    9e20:	18bffd16 	blt	r3,r2,9e18 <__s2b+0x48>
    9e24:	9009883a 	mov	r4,r18
    9e28:	000947c0 	call	947c <_Balloc>
    9e2c:	1011883a 	mov	r8,r2
    9e30:	d8800717 	ldw	r2,28(sp)
    9e34:	00c00044 	movi	r3,1
    9e38:	01800244 	movi	r6,9
    9e3c:	40800515 	stw	r2,20(r8)
    9e40:	40c00415 	stw	r3,16(r8)
    9e44:	3440260e 	bge	r6,r17,9ee0 <__s2b+0x110>
    9e48:	3021883a 	mov	r16,r6
    9e4c:	99ab883a 	add	r21,r19,r6
    9e50:	9c05883a 	add	r2,r19,r16
    9e54:	11c00007 	ldb	r7,0(r2)
    9e58:	400b883a 	mov	r5,r8
    9e5c:	9009883a 	mov	r4,r18
    9e60:	39fff404 	addi	r7,r7,-48
    9e64:	01800284 	movi	r6,10
    9e68:	0009bb00 	call	9bb0 <__multadd>
    9e6c:	84000044 	addi	r16,r16,1
    9e70:	1011883a 	mov	r8,r2
    9e74:	8c3ff61e 	bne	r17,r16,9e50 <__s2b+0x80>
    9e78:	ac45883a 	add	r2,r21,r17
    9e7c:	117ffe04 	addi	r5,r2,-8
    9e80:	880d883a 	mov	r6,r17
    9e84:	35000c0e 	bge	r6,r20,9eb8 <__s2b+0xe8>
    9e88:	a185c83a 	sub	r2,r20,r6
    9e8c:	2821883a 	mov	r16,r5
    9e90:	28a3883a 	add	r17,r5,r2
    9e94:	81c00007 	ldb	r7,0(r16)
    9e98:	400b883a 	mov	r5,r8
    9e9c:	9009883a 	mov	r4,r18
    9ea0:	39fff404 	addi	r7,r7,-48
    9ea4:	01800284 	movi	r6,10
    9ea8:	0009bb00 	call	9bb0 <__multadd>
    9eac:	84000044 	addi	r16,r16,1
    9eb0:	1011883a 	mov	r8,r2
    9eb4:	847ff71e 	bne	r16,r17,9e94 <__s2b+0xc4>
    9eb8:	4005883a 	mov	r2,r8
    9ebc:	dfc00617 	ldw	ra,24(sp)
    9ec0:	dd400517 	ldw	r21,20(sp)
    9ec4:	dd000417 	ldw	r20,16(sp)
    9ec8:	dcc00317 	ldw	r19,12(sp)
    9ecc:	dc800217 	ldw	r18,8(sp)
    9ed0:	dc400117 	ldw	r17,4(sp)
    9ed4:	dc000017 	ldw	r16,0(sp)
    9ed8:	dec00704 	addi	sp,sp,28
    9edc:	f800283a 	ret
    9ee0:	99400284 	addi	r5,r19,10
    9ee4:	003fe706 	br	9e84 <__s2b+0xb4>
    9ee8:	000b883a 	mov	r5,zero
    9eec:	003fcd06 	br	9e24 <__s2b+0x54>

00009ef0 <_realloc_r>:
    9ef0:	defff404 	addi	sp,sp,-48
    9ef4:	dd800815 	stw	r22,32(sp)
    9ef8:	dc800415 	stw	r18,16(sp)
    9efc:	dc400315 	stw	r17,12(sp)
    9f00:	dfc00b15 	stw	ra,44(sp)
    9f04:	df000a15 	stw	fp,40(sp)
    9f08:	ddc00915 	stw	r23,36(sp)
    9f0c:	dd400715 	stw	r21,28(sp)
    9f10:	dd000615 	stw	r20,24(sp)
    9f14:	dcc00515 	stw	r19,20(sp)
    9f18:	dc000215 	stw	r16,8(sp)
    9f1c:	2825883a 	mov	r18,r5
    9f20:	3023883a 	mov	r17,r6
    9f24:	202d883a 	mov	r22,r4
    9f28:	2800c926 	beq	r5,zero,a250 <_realloc_r+0x360>
    9f2c:	000d3d00 	call	d3d0 <__malloc_lock>
    9f30:	943ffe04 	addi	r16,r18,-8
    9f34:	88c002c4 	addi	r3,r17,11
    9f38:	00800584 	movi	r2,22
    9f3c:	82000117 	ldw	r8,4(r16)
    9f40:	10c01b2e 	bgeu	r2,r3,9fb0 <_realloc_r+0xc0>
    9f44:	00bffe04 	movi	r2,-8
    9f48:	188e703a 	and	r7,r3,r2
    9f4c:	3839883a 	mov	fp,r7
    9f50:	38001a16 	blt	r7,zero,9fbc <_realloc_r+0xcc>
    9f54:	e4401936 	bltu	fp,r17,9fbc <_realloc_r+0xcc>
    9f58:	013fff04 	movi	r4,-4
    9f5c:	4126703a 	and	r19,r8,r4
    9f60:	99c02616 	blt	r19,r7,9ffc <_realloc_r+0x10c>
    9f64:	802b883a 	mov	r21,r16
    9f68:	9829883a 	mov	r20,r19
    9f6c:	84000204 	addi	r16,r16,8
    9f70:	a80f883a 	mov	r7,r21
    9f74:	a70dc83a 	sub	r6,r20,fp
    9f78:	008003c4 	movi	r2,15
    9f7c:	1180c136 	bltu	r2,r6,a284 <_realloc_r+0x394>
    9f80:	38800117 	ldw	r2,4(r7)
    9f84:	a549883a 	add	r4,r20,r21
    9f88:	1080004c 	andi	r2,r2,1
    9f8c:	a084b03a 	or	r2,r20,r2
    9f90:	38800115 	stw	r2,4(r7)
    9f94:	20c00117 	ldw	r3,4(r4)
    9f98:	18c00054 	ori	r3,r3,1
    9f9c:	20c00115 	stw	r3,4(r4)
    9fa0:	b009883a 	mov	r4,r22
    9fa4:	000d3f00 	call	d3f0 <__malloc_unlock>
    9fa8:	8023883a 	mov	r17,r16
    9fac:	00000606 	br	9fc8 <_realloc_r+0xd8>
    9fb0:	01c00404 	movi	r7,16
    9fb4:	3839883a 	mov	fp,r7
    9fb8:	e47fe72e 	bgeu	fp,r17,9f58 <_realloc_r+0x68>
    9fbc:	00800304 	movi	r2,12
    9fc0:	0023883a 	mov	r17,zero
    9fc4:	b0800015 	stw	r2,0(r22)
    9fc8:	8805883a 	mov	r2,r17
    9fcc:	dfc00b17 	ldw	ra,44(sp)
    9fd0:	df000a17 	ldw	fp,40(sp)
    9fd4:	ddc00917 	ldw	r23,36(sp)
    9fd8:	dd800817 	ldw	r22,32(sp)
    9fdc:	dd400717 	ldw	r21,28(sp)
    9fe0:	dd000617 	ldw	r20,24(sp)
    9fe4:	dcc00517 	ldw	r19,20(sp)
    9fe8:	dc800417 	ldw	r18,16(sp)
    9fec:	dc400317 	ldw	r17,12(sp)
    9ff0:	dc000217 	ldw	r16,8(sp)
    9ff4:	dec00c04 	addi	sp,sp,48
    9ff8:	f800283a 	ret
    9ffc:	00800074 	movhi	r2,1
    a000:	1091ac04 	addi	r2,r2,18096
    a004:	12400217 	ldw	r9,8(r2)
    a008:	84cd883a 	add	r6,r16,r19
    a00c:	802b883a 	mov	r21,r16
    a010:	3240b926 	beq	r6,r9,a2f8 <_realloc_r+0x408>
    a014:	31400117 	ldw	r5,4(r6)
    a018:	00bfff84 	movi	r2,-2
    a01c:	2884703a 	and	r2,r5,r2
    a020:	1185883a 	add	r2,r2,r6
    a024:	10c00117 	ldw	r3,4(r2)
    a028:	18c0004c 	andi	r3,r3,1
    a02c:	1807003a 	cmpeq	r3,r3,zero
    a030:	1800a326 	beq	r3,zero,a2c0 <_realloc_r+0x3d0>
    a034:	2908703a 	and	r4,r5,r4
    a038:	9929883a 	add	r20,r19,r4
    a03c:	a1c0a30e 	bge	r20,r7,a2cc <_realloc_r+0x3dc>
    a040:	4080004c 	andi	r2,r8,1
    a044:	1000551e 	bne	r2,zero,a19c <_realloc_r+0x2ac>
    a048:	80800017 	ldw	r2,0(r16)
    a04c:	80afc83a 	sub	r23,r16,r2
    a050:	b8c00117 	ldw	r3,4(r23)
    a054:	00bfff04 	movi	r2,-4
    a058:	1884703a 	and	r2,r3,r2
    a05c:	30002e26 	beq	r6,zero,a118 <_realloc_r+0x228>
    a060:	3240b926 	beq	r6,r9,a348 <_realloc_r+0x458>
    a064:	98a9883a 	add	r20,r19,r2
    a068:	2509883a 	add	r4,r4,r20
    a06c:	d9000015 	stw	r4,0(sp)
    a070:	21c02a16 	blt	r4,r7,a11c <_realloc_r+0x22c>
    a074:	30800317 	ldw	r2,12(r6)
    a078:	30c00217 	ldw	r3,8(r6)
    a07c:	01400904 	movi	r5,36
    a080:	99bfff04 	addi	r6,r19,-4
    a084:	18800315 	stw	r2,12(r3)
    a088:	10c00215 	stw	r3,8(r2)
    a08c:	b9000317 	ldw	r4,12(r23)
    a090:	b8800217 	ldw	r2,8(r23)
    a094:	b82b883a 	mov	r21,r23
    a098:	bc000204 	addi	r16,r23,8
    a09c:	20800215 	stw	r2,8(r4)
    a0a0:	11000315 	stw	r4,12(r2)
    a0a4:	2980e436 	bltu	r5,r6,a438 <_realloc_r+0x548>
    a0a8:	008004c4 	movi	r2,19
    a0ac:	9009883a 	mov	r4,r18
    a0b0:	8011883a 	mov	r8,r16
    a0b4:	11800f2e 	bgeu	r2,r6,a0f4 <_realloc_r+0x204>
    a0b8:	90800017 	ldw	r2,0(r18)
    a0bc:	ba000404 	addi	r8,r23,16
    a0c0:	91000204 	addi	r4,r18,8
    a0c4:	b8800215 	stw	r2,8(r23)
    a0c8:	90c00117 	ldw	r3,4(r18)
    a0cc:	008006c4 	movi	r2,27
    a0d0:	b8c00315 	stw	r3,12(r23)
    a0d4:	1180072e 	bgeu	r2,r6,a0f4 <_realloc_r+0x204>
    a0d8:	90c00217 	ldw	r3,8(r18)
    a0dc:	ba000604 	addi	r8,r23,24
    a0e0:	91000404 	addi	r4,r18,16
    a0e4:	b8c00415 	stw	r3,16(r23)
    a0e8:	90800317 	ldw	r2,12(r18)
    a0ec:	b8800515 	stw	r2,20(r23)
    a0f0:	3140e726 	beq	r6,r5,a490 <_realloc_r+0x5a0>
    a0f4:	20800017 	ldw	r2,0(r4)
    a0f8:	dd000017 	ldw	r20,0(sp)
    a0fc:	b80f883a 	mov	r7,r23
    a100:	40800015 	stw	r2,0(r8)
    a104:	20c00117 	ldw	r3,4(r4)
    a108:	40c00115 	stw	r3,4(r8)
    a10c:	20800217 	ldw	r2,8(r4)
    a110:	40800215 	stw	r2,8(r8)
    a114:	003f9706 	br	9f74 <_realloc_r+0x84>
    a118:	98a9883a 	add	r20,r19,r2
    a11c:	a1c01f16 	blt	r20,r7,a19c <_realloc_r+0x2ac>
    a120:	b8c00317 	ldw	r3,12(r23)
    a124:	b8800217 	ldw	r2,8(r23)
    a128:	99bfff04 	addi	r6,r19,-4
    a12c:	01400904 	movi	r5,36
    a130:	b82b883a 	mov	r21,r23
    a134:	18800215 	stw	r2,8(r3)
    a138:	10c00315 	stw	r3,12(r2)
    a13c:	bc000204 	addi	r16,r23,8
    a140:	2980c336 	bltu	r5,r6,a450 <_realloc_r+0x560>
    a144:	008004c4 	movi	r2,19
    a148:	9009883a 	mov	r4,r18
    a14c:	8011883a 	mov	r8,r16
    a150:	11800f2e 	bgeu	r2,r6,a190 <_realloc_r+0x2a0>
    a154:	90800017 	ldw	r2,0(r18)
    a158:	ba000404 	addi	r8,r23,16
    a15c:	91000204 	addi	r4,r18,8
    a160:	b8800215 	stw	r2,8(r23)
    a164:	90c00117 	ldw	r3,4(r18)
    a168:	008006c4 	movi	r2,27
    a16c:	b8c00315 	stw	r3,12(r23)
    a170:	1180072e 	bgeu	r2,r6,a190 <_realloc_r+0x2a0>
    a174:	90c00217 	ldw	r3,8(r18)
    a178:	ba000604 	addi	r8,r23,24
    a17c:	91000404 	addi	r4,r18,16
    a180:	b8c00415 	stw	r3,16(r23)
    a184:	90800317 	ldw	r2,12(r18)
    a188:	b8800515 	stw	r2,20(r23)
    a18c:	3140c726 	beq	r6,r5,a4ac <_realloc_r+0x5bc>
    a190:	20800017 	ldw	r2,0(r4)
    a194:	b80f883a 	mov	r7,r23
    a198:	003fd906 	br	a100 <_realloc_r+0x210>
    a19c:	880b883a 	mov	r5,r17
    a1a0:	b009883a 	mov	r4,r22
    a1a4:	00085f80 	call	85f8 <_malloc_r>
    a1a8:	1023883a 	mov	r17,r2
    a1ac:	10002526 	beq	r2,zero,a244 <_realloc_r+0x354>
    a1b0:	80800117 	ldw	r2,4(r16)
    a1b4:	00ffff84 	movi	r3,-2
    a1b8:	893ffe04 	addi	r4,r17,-8
    a1bc:	10c4703a 	and	r2,r2,r3
    a1c0:	8085883a 	add	r2,r16,r2
    a1c4:	20809526 	beq	r4,r2,a41c <_realloc_r+0x52c>
    a1c8:	99bfff04 	addi	r6,r19,-4
    a1cc:	01c00904 	movi	r7,36
    a1d0:	39804536 	bltu	r7,r6,a2e8 <_realloc_r+0x3f8>
    a1d4:	008004c4 	movi	r2,19
    a1d8:	9009883a 	mov	r4,r18
    a1dc:	880b883a 	mov	r5,r17
    a1e0:	11800f2e 	bgeu	r2,r6,a220 <_realloc_r+0x330>
    a1e4:	90800017 	ldw	r2,0(r18)
    a1e8:	89400204 	addi	r5,r17,8
    a1ec:	91000204 	addi	r4,r18,8
    a1f0:	88800015 	stw	r2,0(r17)
    a1f4:	90c00117 	ldw	r3,4(r18)
    a1f8:	008006c4 	movi	r2,27
    a1fc:	88c00115 	stw	r3,4(r17)
    a200:	1180072e 	bgeu	r2,r6,a220 <_realloc_r+0x330>
    a204:	90c00217 	ldw	r3,8(r18)
    a208:	89400404 	addi	r5,r17,16
    a20c:	91000404 	addi	r4,r18,16
    a210:	88c00215 	stw	r3,8(r17)
    a214:	90800317 	ldw	r2,12(r18)
    a218:	88800315 	stw	r2,12(r17)
    a21c:	31c09126 	beq	r6,r7,a464 <_realloc_r+0x574>
    a220:	20800017 	ldw	r2,0(r4)
    a224:	28800015 	stw	r2,0(r5)
    a228:	20c00117 	ldw	r3,4(r4)
    a22c:	28c00115 	stw	r3,4(r5)
    a230:	20800217 	ldw	r2,8(r4)
    a234:	28800215 	stw	r2,8(r5)
    a238:	900b883a 	mov	r5,r18
    a23c:	b009883a 	mov	r4,r22
    a240:	0007a700 	call	7a70 <_free_r>
    a244:	b009883a 	mov	r4,r22
    a248:	000d3f00 	call	d3f0 <__malloc_unlock>
    a24c:	003f5e06 	br	9fc8 <_realloc_r+0xd8>
    a250:	300b883a 	mov	r5,r6
    a254:	dfc00b17 	ldw	ra,44(sp)
    a258:	df000a17 	ldw	fp,40(sp)
    a25c:	ddc00917 	ldw	r23,36(sp)
    a260:	dd800817 	ldw	r22,32(sp)
    a264:	dd400717 	ldw	r21,28(sp)
    a268:	dd000617 	ldw	r20,24(sp)
    a26c:	dcc00517 	ldw	r19,20(sp)
    a270:	dc800417 	ldw	r18,16(sp)
    a274:	dc400317 	ldw	r17,12(sp)
    a278:	dc000217 	ldw	r16,8(sp)
    a27c:	dec00c04 	addi	sp,sp,48
    a280:	00085f81 	jmpi	85f8 <_malloc_r>
    a284:	38800117 	ldw	r2,4(r7)
    a288:	e54b883a 	add	r5,fp,r21
    a28c:	31000054 	ori	r4,r6,1
    a290:	1080004c 	andi	r2,r2,1
    a294:	1704b03a 	or	r2,r2,fp
    a298:	38800115 	stw	r2,4(r7)
    a29c:	29000115 	stw	r4,4(r5)
    a2a0:	2987883a 	add	r3,r5,r6
    a2a4:	18800117 	ldw	r2,4(r3)
    a2a8:	29400204 	addi	r5,r5,8
    a2ac:	b009883a 	mov	r4,r22
    a2b0:	10800054 	ori	r2,r2,1
    a2b4:	18800115 	stw	r2,4(r3)
    a2b8:	0007a700 	call	7a70 <_free_r>
    a2bc:	003f3806 	br	9fa0 <_realloc_r+0xb0>
    a2c0:	000d883a 	mov	r6,zero
    a2c4:	0009883a 	mov	r4,zero
    a2c8:	003f5d06 	br	a040 <_realloc_r+0x150>
    a2cc:	30c00217 	ldw	r3,8(r6)
    a2d0:	30800317 	ldw	r2,12(r6)
    a2d4:	800f883a 	mov	r7,r16
    a2d8:	84000204 	addi	r16,r16,8
    a2dc:	10c00215 	stw	r3,8(r2)
    a2e0:	18800315 	stw	r2,12(r3)
    a2e4:	003f2306 	br	9f74 <_realloc_r+0x84>
    a2e8:	8809883a 	mov	r4,r17
    a2ec:	900b883a 	mov	r5,r18
    a2f0:	0008e1c0 	call	8e1c <memmove>
    a2f4:	003fd006 	br	a238 <_realloc_r+0x348>
    a2f8:	30800117 	ldw	r2,4(r6)
    a2fc:	e0c00404 	addi	r3,fp,16
    a300:	1108703a 	and	r4,r2,r4
    a304:	9905883a 	add	r2,r19,r4
    a308:	10ff4d16 	blt	r2,r3,a040 <_realloc_r+0x150>
    a30c:	1705c83a 	sub	r2,r2,fp
    a310:	870b883a 	add	r5,r16,fp
    a314:	10800054 	ori	r2,r2,1
    a318:	28800115 	stw	r2,4(r5)
    a31c:	80c00117 	ldw	r3,4(r16)
    a320:	00800074 	movhi	r2,1
    a324:	1091ac04 	addi	r2,r2,18096
    a328:	b009883a 	mov	r4,r22
    a32c:	18c0004c 	andi	r3,r3,1
    a330:	e0c6b03a 	or	r3,fp,r3
    a334:	11400215 	stw	r5,8(r2)
    a338:	80c00115 	stw	r3,4(r16)
    a33c:	000d3f00 	call	d3f0 <__malloc_unlock>
    a340:	84400204 	addi	r17,r16,8
    a344:	003f2006 	br	9fc8 <_realloc_r+0xd8>
    a348:	98a9883a 	add	r20,r19,r2
    a34c:	2509883a 	add	r4,r4,r20
    a350:	e0800404 	addi	r2,fp,16
    a354:	d9000115 	stw	r4,4(sp)
    a358:	20bf7016 	blt	r4,r2,a11c <_realloc_r+0x22c>
    a35c:	b8c00317 	ldw	r3,12(r23)
    a360:	b8800217 	ldw	r2,8(r23)
    a364:	99bfff04 	addi	r6,r19,-4
    a368:	01400904 	movi	r5,36
    a36c:	18800215 	stw	r2,8(r3)
    a370:	10c00315 	stw	r3,12(r2)
    a374:	bc400204 	addi	r17,r23,8
    a378:	29804136 	bltu	r5,r6,a480 <_realloc_r+0x590>
    a37c:	008004c4 	movi	r2,19
    a380:	9009883a 	mov	r4,r18
    a384:	880f883a 	mov	r7,r17
    a388:	11800f2e 	bgeu	r2,r6,a3c8 <_realloc_r+0x4d8>
    a38c:	90800017 	ldw	r2,0(r18)
    a390:	b9c00404 	addi	r7,r23,16
    a394:	91000204 	addi	r4,r18,8
    a398:	b8800215 	stw	r2,8(r23)
    a39c:	90c00117 	ldw	r3,4(r18)
    a3a0:	008006c4 	movi	r2,27
    a3a4:	b8c00315 	stw	r3,12(r23)
    a3a8:	1180072e 	bgeu	r2,r6,a3c8 <_realloc_r+0x4d8>
    a3ac:	90c00217 	ldw	r3,8(r18)
    a3b0:	b9c00604 	addi	r7,r23,24
    a3b4:	91000404 	addi	r4,r18,16
    a3b8:	b8c00415 	stw	r3,16(r23)
    a3bc:	90800317 	ldw	r2,12(r18)
    a3c0:	b8800515 	stw	r2,20(r23)
    a3c4:	31404026 	beq	r6,r5,a4c8 <_realloc_r+0x5d8>
    a3c8:	20800017 	ldw	r2,0(r4)
    a3cc:	38800015 	stw	r2,0(r7)
    a3d0:	20c00117 	ldw	r3,4(r4)
    a3d4:	38c00115 	stw	r3,4(r7)
    a3d8:	20800217 	ldw	r2,8(r4)
    a3dc:	38800215 	stw	r2,8(r7)
    a3e0:	d8c00117 	ldw	r3,4(sp)
    a3e4:	bf0b883a 	add	r5,r23,fp
    a3e8:	b009883a 	mov	r4,r22
    a3ec:	1f05c83a 	sub	r2,r3,fp
    a3f0:	10800054 	ori	r2,r2,1
    a3f4:	28800115 	stw	r2,4(r5)
    a3f8:	b8c00117 	ldw	r3,4(r23)
    a3fc:	00800074 	movhi	r2,1
    a400:	1091ac04 	addi	r2,r2,18096
    a404:	11400215 	stw	r5,8(r2)
    a408:	18c0004c 	andi	r3,r3,1
    a40c:	e0c6b03a 	or	r3,fp,r3
    a410:	b8c00115 	stw	r3,4(r23)
    a414:	000d3f00 	call	d3f0 <__malloc_unlock>
    a418:	003eeb06 	br	9fc8 <_realloc_r+0xd8>
    a41c:	20800117 	ldw	r2,4(r4)
    a420:	00ffff04 	movi	r3,-4
    a424:	800f883a 	mov	r7,r16
    a428:	10c4703a 	and	r2,r2,r3
    a42c:	98a9883a 	add	r20,r19,r2
    a430:	84000204 	addi	r16,r16,8
    a434:	003ecf06 	br	9f74 <_realloc_r+0x84>
    a438:	900b883a 	mov	r5,r18
    a43c:	8009883a 	mov	r4,r16
    a440:	0008e1c0 	call	8e1c <memmove>
    a444:	dd000017 	ldw	r20,0(sp)
    a448:	b80f883a 	mov	r7,r23
    a44c:	003ec906 	br	9f74 <_realloc_r+0x84>
    a450:	900b883a 	mov	r5,r18
    a454:	8009883a 	mov	r4,r16
    a458:	0008e1c0 	call	8e1c <memmove>
    a45c:	b80f883a 	mov	r7,r23
    a460:	003ec406 	br	9f74 <_realloc_r+0x84>
    a464:	90c00417 	ldw	r3,16(r18)
    a468:	89400604 	addi	r5,r17,24
    a46c:	91000604 	addi	r4,r18,24
    a470:	88c00415 	stw	r3,16(r17)
    a474:	90800517 	ldw	r2,20(r18)
    a478:	88800515 	stw	r2,20(r17)
    a47c:	003f6806 	br	a220 <_realloc_r+0x330>
    a480:	900b883a 	mov	r5,r18
    a484:	8809883a 	mov	r4,r17
    a488:	0008e1c0 	call	8e1c <memmove>
    a48c:	003fd406 	br	a3e0 <_realloc_r+0x4f0>
    a490:	90c00417 	ldw	r3,16(r18)
    a494:	91000604 	addi	r4,r18,24
    a498:	ba000804 	addi	r8,r23,32
    a49c:	b8c00615 	stw	r3,24(r23)
    a4a0:	90800517 	ldw	r2,20(r18)
    a4a4:	b8800715 	stw	r2,28(r23)
    a4a8:	003f1206 	br	a0f4 <_realloc_r+0x204>
    a4ac:	90c00417 	ldw	r3,16(r18)
    a4b0:	91000604 	addi	r4,r18,24
    a4b4:	ba000804 	addi	r8,r23,32
    a4b8:	b8c00615 	stw	r3,24(r23)
    a4bc:	90800517 	ldw	r2,20(r18)
    a4c0:	b8800715 	stw	r2,28(r23)
    a4c4:	003f3206 	br	a190 <_realloc_r+0x2a0>
    a4c8:	90c00417 	ldw	r3,16(r18)
    a4cc:	91000604 	addi	r4,r18,24
    a4d0:	b9c00804 	addi	r7,r23,32
    a4d4:	b8c00615 	stw	r3,24(r23)
    a4d8:	90800517 	ldw	r2,20(r18)
    a4dc:	b8800715 	stw	r2,28(r23)
    a4e0:	003fb906 	br	a3c8 <_realloc_r+0x4d8>

0000a4e4 <__isinfd>:
    a4e4:	200d883a 	mov	r6,r4
    a4e8:	0109c83a 	sub	r4,zero,r4
    a4ec:	2188b03a 	or	r4,r4,r6
    a4f0:	2008d7fa 	srli	r4,r4,31
    a4f4:	00a00034 	movhi	r2,32768
    a4f8:	10bfffc4 	addi	r2,r2,-1
    a4fc:	1144703a 	and	r2,r2,r5
    a500:	2088b03a 	or	r4,r4,r2
    a504:	009ffc34 	movhi	r2,32752
    a508:	1105c83a 	sub	r2,r2,r4
    a50c:	0087c83a 	sub	r3,zero,r2
    a510:	10c4b03a 	or	r2,r2,r3
    a514:	1004d7fa 	srli	r2,r2,31
    a518:	00c00044 	movi	r3,1
    a51c:	1885c83a 	sub	r2,r3,r2
    a520:	f800283a 	ret

0000a524 <__isnand>:
    a524:	200d883a 	mov	r6,r4
    a528:	0109c83a 	sub	r4,zero,r4
    a52c:	2188b03a 	or	r4,r4,r6
    a530:	2008d7fa 	srli	r4,r4,31
    a534:	00a00034 	movhi	r2,32768
    a538:	10bfffc4 	addi	r2,r2,-1
    a53c:	1144703a 	and	r2,r2,r5
    a540:	2088b03a 	or	r4,r4,r2
    a544:	009ffc34 	movhi	r2,32752
    a548:	1105c83a 	sub	r2,r2,r4
    a54c:	1004d7fa 	srli	r2,r2,31
    a550:	f800283a 	ret

0000a554 <_sbrk_r>:
    a554:	defffd04 	addi	sp,sp,-12
    a558:	dc000015 	stw	r16,0(sp)
    a55c:	040000b4 	movhi	r16,2
    a560:	84207804 	addi	r16,r16,-32288
    a564:	dc400115 	stw	r17,4(sp)
    a568:	80000015 	stw	zero,0(r16)
    a56c:	2023883a 	mov	r17,r4
    a570:	2809883a 	mov	r4,r5
    a574:	dfc00215 	stw	ra,8(sp)
    a578:	000d8880 	call	d888 <sbrk>
    a57c:	1007883a 	mov	r3,r2
    a580:	00bfffc4 	movi	r2,-1
    a584:	18800626 	beq	r3,r2,a5a0 <_sbrk_r+0x4c>
    a588:	1805883a 	mov	r2,r3
    a58c:	dfc00217 	ldw	ra,8(sp)
    a590:	dc400117 	ldw	r17,4(sp)
    a594:	dc000017 	ldw	r16,0(sp)
    a598:	dec00304 	addi	sp,sp,12
    a59c:	f800283a 	ret
    a5a0:	80800017 	ldw	r2,0(r16)
    a5a4:	103ff826 	beq	r2,zero,a588 <_sbrk_r+0x34>
    a5a8:	88800015 	stw	r2,0(r17)
    a5ac:	1805883a 	mov	r2,r3
    a5b0:	dfc00217 	ldw	ra,8(sp)
    a5b4:	dc400117 	ldw	r17,4(sp)
    a5b8:	dc000017 	ldw	r16,0(sp)
    a5bc:	dec00304 	addi	sp,sp,12
    a5c0:	f800283a 	ret

0000a5c4 <__sclose>:
    a5c4:	2940038f 	ldh	r5,14(r5)
    a5c8:	000a96c1 	jmpi	a96c <_close_r>

0000a5cc <__sseek>:
    a5cc:	defffe04 	addi	sp,sp,-8
    a5d0:	dc000015 	stw	r16,0(sp)
    a5d4:	2821883a 	mov	r16,r5
    a5d8:	2940038f 	ldh	r5,14(r5)
    a5dc:	dfc00115 	stw	ra,4(sp)
    a5e0:	000abe40 	call	abe4 <_lseek_r>
    a5e4:	1007883a 	mov	r3,r2
    a5e8:	00bfffc4 	movi	r2,-1
    a5ec:	18800926 	beq	r3,r2,a614 <__sseek+0x48>
    a5f0:	8080030b 	ldhu	r2,12(r16)
    a5f4:	80c01415 	stw	r3,80(r16)
    a5f8:	10840014 	ori	r2,r2,4096
    a5fc:	8080030d 	sth	r2,12(r16)
    a600:	1805883a 	mov	r2,r3
    a604:	dfc00117 	ldw	ra,4(sp)
    a608:	dc000017 	ldw	r16,0(sp)
    a60c:	dec00204 	addi	sp,sp,8
    a610:	f800283a 	ret
    a614:	8080030b 	ldhu	r2,12(r16)
    a618:	10bbffcc 	andi	r2,r2,61439
    a61c:	8080030d 	sth	r2,12(r16)
    a620:	1805883a 	mov	r2,r3
    a624:	dfc00117 	ldw	ra,4(sp)
    a628:	dc000017 	ldw	r16,0(sp)
    a62c:	dec00204 	addi	sp,sp,8
    a630:	f800283a 	ret

0000a634 <__swrite>:
    a634:	2880030b 	ldhu	r2,12(r5)
    a638:	defffb04 	addi	sp,sp,-20
    a63c:	dcc00315 	stw	r19,12(sp)
    a640:	1080400c 	andi	r2,r2,256
    a644:	dc800215 	stw	r18,8(sp)
    a648:	dc400115 	stw	r17,4(sp)
    a64c:	dc000015 	stw	r16,0(sp)
    a650:	3027883a 	mov	r19,r6
    a654:	3825883a 	mov	r18,r7
    a658:	dfc00415 	stw	ra,16(sp)
    a65c:	2821883a 	mov	r16,r5
    a660:	000d883a 	mov	r6,zero
    a664:	01c00084 	movi	r7,2
    a668:	2023883a 	mov	r17,r4
    a66c:	10000226 	beq	r2,zero,a678 <__swrite+0x44>
    a670:	2940038f 	ldh	r5,14(r5)
    a674:	000abe40 	call	abe4 <_lseek_r>
    a678:	8080030b 	ldhu	r2,12(r16)
    a67c:	8140038f 	ldh	r5,14(r16)
    a680:	8809883a 	mov	r4,r17
    a684:	10bbffcc 	andi	r2,r2,61439
    a688:	980d883a 	mov	r6,r19
    a68c:	900f883a 	mov	r7,r18
    a690:	8080030d 	sth	r2,12(r16)
    a694:	dfc00417 	ldw	ra,16(sp)
    a698:	dcc00317 	ldw	r19,12(sp)
    a69c:	dc800217 	ldw	r18,8(sp)
    a6a0:	dc400117 	ldw	r17,4(sp)
    a6a4:	dc000017 	ldw	r16,0(sp)
    a6a8:	dec00504 	addi	sp,sp,20
    a6ac:	000a8401 	jmpi	a840 <_write_r>

0000a6b0 <__sread>:
    a6b0:	defffe04 	addi	sp,sp,-8
    a6b4:	dc000015 	stw	r16,0(sp)
    a6b8:	2821883a 	mov	r16,r5
    a6bc:	2940038f 	ldh	r5,14(r5)
    a6c0:	dfc00115 	stw	ra,4(sp)
    a6c4:	000ac5c0 	call	ac5c <_read_r>
    a6c8:	1007883a 	mov	r3,r2
    a6cc:	10000816 	blt	r2,zero,a6f0 <__sread+0x40>
    a6d0:	80801417 	ldw	r2,80(r16)
    a6d4:	10c5883a 	add	r2,r2,r3
    a6d8:	80801415 	stw	r2,80(r16)
    a6dc:	1805883a 	mov	r2,r3
    a6e0:	dfc00117 	ldw	ra,4(sp)
    a6e4:	dc000017 	ldw	r16,0(sp)
    a6e8:	dec00204 	addi	sp,sp,8
    a6ec:	f800283a 	ret
    a6f0:	8080030b 	ldhu	r2,12(r16)
    a6f4:	10bbffcc 	andi	r2,r2,61439
    a6f8:	8080030d 	sth	r2,12(r16)
    a6fc:	1805883a 	mov	r2,r3
    a700:	dfc00117 	ldw	ra,4(sp)
    a704:	dc000017 	ldw	r16,0(sp)
    a708:	dec00204 	addi	sp,sp,8
    a70c:	f800283a 	ret

0000a710 <strcmp>:
    a710:	2144b03a 	or	r2,r4,r5
    a714:	108000cc 	andi	r2,r2,3
    a718:	10001d1e 	bne	r2,zero,a790 <strcmp+0x80>
    a71c:	200f883a 	mov	r7,r4
    a720:	28800017 	ldw	r2,0(r5)
    a724:	21000017 	ldw	r4,0(r4)
    a728:	280d883a 	mov	r6,r5
    a72c:	2080161e 	bne	r4,r2,a788 <strcmp+0x78>
    a730:	023fbff4 	movhi	r8,65279
    a734:	423fbfc4 	addi	r8,r8,-257
    a738:	2207883a 	add	r3,r4,r8
    a73c:	01602074 	movhi	r5,32897
    a740:	29602004 	addi	r5,r5,-32640
    a744:	1946703a 	and	r3,r3,r5
    a748:	0104303a 	nor	r2,zero,r4
    a74c:	10c4703a 	and	r2,r2,r3
    a750:	10001c1e 	bne	r2,zero,a7c4 <strcmp+0xb4>
    a754:	4013883a 	mov	r9,r8
    a758:	2811883a 	mov	r8,r5
    a75c:	00000106 	br	a764 <strcmp+0x54>
    a760:	1800181e 	bne	r3,zero,a7c4 <strcmp+0xb4>
    a764:	39c00104 	addi	r7,r7,4
    a768:	39000017 	ldw	r4,0(r7)
    a76c:	31800104 	addi	r6,r6,4
    a770:	31400017 	ldw	r5,0(r6)
    a774:	2245883a 	add	r2,r4,r9
    a778:	1204703a 	and	r2,r2,r8
    a77c:	0106303a 	nor	r3,zero,r4
    a780:	1886703a 	and	r3,r3,r2
    a784:	217ff626 	beq	r4,r5,a760 <strcmp+0x50>
    a788:	3809883a 	mov	r4,r7
    a78c:	300b883a 	mov	r5,r6
    a790:	20c00007 	ldb	r3,0(r4)
    a794:	1800051e 	bne	r3,zero,a7ac <strcmp+0x9c>
    a798:	00000606 	br	a7b4 <strcmp+0xa4>
    a79c:	21000044 	addi	r4,r4,1
    a7a0:	20c00007 	ldb	r3,0(r4)
    a7a4:	29400044 	addi	r5,r5,1
    a7a8:	18000226 	beq	r3,zero,a7b4 <strcmp+0xa4>
    a7ac:	28800007 	ldb	r2,0(r5)
    a7b0:	18bffa26 	beq	r3,r2,a79c <strcmp+0x8c>
    a7b4:	20c00003 	ldbu	r3,0(r4)
    a7b8:	28800003 	ldbu	r2,0(r5)
    a7bc:	1885c83a 	sub	r2,r3,r2
    a7c0:	f800283a 	ret
    a7c4:	0005883a 	mov	r2,zero
    a7c8:	f800283a 	ret

0000a7cc <strlen>:
    a7cc:	208000cc 	andi	r2,r4,3
    a7d0:	2011883a 	mov	r8,r4
    a7d4:	1000161e 	bne	r2,zero,a830 <strlen+0x64>
    a7d8:	20c00017 	ldw	r3,0(r4)
    a7dc:	017fbff4 	movhi	r5,65279
    a7e0:	297fbfc4 	addi	r5,r5,-257
    a7e4:	01e02074 	movhi	r7,32897
    a7e8:	39e02004 	addi	r7,r7,-32640
    a7ec:	1945883a 	add	r2,r3,r5
    a7f0:	11c4703a 	and	r2,r2,r7
    a7f4:	00c6303a 	nor	r3,zero,r3
    a7f8:	1886703a 	and	r3,r3,r2
    a7fc:	18000c1e 	bne	r3,zero,a830 <strlen+0x64>
    a800:	280d883a 	mov	r6,r5
    a804:	380b883a 	mov	r5,r7
    a808:	21000104 	addi	r4,r4,4
    a80c:	20800017 	ldw	r2,0(r4)
    a810:	1187883a 	add	r3,r2,r6
    a814:	1946703a 	and	r3,r3,r5
    a818:	0084303a 	nor	r2,zero,r2
    a81c:	10c4703a 	and	r2,r2,r3
    a820:	103ff926 	beq	r2,zero,a808 <strlen+0x3c>
    a824:	20800007 	ldb	r2,0(r4)
    a828:	10000326 	beq	r2,zero,a838 <strlen+0x6c>
    a82c:	21000044 	addi	r4,r4,1
    a830:	20800007 	ldb	r2,0(r4)
    a834:	103ffd1e 	bne	r2,zero,a82c <strlen+0x60>
    a838:	2205c83a 	sub	r2,r4,r8
    a83c:	f800283a 	ret

0000a840 <_write_r>:
    a840:	defffd04 	addi	sp,sp,-12
    a844:	dc000015 	stw	r16,0(sp)
    a848:	040000b4 	movhi	r16,2
    a84c:	84207804 	addi	r16,r16,-32288
    a850:	dc400115 	stw	r17,4(sp)
    a854:	80000015 	stw	zero,0(r16)
    a858:	2023883a 	mov	r17,r4
    a85c:	2809883a 	mov	r4,r5
    a860:	300b883a 	mov	r5,r6
    a864:	380d883a 	mov	r6,r7
    a868:	dfc00215 	stw	ra,8(sp)
    a86c:	000d9440 	call	d944 <write>
    a870:	1007883a 	mov	r3,r2
    a874:	00bfffc4 	movi	r2,-1
    a878:	18800626 	beq	r3,r2,a894 <_write_r+0x54>
    a87c:	1805883a 	mov	r2,r3
    a880:	dfc00217 	ldw	ra,8(sp)
    a884:	dc400117 	ldw	r17,4(sp)
    a888:	dc000017 	ldw	r16,0(sp)
    a88c:	dec00304 	addi	sp,sp,12
    a890:	f800283a 	ret
    a894:	80800017 	ldw	r2,0(r16)
    a898:	103ff826 	beq	r2,zero,a87c <_write_r+0x3c>
    a89c:	88800015 	stw	r2,0(r17)
    a8a0:	1805883a 	mov	r2,r3
    a8a4:	dfc00217 	ldw	ra,8(sp)
    a8a8:	dc400117 	ldw	r17,4(sp)
    a8ac:	dc000017 	ldw	r16,0(sp)
    a8b0:	dec00304 	addi	sp,sp,12
    a8b4:	f800283a 	ret

0000a8b8 <_calloc_r>:
    a8b8:	298b383a 	mul	r5,r5,r6
    a8bc:	defffe04 	addi	sp,sp,-8
    a8c0:	dc000015 	stw	r16,0(sp)
    a8c4:	dfc00115 	stw	ra,4(sp)
    a8c8:	00085f80 	call	85f8 <_malloc_r>
    a8cc:	1021883a 	mov	r16,r2
    a8d0:	01c00904 	movi	r7,36
    a8d4:	10000d26 	beq	r2,zero,a90c <_calloc_r+0x54>
    a8d8:	10ffff17 	ldw	r3,-4(r2)
    a8dc:	1009883a 	mov	r4,r2
    a8e0:	00bfff04 	movi	r2,-4
    a8e4:	1886703a 	and	r3,r3,r2
    a8e8:	1887883a 	add	r3,r3,r2
    a8ec:	180d883a 	mov	r6,r3
    a8f0:	000b883a 	mov	r5,zero
    a8f4:	38c01736 	bltu	r7,r3,a954 <_calloc_r+0x9c>
    a8f8:	008004c4 	movi	r2,19
    a8fc:	10c00836 	bltu	r2,r3,a920 <_calloc_r+0x68>
    a900:	20000215 	stw	zero,8(r4)
    a904:	20000015 	stw	zero,0(r4)
    a908:	20000115 	stw	zero,4(r4)
    a90c:	8005883a 	mov	r2,r16
    a910:	dfc00117 	ldw	ra,4(sp)
    a914:	dc000017 	ldw	r16,0(sp)
    a918:	dec00204 	addi	sp,sp,8
    a91c:	f800283a 	ret
    a920:	008006c4 	movi	r2,27
    a924:	80000015 	stw	zero,0(r16)
    a928:	80000115 	stw	zero,4(r16)
    a92c:	81000204 	addi	r4,r16,8
    a930:	10fff32e 	bgeu	r2,r3,a900 <_calloc_r+0x48>
    a934:	80000215 	stw	zero,8(r16)
    a938:	80000315 	stw	zero,12(r16)
    a93c:	81000404 	addi	r4,r16,16
    a940:	19ffef1e 	bne	r3,r7,a900 <_calloc_r+0x48>
    a944:	81000604 	addi	r4,r16,24
    a948:	80000415 	stw	zero,16(r16)
    a94c:	80000515 	stw	zero,20(r16)
    a950:	003feb06 	br	a900 <_calloc_r+0x48>
    a954:	0003b140 	call	3b14 <memset>
    a958:	8005883a 	mov	r2,r16
    a95c:	dfc00117 	ldw	ra,4(sp)
    a960:	dc000017 	ldw	r16,0(sp)
    a964:	dec00204 	addi	sp,sp,8
    a968:	f800283a 	ret

0000a96c <_close_r>:
    a96c:	defffd04 	addi	sp,sp,-12
    a970:	dc000015 	stw	r16,0(sp)
    a974:	040000b4 	movhi	r16,2
    a978:	84207804 	addi	r16,r16,-32288
    a97c:	dc400115 	stw	r17,4(sp)
    a980:	80000015 	stw	zero,0(r16)
    a984:	2023883a 	mov	r17,r4
    a988:	2809883a 	mov	r4,r5
    a98c:	dfc00215 	stw	ra,8(sp)
    a990:	000cb8c0 	call	cb8c <close>
    a994:	1007883a 	mov	r3,r2
    a998:	00bfffc4 	movi	r2,-1
    a99c:	18800626 	beq	r3,r2,a9b8 <_close_r+0x4c>
    a9a0:	1805883a 	mov	r2,r3
    a9a4:	dfc00217 	ldw	ra,8(sp)
    a9a8:	dc400117 	ldw	r17,4(sp)
    a9ac:	dc000017 	ldw	r16,0(sp)
    a9b0:	dec00304 	addi	sp,sp,12
    a9b4:	f800283a 	ret
    a9b8:	80800017 	ldw	r2,0(r16)
    a9bc:	103ff826 	beq	r2,zero,a9a0 <_close_r+0x34>
    a9c0:	88800015 	stw	r2,0(r17)
    a9c4:	1805883a 	mov	r2,r3
    a9c8:	dfc00217 	ldw	ra,8(sp)
    a9cc:	dc400117 	ldw	r17,4(sp)
    a9d0:	dc000017 	ldw	r16,0(sp)
    a9d4:	dec00304 	addi	sp,sp,12
    a9d8:	f800283a 	ret

0000a9dc <_fclose_r>:
    a9dc:	defffc04 	addi	sp,sp,-16
    a9e0:	dc400115 	stw	r17,4(sp)
    a9e4:	dc000015 	stw	r16,0(sp)
    a9e8:	dfc00315 	stw	ra,12(sp)
    a9ec:	dc800215 	stw	r18,8(sp)
    a9f0:	2821883a 	mov	r16,r5
    a9f4:	2023883a 	mov	r17,r4
    a9f8:	28002926 	beq	r5,zero,aaa0 <_fclose_r+0xc4>
    a9fc:	00076dc0 	call	76dc <__sfp_lock_acquire>
    aa00:	88000226 	beq	r17,zero,aa0c <_fclose_r+0x30>
    aa04:	88800e17 	ldw	r2,56(r17)
    aa08:	10002d26 	beq	r2,zero,aac0 <_fclose_r+0xe4>
    aa0c:	8080030f 	ldh	r2,12(r16)
    aa10:	10002226 	beq	r2,zero,aa9c <_fclose_r+0xc0>
    aa14:	8809883a 	mov	r4,r17
    aa18:	800b883a 	mov	r5,r16
    aa1c:	00074540 	call	7454 <_fflush_r>
    aa20:	1025883a 	mov	r18,r2
    aa24:	80800b17 	ldw	r2,44(r16)
    aa28:	10000426 	beq	r2,zero,aa3c <_fclose_r+0x60>
    aa2c:	81400717 	ldw	r5,28(r16)
    aa30:	8809883a 	mov	r4,r17
    aa34:	103ee83a 	callr	r2
    aa38:	10002a16 	blt	r2,zero,aae4 <_fclose_r+0x108>
    aa3c:	8080030b 	ldhu	r2,12(r16)
    aa40:	1080200c 	andi	r2,r2,128
    aa44:	1000231e 	bne	r2,zero,aad4 <_fclose_r+0xf8>
    aa48:	81400c17 	ldw	r5,48(r16)
    aa4c:	28000526 	beq	r5,zero,aa64 <_fclose_r+0x88>
    aa50:	80801004 	addi	r2,r16,64
    aa54:	28800226 	beq	r5,r2,aa60 <_fclose_r+0x84>
    aa58:	8809883a 	mov	r4,r17
    aa5c:	0007a700 	call	7a70 <_free_r>
    aa60:	80000c15 	stw	zero,48(r16)
    aa64:	81401117 	ldw	r5,68(r16)
    aa68:	28000326 	beq	r5,zero,aa78 <_fclose_r+0x9c>
    aa6c:	8809883a 	mov	r4,r17
    aa70:	0007a700 	call	7a70 <_free_r>
    aa74:	80001115 	stw	zero,68(r16)
    aa78:	8000030d 	sth	zero,12(r16)
    aa7c:	00076e00 	call	76e0 <__sfp_lock_release>
    aa80:	9005883a 	mov	r2,r18
    aa84:	dfc00317 	ldw	ra,12(sp)
    aa88:	dc800217 	ldw	r18,8(sp)
    aa8c:	dc400117 	ldw	r17,4(sp)
    aa90:	dc000017 	ldw	r16,0(sp)
    aa94:	dec00404 	addi	sp,sp,16
    aa98:	f800283a 	ret
    aa9c:	00076e00 	call	76e0 <__sfp_lock_release>
    aaa0:	0025883a 	mov	r18,zero
    aaa4:	9005883a 	mov	r2,r18
    aaa8:	dfc00317 	ldw	ra,12(sp)
    aaac:	dc800217 	ldw	r18,8(sp)
    aab0:	dc400117 	ldw	r17,4(sp)
    aab4:	dc000017 	ldw	r16,0(sp)
    aab8:	dec00404 	addi	sp,sp,16
    aabc:	f800283a 	ret
    aac0:	8809883a 	mov	r4,r17
    aac4:	00076ec0 	call	76ec <__sinit>
    aac8:	8080030f 	ldh	r2,12(r16)
    aacc:	103fd11e 	bne	r2,zero,aa14 <_fclose_r+0x38>
    aad0:	003ff206 	br	aa9c <_fclose_r+0xc0>
    aad4:	81400417 	ldw	r5,16(r16)
    aad8:	8809883a 	mov	r4,r17
    aadc:	0007a700 	call	7a70 <_free_r>
    aae0:	003fd906 	br	aa48 <_fclose_r+0x6c>
    aae4:	04bfffc4 	movi	r18,-1
    aae8:	003fd406 	br	aa3c <_fclose_r+0x60>

0000aaec <fclose>:
    aaec:	00800074 	movhi	r2,1
    aaf0:	10981d04 	addi	r2,r2,24692
    aaf4:	200b883a 	mov	r5,r4
    aaf8:	11000017 	ldw	r4,0(r2)
    aafc:	000a9dc1 	jmpi	a9dc <_fclose_r>

0000ab00 <_fstat_r>:
    ab00:	defffd04 	addi	sp,sp,-12
    ab04:	dc000015 	stw	r16,0(sp)
    ab08:	040000b4 	movhi	r16,2
    ab0c:	84207804 	addi	r16,r16,-32288
    ab10:	dc400115 	stw	r17,4(sp)
    ab14:	80000015 	stw	zero,0(r16)
    ab18:	2023883a 	mov	r17,r4
    ab1c:	2809883a 	mov	r4,r5
    ab20:	300b883a 	mov	r5,r6
    ab24:	dfc00215 	stw	ra,8(sp)
    ab28:	000cd140 	call	cd14 <fstat>
    ab2c:	1007883a 	mov	r3,r2
    ab30:	00bfffc4 	movi	r2,-1
    ab34:	18800626 	beq	r3,r2,ab50 <_fstat_r+0x50>
    ab38:	1805883a 	mov	r2,r3
    ab3c:	dfc00217 	ldw	ra,8(sp)
    ab40:	dc400117 	ldw	r17,4(sp)
    ab44:	dc000017 	ldw	r16,0(sp)
    ab48:	dec00304 	addi	sp,sp,12
    ab4c:	f800283a 	ret
    ab50:	80800017 	ldw	r2,0(r16)
    ab54:	103ff826 	beq	r2,zero,ab38 <_fstat_r+0x38>
    ab58:	88800015 	stw	r2,0(r17)
    ab5c:	1805883a 	mov	r2,r3
    ab60:	dfc00217 	ldw	ra,8(sp)
    ab64:	dc400117 	ldw	r17,4(sp)
    ab68:	dc000017 	ldw	r16,0(sp)
    ab6c:	dec00304 	addi	sp,sp,12
    ab70:	f800283a 	ret

0000ab74 <_isatty_r>:
    ab74:	defffd04 	addi	sp,sp,-12
    ab78:	dc000015 	stw	r16,0(sp)
    ab7c:	040000b4 	movhi	r16,2
    ab80:	84207804 	addi	r16,r16,-32288
    ab84:	dc400115 	stw	r17,4(sp)
    ab88:	80000015 	stw	zero,0(r16)
    ab8c:	2023883a 	mov	r17,r4
    ab90:	2809883a 	mov	r4,r5
    ab94:	dfc00215 	stw	ra,8(sp)
    ab98:	000d0080 	call	d008 <isatty>
    ab9c:	1007883a 	mov	r3,r2
    aba0:	00bfffc4 	movi	r2,-1
    aba4:	18800626 	beq	r3,r2,abc0 <_isatty_r+0x4c>
    aba8:	1805883a 	mov	r2,r3
    abac:	dfc00217 	ldw	ra,8(sp)
    abb0:	dc400117 	ldw	r17,4(sp)
    abb4:	dc000017 	ldw	r16,0(sp)
    abb8:	dec00304 	addi	sp,sp,12
    abbc:	f800283a 	ret
    abc0:	80800017 	ldw	r2,0(r16)
    abc4:	103ff826 	beq	r2,zero,aba8 <_isatty_r+0x34>
    abc8:	88800015 	stw	r2,0(r17)
    abcc:	1805883a 	mov	r2,r3
    abd0:	dfc00217 	ldw	ra,8(sp)
    abd4:	dc400117 	ldw	r17,4(sp)
    abd8:	dc000017 	ldw	r16,0(sp)
    abdc:	dec00304 	addi	sp,sp,12
    abe0:	f800283a 	ret

0000abe4 <_lseek_r>:
    abe4:	defffd04 	addi	sp,sp,-12
    abe8:	dc000015 	stw	r16,0(sp)
    abec:	040000b4 	movhi	r16,2
    abf0:	84207804 	addi	r16,r16,-32288
    abf4:	dc400115 	stw	r17,4(sp)
    abf8:	80000015 	stw	zero,0(r16)
    abfc:	2023883a 	mov	r17,r4
    ac00:	2809883a 	mov	r4,r5
    ac04:	300b883a 	mov	r5,r6
    ac08:	380d883a 	mov	r6,r7
    ac0c:	dfc00215 	stw	ra,8(sp)
    ac10:	000d2140 	call	d214 <lseek>
    ac14:	1007883a 	mov	r3,r2
    ac18:	00bfffc4 	movi	r2,-1
    ac1c:	18800626 	beq	r3,r2,ac38 <_lseek_r+0x54>
    ac20:	1805883a 	mov	r2,r3
    ac24:	dfc00217 	ldw	ra,8(sp)
    ac28:	dc400117 	ldw	r17,4(sp)
    ac2c:	dc000017 	ldw	r16,0(sp)
    ac30:	dec00304 	addi	sp,sp,12
    ac34:	f800283a 	ret
    ac38:	80800017 	ldw	r2,0(r16)
    ac3c:	103ff826 	beq	r2,zero,ac20 <_lseek_r+0x3c>
    ac40:	88800015 	stw	r2,0(r17)
    ac44:	1805883a 	mov	r2,r3
    ac48:	dfc00217 	ldw	ra,8(sp)
    ac4c:	dc400117 	ldw	r17,4(sp)
    ac50:	dc000017 	ldw	r16,0(sp)
    ac54:	dec00304 	addi	sp,sp,12
    ac58:	f800283a 	ret

0000ac5c <_read_r>:
    ac5c:	defffd04 	addi	sp,sp,-12
    ac60:	dc000015 	stw	r16,0(sp)
    ac64:	040000b4 	movhi	r16,2
    ac68:	84207804 	addi	r16,r16,-32288
    ac6c:	dc400115 	stw	r17,4(sp)
    ac70:	80000015 	stw	zero,0(r16)
    ac74:	2023883a 	mov	r17,r4
    ac78:	2809883a 	mov	r4,r5
    ac7c:	300b883a 	mov	r5,r6
    ac80:	380d883a 	mov	r6,r7
    ac84:	dfc00215 	stw	ra,8(sp)
    ac88:	000d6a80 	call	d6a8 <read>
    ac8c:	1007883a 	mov	r3,r2
    ac90:	00bfffc4 	movi	r2,-1
    ac94:	18800626 	beq	r3,r2,acb0 <_read_r+0x54>
    ac98:	1805883a 	mov	r2,r3
    ac9c:	dfc00217 	ldw	ra,8(sp)
    aca0:	dc400117 	ldw	r17,4(sp)
    aca4:	dc000017 	ldw	r16,0(sp)
    aca8:	dec00304 	addi	sp,sp,12
    acac:	f800283a 	ret
    acb0:	80800017 	ldw	r2,0(r16)
    acb4:	103ff826 	beq	r2,zero,ac98 <_read_r+0x3c>
    acb8:	88800015 	stw	r2,0(r17)
    acbc:	1805883a 	mov	r2,r3
    acc0:	dfc00217 	ldw	ra,8(sp)
    acc4:	dc400117 	ldw	r17,4(sp)
    acc8:	dc000017 	ldw	r16,0(sp)
    accc:	dec00304 	addi	sp,sp,12
    acd0:	f800283a 	ret

0000acd4 <__udivdi3>:
    acd4:	defff004 	addi	sp,sp,-64
    acd8:	2005883a 	mov	r2,r4
    acdc:	3011883a 	mov	r8,r6
    ace0:	df000e15 	stw	fp,56(sp)
    ace4:	dd000a15 	stw	r20,40(sp)
    ace8:	dc000615 	stw	r16,24(sp)
    acec:	dfc00f15 	stw	ra,60(sp)
    acf0:	ddc00d15 	stw	r23,52(sp)
    acf4:	dd800c15 	stw	r22,48(sp)
    acf8:	dd400b15 	stw	r21,44(sp)
    acfc:	dcc00915 	stw	r19,36(sp)
    ad00:	dc800815 	stw	r18,32(sp)
    ad04:	dc400715 	stw	r17,28(sp)
    ad08:	4021883a 	mov	r16,r8
    ad0c:	1039883a 	mov	fp,r2
    ad10:	2829883a 	mov	r20,r5
    ad14:	38003b1e 	bne	r7,zero,ae04 <__udivdi3+0x130>
    ad18:	2a005c36 	bltu	r5,r8,ae8c <__udivdi3+0x1b8>
    ad1c:	4000a626 	beq	r8,zero,afb8 <__udivdi3+0x2e4>
    ad20:	00bfffd4 	movui	r2,65535
    ad24:	14009e36 	bltu	r2,r16,afa0 <__udivdi3+0x2cc>
    ad28:	00803fc4 	movi	r2,255
    ad2c:	14013d36 	bltu	r2,r16,b224 <__udivdi3+0x550>
    ad30:	000b883a 	mov	r5,zero
    ad34:	0005883a 	mov	r2,zero
    ad38:	8084d83a 	srl	r2,r16,r2
    ad3c:	01000074 	movhi	r4,1
    ad40:	210ed904 	addi	r4,r4,15204
    ad44:	01800804 	movi	r6,32
    ad48:	1105883a 	add	r2,r2,r4
    ad4c:	10c00003 	ldbu	r3,0(r2)
    ad50:	28c7883a 	add	r3,r5,r3
    ad54:	30edc83a 	sub	r22,r6,r3
    ad58:	b000ee1e 	bne	r22,zero,b114 <__udivdi3+0x440>
    ad5c:	802ad43a 	srli	r21,r16,16
    ad60:	00800044 	movi	r2,1
    ad64:	a423c83a 	sub	r17,r20,r16
    ad68:	85ffffcc 	andi	r23,r16,65535
    ad6c:	d8800315 	stw	r2,12(sp)
    ad70:	8809883a 	mov	r4,r17
    ad74:	a80b883a 	mov	r5,r21
    ad78:	00034a80 	call	34a8 <__udivsi3>
    ad7c:	8809883a 	mov	r4,r17
    ad80:	a80b883a 	mov	r5,r21
    ad84:	102d883a 	mov	r22,r2
    ad88:	00034b00 	call	34b0 <__umodsi3>
    ad8c:	1004943a 	slli	r2,r2,16
    ad90:	e006d43a 	srli	r3,fp,16
    ad94:	bda3383a 	mul	r17,r23,r22
    ad98:	10c4b03a 	or	r2,r2,r3
    ad9c:	1440042e 	bgeu	r2,r17,adb0 <__udivdi3+0xdc>
    ada0:	1405883a 	add	r2,r2,r16
    ada4:	b5bfffc4 	addi	r22,r22,-1
    ada8:	14000136 	bltu	r2,r16,adb0 <__udivdi3+0xdc>
    adac:	14413d36 	bltu	r2,r17,b2a4 <__udivdi3+0x5d0>
    adb0:	1463c83a 	sub	r17,r2,r17
    adb4:	8809883a 	mov	r4,r17
    adb8:	a80b883a 	mov	r5,r21
    adbc:	00034a80 	call	34a8 <__udivsi3>
    adc0:	8809883a 	mov	r4,r17
    adc4:	a80b883a 	mov	r5,r21
    adc8:	1029883a 	mov	r20,r2
    adcc:	00034b00 	call	34b0 <__umodsi3>
    add0:	1004943a 	slli	r2,r2,16
    add4:	bd09383a 	mul	r4,r23,r20
    add8:	e0ffffcc 	andi	r3,fp,65535
    addc:	10c4b03a 	or	r2,r2,r3
    ade0:	1100042e 	bgeu	r2,r4,adf4 <__udivdi3+0x120>
    ade4:	8085883a 	add	r2,r16,r2
    ade8:	a53fffc4 	addi	r20,r20,-1
    adec:	14000136 	bltu	r2,r16,adf4 <__udivdi3+0x120>
    adf0:	11012036 	bltu	r2,r4,b274 <__udivdi3+0x5a0>
    adf4:	b004943a 	slli	r2,r22,16
    adf8:	d9000317 	ldw	r4,12(sp)
    adfc:	a084b03a 	or	r2,r20,r2
    ae00:	00001506 	br	ae58 <__udivdi3+0x184>
    ae04:	380d883a 	mov	r6,r7
    ae08:	29c06236 	bltu	r5,r7,af94 <__udivdi3+0x2c0>
    ae0c:	00bfffd4 	movui	r2,65535
    ae10:	11c05a36 	bltu	r2,r7,af7c <__udivdi3+0x2a8>
    ae14:	00803fc4 	movi	r2,255
    ae18:	11c0fc36 	bltu	r2,r7,b20c <__udivdi3+0x538>
    ae1c:	000b883a 	mov	r5,zero
    ae20:	0005883a 	mov	r2,zero
    ae24:	3084d83a 	srl	r2,r6,r2
    ae28:	01000074 	movhi	r4,1
    ae2c:	210ed904 	addi	r4,r4,15204
    ae30:	01c00804 	movi	r7,32
    ae34:	1105883a 	add	r2,r2,r4
    ae38:	10c00003 	ldbu	r3,0(r2)
    ae3c:	28c7883a 	add	r3,r5,r3
    ae40:	38efc83a 	sub	r23,r7,r3
    ae44:	b800691e 	bne	r23,zero,afec <__udivdi3+0x318>
    ae48:	35000136 	bltu	r6,r20,ae50 <__udivdi3+0x17c>
    ae4c:	e4005136 	bltu	fp,r16,af94 <__udivdi3+0x2c0>
    ae50:	00800044 	movi	r2,1
    ae54:	0009883a 	mov	r4,zero
    ae58:	2007883a 	mov	r3,r4
    ae5c:	dfc00f17 	ldw	ra,60(sp)
    ae60:	df000e17 	ldw	fp,56(sp)
    ae64:	ddc00d17 	ldw	r23,52(sp)
    ae68:	dd800c17 	ldw	r22,48(sp)
    ae6c:	dd400b17 	ldw	r21,44(sp)
    ae70:	dd000a17 	ldw	r20,40(sp)
    ae74:	dcc00917 	ldw	r19,36(sp)
    ae78:	dc800817 	ldw	r18,32(sp)
    ae7c:	dc400717 	ldw	r17,28(sp)
    ae80:	dc000617 	ldw	r16,24(sp)
    ae84:	dec01004 	addi	sp,sp,64
    ae88:	f800283a 	ret
    ae8c:	00bfffd4 	movui	r2,65535
    ae90:	12005036 	bltu	r2,r8,afd4 <__udivdi3+0x300>
    ae94:	00803fc4 	movi	r2,255
    ae98:	1200e836 	bltu	r2,r8,b23c <__udivdi3+0x568>
    ae9c:	000b883a 	mov	r5,zero
    aea0:	0005883a 	mov	r2,zero
    aea4:	8084d83a 	srl	r2,r16,r2
    aea8:	01000074 	movhi	r4,1
    aeac:	210ed904 	addi	r4,r4,15204
    aeb0:	01800804 	movi	r6,32
    aeb4:	1105883a 	add	r2,r2,r4
    aeb8:	10c00003 	ldbu	r3,0(r2)
    aebc:	28c7883a 	add	r3,r5,r3
    aec0:	30cbc83a 	sub	r5,r6,r3
    aec4:	28000626 	beq	r5,zero,aee0 <__udivdi3+0x20c>
    aec8:	3145c83a 	sub	r2,r6,r5
    aecc:	e084d83a 	srl	r2,fp,r2
    aed0:	a146983a 	sll	r3,r20,r5
    aed4:	e178983a 	sll	fp,fp,r5
    aed8:	8160983a 	sll	r16,r16,r5
    aedc:	18a8b03a 	or	r20,r3,r2
    aee0:	802ad43a 	srli	r21,r16,16
    aee4:	a009883a 	mov	r4,r20
    aee8:	85ffffcc 	andi	r23,r16,65535
    aeec:	a80b883a 	mov	r5,r21
    aef0:	00034a80 	call	34a8 <__udivsi3>
    aef4:	a009883a 	mov	r4,r20
    aef8:	a80b883a 	mov	r5,r21
    aefc:	102d883a 	mov	r22,r2
    af00:	00034b00 	call	34b0 <__umodsi3>
    af04:	1004943a 	slli	r2,r2,16
    af08:	e006d43a 	srli	r3,fp,16
    af0c:	bda3383a 	mul	r17,r23,r22
    af10:	10c4b03a 	or	r2,r2,r3
    af14:	1440042e 	bgeu	r2,r17,af28 <__udivdi3+0x254>
    af18:	1405883a 	add	r2,r2,r16
    af1c:	b5bfffc4 	addi	r22,r22,-1
    af20:	14000136 	bltu	r2,r16,af28 <__udivdi3+0x254>
    af24:	1440d536 	bltu	r2,r17,b27c <__udivdi3+0x5a8>
    af28:	1463c83a 	sub	r17,r2,r17
    af2c:	8809883a 	mov	r4,r17
    af30:	a80b883a 	mov	r5,r21
    af34:	00034a80 	call	34a8 <__udivsi3>
    af38:	8809883a 	mov	r4,r17
    af3c:	a80b883a 	mov	r5,r21
    af40:	1029883a 	mov	r20,r2
    af44:	00034b00 	call	34b0 <__umodsi3>
    af48:	1004943a 	slli	r2,r2,16
    af4c:	bd09383a 	mul	r4,r23,r20
    af50:	e0ffffcc 	andi	r3,fp,65535
    af54:	10c4b03a 	or	r2,r2,r3
    af58:	1100042e 	bgeu	r2,r4,af6c <__udivdi3+0x298>
    af5c:	8085883a 	add	r2,r16,r2
    af60:	a53fffc4 	addi	r20,r20,-1
    af64:	14000136 	bltu	r2,r16,af6c <__udivdi3+0x298>
    af68:	1100c736 	bltu	r2,r4,b288 <__udivdi3+0x5b4>
    af6c:	b004943a 	slli	r2,r22,16
    af70:	0009883a 	mov	r4,zero
    af74:	a084b03a 	or	r2,r20,r2
    af78:	003fb706 	br	ae58 <__udivdi3+0x184>
    af7c:	00804034 	movhi	r2,256
    af80:	10bfffc4 	addi	r2,r2,-1
    af84:	11c0a436 	bltu	r2,r7,b218 <__udivdi3+0x544>
    af88:	01400404 	movi	r5,16
    af8c:	2805883a 	mov	r2,r5
    af90:	003fa406 	br	ae24 <__udivdi3+0x150>
    af94:	0005883a 	mov	r2,zero
    af98:	0009883a 	mov	r4,zero
    af9c:	003fae06 	br	ae58 <__udivdi3+0x184>
    afa0:	00804034 	movhi	r2,256
    afa4:	10bfffc4 	addi	r2,r2,-1
    afa8:	1400a136 	bltu	r2,r16,b230 <__udivdi3+0x55c>
    afac:	01400404 	movi	r5,16
    afb0:	2805883a 	mov	r2,r5
    afb4:	003f6006 	br	ad38 <__udivdi3+0x64>
    afb8:	01000044 	movi	r4,1
    afbc:	000b883a 	mov	r5,zero
    afc0:	00034a80 	call	34a8 <__udivsi3>
    afc4:	1021883a 	mov	r16,r2
    afc8:	00bfffd4 	movui	r2,65535
    afcc:	143ff436 	bltu	r2,r16,afa0 <__udivdi3+0x2cc>
    afd0:	003f5506 	br	ad28 <__udivdi3+0x54>
    afd4:	00804034 	movhi	r2,256
    afd8:	10bfffc4 	addi	r2,r2,-1
    afdc:	12009a36 	bltu	r2,r8,b248 <__udivdi3+0x574>
    afe0:	01400404 	movi	r5,16
    afe4:	2805883a 	mov	r2,r5
    afe8:	003fae06 	br	aea4 <__udivdi3+0x1d0>
    afec:	3dc5c83a 	sub	r2,r7,r23
    aff0:	35c8983a 	sll	r4,r6,r23
    aff4:	8086d83a 	srl	r3,r16,r2
    aff8:	a0a2d83a 	srl	r17,r20,r2
    affc:	e084d83a 	srl	r2,fp,r2
    b000:	20eab03a 	or	r21,r4,r3
    b004:	a82cd43a 	srli	r22,r21,16
    b008:	a5c6983a 	sll	r3,r20,r23
    b00c:	8809883a 	mov	r4,r17
    b010:	b00b883a 	mov	r5,r22
    b014:	1886b03a 	or	r3,r3,r2
    b018:	d8c00215 	stw	r3,8(sp)
    b01c:	00034a80 	call	34a8 <__udivsi3>
    b020:	8809883a 	mov	r4,r17
    b024:	b00b883a 	mov	r5,r22
    b028:	1029883a 	mov	r20,r2
    b02c:	00034b00 	call	34b0 <__umodsi3>
    b030:	a8ffffcc 	andi	r3,r21,65535
    b034:	d8c00515 	stw	r3,20(sp)
    b038:	d9000217 	ldw	r4,8(sp)
    b03c:	d9400517 	ldw	r5,20(sp)
    b040:	1004943a 	slli	r2,r2,16
    b044:	2006d43a 	srli	r3,r4,16
    b048:	85e0983a 	sll	r16,r16,r23
    b04c:	2d23383a 	mul	r17,r5,r20
    b050:	10c4b03a 	or	r2,r2,r3
    b054:	dc000015 	stw	r16,0(sp)
    b058:	1440032e 	bgeu	r2,r17,b068 <__udivdi3+0x394>
    b05c:	1545883a 	add	r2,r2,r21
    b060:	a53fffc4 	addi	r20,r20,-1
    b064:	15407f2e 	bgeu	r2,r21,b264 <__udivdi3+0x590>
    b068:	1463c83a 	sub	r17,r2,r17
    b06c:	8809883a 	mov	r4,r17
    b070:	b00b883a 	mov	r5,r22
    b074:	00034a80 	call	34a8 <__udivsi3>
    b078:	8809883a 	mov	r4,r17
    b07c:	b00b883a 	mov	r5,r22
    b080:	1021883a 	mov	r16,r2
    b084:	00034b00 	call	34b0 <__umodsi3>
    b088:	d8c00517 	ldw	r3,20(sp)
    b08c:	d9000217 	ldw	r4,8(sp)
    b090:	1004943a 	slli	r2,r2,16
    b094:	1c0f383a 	mul	r7,r3,r16
    b098:	20ffffcc 	andi	r3,r4,65535
    b09c:	10e2b03a 	or	r17,r2,r3
    b0a0:	89c0032e 	bgeu	r17,r7,b0b0 <__udivdi3+0x3dc>
    b0a4:	8d63883a 	add	r17,r17,r21
    b0a8:	843fffc4 	addi	r16,r16,-1
    b0ac:	8d40692e 	bgeu	r17,r21,b254 <__udivdi3+0x580>
    b0b0:	a008943a 	slli	r4,r20,16
    b0b4:	d9400017 	ldw	r5,0(sp)
    b0b8:	89e3c83a 	sub	r17,r17,r7
    b0bc:	8110b03a 	or	r8,r16,r4
    b0c0:	280cd43a 	srli	r6,r5,16
    b0c4:	28ffffcc 	andi	r3,r5,65535
    b0c8:	40bfffcc 	andi	r2,r8,65535
    b0cc:	400ad43a 	srli	r5,r8,16
    b0d0:	10d3383a 	mul	r9,r2,r3
    b0d4:	1185383a 	mul	r2,r2,r6
    b0d8:	28c7383a 	mul	r3,r5,r3
    b0dc:	4808d43a 	srli	r4,r9,16
    b0e0:	298b383a 	mul	r5,r5,r6
    b0e4:	10c5883a 	add	r2,r2,r3
    b0e8:	2089883a 	add	r4,r4,r2
    b0ec:	20c0022e 	bgeu	r4,r3,b0f8 <__udivdi3+0x424>
    b0f0:	00800074 	movhi	r2,1
    b0f4:	288b883a 	add	r5,r5,r2
    b0f8:	2004d43a 	srli	r2,r4,16
    b0fc:	288b883a 	add	r5,r5,r2
    b100:	89403f36 	bltu	r17,r5,b200 <__udivdi3+0x52c>
    b104:	89403926 	beq	r17,r5,b1ec <__udivdi3+0x518>
    b108:	4005883a 	mov	r2,r8
    b10c:	0009883a 	mov	r4,zero
    b110:	003f5106 	br	ae58 <__udivdi3+0x184>
    b114:	85a0983a 	sll	r16,r16,r22
    b118:	3585c83a 	sub	r2,r6,r22
    b11c:	a0a2d83a 	srl	r17,r20,r2
    b120:	802ad43a 	srli	r21,r16,16
    b124:	e084d83a 	srl	r2,fp,r2
    b128:	a586983a 	sll	r3,r20,r22
    b12c:	8809883a 	mov	r4,r17
    b130:	a80b883a 	mov	r5,r21
    b134:	1886b03a 	or	r3,r3,r2
    b138:	d8c00115 	stw	r3,4(sp)
    b13c:	00034a80 	call	34a8 <__udivsi3>
    b140:	8809883a 	mov	r4,r17
    b144:	a80b883a 	mov	r5,r21
    b148:	d8800415 	stw	r2,16(sp)
    b14c:	00034b00 	call	34b0 <__umodsi3>
    b150:	d9000117 	ldw	r4,4(sp)
    b154:	d9400417 	ldw	r5,16(sp)
    b158:	1004943a 	slli	r2,r2,16
    b15c:	85ffffcc 	andi	r23,r16,65535
    b160:	2006d43a 	srli	r3,r4,16
    b164:	b963383a 	mul	r17,r23,r5
    b168:	10c4b03a 	or	r2,r2,r3
    b16c:	1440042e 	bgeu	r2,r17,b180 <__udivdi3+0x4ac>
    b170:	297fffc4 	addi	r5,r5,-1
    b174:	1405883a 	add	r2,r2,r16
    b178:	d9400415 	stw	r5,16(sp)
    b17c:	1400442e 	bgeu	r2,r16,b290 <__udivdi3+0x5bc>
    b180:	1463c83a 	sub	r17,r2,r17
    b184:	8809883a 	mov	r4,r17
    b188:	a80b883a 	mov	r5,r21
    b18c:	00034a80 	call	34a8 <__udivsi3>
    b190:	8809883a 	mov	r4,r17
    b194:	a80b883a 	mov	r5,r21
    b198:	1029883a 	mov	r20,r2
    b19c:	00034b00 	call	34b0 <__umodsi3>
    b1a0:	d9400117 	ldw	r5,4(sp)
    b1a4:	1004943a 	slli	r2,r2,16
    b1a8:	bd09383a 	mul	r4,r23,r20
    b1ac:	28ffffcc 	andi	r3,r5,65535
    b1b0:	10c6b03a 	or	r3,r2,r3
    b1b4:	1900062e 	bgeu	r3,r4,b1d0 <__udivdi3+0x4fc>
    b1b8:	1c07883a 	add	r3,r3,r16
    b1bc:	a53fffc4 	addi	r20,r20,-1
    b1c0:	1c000336 	bltu	r3,r16,b1d0 <__udivdi3+0x4fc>
    b1c4:	1900022e 	bgeu	r3,r4,b1d0 <__udivdi3+0x4fc>
    b1c8:	a53fffc4 	addi	r20,r20,-1
    b1cc:	1c07883a 	add	r3,r3,r16
    b1d0:	d9400417 	ldw	r5,16(sp)
    b1d4:	e5b8983a 	sll	fp,fp,r22
    b1d8:	1923c83a 	sub	r17,r3,r4
    b1dc:	2804943a 	slli	r2,r5,16
    b1e0:	a0a8b03a 	or	r20,r20,r2
    b1e4:	dd000315 	stw	r20,12(sp)
    b1e8:	003ee106 	br	ad70 <__udivdi3+0x9c>
    b1ec:	2004943a 	slli	r2,r4,16
    b1f0:	e5c8983a 	sll	r4,fp,r23
    b1f4:	48ffffcc 	andi	r3,r9,65535
    b1f8:	10c5883a 	add	r2,r2,r3
    b1fc:	20bfc22e 	bgeu	r4,r2,b108 <__udivdi3+0x434>
    b200:	40bfffc4 	addi	r2,r8,-1
    b204:	0009883a 	mov	r4,zero
    b208:	003f1306 	br	ae58 <__udivdi3+0x184>
    b20c:	01400204 	movi	r5,8
    b210:	2805883a 	mov	r2,r5
    b214:	003f0306 	br	ae24 <__udivdi3+0x150>
    b218:	01400604 	movi	r5,24
    b21c:	2805883a 	mov	r2,r5
    b220:	003f0006 	br	ae24 <__udivdi3+0x150>
    b224:	01400204 	movi	r5,8
    b228:	2805883a 	mov	r2,r5
    b22c:	003ec206 	br	ad38 <__udivdi3+0x64>
    b230:	01400604 	movi	r5,24
    b234:	2805883a 	mov	r2,r5
    b238:	003ebf06 	br	ad38 <__udivdi3+0x64>
    b23c:	01400204 	movi	r5,8
    b240:	2805883a 	mov	r2,r5
    b244:	003f1706 	br	aea4 <__udivdi3+0x1d0>
    b248:	01400604 	movi	r5,24
    b24c:	2805883a 	mov	r2,r5
    b250:	003f1406 	br	aea4 <__udivdi3+0x1d0>
    b254:	89ff962e 	bgeu	r17,r7,b0b0 <__udivdi3+0x3dc>
    b258:	8d63883a 	add	r17,r17,r21
    b25c:	843fffc4 	addi	r16,r16,-1
    b260:	003f9306 	br	b0b0 <__udivdi3+0x3dc>
    b264:	147f802e 	bgeu	r2,r17,b068 <__udivdi3+0x394>
    b268:	a53fffc4 	addi	r20,r20,-1
    b26c:	1545883a 	add	r2,r2,r21
    b270:	003f7d06 	br	b068 <__udivdi3+0x394>
    b274:	a53fffc4 	addi	r20,r20,-1
    b278:	003ede06 	br	adf4 <__udivdi3+0x120>
    b27c:	b5bfffc4 	addi	r22,r22,-1
    b280:	1405883a 	add	r2,r2,r16
    b284:	003f2806 	br	af28 <__udivdi3+0x254>
    b288:	a53fffc4 	addi	r20,r20,-1
    b28c:	003f3706 	br	af6c <__udivdi3+0x298>
    b290:	147fbb2e 	bgeu	r2,r17,b180 <__udivdi3+0x4ac>
    b294:	297fffc4 	addi	r5,r5,-1
    b298:	1405883a 	add	r2,r2,r16
    b29c:	d9400415 	stw	r5,16(sp)
    b2a0:	003fb706 	br	b180 <__udivdi3+0x4ac>
    b2a4:	b5bfffc4 	addi	r22,r22,-1
    b2a8:	1405883a 	add	r2,r2,r16
    b2ac:	003ec006 	br	adb0 <__udivdi3+0xdc>

0000b2b0 <__umoddi3>:
    b2b0:	defff104 	addi	sp,sp,-60
    b2b4:	dd800b15 	stw	r22,44(sp)
    b2b8:	dd000915 	stw	r20,36(sp)
    b2bc:	dc000515 	stw	r16,20(sp)
    b2c0:	dfc00e15 	stw	ra,56(sp)
    b2c4:	df000d15 	stw	fp,52(sp)
    b2c8:	ddc00c15 	stw	r23,48(sp)
    b2cc:	dd400a15 	stw	r21,40(sp)
    b2d0:	dcc00815 	stw	r19,32(sp)
    b2d4:	dc800715 	stw	r18,28(sp)
    b2d8:	dc400615 	stw	r17,24(sp)
    b2dc:	3021883a 	mov	r16,r6
    b2e0:	202d883a 	mov	r22,r4
    b2e4:	2829883a 	mov	r20,r5
    b2e8:	38002b1e 	bne	r7,zero,b398 <__umoddi3+0xe8>
    b2ec:	29805036 	bltu	r5,r6,b430 <__umoddi3+0x180>
    b2f0:	30008a26 	beq	r6,zero,b51c <__umoddi3+0x26c>
    b2f4:	00bfffd4 	movui	r2,65535
    b2f8:	14008236 	bltu	r2,r16,b504 <__umoddi3+0x254>
    b2fc:	00803fc4 	movi	r2,255
    b300:	14013636 	bltu	r2,r16,b7dc <__umoddi3+0x52c>
    b304:	000b883a 	mov	r5,zero
    b308:	0005883a 	mov	r2,zero
    b30c:	8084d83a 	srl	r2,r16,r2
    b310:	01000074 	movhi	r4,1
    b314:	210ed904 	addi	r4,r4,15204
    b318:	01800804 	movi	r6,32
    b31c:	1105883a 	add	r2,r2,r4
    b320:	10c00003 	ldbu	r3,0(r2)
    b324:	28c7883a 	add	r3,r5,r3
    b328:	30efc83a 	sub	r23,r6,r3
    b32c:	b800941e 	bne	r23,zero,b580 <__umoddi3+0x2d0>
    b330:	802ad43a 	srli	r21,r16,16
    b334:	a423c83a 	sub	r17,r20,r16
    b338:	0039883a 	mov	fp,zero
    b33c:	853fffcc 	andi	r20,r16,65535
    b340:	8809883a 	mov	r4,r17
    b344:	a80b883a 	mov	r5,r21
    b348:	00034a80 	call	34a8 <__udivsi3>
    b34c:	8809883a 	mov	r4,r17
    b350:	a80b883a 	mov	r5,r21
    b354:	a0a3383a 	mul	r17,r20,r2
    b358:	00034b00 	call	34b0 <__umodsi3>
    b35c:	1004943a 	slli	r2,r2,16
    b360:	b006d43a 	srli	r3,r22,16
    b364:	10c4b03a 	or	r2,r2,r3
    b368:	1440032e 	bgeu	r2,r17,b378 <__umoddi3+0xc8>
    b36c:	1405883a 	add	r2,r2,r16
    b370:	14000136 	bltu	r2,r16,b378 <__umoddi3+0xc8>
    b374:	14413536 	bltu	r2,r17,b84c <__umoddi3+0x59c>
    b378:	1463c83a 	sub	r17,r2,r17
    b37c:	8809883a 	mov	r4,r17
    b380:	a80b883a 	mov	r5,r21
    b384:	00034a80 	call	34a8 <__udivsi3>
    b388:	8809883a 	mov	r4,r17
    b38c:	a0a3383a 	mul	r17,r20,r2
    b390:	a80b883a 	mov	r5,r21
    b394:	00004d06 	br	b4cc <__umoddi3+0x21c>
    b398:	380d883a 	mov	r6,r7
    b39c:	29c0102e 	bgeu	r5,r7,b3e0 <__umoddi3+0x130>
    b3a0:	2011883a 	mov	r8,r4
    b3a4:	2813883a 	mov	r9,r5
    b3a8:	4005883a 	mov	r2,r8
    b3ac:	4807883a 	mov	r3,r9
    b3b0:	dfc00e17 	ldw	ra,56(sp)
    b3b4:	df000d17 	ldw	fp,52(sp)
    b3b8:	ddc00c17 	ldw	r23,48(sp)
    b3bc:	dd800b17 	ldw	r22,44(sp)
    b3c0:	dd400a17 	ldw	r21,40(sp)
    b3c4:	dd000917 	ldw	r20,36(sp)
    b3c8:	dcc00817 	ldw	r19,32(sp)
    b3cc:	dc800717 	ldw	r18,28(sp)
    b3d0:	dc400617 	ldw	r17,24(sp)
    b3d4:	dc000517 	ldw	r16,20(sp)
    b3d8:	dec00f04 	addi	sp,sp,60
    b3dc:	f800283a 	ret
    b3e0:	00bfffd4 	movui	r2,65535
    b3e4:	11c05a36 	bltu	r2,r7,b550 <__umoddi3+0x2a0>
    b3e8:	00803fc4 	movi	r2,255
    b3ec:	11c0fe36 	bltu	r2,r7,b7e8 <__umoddi3+0x538>
    b3f0:	000b883a 	mov	r5,zero
    b3f4:	0005883a 	mov	r2,zero
    b3f8:	3084d83a 	srl	r2,r6,r2
    b3fc:	01000074 	movhi	r4,1
    b400:	210ed904 	addi	r4,r4,15204
    b404:	01c00804 	movi	r7,32
    b408:	1105883a 	add	r2,r2,r4
    b40c:	10c00003 	ldbu	r3,0(r2)
    b410:	28c7883a 	add	r3,r5,r3
    b414:	38ebc83a 	sub	r21,r7,r3
    b418:	a800851e 	bne	r21,zero,b630 <__umoddi3+0x380>
    b41c:	35005236 	bltu	r6,r20,b568 <__umoddi3+0x2b8>
    b420:	b400512e 	bgeu	r22,r16,b568 <__umoddi3+0x2b8>
    b424:	b011883a 	mov	r8,r22
    b428:	a013883a 	mov	r9,r20
    b42c:	003fde06 	br	b3a8 <__umoddi3+0xf8>
    b430:	00bfffd4 	movui	r2,65535
    b434:	11804036 	bltu	r2,r6,b538 <__umoddi3+0x288>
    b438:	00803fc4 	movi	r2,255
    b43c:	1180ed36 	bltu	r2,r6,b7f4 <__umoddi3+0x544>
    b440:	000b883a 	mov	r5,zero
    b444:	0005883a 	mov	r2,zero
    b448:	8084d83a 	srl	r2,r16,r2
    b44c:	01000074 	movhi	r4,1
    b450:	210ed904 	addi	r4,r4,15204
    b454:	01800804 	movi	r6,32
    b458:	1105883a 	add	r2,r2,r4
    b45c:	10c00003 	ldbu	r3,0(r2)
    b460:	28c7883a 	add	r3,r5,r3
    b464:	30c7c83a 	sub	r3,r6,r3
    b468:	1800bf1e 	bne	r3,zero,b768 <__umoddi3+0x4b8>
    b46c:	0039883a 	mov	fp,zero
    b470:	802ad43a 	srli	r21,r16,16
    b474:	a009883a 	mov	r4,r20
    b478:	85ffffcc 	andi	r23,r16,65535
    b47c:	a80b883a 	mov	r5,r21
    b480:	00034a80 	call	34a8 <__udivsi3>
    b484:	a009883a 	mov	r4,r20
    b488:	a80b883a 	mov	r5,r21
    b48c:	b8a3383a 	mul	r17,r23,r2
    b490:	00034b00 	call	34b0 <__umodsi3>
    b494:	1004943a 	slli	r2,r2,16
    b498:	b006d43a 	srli	r3,r22,16
    b49c:	10c4b03a 	or	r2,r2,r3
    b4a0:	1440032e 	bgeu	r2,r17,b4b0 <__umoddi3+0x200>
    b4a4:	1405883a 	add	r2,r2,r16
    b4a8:	14000136 	bltu	r2,r16,b4b0 <__umoddi3+0x200>
    b4ac:	1440e536 	bltu	r2,r17,b844 <__umoddi3+0x594>
    b4b0:	1463c83a 	sub	r17,r2,r17
    b4b4:	8809883a 	mov	r4,r17
    b4b8:	a80b883a 	mov	r5,r21
    b4bc:	00034a80 	call	34a8 <__udivsi3>
    b4c0:	8809883a 	mov	r4,r17
    b4c4:	b8a3383a 	mul	r17,r23,r2
    b4c8:	a80b883a 	mov	r5,r21
    b4cc:	00034b00 	call	34b0 <__umodsi3>
    b4d0:	1004943a 	slli	r2,r2,16
    b4d4:	b0ffffcc 	andi	r3,r22,65535
    b4d8:	10c4b03a 	or	r2,r2,r3
    b4dc:	1440042e 	bgeu	r2,r17,b4f0 <__umoddi3+0x240>
    b4e0:	1405883a 	add	r2,r2,r16
    b4e4:	14000236 	bltu	r2,r16,b4f0 <__umoddi3+0x240>
    b4e8:	1440012e 	bgeu	r2,r17,b4f0 <__umoddi3+0x240>
    b4ec:	1405883a 	add	r2,r2,r16
    b4f0:	1445c83a 	sub	r2,r2,r17
    b4f4:	1724d83a 	srl	r18,r2,fp
    b4f8:	0013883a 	mov	r9,zero
    b4fc:	9011883a 	mov	r8,r18
    b500:	003fa906 	br	b3a8 <__umoddi3+0xf8>
    b504:	00804034 	movhi	r2,256
    b508:	10bfffc4 	addi	r2,r2,-1
    b50c:	1400b036 	bltu	r2,r16,b7d0 <__umoddi3+0x520>
    b510:	01400404 	movi	r5,16
    b514:	2805883a 	mov	r2,r5
    b518:	003f7c06 	br	b30c <__umoddi3+0x5c>
    b51c:	01000044 	movi	r4,1
    b520:	000b883a 	mov	r5,zero
    b524:	00034a80 	call	34a8 <__udivsi3>
    b528:	1021883a 	mov	r16,r2
    b52c:	00bfffd4 	movui	r2,65535
    b530:	143ff436 	bltu	r2,r16,b504 <__umoddi3+0x254>
    b534:	003f7106 	br	b2fc <__umoddi3+0x4c>
    b538:	00804034 	movhi	r2,256
    b53c:	10bfffc4 	addi	r2,r2,-1
    b540:	1180af36 	bltu	r2,r6,b800 <__umoddi3+0x550>
    b544:	01400404 	movi	r5,16
    b548:	2805883a 	mov	r2,r5
    b54c:	003fbe06 	br	b448 <__umoddi3+0x198>
    b550:	00804034 	movhi	r2,256
    b554:	10bfffc4 	addi	r2,r2,-1
    b558:	11c0ac36 	bltu	r2,r7,b80c <__umoddi3+0x55c>
    b55c:	01400404 	movi	r5,16
    b560:	2805883a 	mov	r2,r5
    b564:	003fa406 	br	b3f8 <__umoddi3+0x148>
    b568:	b409c83a 	sub	r4,r22,r16
    b56c:	b105803a 	cmpltu	r2,r22,r4
    b570:	a187c83a 	sub	r3,r20,r6
    b574:	18a9c83a 	sub	r20,r3,r2
    b578:	202d883a 	mov	r22,r4
    b57c:	003fa906 	br	b424 <__umoddi3+0x174>
    b580:	85e0983a 	sll	r16,r16,r23
    b584:	35c5c83a 	sub	r2,r6,r23
    b588:	a0a2d83a 	srl	r17,r20,r2
    b58c:	802ad43a 	srli	r21,r16,16
    b590:	b084d83a 	srl	r2,r22,r2
    b594:	a5c6983a 	sll	r3,r20,r23
    b598:	8809883a 	mov	r4,r17
    b59c:	a80b883a 	mov	r5,r21
    b5a0:	1886b03a 	or	r3,r3,r2
    b5a4:	d8c00115 	stw	r3,4(sp)
    b5a8:	853fffcc 	andi	r20,r16,65535
    b5ac:	00034a80 	call	34a8 <__udivsi3>
    b5b0:	8809883a 	mov	r4,r17
    b5b4:	a80b883a 	mov	r5,r21
    b5b8:	a0a3383a 	mul	r17,r20,r2
    b5bc:	00034b00 	call	34b0 <__umodsi3>
    b5c0:	d9000117 	ldw	r4,4(sp)
    b5c4:	1004943a 	slli	r2,r2,16
    b5c8:	b839883a 	mov	fp,r23
    b5cc:	2006d43a 	srli	r3,r4,16
    b5d0:	10c4b03a 	or	r2,r2,r3
    b5d4:	1440022e 	bgeu	r2,r17,b5e0 <__umoddi3+0x330>
    b5d8:	1405883a 	add	r2,r2,r16
    b5dc:	1400962e 	bgeu	r2,r16,b838 <__umoddi3+0x588>
    b5e0:	1463c83a 	sub	r17,r2,r17
    b5e4:	8809883a 	mov	r4,r17
    b5e8:	a80b883a 	mov	r5,r21
    b5ec:	00034a80 	call	34a8 <__udivsi3>
    b5f0:	8809883a 	mov	r4,r17
    b5f4:	a80b883a 	mov	r5,r21
    b5f8:	a0a3383a 	mul	r17,r20,r2
    b5fc:	00034b00 	call	34b0 <__umodsi3>
    b600:	d9400117 	ldw	r5,4(sp)
    b604:	1004943a 	slli	r2,r2,16
    b608:	28ffffcc 	andi	r3,r5,65535
    b60c:	10c4b03a 	or	r2,r2,r3
    b610:	1440042e 	bgeu	r2,r17,b624 <__umoddi3+0x374>
    b614:	1405883a 	add	r2,r2,r16
    b618:	14000236 	bltu	r2,r16,b624 <__umoddi3+0x374>
    b61c:	1440012e 	bgeu	r2,r17,b624 <__umoddi3+0x374>
    b620:	1405883a 	add	r2,r2,r16
    b624:	b5ec983a 	sll	r22,r22,r23
    b628:	1463c83a 	sub	r17,r2,r17
    b62c:	003f4406 	br	b340 <__umoddi3+0x90>
    b630:	3d4fc83a 	sub	r7,r7,r21
    b634:	3546983a 	sll	r3,r6,r21
    b638:	81c4d83a 	srl	r2,r16,r7
    b63c:	a1e2d83a 	srl	r17,r20,r7
    b640:	a54c983a 	sll	r6,r20,r21
    b644:	18aeb03a 	or	r23,r3,r2
    b648:	b828d43a 	srli	r20,r23,16
    b64c:	b1c4d83a 	srl	r2,r22,r7
    b650:	8809883a 	mov	r4,r17
    b654:	a00b883a 	mov	r5,r20
    b658:	308cb03a 	or	r6,r6,r2
    b65c:	d9c00315 	stw	r7,12(sp)
    b660:	d9800215 	stw	r6,8(sp)
    b664:	00034a80 	call	34a8 <__udivsi3>
    b668:	8809883a 	mov	r4,r17
    b66c:	a00b883a 	mov	r5,r20
    b670:	1039883a 	mov	fp,r2
    b674:	00034b00 	call	34b0 <__umodsi3>
    b678:	b8ffffcc 	andi	r3,r23,65535
    b67c:	d8c00415 	stw	r3,16(sp)
    b680:	d9000217 	ldw	r4,8(sp)
    b684:	d9400417 	ldw	r5,16(sp)
    b688:	1004943a 	slli	r2,r2,16
    b68c:	2006d43a 	srli	r3,r4,16
    b690:	8560983a 	sll	r16,r16,r21
    b694:	2f23383a 	mul	r17,r5,fp
    b698:	10c4b03a 	or	r2,r2,r3
    b69c:	dc000015 	stw	r16,0(sp)
    b6a0:	b56c983a 	sll	r22,r22,r21
    b6a4:	1440032e 	bgeu	r2,r17,b6b4 <__umoddi3+0x404>
    b6a8:	15c5883a 	add	r2,r2,r23
    b6ac:	e73fffc4 	addi	fp,fp,-1
    b6b0:	15c05d2e 	bgeu	r2,r23,b828 <__umoddi3+0x578>
    b6b4:	1463c83a 	sub	r17,r2,r17
    b6b8:	8809883a 	mov	r4,r17
    b6bc:	a00b883a 	mov	r5,r20
    b6c0:	00034a80 	call	34a8 <__udivsi3>
    b6c4:	8809883a 	mov	r4,r17
    b6c8:	a00b883a 	mov	r5,r20
    b6cc:	1021883a 	mov	r16,r2
    b6d0:	00034b00 	call	34b0 <__umodsi3>
    b6d4:	d8c00417 	ldw	r3,16(sp)
    b6d8:	d9000217 	ldw	r4,8(sp)
    b6dc:	1004943a 	slli	r2,r2,16
    b6e0:	1c23383a 	mul	r17,r3,r16
    b6e4:	20ffffcc 	andi	r3,r4,65535
    b6e8:	10ceb03a 	or	r7,r2,r3
    b6ec:	3c40032e 	bgeu	r7,r17,b6fc <__umoddi3+0x44c>
    b6f0:	3dcf883a 	add	r7,r7,r23
    b6f4:	843fffc4 	addi	r16,r16,-1
    b6f8:	3dc0472e 	bgeu	r7,r23,b818 <__umoddi3+0x568>
    b6fc:	e004943a 	slli	r2,fp,16
    b700:	d9400017 	ldw	r5,0(sp)
    b704:	3c4fc83a 	sub	r7,r7,r17
    b708:	8084b03a 	or	r2,r16,r2
    b70c:	28ffffcc 	andi	r3,r5,65535
    b710:	280cd43a 	srli	r6,r5,16
    b714:	100ad43a 	srli	r5,r2,16
    b718:	10bfffcc 	andi	r2,r2,65535
    b71c:	10d1383a 	mul	r8,r2,r3
    b720:	28c7383a 	mul	r3,r5,r3
    b724:	1185383a 	mul	r2,r2,r6
    b728:	4008d43a 	srli	r4,r8,16
    b72c:	298b383a 	mul	r5,r5,r6
    b730:	10c5883a 	add	r2,r2,r3
    b734:	2089883a 	add	r4,r4,r2
    b738:	20c0022e 	bgeu	r4,r3,b744 <__umoddi3+0x494>
    b73c:	00800074 	movhi	r2,1
    b740:	288b883a 	add	r5,r5,r2
    b744:	2004d43a 	srli	r2,r4,16
    b748:	2008943a 	slli	r4,r4,16
    b74c:	40ffffcc 	andi	r3,r8,65535
    b750:	288b883a 	add	r5,r5,r2
    b754:	20c9883a 	add	r4,r4,r3
    b758:	39400b36 	bltu	r7,r5,b788 <__umoddi3+0x4d8>
    b75c:	39403d26 	beq	r7,r5,b854 <__umoddi3+0x5a4>
    b760:	394bc83a 	sub	r5,r7,r5
    b764:	00000f06 	br	b7a4 <__umoddi3+0x4f4>
    b768:	30c5c83a 	sub	r2,r6,r3
    b76c:	1839883a 	mov	fp,r3
    b770:	b084d83a 	srl	r2,r22,r2
    b774:	a0c6983a 	sll	r3,r20,r3
    b778:	8720983a 	sll	r16,r16,fp
    b77c:	b72c983a 	sll	r22,r22,fp
    b780:	18a8b03a 	or	r20,r3,r2
    b784:	003f3a06 	br	b470 <__umoddi3+0x1c0>
    b788:	d8c00017 	ldw	r3,0(sp)
    b78c:	20c5c83a 	sub	r2,r4,r3
    b790:	2089803a 	cmpltu	r4,r4,r2
    b794:	2dc7c83a 	sub	r3,r5,r23
    b798:	1907c83a 	sub	r3,r3,r4
    b79c:	38cbc83a 	sub	r5,r7,r3
    b7a0:	1009883a 	mov	r4,r2
    b7a4:	b105c83a 	sub	r2,r22,r4
    b7a8:	b087803a 	cmpltu	r3,r22,r2
    b7ac:	28c7c83a 	sub	r3,r5,r3
    b7b0:	d9400317 	ldw	r5,12(sp)
    b7b4:	1544d83a 	srl	r2,r2,r21
    b7b8:	1948983a 	sll	r4,r3,r5
    b7bc:	1d46d83a 	srl	r3,r3,r21
    b7c0:	20a4b03a 	or	r18,r4,r2
    b7c4:	9011883a 	mov	r8,r18
    b7c8:	1813883a 	mov	r9,r3
    b7cc:	003ef606 	br	b3a8 <__umoddi3+0xf8>
    b7d0:	01400604 	movi	r5,24
    b7d4:	2805883a 	mov	r2,r5
    b7d8:	003ecc06 	br	b30c <__umoddi3+0x5c>
    b7dc:	01400204 	movi	r5,8
    b7e0:	2805883a 	mov	r2,r5
    b7e4:	003ec906 	br	b30c <__umoddi3+0x5c>
    b7e8:	01400204 	movi	r5,8
    b7ec:	2805883a 	mov	r2,r5
    b7f0:	003f0106 	br	b3f8 <__umoddi3+0x148>
    b7f4:	01400204 	movi	r5,8
    b7f8:	2805883a 	mov	r2,r5
    b7fc:	003f1206 	br	b448 <__umoddi3+0x198>
    b800:	01400604 	movi	r5,24
    b804:	2805883a 	mov	r2,r5
    b808:	003f0f06 	br	b448 <__umoddi3+0x198>
    b80c:	01400604 	movi	r5,24
    b810:	2805883a 	mov	r2,r5
    b814:	003ef806 	br	b3f8 <__umoddi3+0x148>
    b818:	3c7fb82e 	bgeu	r7,r17,b6fc <__umoddi3+0x44c>
    b81c:	843fffc4 	addi	r16,r16,-1
    b820:	3dcf883a 	add	r7,r7,r23
    b824:	003fb506 	br	b6fc <__umoddi3+0x44c>
    b828:	147fa22e 	bgeu	r2,r17,b6b4 <__umoddi3+0x404>
    b82c:	e73fffc4 	addi	fp,fp,-1
    b830:	15c5883a 	add	r2,r2,r23
    b834:	003f9f06 	br	b6b4 <__umoddi3+0x404>
    b838:	147f692e 	bgeu	r2,r17,b5e0 <__umoddi3+0x330>
    b83c:	1405883a 	add	r2,r2,r16
    b840:	003f6706 	br	b5e0 <__umoddi3+0x330>
    b844:	1405883a 	add	r2,r2,r16
    b848:	003f1906 	br	b4b0 <__umoddi3+0x200>
    b84c:	1405883a 	add	r2,r2,r16
    b850:	003ec906 	br	b378 <__umoddi3+0xc8>
    b854:	b13fcc36 	bltu	r22,r4,b788 <__umoddi3+0x4d8>
    b858:	000b883a 	mov	r5,zero
    b85c:	003fd106 	br	b7a4 <__umoddi3+0x4f4>

0000b860 <_fpadd_parts>:
    b860:	defff804 	addi	sp,sp,-32
    b864:	dcc00315 	stw	r19,12(sp)
    b868:	2027883a 	mov	r19,r4
    b86c:	21000017 	ldw	r4,0(r4)
    b870:	00c00044 	movi	r3,1
    b874:	dd400515 	stw	r21,20(sp)
    b878:	dd000415 	stw	r20,16(sp)
    b87c:	ddc00715 	stw	r23,28(sp)
    b880:	dd800615 	stw	r22,24(sp)
    b884:	dc800215 	stw	r18,8(sp)
    b888:	dc400115 	stw	r17,4(sp)
    b88c:	dc000015 	stw	r16,0(sp)
    b890:	282b883a 	mov	r21,r5
    b894:	3029883a 	mov	r20,r6
    b898:	1900632e 	bgeu	r3,r4,ba28 <_fpadd_parts+0x1c8>
    b89c:	28800017 	ldw	r2,0(r5)
    b8a0:	1880812e 	bgeu	r3,r2,baa8 <_fpadd_parts+0x248>
    b8a4:	00c00104 	movi	r3,4
    b8a8:	20c0dc26 	beq	r4,r3,bc1c <_fpadd_parts+0x3bc>
    b8ac:	10c07e26 	beq	r2,r3,baa8 <_fpadd_parts+0x248>
    b8b0:	00c00084 	movi	r3,2
    b8b4:	10c06726 	beq	r2,r3,ba54 <_fpadd_parts+0x1f4>
    b8b8:	20c07b26 	beq	r4,r3,baa8 <_fpadd_parts+0x248>
    b8bc:	9dc00217 	ldw	r23,8(r19)
    b8c0:	28c00217 	ldw	r3,8(r5)
    b8c4:	9c400317 	ldw	r17,12(r19)
    b8c8:	2bc00317 	ldw	r15,12(r5)
    b8cc:	b8cdc83a 	sub	r6,r23,r3
    b8d0:	9c800417 	ldw	r18,16(r19)
    b8d4:	2c000417 	ldw	r16,16(r5)
    b8d8:	3009883a 	mov	r4,r6
    b8dc:	30009716 	blt	r6,zero,bb3c <_fpadd_parts+0x2dc>
    b8e0:	00800fc4 	movi	r2,63
    b8e4:	11806b16 	blt	r2,r6,ba94 <_fpadd_parts+0x234>
    b8e8:	0100a40e 	bge	zero,r4,bb7c <_fpadd_parts+0x31c>
    b8ec:	35bff804 	addi	r22,r6,-32
    b8f0:	b000bc16 	blt	r22,zero,bbe4 <_fpadd_parts+0x384>
    b8f4:	8596d83a 	srl	r11,r16,r22
    b8f8:	0019883a 	mov	r12,zero
    b8fc:	0013883a 	mov	r9,zero
    b900:	01000044 	movi	r4,1
    b904:	0015883a 	mov	r10,zero
    b908:	b000be16 	blt	r22,zero,bc04 <_fpadd_parts+0x3a4>
    b90c:	2590983a 	sll	r8,r4,r22
    b910:	000f883a 	mov	r7,zero
    b914:	00bfffc4 	movi	r2,-1
    b918:	3889883a 	add	r4,r7,r2
    b91c:	408b883a 	add	r5,r8,r2
    b920:	21cd803a 	cmpltu	r6,r4,r7
    b924:	314b883a 	add	r5,r6,r5
    b928:	7904703a 	and	r2,r15,r4
    b92c:	8146703a 	and	r3,r16,r5
    b930:	10c4b03a 	or	r2,r2,r3
    b934:	10000226 	beq	r2,zero,b940 <_fpadd_parts+0xe0>
    b938:	02400044 	movi	r9,1
    b93c:	0015883a 	mov	r10,zero
    b940:	5a5eb03a 	or	r15,r11,r9
    b944:	62a0b03a 	or	r16,r12,r10
    b948:	99400117 	ldw	r5,4(r19)
    b94c:	a8800117 	ldw	r2,4(r21)
    b950:	28806e26 	beq	r5,r2,bb0c <_fpadd_parts+0x2ac>
    b954:	28006626 	beq	r5,zero,baf0 <_fpadd_parts+0x290>
    b958:	7c45c83a 	sub	r2,r15,r17
    b95c:	7889803a 	cmpltu	r4,r15,r2
    b960:	8487c83a 	sub	r3,r16,r18
    b964:	1909c83a 	sub	r4,r3,r4
    b968:	100d883a 	mov	r6,r2
    b96c:	200f883a 	mov	r7,r4
    b970:	38007716 	blt	r7,zero,bb50 <_fpadd_parts+0x2f0>
    b974:	a5c00215 	stw	r23,8(r20)
    b978:	a1c00415 	stw	r7,16(r20)
    b97c:	a0000115 	stw	zero,4(r20)
    b980:	a1800315 	stw	r6,12(r20)
    b984:	a2000317 	ldw	r8,12(r20)
    b988:	a2400417 	ldw	r9,16(r20)
    b98c:	00bfffc4 	movi	r2,-1
    b990:	408b883a 	add	r5,r8,r2
    b994:	2a09803a 	cmpltu	r4,r5,r8
    b998:	488d883a 	add	r6,r9,r2
    b99c:	01c40034 	movhi	r7,4096
    b9a0:	39ffffc4 	addi	r7,r7,-1
    b9a4:	218d883a 	add	r6,r4,r6
    b9a8:	39801736 	bltu	r7,r6,ba08 <_fpadd_parts+0x1a8>
    b9ac:	31c06526 	beq	r6,r7,bb44 <_fpadd_parts+0x2e4>
    b9b0:	a3000217 	ldw	r12,8(r20)
    b9b4:	4209883a 	add	r4,r8,r8
    b9b8:	00bfffc4 	movi	r2,-1
    b9bc:	220f803a 	cmpltu	r7,r4,r8
    b9c0:	4a4b883a 	add	r5,r9,r9
    b9c4:	394f883a 	add	r7,r7,r5
    b9c8:	2095883a 	add	r10,r4,r2
    b9cc:	3897883a 	add	r11,r7,r2
    b9d0:	510d803a 	cmpltu	r6,r10,r4
    b9d4:	6099883a 	add	r12,r12,r2
    b9d8:	32d7883a 	add	r11,r6,r11
    b9dc:	00840034 	movhi	r2,4096
    b9e0:	10bfffc4 	addi	r2,r2,-1
    b9e4:	2011883a 	mov	r8,r4
    b9e8:	3813883a 	mov	r9,r7
    b9ec:	a1000315 	stw	r4,12(r20)
    b9f0:	a1c00415 	stw	r7,16(r20)
    b9f4:	a3000215 	stw	r12,8(r20)
    b9f8:	12c00336 	bltu	r2,r11,ba08 <_fpadd_parts+0x1a8>
    b9fc:	58bfed1e 	bne	r11,r2,b9b4 <_fpadd_parts+0x154>
    ba00:	00bfff84 	movi	r2,-2
    ba04:	12bfeb2e 	bgeu	r2,r10,b9b4 <_fpadd_parts+0x154>
    ba08:	a2800417 	ldw	r10,16(r20)
    ba0c:	008000c4 	movi	r2,3
    ba10:	00c80034 	movhi	r3,8192
    ba14:	18ffffc4 	addi	r3,r3,-1
    ba18:	a2400317 	ldw	r9,12(r20)
    ba1c:	a0800015 	stw	r2,0(r20)
    ba20:	1a802336 	bltu	r3,r10,bab0 <_fpadd_parts+0x250>
    ba24:	a027883a 	mov	r19,r20
    ba28:	9805883a 	mov	r2,r19
    ba2c:	ddc00717 	ldw	r23,28(sp)
    ba30:	dd800617 	ldw	r22,24(sp)
    ba34:	dd400517 	ldw	r21,20(sp)
    ba38:	dd000417 	ldw	r20,16(sp)
    ba3c:	dcc00317 	ldw	r19,12(sp)
    ba40:	dc800217 	ldw	r18,8(sp)
    ba44:	dc400117 	ldw	r17,4(sp)
    ba48:	dc000017 	ldw	r16,0(sp)
    ba4c:	dec00804 	addi	sp,sp,32
    ba50:	f800283a 	ret
    ba54:	20fff41e 	bne	r4,r3,ba28 <_fpadd_parts+0x1c8>
    ba58:	31000015 	stw	r4,0(r6)
    ba5c:	98800117 	ldw	r2,4(r19)
    ba60:	30800115 	stw	r2,4(r6)
    ba64:	98c00217 	ldw	r3,8(r19)
    ba68:	30c00215 	stw	r3,8(r6)
    ba6c:	98800317 	ldw	r2,12(r19)
    ba70:	30800315 	stw	r2,12(r6)
    ba74:	98c00417 	ldw	r3,16(r19)
    ba78:	30c00415 	stw	r3,16(r6)
    ba7c:	98800117 	ldw	r2,4(r19)
    ba80:	28c00117 	ldw	r3,4(r5)
    ba84:	3027883a 	mov	r19,r6
    ba88:	10c4703a 	and	r2,r2,r3
    ba8c:	30800115 	stw	r2,4(r6)
    ba90:	003fe506 	br	ba28 <_fpadd_parts+0x1c8>
    ba94:	1dc02616 	blt	r3,r23,bb30 <_fpadd_parts+0x2d0>
    ba98:	0023883a 	mov	r17,zero
    ba9c:	182f883a 	mov	r23,r3
    baa0:	0025883a 	mov	r18,zero
    baa4:	003fa806 	br	b948 <_fpadd_parts+0xe8>
    baa8:	a827883a 	mov	r19,r21
    baac:	003fde06 	br	ba28 <_fpadd_parts+0x1c8>
    bab0:	01800044 	movi	r6,1
    bab4:	500497fa 	slli	r2,r10,31
    bab8:	4808d07a 	srli	r4,r9,1
    babc:	518ad83a 	srl	r5,r10,r6
    bac0:	a2000217 	ldw	r8,8(r20)
    bac4:	1108b03a 	or	r4,r2,r4
    bac8:	0007883a 	mov	r3,zero
    bacc:	4984703a 	and	r2,r9,r6
    bad0:	208cb03a 	or	r6,r4,r2
    bad4:	28ceb03a 	or	r7,r5,r3
    bad8:	42000044 	addi	r8,r8,1
    badc:	a027883a 	mov	r19,r20
    bae0:	a1c00415 	stw	r7,16(r20)
    bae4:	a2000215 	stw	r8,8(r20)
    bae8:	a1800315 	stw	r6,12(r20)
    baec:	003fce06 	br	ba28 <_fpadd_parts+0x1c8>
    baf0:	8bc5c83a 	sub	r2,r17,r15
    baf4:	8889803a 	cmpltu	r4,r17,r2
    baf8:	9407c83a 	sub	r3,r18,r16
    bafc:	1909c83a 	sub	r4,r3,r4
    bb00:	100d883a 	mov	r6,r2
    bb04:	200f883a 	mov	r7,r4
    bb08:	003f9906 	br	b970 <_fpadd_parts+0x110>
    bb0c:	7c45883a 	add	r2,r15,r17
    bb10:	13c9803a 	cmpltu	r4,r2,r15
    bb14:	8487883a 	add	r3,r16,r18
    bb18:	20c9883a 	add	r4,r4,r3
    bb1c:	a1400115 	stw	r5,4(r20)
    bb20:	a5c00215 	stw	r23,8(r20)
    bb24:	a0800315 	stw	r2,12(r20)
    bb28:	a1000415 	stw	r4,16(r20)
    bb2c:	003fb606 	br	ba08 <_fpadd_parts+0x1a8>
    bb30:	001f883a 	mov	r15,zero
    bb34:	0021883a 	mov	r16,zero
    bb38:	003f8306 	br	b948 <_fpadd_parts+0xe8>
    bb3c:	018dc83a 	sub	r6,zero,r6
    bb40:	003f6706 	br	b8e0 <_fpadd_parts+0x80>
    bb44:	00bfff84 	movi	r2,-2
    bb48:	117faf36 	bltu	r2,r5,ba08 <_fpadd_parts+0x1a8>
    bb4c:	003f9806 	br	b9b0 <_fpadd_parts+0x150>
    bb50:	0005883a 	mov	r2,zero
    bb54:	1189c83a 	sub	r4,r2,r6
    bb58:	1105803a 	cmpltu	r2,r2,r4
    bb5c:	01cbc83a 	sub	r5,zero,r7
    bb60:	2885c83a 	sub	r2,r5,r2
    bb64:	01800044 	movi	r6,1
    bb68:	a1800115 	stw	r6,4(r20)
    bb6c:	a5c00215 	stw	r23,8(r20)
    bb70:	a1000315 	stw	r4,12(r20)
    bb74:	a0800415 	stw	r2,16(r20)
    bb78:	003f8206 	br	b984 <_fpadd_parts+0x124>
    bb7c:	203f7226 	beq	r4,zero,b948 <_fpadd_parts+0xe8>
    bb80:	35bff804 	addi	r22,r6,-32
    bb84:	b9af883a 	add	r23,r23,r6
    bb88:	b0003116 	blt	r22,zero,bc50 <_fpadd_parts+0x3f0>
    bb8c:	959ad83a 	srl	r13,r18,r22
    bb90:	001d883a 	mov	r14,zero
    bb94:	000f883a 	mov	r7,zero
    bb98:	01000044 	movi	r4,1
    bb9c:	0011883a 	mov	r8,zero
    bba0:	b0002516 	blt	r22,zero,bc38 <_fpadd_parts+0x3d8>
    bba4:	2594983a 	sll	r10,r4,r22
    bba8:	0013883a 	mov	r9,zero
    bbac:	00bfffc4 	movi	r2,-1
    bbb0:	4889883a 	add	r4,r9,r2
    bbb4:	508b883a 	add	r5,r10,r2
    bbb8:	224d803a 	cmpltu	r6,r4,r9
    bbbc:	314b883a 	add	r5,r6,r5
    bbc0:	8904703a 	and	r2,r17,r4
    bbc4:	9146703a 	and	r3,r18,r5
    bbc8:	10c4b03a 	or	r2,r2,r3
    bbcc:	10000226 	beq	r2,zero,bbd8 <_fpadd_parts+0x378>
    bbd0:	01c00044 	movi	r7,1
    bbd4:	0011883a 	mov	r8,zero
    bbd8:	69e2b03a 	or	r17,r13,r7
    bbdc:	7224b03a 	or	r18,r14,r8
    bbe0:	003f5906 	br	b948 <_fpadd_parts+0xe8>
    bbe4:	8407883a 	add	r3,r16,r16
    bbe8:	008007c4 	movi	r2,31
    bbec:	1185c83a 	sub	r2,r2,r6
    bbf0:	1886983a 	sll	r3,r3,r2
    bbf4:	7996d83a 	srl	r11,r15,r6
    bbf8:	8198d83a 	srl	r12,r16,r6
    bbfc:	1ad6b03a 	or	r11,r3,r11
    bc00:	003f3e06 	br	b8fc <_fpadd_parts+0x9c>
    bc04:	2006d07a 	srli	r3,r4,1
    bc08:	008007c4 	movi	r2,31
    bc0c:	1185c83a 	sub	r2,r2,r6
    bc10:	1890d83a 	srl	r8,r3,r2
    bc14:	218e983a 	sll	r7,r4,r6
    bc18:	003f3e06 	br	b914 <_fpadd_parts+0xb4>
    bc1c:	113f821e 	bne	r2,r4,ba28 <_fpadd_parts+0x1c8>
    bc20:	28c00117 	ldw	r3,4(r5)
    bc24:	98800117 	ldw	r2,4(r19)
    bc28:	10ff7f26 	beq	r2,r3,ba28 <_fpadd_parts+0x1c8>
    bc2c:	04c00074 	movhi	r19,1
    bc30:	9ccf9704 	addi	r19,r19,15964
    bc34:	003f7c06 	br	ba28 <_fpadd_parts+0x1c8>
    bc38:	2006d07a 	srli	r3,r4,1
    bc3c:	008007c4 	movi	r2,31
    bc40:	1185c83a 	sub	r2,r2,r6
    bc44:	1894d83a 	srl	r10,r3,r2
    bc48:	2192983a 	sll	r9,r4,r6
    bc4c:	003fd706 	br	bbac <_fpadd_parts+0x34c>
    bc50:	9487883a 	add	r3,r18,r18
    bc54:	008007c4 	movi	r2,31
    bc58:	1185c83a 	sub	r2,r2,r6
    bc5c:	1886983a 	sll	r3,r3,r2
    bc60:	899ad83a 	srl	r13,r17,r6
    bc64:	919cd83a 	srl	r14,r18,r6
    bc68:	1b5ab03a 	or	r13,r3,r13
    bc6c:	003fc906 	br	bb94 <_fpadd_parts+0x334>

0000bc70 <__subdf3>:
    bc70:	deffea04 	addi	sp,sp,-88
    bc74:	dcc01415 	stw	r19,80(sp)
    bc78:	dcc00404 	addi	r19,sp,16
    bc7c:	2011883a 	mov	r8,r4
    bc80:	2813883a 	mov	r9,r5
    bc84:	dc401315 	stw	r17,76(sp)
    bc88:	d809883a 	mov	r4,sp
    bc8c:	980b883a 	mov	r5,r19
    bc90:	dc400904 	addi	r17,sp,36
    bc94:	dfc01515 	stw	ra,84(sp)
    bc98:	da400115 	stw	r9,4(sp)
    bc9c:	d9c00315 	stw	r7,12(sp)
    bca0:	da000015 	stw	r8,0(sp)
    bca4:	d9800215 	stw	r6,8(sp)
    bca8:	000c98c0 	call	c98c <__unpack_d>
    bcac:	d9000204 	addi	r4,sp,8
    bcb0:	880b883a 	mov	r5,r17
    bcb4:	000c98c0 	call	c98c <__unpack_d>
    bcb8:	d8800a17 	ldw	r2,40(sp)
    bcbc:	880b883a 	mov	r5,r17
    bcc0:	9809883a 	mov	r4,r19
    bcc4:	d9800e04 	addi	r6,sp,56
    bcc8:	1080005c 	xori	r2,r2,1
    bccc:	d8800a15 	stw	r2,40(sp)
    bcd0:	000b8600 	call	b860 <_fpadd_parts>
    bcd4:	1009883a 	mov	r4,r2
    bcd8:	00037600 	call	3760 <__pack_d>
    bcdc:	dfc01517 	ldw	ra,84(sp)
    bce0:	dcc01417 	ldw	r19,80(sp)
    bce4:	dc401317 	ldw	r17,76(sp)
    bce8:	dec01604 	addi	sp,sp,88
    bcec:	f800283a 	ret

0000bcf0 <__adddf3>:
    bcf0:	deffea04 	addi	sp,sp,-88
    bcf4:	dcc01415 	stw	r19,80(sp)
    bcf8:	dcc00404 	addi	r19,sp,16
    bcfc:	2011883a 	mov	r8,r4
    bd00:	2813883a 	mov	r9,r5
    bd04:	dc401315 	stw	r17,76(sp)
    bd08:	d809883a 	mov	r4,sp
    bd0c:	980b883a 	mov	r5,r19
    bd10:	dc400904 	addi	r17,sp,36
    bd14:	dfc01515 	stw	ra,84(sp)
    bd18:	da400115 	stw	r9,4(sp)
    bd1c:	d9c00315 	stw	r7,12(sp)
    bd20:	da000015 	stw	r8,0(sp)
    bd24:	d9800215 	stw	r6,8(sp)
    bd28:	000c98c0 	call	c98c <__unpack_d>
    bd2c:	d9000204 	addi	r4,sp,8
    bd30:	880b883a 	mov	r5,r17
    bd34:	000c98c0 	call	c98c <__unpack_d>
    bd38:	d9800e04 	addi	r6,sp,56
    bd3c:	9809883a 	mov	r4,r19
    bd40:	880b883a 	mov	r5,r17
    bd44:	000b8600 	call	b860 <_fpadd_parts>
    bd48:	1009883a 	mov	r4,r2
    bd4c:	00037600 	call	3760 <__pack_d>
    bd50:	dfc01517 	ldw	ra,84(sp)
    bd54:	dcc01417 	ldw	r19,80(sp)
    bd58:	dc401317 	ldw	r17,76(sp)
    bd5c:	dec01604 	addi	sp,sp,88
    bd60:	f800283a 	ret

0000bd64 <__muldf3>:
    bd64:	deffe004 	addi	sp,sp,-128
    bd68:	dc401815 	stw	r17,96(sp)
    bd6c:	dc400404 	addi	r17,sp,16
    bd70:	2011883a 	mov	r8,r4
    bd74:	2813883a 	mov	r9,r5
    bd78:	dc001715 	stw	r16,92(sp)
    bd7c:	d809883a 	mov	r4,sp
    bd80:	880b883a 	mov	r5,r17
    bd84:	dc000904 	addi	r16,sp,36
    bd88:	dfc01f15 	stw	ra,124(sp)
    bd8c:	da400115 	stw	r9,4(sp)
    bd90:	d9c00315 	stw	r7,12(sp)
    bd94:	da000015 	stw	r8,0(sp)
    bd98:	d9800215 	stw	r6,8(sp)
    bd9c:	ddc01e15 	stw	r23,120(sp)
    bda0:	dd801d15 	stw	r22,116(sp)
    bda4:	dd401c15 	stw	r21,112(sp)
    bda8:	dd001b15 	stw	r20,108(sp)
    bdac:	dcc01a15 	stw	r19,104(sp)
    bdb0:	dc801915 	stw	r18,100(sp)
    bdb4:	000c98c0 	call	c98c <__unpack_d>
    bdb8:	d9000204 	addi	r4,sp,8
    bdbc:	800b883a 	mov	r5,r16
    bdc0:	000c98c0 	call	c98c <__unpack_d>
    bdc4:	d9000417 	ldw	r4,16(sp)
    bdc8:	00800044 	movi	r2,1
    bdcc:	1100102e 	bgeu	r2,r4,be10 <__muldf3+0xac>
    bdd0:	d8c00917 	ldw	r3,36(sp)
    bdd4:	10c0062e 	bgeu	r2,r3,bdf0 <__muldf3+0x8c>
    bdd8:	00800104 	movi	r2,4
    bddc:	20800a26 	beq	r4,r2,be08 <__muldf3+0xa4>
    bde0:	1880cc26 	beq	r3,r2,c114 <__muldf3+0x3b0>
    bde4:	00800084 	movi	r2,2
    bde8:	20800926 	beq	r4,r2,be10 <__muldf3+0xac>
    bdec:	1880191e 	bne	r3,r2,be54 <__muldf3+0xf0>
    bdf0:	d8c00a17 	ldw	r3,40(sp)
    bdf4:	d8800517 	ldw	r2,20(sp)
    bdf8:	8009883a 	mov	r4,r16
    bdfc:	10c4c03a 	cmpne	r2,r2,r3
    be00:	d8800a15 	stw	r2,40(sp)
    be04:	00000706 	br	be24 <__muldf3+0xc0>
    be08:	00800084 	movi	r2,2
    be0c:	1880c326 	beq	r3,r2,c11c <__muldf3+0x3b8>
    be10:	d8800517 	ldw	r2,20(sp)
    be14:	d8c00a17 	ldw	r3,40(sp)
    be18:	8809883a 	mov	r4,r17
    be1c:	10c4c03a 	cmpne	r2,r2,r3
    be20:	d8800515 	stw	r2,20(sp)
    be24:	00037600 	call	3760 <__pack_d>
    be28:	dfc01f17 	ldw	ra,124(sp)
    be2c:	ddc01e17 	ldw	r23,120(sp)
    be30:	dd801d17 	ldw	r22,116(sp)
    be34:	dd401c17 	ldw	r21,112(sp)
    be38:	dd001b17 	ldw	r20,108(sp)
    be3c:	dcc01a17 	ldw	r19,104(sp)
    be40:	dc801917 	ldw	r18,100(sp)
    be44:	dc401817 	ldw	r17,96(sp)
    be48:	dc001717 	ldw	r16,92(sp)
    be4c:	dec02004 	addi	sp,sp,128
    be50:	f800283a 	ret
    be54:	dd800717 	ldw	r22,28(sp)
    be58:	dc800c17 	ldw	r18,48(sp)
    be5c:	002b883a 	mov	r21,zero
    be60:	0023883a 	mov	r17,zero
    be64:	a80b883a 	mov	r5,r21
    be68:	b00d883a 	mov	r6,r22
    be6c:	880f883a 	mov	r7,r17
    be70:	ddc00817 	ldw	r23,32(sp)
    be74:	dcc00d17 	ldw	r19,52(sp)
    be78:	9009883a 	mov	r4,r18
    be7c:	0002b080 	call	2b08 <__muldi3>
    be80:	001b883a 	mov	r13,zero
    be84:	680f883a 	mov	r7,r13
    be88:	b009883a 	mov	r4,r22
    be8c:	000b883a 	mov	r5,zero
    be90:	980d883a 	mov	r6,r19
    be94:	b82d883a 	mov	r22,r23
    be98:	002f883a 	mov	r23,zero
    be9c:	db401615 	stw	r13,88(sp)
    bea0:	d8801315 	stw	r2,76(sp)
    bea4:	d8c01415 	stw	r3,80(sp)
    bea8:	dcc01515 	stw	r19,84(sp)
    beac:	0002b080 	call	2b08 <__muldi3>
    beb0:	b00d883a 	mov	r6,r22
    beb4:	000b883a 	mov	r5,zero
    beb8:	9009883a 	mov	r4,r18
    bebc:	b80f883a 	mov	r7,r23
    bec0:	1021883a 	mov	r16,r2
    bec4:	1823883a 	mov	r17,r3
    bec8:	0002b080 	call	2b08 <__muldi3>
    becc:	8085883a 	add	r2,r16,r2
    bed0:	140d803a 	cmpltu	r6,r2,r16
    bed4:	88c7883a 	add	r3,r17,r3
    bed8:	30cd883a 	add	r6,r6,r3
    bedc:	1029883a 	mov	r20,r2
    bee0:	302b883a 	mov	r21,r6
    bee4:	da801317 	ldw	r10,76(sp)
    bee8:	dac01417 	ldw	r11,80(sp)
    beec:	db001517 	ldw	r12,84(sp)
    bef0:	db401617 	ldw	r13,88(sp)
    bef4:	3440612e 	bgeu	r6,r17,c07c <__muldf3+0x318>
    bef8:	0009883a 	mov	r4,zero
    befc:	5105883a 	add	r2,r10,r4
    bf00:	128d803a 	cmpltu	r6,r2,r10
    bf04:	5d07883a 	add	r3,r11,r20
    bf08:	30cd883a 	add	r6,r6,r3
    bf0c:	0021883a 	mov	r16,zero
    bf10:	04400044 	movi	r17,1
    bf14:	1025883a 	mov	r18,r2
    bf18:	3027883a 	mov	r19,r6
    bf1c:	32c06236 	bltu	r6,r11,c0a8 <__muldf3+0x344>
    bf20:	59807a26 	beq	r11,r6,c10c <__muldf3+0x3a8>
    bf24:	680b883a 	mov	r5,r13
    bf28:	b80f883a 	mov	r7,r23
    bf2c:	6009883a 	mov	r4,r12
    bf30:	b00d883a 	mov	r6,r22
    bf34:	0002b080 	call	2b08 <__muldi3>
    bf38:	1009883a 	mov	r4,r2
    bf3c:	000f883a 	mov	r7,zero
    bf40:	1545883a 	add	r2,r2,r21
    bf44:	1111803a 	cmpltu	r8,r2,r4
    bf48:	19c7883a 	add	r3,r3,r7
    bf4c:	40c7883a 	add	r3,r8,r3
    bf50:	88cb883a 	add	r5,r17,r3
    bf54:	d8c00617 	ldw	r3,24(sp)
    bf58:	8089883a 	add	r4,r16,r2
    bf5c:	d8800b17 	ldw	r2,44(sp)
    bf60:	18c00104 	addi	r3,r3,4
    bf64:	240d803a 	cmpltu	r6,r4,r16
    bf68:	10c7883a 	add	r3,r2,r3
    bf6c:	2013883a 	mov	r9,r4
    bf70:	d8800a17 	ldw	r2,40(sp)
    bf74:	d9000517 	ldw	r4,20(sp)
    bf78:	314d883a 	add	r6,r6,r5
    bf7c:	3015883a 	mov	r10,r6
    bf80:	2088c03a 	cmpne	r4,r4,r2
    bf84:	00880034 	movhi	r2,8192
    bf88:	10bfffc4 	addi	r2,r2,-1
    bf8c:	d9000f15 	stw	r4,60(sp)
    bf90:	d8c01015 	stw	r3,64(sp)
    bf94:	1180162e 	bgeu	r2,r6,bff0 <__muldf3+0x28c>
    bf98:	1811883a 	mov	r8,r3
    bf9c:	101f883a 	mov	r15,r2
    bfa0:	980497fa 	slli	r2,r19,31
    bfa4:	9016d07a 	srli	r11,r18,1
    bfa8:	500697fa 	slli	r3,r10,31
    bfac:	480cd07a 	srli	r6,r9,1
    bfb0:	500ed07a 	srli	r7,r10,1
    bfb4:	12d6b03a 	or	r11,r2,r11
    bfb8:	00800044 	movi	r2,1
    bfbc:	198cb03a 	or	r6,r3,r6
    bfc0:	4888703a 	and	r4,r9,r2
    bfc4:	9818d07a 	srli	r12,r19,1
    bfc8:	001b883a 	mov	r13,zero
    bfcc:	03a00034 	movhi	r14,32768
    bfd0:	3013883a 	mov	r9,r6
    bfd4:	3815883a 	mov	r10,r7
    bfd8:	4091883a 	add	r8,r8,r2
    bfdc:	20000226 	beq	r4,zero,bfe8 <__muldf3+0x284>
    bfe0:	5b64b03a 	or	r18,r11,r13
    bfe4:	63a6b03a 	or	r19,r12,r14
    bfe8:	7abfed36 	bltu	r15,r10,bfa0 <__muldf3+0x23c>
    bfec:	da001015 	stw	r8,64(sp)
    bff0:	00840034 	movhi	r2,4096
    bff4:	10bfffc4 	addi	r2,r2,-1
    bff8:	12801436 	bltu	r2,r10,c04c <__muldf3+0x2e8>
    bffc:	da001017 	ldw	r8,64(sp)
    c000:	101f883a 	mov	r15,r2
    c004:	4a45883a 	add	r2,r9,r9
    c008:	124d803a 	cmpltu	r6,r2,r9
    c00c:	5287883a 	add	r3,r10,r10
    c010:	9497883a 	add	r11,r18,r18
    c014:	5c8f803a 	cmpltu	r7,r11,r18
    c018:	9cd9883a 	add	r12,r19,r19
    c01c:	01000044 	movi	r4,1
    c020:	30cd883a 	add	r6,r6,r3
    c024:	3b0f883a 	add	r7,r7,r12
    c028:	423fffc4 	addi	r8,r8,-1
    c02c:	1013883a 	mov	r9,r2
    c030:	3015883a 	mov	r10,r6
    c034:	111ab03a 	or	r13,r2,r4
    c038:	98003016 	blt	r19,zero,c0fc <__muldf3+0x398>
    c03c:	5825883a 	mov	r18,r11
    c040:	3827883a 	mov	r19,r7
    c044:	7abfef2e 	bgeu	r15,r10,c004 <__muldf3+0x2a0>
    c048:	da001015 	stw	r8,64(sp)
    c04c:	00803fc4 	movi	r2,255
    c050:	488e703a 	and	r7,r9,r2
    c054:	00802004 	movi	r2,128
    c058:	0007883a 	mov	r3,zero
    c05c:	0011883a 	mov	r8,zero
    c060:	38801826 	beq	r7,r2,c0c4 <__muldf3+0x360>
    c064:	008000c4 	movi	r2,3
    c068:	d9000e04 	addi	r4,sp,56
    c06c:	da801215 	stw	r10,72(sp)
    c070:	d8800e15 	stw	r2,56(sp)
    c074:	da401115 	stw	r9,68(sp)
    c078:	003f6a06 	br	be24 <__muldf3+0xc0>
    c07c:	89802126 	beq	r17,r6,c104 <__muldf3+0x3a0>
    c080:	0009883a 	mov	r4,zero
    c084:	5105883a 	add	r2,r10,r4
    c088:	128d803a 	cmpltu	r6,r2,r10
    c08c:	5d07883a 	add	r3,r11,r20
    c090:	30cd883a 	add	r6,r6,r3
    c094:	0021883a 	mov	r16,zero
    c098:	0023883a 	mov	r17,zero
    c09c:	1025883a 	mov	r18,r2
    c0a0:	3027883a 	mov	r19,r6
    c0a4:	32ff9e2e 	bgeu	r6,r11,bf20 <__muldf3+0x1bc>
    c0a8:	00800044 	movi	r2,1
    c0ac:	8089883a 	add	r4,r16,r2
    c0b0:	240d803a 	cmpltu	r6,r4,r16
    c0b4:	344d883a 	add	r6,r6,r17
    c0b8:	2021883a 	mov	r16,r4
    c0bc:	3023883a 	mov	r17,r6
    c0c0:	003f9806 	br	bf24 <__muldf3+0x1c0>
    c0c4:	403fe71e 	bne	r8,zero,c064 <__muldf3+0x300>
    c0c8:	01004004 	movi	r4,256
    c0cc:	4904703a 	and	r2,r9,r4
    c0d0:	10c4b03a 	or	r2,r2,r3
    c0d4:	103fe31e 	bne	r2,zero,c064 <__muldf3+0x300>
    c0d8:	94c4b03a 	or	r2,r18,r19
    c0dc:	103fe126 	beq	r2,zero,c064 <__muldf3+0x300>
    c0e0:	49c5883a 	add	r2,r9,r7
    c0e4:	1251803a 	cmpltu	r8,r2,r9
    c0e8:	4291883a 	add	r8,r8,r10
    c0ec:	013fc004 	movi	r4,-256
    c0f0:	1112703a 	and	r9,r2,r4
    c0f4:	4015883a 	mov	r10,r8
    c0f8:	003fda06 	br	c064 <__muldf3+0x300>
    c0fc:	6813883a 	mov	r9,r13
    c100:	003fce06 	br	c03c <__muldf3+0x2d8>
    c104:	143f7c36 	bltu	r2,r16,bef8 <__muldf3+0x194>
    c108:	003fdd06 	br	c080 <__muldf3+0x31c>
    c10c:	12bf852e 	bgeu	r2,r10,bf24 <__muldf3+0x1c0>
    c110:	003fe506 	br	c0a8 <__muldf3+0x344>
    c114:	00800084 	movi	r2,2
    c118:	20bf351e 	bne	r4,r2,bdf0 <__muldf3+0x8c>
    c11c:	01000074 	movhi	r4,1
    c120:	210f9704 	addi	r4,r4,15964
    c124:	003f3f06 	br	be24 <__muldf3+0xc0>

0000c128 <__divdf3>:
    c128:	deffed04 	addi	sp,sp,-76
    c12c:	dcc01115 	stw	r19,68(sp)
    c130:	dcc00404 	addi	r19,sp,16
    c134:	2011883a 	mov	r8,r4
    c138:	2813883a 	mov	r9,r5
    c13c:	dc000e15 	stw	r16,56(sp)
    c140:	d809883a 	mov	r4,sp
    c144:	980b883a 	mov	r5,r19
    c148:	dc000904 	addi	r16,sp,36
    c14c:	dfc01215 	stw	ra,72(sp)
    c150:	da400115 	stw	r9,4(sp)
    c154:	d9c00315 	stw	r7,12(sp)
    c158:	da000015 	stw	r8,0(sp)
    c15c:	d9800215 	stw	r6,8(sp)
    c160:	dc801015 	stw	r18,64(sp)
    c164:	dc400f15 	stw	r17,60(sp)
    c168:	000c98c0 	call	c98c <__unpack_d>
    c16c:	d9000204 	addi	r4,sp,8
    c170:	800b883a 	mov	r5,r16
    c174:	000c98c0 	call	c98c <__unpack_d>
    c178:	d9000417 	ldw	r4,16(sp)
    c17c:	00800044 	movi	r2,1
    c180:	11000b2e 	bgeu	r2,r4,c1b0 <__divdf3+0x88>
    c184:	d9400917 	ldw	r5,36(sp)
    c188:	1140762e 	bgeu	r2,r5,c364 <__divdf3+0x23c>
    c18c:	d8800517 	ldw	r2,20(sp)
    c190:	d8c00a17 	ldw	r3,40(sp)
    c194:	01800104 	movi	r6,4
    c198:	10c4f03a 	xor	r2,r2,r3
    c19c:	d8800515 	stw	r2,20(sp)
    c1a0:	21800226 	beq	r4,r6,c1ac <__divdf3+0x84>
    c1a4:	00800084 	movi	r2,2
    c1a8:	2080141e 	bne	r4,r2,c1fc <__divdf3+0xd4>
    c1ac:	29000926 	beq	r5,r4,c1d4 <__divdf3+0xac>
    c1b0:	9809883a 	mov	r4,r19
    c1b4:	00037600 	call	3760 <__pack_d>
    c1b8:	dfc01217 	ldw	ra,72(sp)
    c1bc:	dcc01117 	ldw	r19,68(sp)
    c1c0:	dc801017 	ldw	r18,64(sp)
    c1c4:	dc400f17 	ldw	r17,60(sp)
    c1c8:	dc000e17 	ldw	r16,56(sp)
    c1cc:	dec01304 	addi	sp,sp,76
    c1d0:	f800283a 	ret
    c1d4:	01000074 	movhi	r4,1
    c1d8:	210f9704 	addi	r4,r4,15964
    c1dc:	00037600 	call	3760 <__pack_d>
    c1e0:	dfc01217 	ldw	ra,72(sp)
    c1e4:	dcc01117 	ldw	r19,68(sp)
    c1e8:	dc801017 	ldw	r18,64(sp)
    c1ec:	dc400f17 	ldw	r17,60(sp)
    c1f0:	dc000e17 	ldw	r16,56(sp)
    c1f4:	dec01304 	addi	sp,sp,76
    c1f8:	f800283a 	ret
    c1fc:	29805b26 	beq	r5,r6,c36c <__divdf3+0x244>
    c200:	28802d26 	beq	r5,r2,c2b8 <__divdf3+0x190>
    c204:	d8c00617 	ldw	r3,24(sp)
    c208:	d8800b17 	ldw	r2,44(sp)
    c20c:	d9c00817 	ldw	r7,32(sp)
    c210:	dc400d17 	ldw	r17,52(sp)
    c214:	188bc83a 	sub	r5,r3,r2
    c218:	d9800717 	ldw	r6,28(sp)
    c21c:	dc000c17 	ldw	r16,48(sp)
    c220:	d9400615 	stw	r5,24(sp)
    c224:	3c403836 	bltu	r7,r17,c308 <__divdf3+0x1e0>
    c228:	89c03626 	beq	r17,r7,c304 <__divdf3+0x1dc>
    c22c:	0015883a 	mov	r10,zero
    c230:	001d883a 	mov	r14,zero
    c234:	02c40034 	movhi	r11,4096
    c238:	001f883a 	mov	r15,zero
    c23c:	003f883a 	mov	ra,zero
    c240:	04800f44 	movi	r18,61
    c244:	00000f06 	br	c284 <__divdf3+0x15c>
    c248:	601d883a 	mov	r14,r12
    c24c:	681f883a 	mov	r15,r13
    c250:	400d883a 	mov	r6,r8
    c254:	100f883a 	mov	r7,r2
    c258:	3191883a 	add	r8,r6,r6
    c25c:	5808d07a 	srli	r4,r11,1
    c260:	4185803a 	cmpltu	r2,r8,r6
    c264:	39d3883a 	add	r9,r7,r7
    c268:	28c6b03a 	or	r3,r5,r3
    c26c:	1245883a 	add	r2,r2,r9
    c270:	1815883a 	mov	r10,r3
    c274:	2017883a 	mov	r11,r4
    c278:	400d883a 	mov	r6,r8
    c27c:	100f883a 	mov	r7,r2
    c280:	fc801726 	beq	ra,r18,c2e0 <__divdf3+0x1b8>
    c284:	580a97fa 	slli	r5,r11,31
    c288:	5006d07a 	srli	r3,r10,1
    c28c:	ffc00044 	addi	ra,ra,1
    c290:	3c7ff136 	bltu	r7,r17,c258 <__divdf3+0x130>
    c294:	3411c83a 	sub	r8,r6,r16
    c298:	3205803a 	cmpltu	r2,r6,r8
    c29c:	3c53c83a 	sub	r9,r7,r17
    c2a0:	7298b03a 	or	r12,r14,r10
    c2a4:	7adab03a 	or	r13,r15,r11
    c2a8:	4885c83a 	sub	r2,r9,r2
    c2ac:	89ffe61e 	bne	r17,r7,c248 <__divdf3+0x120>
    c2b0:	343fe936 	bltu	r6,r16,c258 <__divdf3+0x130>
    c2b4:	003fe406 	br	c248 <__divdf3+0x120>
    c2b8:	9809883a 	mov	r4,r19
    c2bc:	d9800415 	stw	r6,16(sp)
    c2c0:	00037600 	call	3760 <__pack_d>
    c2c4:	dfc01217 	ldw	ra,72(sp)
    c2c8:	dcc01117 	ldw	r19,68(sp)
    c2cc:	dc801017 	ldw	r18,64(sp)
    c2d0:	dc400f17 	ldw	r17,60(sp)
    c2d4:	dc000e17 	ldw	r16,56(sp)
    c2d8:	dec01304 	addi	sp,sp,76
    c2dc:	f800283a 	ret
    c2e0:	00803fc4 	movi	r2,255
    c2e4:	7090703a 	and	r8,r14,r2
    c2e8:	00802004 	movi	r2,128
    c2ec:	0007883a 	mov	r3,zero
    c2f0:	0013883a 	mov	r9,zero
    c2f4:	40800d26 	beq	r8,r2,c32c <__divdf3+0x204>
    c2f8:	dbc00815 	stw	r15,32(sp)
    c2fc:	db800715 	stw	r14,28(sp)
    c300:	003fab06 	br	c1b0 <__divdf3+0x88>
    c304:	343fc92e 	bgeu	r6,r16,c22c <__divdf3+0x104>
    c308:	3185883a 	add	r2,r6,r6
    c30c:	1189803a 	cmpltu	r4,r2,r6
    c310:	39c7883a 	add	r3,r7,r7
    c314:	20c9883a 	add	r4,r4,r3
    c318:	297fffc4 	addi	r5,r5,-1
    c31c:	100d883a 	mov	r6,r2
    c320:	200f883a 	mov	r7,r4
    c324:	d9400615 	stw	r5,24(sp)
    c328:	003fc006 	br	c22c <__divdf3+0x104>
    c32c:	483ff21e 	bne	r9,zero,c2f8 <__divdf3+0x1d0>
    c330:	01004004 	movi	r4,256
    c334:	7104703a 	and	r2,r14,r4
    c338:	10c4b03a 	or	r2,r2,r3
    c33c:	103fee1e 	bne	r2,zero,c2f8 <__divdf3+0x1d0>
    c340:	31c4b03a 	or	r2,r6,r7
    c344:	103fec26 	beq	r2,zero,c2f8 <__divdf3+0x1d0>
    c348:	7205883a 	add	r2,r14,r8
    c34c:	1391803a 	cmpltu	r8,r2,r14
    c350:	43d1883a 	add	r8,r8,r15
    c354:	013fc004 	movi	r4,-256
    c358:	111c703a 	and	r14,r2,r4
    c35c:	401f883a 	mov	r15,r8
    c360:	003fe506 	br	c2f8 <__divdf3+0x1d0>
    c364:	8009883a 	mov	r4,r16
    c368:	003f9206 	br	c1b4 <__divdf3+0x8c>
    c36c:	9809883a 	mov	r4,r19
    c370:	d8000715 	stw	zero,28(sp)
    c374:	d8000815 	stw	zero,32(sp)
    c378:	d8000615 	stw	zero,24(sp)
    c37c:	003f8d06 	br	c1b4 <__divdf3+0x8c>

0000c380 <__eqdf2>:
    c380:	deffef04 	addi	sp,sp,-68
    c384:	dc400f15 	stw	r17,60(sp)
    c388:	dc400404 	addi	r17,sp,16
    c38c:	2005883a 	mov	r2,r4
    c390:	2807883a 	mov	r3,r5
    c394:	dc000e15 	stw	r16,56(sp)
    c398:	d809883a 	mov	r4,sp
    c39c:	880b883a 	mov	r5,r17
    c3a0:	dc000904 	addi	r16,sp,36
    c3a4:	d8c00115 	stw	r3,4(sp)
    c3a8:	d8800015 	stw	r2,0(sp)
    c3ac:	d9800215 	stw	r6,8(sp)
    c3b0:	dfc01015 	stw	ra,64(sp)
    c3b4:	d9c00315 	stw	r7,12(sp)
    c3b8:	000c98c0 	call	c98c <__unpack_d>
    c3bc:	d9000204 	addi	r4,sp,8
    c3c0:	800b883a 	mov	r5,r16
    c3c4:	000c98c0 	call	c98c <__unpack_d>
    c3c8:	d8800417 	ldw	r2,16(sp)
    c3cc:	00c00044 	movi	r3,1
    c3d0:	180d883a 	mov	r6,r3
    c3d4:	1880062e 	bgeu	r3,r2,c3f0 <__eqdf2+0x70>
    c3d8:	d8800917 	ldw	r2,36(sp)
    c3dc:	8809883a 	mov	r4,r17
    c3e0:	800b883a 	mov	r5,r16
    c3e4:	1880022e 	bgeu	r3,r2,c3f0 <__eqdf2+0x70>
    c3e8:	000cac40 	call	cac4 <__fpcmp_parts_d>
    c3ec:	100d883a 	mov	r6,r2
    c3f0:	3005883a 	mov	r2,r6
    c3f4:	dfc01017 	ldw	ra,64(sp)
    c3f8:	dc400f17 	ldw	r17,60(sp)
    c3fc:	dc000e17 	ldw	r16,56(sp)
    c400:	dec01104 	addi	sp,sp,68
    c404:	f800283a 	ret

0000c408 <__nedf2>:
    c408:	deffef04 	addi	sp,sp,-68
    c40c:	dc400f15 	stw	r17,60(sp)
    c410:	dc400404 	addi	r17,sp,16
    c414:	2005883a 	mov	r2,r4
    c418:	2807883a 	mov	r3,r5
    c41c:	dc000e15 	stw	r16,56(sp)
    c420:	d809883a 	mov	r4,sp
    c424:	880b883a 	mov	r5,r17
    c428:	dc000904 	addi	r16,sp,36
    c42c:	d8c00115 	stw	r3,4(sp)
    c430:	d8800015 	stw	r2,0(sp)
    c434:	d9800215 	stw	r6,8(sp)
    c438:	dfc01015 	stw	ra,64(sp)
    c43c:	d9c00315 	stw	r7,12(sp)
    c440:	000c98c0 	call	c98c <__unpack_d>
    c444:	d9000204 	addi	r4,sp,8
    c448:	800b883a 	mov	r5,r16
    c44c:	000c98c0 	call	c98c <__unpack_d>
    c450:	d8800417 	ldw	r2,16(sp)
    c454:	00c00044 	movi	r3,1
    c458:	180d883a 	mov	r6,r3
    c45c:	1880062e 	bgeu	r3,r2,c478 <__nedf2+0x70>
    c460:	d8800917 	ldw	r2,36(sp)
    c464:	8809883a 	mov	r4,r17
    c468:	800b883a 	mov	r5,r16
    c46c:	1880022e 	bgeu	r3,r2,c478 <__nedf2+0x70>
    c470:	000cac40 	call	cac4 <__fpcmp_parts_d>
    c474:	100d883a 	mov	r6,r2
    c478:	3005883a 	mov	r2,r6
    c47c:	dfc01017 	ldw	ra,64(sp)
    c480:	dc400f17 	ldw	r17,60(sp)
    c484:	dc000e17 	ldw	r16,56(sp)
    c488:	dec01104 	addi	sp,sp,68
    c48c:	f800283a 	ret

0000c490 <__gtdf2>:
    c490:	deffef04 	addi	sp,sp,-68
    c494:	dc400f15 	stw	r17,60(sp)
    c498:	dc400404 	addi	r17,sp,16
    c49c:	2005883a 	mov	r2,r4
    c4a0:	2807883a 	mov	r3,r5
    c4a4:	dc000e15 	stw	r16,56(sp)
    c4a8:	d809883a 	mov	r4,sp
    c4ac:	880b883a 	mov	r5,r17
    c4b0:	dc000904 	addi	r16,sp,36
    c4b4:	d8c00115 	stw	r3,4(sp)
    c4b8:	d8800015 	stw	r2,0(sp)
    c4bc:	d9800215 	stw	r6,8(sp)
    c4c0:	dfc01015 	stw	ra,64(sp)
    c4c4:	d9c00315 	stw	r7,12(sp)
    c4c8:	000c98c0 	call	c98c <__unpack_d>
    c4cc:	d9000204 	addi	r4,sp,8
    c4d0:	800b883a 	mov	r5,r16
    c4d4:	000c98c0 	call	c98c <__unpack_d>
    c4d8:	d8800417 	ldw	r2,16(sp)
    c4dc:	00c00044 	movi	r3,1
    c4e0:	01bfffc4 	movi	r6,-1
    c4e4:	1880062e 	bgeu	r3,r2,c500 <__gtdf2+0x70>
    c4e8:	d8800917 	ldw	r2,36(sp)
    c4ec:	8809883a 	mov	r4,r17
    c4f0:	800b883a 	mov	r5,r16
    c4f4:	1880022e 	bgeu	r3,r2,c500 <__gtdf2+0x70>
    c4f8:	000cac40 	call	cac4 <__fpcmp_parts_d>
    c4fc:	100d883a 	mov	r6,r2
    c500:	3005883a 	mov	r2,r6
    c504:	dfc01017 	ldw	ra,64(sp)
    c508:	dc400f17 	ldw	r17,60(sp)
    c50c:	dc000e17 	ldw	r16,56(sp)
    c510:	dec01104 	addi	sp,sp,68
    c514:	f800283a 	ret

0000c518 <__gedf2>:
    c518:	deffef04 	addi	sp,sp,-68
    c51c:	dc400f15 	stw	r17,60(sp)
    c520:	dc400404 	addi	r17,sp,16
    c524:	2005883a 	mov	r2,r4
    c528:	2807883a 	mov	r3,r5
    c52c:	dc000e15 	stw	r16,56(sp)
    c530:	d809883a 	mov	r4,sp
    c534:	880b883a 	mov	r5,r17
    c538:	dc000904 	addi	r16,sp,36
    c53c:	d8c00115 	stw	r3,4(sp)
    c540:	d8800015 	stw	r2,0(sp)
    c544:	d9800215 	stw	r6,8(sp)
    c548:	dfc01015 	stw	ra,64(sp)
    c54c:	d9c00315 	stw	r7,12(sp)
    c550:	000c98c0 	call	c98c <__unpack_d>
    c554:	d9000204 	addi	r4,sp,8
    c558:	800b883a 	mov	r5,r16
    c55c:	000c98c0 	call	c98c <__unpack_d>
    c560:	d8800417 	ldw	r2,16(sp)
    c564:	00c00044 	movi	r3,1
    c568:	01bfffc4 	movi	r6,-1
    c56c:	1880062e 	bgeu	r3,r2,c588 <__gedf2+0x70>
    c570:	d8800917 	ldw	r2,36(sp)
    c574:	8809883a 	mov	r4,r17
    c578:	800b883a 	mov	r5,r16
    c57c:	1880022e 	bgeu	r3,r2,c588 <__gedf2+0x70>
    c580:	000cac40 	call	cac4 <__fpcmp_parts_d>
    c584:	100d883a 	mov	r6,r2
    c588:	3005883a 	mov	r2,r6
    c58c:	dfc01017 	ldw	ra,64(sp)
    c590:	dc400f17 	ldw	r17,60(sp)
    c594:	dc000e17 	ldw	r16,56(sp)
    c598:	dec01104 	addi	sp,sp,68
    c59c:	f800283a 	ret

0000c5a0 <__ltdf2>:
    c5a0:	deffef04 	addi	sp,sp,-68
    c5a4:	dc400f15 	stw	r17,60(sp)
    c5a8:	dc400404 	addi	r17,sp,16
    c5ac:	2005883a 	mov	r2,r4
    c5b0:	2807883a 	mov	r3,r5
    c5b4:	dc000e15 	stw	r16,56(sp)
    c5b8:	d809883a 	mov	r4,sp
    c5bc:	880b883a 	mov	r5,r17
    c5c0:	dc000904 	addi	r16,sp,36
    c5c4:	d8c00115 	stw	r3,4(sp)
    c5c8:	d8800015 	stw	r2,0(sp)
    c5cc:	d9800215 	stw	r6,8(sp)
    c5d0:	dfc01015 	stw	ra,64(sp)
    c5d4:	d9c00315 	stw	r7,12(sp)
    c5d8:	000c98c0 	call	c98c <__unpack_d>
    c5dc:	d9000204 	addi	r4,sp,8
    c5e0:	800b883a 	mov	r5,r16
    c5e4:	000c98c0 	call	c98c <__unpack_d>
    c5e8:	d8800417 	ldw	r2,16(sp)
    c5ec:	00c00044 	movi	r3,1
    c5f0:	180d883a 	mov	r6,r3
    c5f4:	1880062e 	bgeu	r3,r2,c610 <__ltdf2+0x70>
    c5f8:	d8800917 	ldw	r2,36(sp)
    c5fc:	8809883a 	mov	r4,r17
    c600:	800b883a 	mov	r5,r16
    c604:	1880022e 	bgeu	r3,r2,c610 <__ltdf2+0x70>
    c608:	000cac40 	call	cac4 <__fpcmp_parts_d>
    c60c:	100d883a 	mov	r6,r2
    c610:	3005883a 	mov	r2,r6
    c614:	dfc01017 	ldw	ra,64(sp)
    c618:	dc400f17 	ldw	r17,60(sp)
    c61c:	dc000e17 	ldw	r16,56(sp)
    c620:	dec01104 	addi	sp,sp,68
    c624:	f800283a 	ret

0000c628 <__floatsidf>:
    c628:	2006d7fa 	srli	r3,r4,31
    c62c:	defff604 	addi	sp,sp,-40
    c630:	008000c4 	movi	r2,3
    c634:	dfc00915 	stw	ra,36(sp)
    c638:	dcc00815 	stw	r19,32(sp)
    c63c:	dc800715 	stw	r18,28(sp)
    c640:	dc400615 	stw	r17,24(sp)
    c644:	dc000515 	stw	r16,20(sp)
    c648:	d8800015 	stw	r2,0(sp)
    c64c:	d8c00115 	stw	r3,4(sp)
    c650:	20000f1e 	bne	r4,zero,c690 <__floatsidf+0x68>
    c654:	00800084 	movi	r2,2
    c658:	d8800015 	stw	r2,0(sp)
    c65c:	d809883a 	mov	r4,sp
    c660:	00037600 	call	3760 <__pack_d>
    c664:	1009883a 	mov	r4,r2
    c668:	180b883a 	mov	r5,r3
    c66c:	2005883a 	mov	r2,r4
    c670:	2807883a 	mov	r3,r5
    c674:	dfc00917 	ldw	ra,36(sp)
    c678:	dcc00817 	ldw	r19,32(sp)
    c67c:	dc800717 	ldw	r18,28(sp)
    c680:	dc400617 	ldw	r17,24(sp)
    c684:	dc000517 	ldw	r16,20(sp)
    c688:	dec00a04 	addi	sp,sp,40
    c68c:	f800283a 	ret
    c690:	00800f04 	movi	r2,60
    c694:	1807003a 	cmpeq	r3,r3,zero
    c698:	d8800215 	stw	r2,8(sp)
    c69c:	18001126 	beq	r3,zero,c6e4 <__floatsidf+0xbc>
    c6a0:	0027883a 	mov	r19,zero
    c6a4:	2025883a 	mov	r18,r4
    c6a8:	d9000315 	stw	r4,12(sp)
    c6ac:	dcc00415 	stw	r19,16(sp)
    c6b0:	00034b80 	call	34b8 <__clzsi2>
    c6b4:	11000744 	addi	r4,r2,29
    c6b8:	013fe80e 	bge	zero,r4,c65c <__floatsidf+0x34>
    c6bc:	10bfff44 	addi	r2,r2,-3
    c6c0:	10000c16 	blt	r2,zero,c6f4 <__floatsidf+0xcc>
    c6c4:	90a2983a 	sll	r17,r18,r2
    c6c8:	0021883a 	mov	r16,zero
    c6cc:	d8800217 	ldw	r2,8(sp)
    c6d0:	dc400415 	stw	r17,16(sp)
    c6d4:	dc000315 	stw	r16,12(sp)
    c6d8:	1105c83a 	sub	r2,r2,r4
    c6dc:	d8800215 	stw	r2,8(sp)
    c6e0:	003fde06 	br	c65c <__floatsidf+0x34>
    c6e4:	00a00034 	movhi	r2,32768
    c6e8:	20800a26 	beq	r4,r2,c714 <__floatsidf+0xec>
    c6ec:	0109c83a 	sub	r4,zero,r4
    c6f0:	003feb06 	br	c6a0 <__floatsidf+0x78>
    c6f4:	9006d07a 	srli	r3,r18,1
    c6f8:	008007c4 	movi	r2,31
    c6fc:	1105c83a 	sub	r2,r2,r4
    c700:	1886d83a 	srl	r3,r3,r2
    c704:	9922983a 	sll	r17,r19,r4
    c708:	9120983a 	sll	r16,r18,r4
    c70c:	1c62b03a 	or	r17,r3,r17
    c710:	003fee06 	br	c6cc <__floatsidf+0xa4>
    c714:	0009883a 	mov	r4,zero
    c718:	01707834 	movhi	r5,49632
    c71c:	003fd306 	br	c66c <__floatsidf+0x44>

0000c720 <__fixdfsi>:
    c720:	defff804 	addi	sp,sp,-32
    c724:	2005883a 	mov	r2,r4
    c728:	2807883a 	mov	r3,r5
    c72c:	d809883a 	mov	r4,sp
    c730:	d9400204 	addi	r5,sp,8
    c734:	d8c00115 	stw	r3,4(sp)
    c738:	d8800015 	stw	r2,0(sp)
    c73c:	dfc00715 	stw	ra,28(sp)
    c740:	000c98c0 	call	c98c <__unpack_d>
    c744:	d8c00217 	ldw	r3,8(sp)
    c748:	00800084 	movi	r2,2
    c74c:	1880051e 	bne	r3,r2,c764 <__fixdfsi+0x44>
    c750:	0007883a 	mov	r3,zero
    c754:	1805883a 	mov	r2,r3
    c758:	dfc00717 	ldw	ra,28(sp)
    c75c:	dec00804 	addi	sp,sp,32
    c760:	f800283a 	ret
    c764:	00800044 	movi	r2,1
    c768:	10fff92e 	bgeu	r2,r3,c750 <__fixdfsi+0x30>
    c76c:	00800104 	movi	r2,4
    c770:	18800426 	beq	r3,r2,c784 <__fixdfsi+0x64>
    c774:	d8c00417 	ldw	r3,16(sp)
    c778:	183ff516 	blt	r3,zero,c750 <__fixdfsi+0x30>
    c77c:	00800784 	movi	r2,30
    c780:	10c0080e 	bge	r2,r3,c7a4 <__fixdfsi+0x84>
    c784:	d8800317 	ldw	r2,12(sp)
    c788:	1000121e 	bne	r2,zero,c7d4 <__fixdfsi+0xb4>
    c78c:	00e00034 	movhi	r3,32768
    c790:	18ffffc4 	addi	r3,r3,-1
    c794:	1805883a 	mov	r2,r3
    c798:	dfc00717 	ldw	ra,28(sp)
    c79c:	dec00804 	addi	sp,sp,32
    c7a0:	f800283a 	ret
    c7a4:	00800f04 	movi	r2,60
    c7a8:	10d1c83a 	sub	r8,r2,r3
    c7ac:	40bff804 	addi	r2,r8,-32
    c7b0:	d9800517 	ldw	r6,20(sp)
    c7b4:	d9c00617 	ldw	r7,24(sp)
    c7b8:	10000816 	blt	r2,zero,c7dc <__fixdfsi+0xbc>
    c7bc:	3888d83a 	srl	r4,r7,r2
    c7c0:	d8800317 	ldw	r2,12(sp)
    c7c4:	2007883a 	mov	r3,r4
    c7c8:	103fe226 	beq	r2,zero,c754 <__fixdfsi+0x34>
    c7cc:	0107c83a 	sub	r3,zero,r4
    c7d0:	003fe006 	br	c754 <__fixdfsi+0x34>
    c7d4:	00e00034 	movhi	r3,32768
    c7d8:	003fde06 	br	c754 <__fixdfsi+0x34>
    c7dc:	39c7883a 	add	r3,r7,r7
    c7e0:	008007c4 	movi	r2,31
    c7e4:	1205c83a 	sub	r2,r2,r8
    c7e8:	1886983a 	sll	r3,r3,r2
    c7ec:	3208d83a 	srl	r4,r6,r8
    c7f0:	1908b03a 	or	r4,r3,r4
    c7f4:	003ff206 	br	c7c0 <__fixdfsi+0xa0>

0000c7f8 <__floatunsidf>:
    c7f8:	defff204 	addi	sp,sp,-56
    c7fc:	dfc00d15 	stw	ra,52(sp)
    c800:	ddc00c15 	stw	r23,48(sp)
    c804:	dd800b15 	stw	r22,44(sp)
    c808:	dd400a15 	stw	r21,40(sp)
    c80c:	dd000915 	stw	r20,36(sp)
    c810:	dcc00815 	stw	r19,32(sp)
    c814:	dc800715 	stw	r18,28(sp)
    c818:	dc400615 	stw	r17,24(sp)
    c81c:	dc000515 	stw	r16,20(sp)
    c820:	d8000115 	stw	zero,4(sp)
    c824:	20000f1e 	bne	r4,zero,c864 <__floatunsidf+0x6c>
    c828:	00800084 	movi	r2,2
    c82c:	d8800015 	stw	r2,0(sp)
    c830:	d809883a 	mov	r4,sp
    c834:	00037600 	call	3760 <__pack_d>
    c838:	dfc00d17 	ldw	ra,52(sp)
    c83c:	ddc00c17 	ldw	r23,48(sp)
    c840:	dd800b17 	ldw	r22,44(sp)
    c844:	dd400a17 	ldw	r21,40(sp)
    c848:	dd000917 	ldw	r20,36(sp)
    c84c:	dcc00817 	ldw	r19,32(sp)
    c850:	dc800717 	ldw	r18,28(sp)
    c854:	dc400617 	ldw	r17,24(sp)
    c858:	dc000517 	ldw	r16,20(sp)
    c85c:	dec00e04 	addi	sp,sp,56
    c860:	f800283a 	ret
    c864:	008000c4 	movi	r2,3
    c868:	00c00f04 	movi	r3,60
    c86c:	002f883a 	mov	r23,zero
    c870:	202d883a 	mov	r22,r4
    c874:	d8800015 	stw	r2,0(sp)
    c878:	d8c00215 	stw	r3,8(sp)
    c87c:	d9000315 	stw	r4,12(sp)
    c880:	ddc00415 	stw	r23,16(sp)
    c884:	00034b80 	call	34b8 <__clzsi2>
    c888:	12400744 	addi	r9,r2,29
    c88c:	48000b16 	blt	r9,zero,c8bc <__floatunsidf+0xc4>
    c890:	483fe726 	beq	r9,zero,c830 <__floatunsidf+0x38>
    c894:	10bfff44 	addi	r2,r2,-3
    c898:	10002e16 	blt	r2,zero,c954 <__floatunsidf+0x15c>
    c89c:	b0a2983a 	sll	r17,r22,r2
    c8a0:	0021883a 	mov	r16,zero
    c8a4:	d8800217 	ldw	r2,8(sp)
    c8a8:	dc400415 	stw	r17,16(sp)
    c8ac:	dc000315 	stw	r16,12(sp)
    c8b0:	1245c83a 	sub	r2,r2,r9
    c8b4:	d8800215 	stw	r2,8(sp)
    c8b8:	003fdd06 	br	c830 <__floatunsidf+0x38>
    c8bc:	0255c83a 	sub	r10,zero,r9
    c8c0:	51bff804 	addi	r6,r10,-32
    c8c4:	30001b16 	blt	r6,zero,c934 <__floatunsidf+0x13c>
    c8c8:	b9a8d83a 	srl	r20,r23,r6
    c8cc:	002b883a 	mov	r21,zero
    c8d0:	000f883a 	mov	r7,zero
    c8d4:	01000044 	movi	r4,1
    c8d8:	0011883a 	mov	r8,zero
    c8dc:	30002516 	blt	r6,zero,c974 <__floatunsidf+0x17c>
    c8e0:	21a6983a 	sll	r19,r4,r6
    c8e4:	0025883a 	mov	r18,zero
    c8e8:	00bfffc4 	movi	r2,-1
    c8ec:	9089883a 	add	r4,r18,r2
    c8f0:	988b883a 	add	r5,r19,r2
    c8f4:	248d803a 	cmpltu	r6,r4,r18
    c8f8:	314b883a 	add	r5,r6,r5
    c8fc:	b104703a 	and	r2,r22,r4
    c900:	b946703a 	and	r3,r23,r5
    c904:	10c4b03a 	or	r2,r2,r3
    c908:	10000226 	beq	r2,zero,c914 <__floatunsidf+0x11c>
    c90c:	01c00044 	movi	r7,1
    c910:	0011883a 	mov	r8,zero
    c914:	d9000217 	ldw	r4,8(sp)
    c918:	a1c4b03a 	or	r2,r20,r7
    c91c:	aa06b03a 	or	r3,r21,r8
    c920:	2249c83a 	sub	r4,r4,r9
    c924:	d8c00415 	stw	r3,16(sp)
    c928:	d9000215 	stw	r4,8(sp)
    c92c:	d8800315 	stw	r2,12(sp)
    c930:	003fbf06 	br	c830 <__floatunsidf+0x38>
    c934:	bdc7883a 	add	r3,r23,r23
    c938:	008007c4 	movi	r2,31
    c93c:	1285c83a 	sub	r2,r2,r10
    c940:	1886983a 	sll	r3,r3,r2
    c944:	b2a8d83a 	srl	r20,r22,r10
    c948:	baaad83a 	srl	r21,r23,r10
    c94c:	1d28b03a 	or	r20,r3,r20
    c950:	003fdf06 	br	c8d0 <__floatunsidf+0xd8>
    c954:	b006d07a 	srli	r3,r22,1
    c958:	008007c4 	movi	r2,31
    c95c:	1245c83a 	sub	r2,r2,r9
    c960:	1886d83a 	srl	r3,r3,r2
    c964:	ba62983a 	sll	r17,r23,r9
    c968:	b260983a 	sll	r16,r22,r9
    c96c:	1c62b03a 	or	r17,r3,r17
    c970:	003fcc06 	br	c8a4 <__floatunsidf+0xac>
    c974:	2006d07a 	srli	r3,r4,1
    c978:	008007c4 	movi	r2,31
    c97c:	1285c83a 	sub	r2,r2,r10
    c980:	18a6d83a 	srl	r19,r3,r2
    c984:	22a4983a 	sll	r18,r4,r10
    c988:	003fd706 	br	c8e8 <__floatunsidf+0xf0>

0000c98c <__unpack_d>:
    c98c:	20c00117 	ldw	r3,4(r4)
    c990:	22400017 	ldw	r9,0(r4)
    c994:	00800434 	movhi	r2,16
    c998:	10bfffc4 	addi	r2,r2,-1
    c99c:	1808d53a 	srli	r4,r3,20
    c9a0:	180cd7fa 	srli	r6,r3,31
    c9a4:	1894703a 	and	r10,r3,r2
    c9a8:	2201ffcc 	andi	r8,r4,2047
    c9ac:	281b883a 	mov	r13,r5
    c9b0:	4817883a 	mov	r11,r9
    c9b4:	29800115 	stw	r6,4(r5)
    c9b8:	5019883a 	mov	r12,r10
    c9bc:	40001e1e 	bne	r8,zero,ca38 <__unpack_d+0xac>
    c9c0:	4a84b03a 	or	r2,r9,r10
    c9c4:	10001926 	beq	r2,zero,ca2c <__unpack_d+0xa0>
    c9c8:	4804d63a 	srli	r2,r9,24
    c9cc:	500c923a 	slli	r6,r10,8
    c9d0:	013f0084 	movi	r4,-1022
    c9d4:	00c40034 	movhi	r3,4096
    c9d8:	18ffffc4 	addi	r3,r3,-1
    c9dc:	118cb03a 	or	r6,r2,r6
    c9e0:	008000c4 	movi	r2,3
    c9e4:	480a923a 	slli	r5,r9,8
    c9e8:	68800015 	stw	r2,0(r13)
    c9ec:	69000215 	stw	r4,8(r13)
    c9f0:	19800b36 	bltu	r3,r6,ca20 <__unpack_d+0x94>
    c9f4:	200f883a 	mov	r7,r4
    c9f8:	1811883a 	mov	r8,r3
    c9fc:	2945883a 	add	r2,r5,r5
    ca00:	1149803a 	cmpltu	r4,r2,r5
    ca04:	3187883a 	add	r3,r6,r6
    ca08:	20c9883a 	add	r4,r4,r3
    ca0c:	100b883a 	mov	r5,r2
    ca10:	200d883a 	mov	r6,r4
    ca14:	39ffffc4 	addi	r7,r7,-1
    ca18:	413ff82e 	bgeu	r8,r4,c9fc <__unpack_d+0x70>
    ca1c:	69c00215 	stw	r7,8(r13)
    ca20:	69800415 	stw	r6,16(r13)
    ca24:	69400315 	stw	r5,12(r13)
    ca28:	f800283a 	ret
    ca2c:	00800084 	movi	r2,2
    ca30:	28800015 	stw	r2,0(r5)
    ca34:	f800283a 	ret
    ca38:	0081ffc4 	movi	r2,2047
    ca3c:	40800f26 	beq	r8,r2,ca7c <__unpack_d+0xf0>
    ca40:	480cd63a 	srli	r6,r9,24
    ca44:	5006923a 	slli	r3,r10,8
    ca48:	4804923a 	slli	r2,r9,8
    ca4c:	0009883a 	mov	r4,zero
    ca50:	30c6b03a 	or	r3,r6,r3
    ca54:	01440034 	movhi	r5,4096
    ca58:	110cb03a 	or	r6,r2,r4
    ca5c:	423f0044 	addi	r8,r8,-1023
    ca60:	194eb03a 	or	r7,r3,r5
    ca64:	008000c4 	movi	r2,3
    ca68:	69c00415 	stw	r7,16(r13)
    ca6c:	6a000215 	stw	r8,8(r13)
    ca70:	68800015 	stw	r2,0(r13)
    ca74:	69800315 	stw	r6,12(r13)
    ca78:	f800283a 	ret
    ca7c:	4a84b03a 	or	r2,r9,r10
    ca80:	1000031e 	bne	r2,zero,ca90 <__unpack_d+0x104>
    ca84:	00800104 	movi	r2,4
    ca88:	28800015 	stw	r2,0(r5)
    ca8c:	f800283a 	ret
    ca90:	0009883a 	mov	r4,zero
    ca94:	01400234 	movhi	r5,8
    ca98:	4904703a 	and	r2,r9,r4
    ca9c:	5146703a 	and	r3,r10,r5
    caa0:	10c4b03a 	or	r2,r2,r3
    caa4:	10000526 	beq	r2,zero,cabc <__unpack_d+0x130>
    caa8:	00800044 	movi	r2,1
    caac:	68800015 	stw	r2,0(r13)
    cab0:	6b000415 	stw	r12,16(r13)
    cab4:	6ac00315 	stw	r11,12(r13)
    cab8:	f800283a 	ret
    cabc:	68000015 	stw	zero,0(r13)
    cac0:	003ffb06 	br	cab0 <__unpack_d+0x124>

0000cac4 <__fpcmp_parts_d>:
    cac4:	21800017 	ldw	r6,0(r4)
    cac8:	00c00044 	movi	r3,1
    cacc:	19800a2e 	bgeu	r3,r6,caf8 <__fpcmp_parts_d+0x34>
    cad0:	28800017 	ldw	r2,0(r5)
    cad4:	1880082e 	bgeu	r3,r2,caf8 <__fpcmp_parts_d+0x34>
    cad8:	00c00104 	movi	r3,4
    cadc:	30c02626 	beq	r6,r3,cb78 <__fpcmp_parts_d+0xb4>
    cae0:	10c02226 	beq	r2,r3,cb6c <__fpcmp_parts_d+0xa8>
    cae4:	00c00084 	movi	r3,2
    cae8:	30c00526 	beq	r6,r3,cb00 <__fpcmp_parts_d+0x3c>
    caec:	10c0071e 	bne	r2,r3,cb0c <__fpcmp_parts_d+0x48>
    caf0:	20800117 	ldw	r2,4(r4)
    caf4:	1000091e 	bne	r2,zero,cb1c <__fpcmp_parts_d+0x58>
    caf8:	00800044 	movi	r2,1
    cafc:	f800283a 	ret
    cb00:	10c01a1e 	bne	r2,r3,cb6c <__fpcmp_parts_d+0xa8>
    cb04:	0005883a 	mov	r2,zero
    cb08:	f800283a 	ret
    cb0c:	22000117 	ldw	r8,4(r4)
    cb10:	28800117 	ldw	r2,4(r5)
    cb14:	40800326 	beq	r8,r2,cb24 <__fpcmp_parts_d+0x60>
    cb18:	403ff726 	beq	r8,zero,caf8 <__fpcmp_parts_d+0x34>
    cb1c:	00bfffc4 	movi	r2,-1
    cb20:	f800283a 	ret
    cb24:	20c00217 	ldw	r3,8(r4)
    cb28:	28800217 	ldw	r2,8(r5)
    cb2c:	10fffa16 	blt	r2,r3,cb18 <__fpcmp_parts_d+0x54>
    cb30:	18800916 	blt	r3,r2,cb58 <__fpcmp_parts_d+0x94>
    cb34:	21c00417 	ldw	r7,16(r4)
    cb38:	28c00417 	ldw	r3,16(r5)
    cb3c:	21800317 	ldw	r6,12(r4)
    cb40:	28800317 	ldw	r2,12(r5)
    cb44:	19fff436 	bltu	r3,r7,cb18 <__fpcmp_parts_d+0x54>
    cb48:	38c00526 	beq	r7,r3,cb60 <__fpcmp_parts_d+0x9c>
    cb4c:	38c00236 	bltu	r7,r3,cb58 <__fpcmp_parts_d+0x94>
    cb50:	19ffec1e 	bne	r3,r7,cb04 <__fpcmp_parts_d+0x40>
    cb54:	30bfeb2e 	bgeu	r6,r2,cb04 <__fpcmp_parts_d+0x40>
    cb58:	403fe71e 	bne	r8,zero,caf8 <__fpcmp_parts_d+0x34>
    cb5c:	003fef06 	br	cb1c <__fpcmp_parts_d+0x58>
    cb60:	11bffa2e 	bgeu	r2,r6,cb4c <__fpcmp_parts_d+0x88>
    cb64:	403fe426 	beq	r8,zero,caf8 <__fpcmp_parts_d+0x34>
    cb68:	003fec06 	br	cb1c <__fpcmp_parts_d+0x58>
    cb6c:	28800117 	ldw	r2,4(r5)
    cb70:	103fe11e 	bne	r2,zero,caf8 <__fpcmp_parts_d+0x34>
    cb74:	003fe906 	br	cb1c <__fpcmp_parts_d+0x58>
    cb78:	11bfdd1e 	bne	r2,r6,caf0 <__fpcmp_parts_d+0x2c>
    cb7c:	28c00117 	ldw	r3,4(r5)
    cb80:	20800117 	ldw	r2,4(r4)
    cb84:	1885c83a 	sub	r2,r3,r2
    cb88:	f800283a 	ret

0000cb8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cb8c:	defff804 	addi	sp,sp,-32
    cb90:	dfc00715 	stw	ra,28(sp)
    cb94:	df000615 	stw	fp,24(sp)
    cb98:	df000604 	addi	fp,sp,24
    cb9c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cba0:	e0bffc17 	ldw	r2,-16(fp)
    cba4:	1004803a 	cmplt	r2,r2,zero
    cba8:	1000081e 	bne	r2,zero,cbcc <close+0x40>
    cbac:	e0bffc17 	ldw	r2,-16(fp)
    cbb0:	10800324 	muli	r2,r2,12
    cbb4:	1007883a 	mov	r3,r2
    cbb8:	00800074 	movhi	r2,1
    cbbc:	1092b804 	addi	r2,r2,19168
    cbc0:	1887883a 	add	r3,r3,r2
    cbc4:	e0ffff15 	stw	r3,-4(fp)
    cbc8:	00000106 	br	cbd0 <close+0x44>
    cbcc:	e03fff15 	stw	zero,-4(fp)
    cbd0:	e0bfff17 	ldw	r2,-4(fp)
    cbd4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    cbd8:	e0bffb17 	ldw	r2,-20(fp)
    cbdc:	1005003a 	cmpeq	r2,r2,zero
    cbe0:	10001d1e 	bne	r2,zero,cc58 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cbe4:	e0bffb17 	ldw	r2,-20(fp)
    cbe8:	10800017 	ldw	r2,0(r2)
    cbec:	10800417 	ldw	r2,16(r2)
    cbf0:	1005003a 	cmpeq	r2,r2,zero
    cbf4:	1000071e 	bne	r2,zero,cc14 <close+0x88>
    cbf8:	e0bffb17 	ldw	r2,-20(fp)
    cbfc:	10800017 	ldw	r2,0(r2)
    cc00:	10800417 	ldw	r2,16(r2)
    cc04:	e13ffb17 	ldw	r4,-20(fp)
    cc08:	103ee83a 	callr	r2
    cc0c:	e0bffe15 	stw	r2,-8(fp)
    cc10:	00000106 	br	cc18 <close+0x8c>
    cc14:	e03ffe15 	stw	zero,-8(fp)
    cc18:	e0bffe17 	ldw	r2,-8(fp)
    cc1c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cc20:	e13ffc17 	ldw	r4,-16(fp)
    cc24:	000d8280 	call	d828 <alt_release_fd>
    if (rval < 0)
    cc28:	e0bffa17 	ldw	r2,-24(fp)
    cc2c:	1004403a 	cmpge	r2,r2,zero
    cc30:	1000071e 	bne	r2,zero,cc50 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    cc34:	000cc880 	call	cc88 <alt_get_errno>
    cc38:	e0fffa17 	ldw	r3,-24(fp)
    cc3c:	00c7c83a 	sub	r3,zero,r3
    cc40:	10c00015 	stw	r3,0(r2)
      return -1;
    cc44:	00bfffc4 	movi	r2,-1
    cc48:	e0bffd15 	stw	r2,-12(fp)
    cc4c:	00000806 	br	cc70 <close+0xe4>
    }
    return 0;
    cc50:	e03ffd15 	stw	zero,-12(fp)
    cc54:	00000606 	br	cc70 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cc58:	000cc880 	call	cc88 <alt_get_errno>
    cc5c:	1007883a 	mov	r3,r2
    cc60:	00801444 	movi	r2,81
    cc64:	18800015 	stw	r2,0(r3)
    return -1;
    cc68:	00bfffc4 	movi	r2,-1
    cc6c:	e0bffd15 	stw	r2,-12(fp)
    cc70:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    cc74:	e037883a 	mov	sp,fp
    cc78:	dfc00117 	ldw	ra,4(sp)
    cc7c:	df000017 	ldw	fp,0(sp)
    cc80:	dec00204 	addi	sp,sp,8
    cc84:	f800283a 	ret

0000cc88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc88:	defffd04 	addi	sp,sp,-12
    cc8c:	dfc00215 	stw	ra,8(sp)
    cc90:	df000115 	stw	fp,4(sp)
    cc94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cc98:	00800074 	movhi	r2,1
    cc9c:	10982804 	addi	r2,r2,24736
    cca0:	10800017 	ldw	r2,0(r2)
    cca4:	1005003a 	cmpeq	r2,r2,zero
    cca8:	1000061e 	bne	r2,zero,ccc4 <alt_get_errno+0x3c>
    ccac:	00800074 	movhi	r2,1
    ccb0:	10982804 	addi	r2,r2,24736
    ccb4:	10800017 	ldw	r2,0(r2)
    ccb8:	103ee83a 	callr	r2
    ccbc:	e0bfff15 	stw	r2,-4(fp)
    ccc0:	00000306 	br	ccd0 <alt_get_errno+0x48>
    ccc4:	008000b4 	movhi	r2,2
    ccc8:	10a07804 	addi	r2,r2,-32288
    cccc:	e0bfff15 	stw	r2,-4(fp)
    ccd0:	e0bfff17 	ldw	r2,-4(fp)
}
    ccd4:	e037883a 	mov	sp,fp
    ccd8:	dfc00117 	ldw	ra,4(sp)
    ccdc:	df000017 	ldw	fp,0(sp)
    cce0:	dec00204 	addi	sp,sp,8
    cce4:	f800283a 	ret

0000cce8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cce8:	defffc04 	addi	sp,sp,-16
    ccec:	df000315 	stw	fp,12(sp)
    ccf0:	df000304 	addi	fp,sp,12
    ccf4:	e13ffd15 	stw	r4,-12(fp)
    ccf8:	e17ffe15 	stw	r5,-8(fp)
    ccfc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cd00:	e0bfff17 	ldw	r2,-4(fp)
}
    cd04:	e037883a 	mov	sp,fp
    cd08:	df000017 	ldw	fp,0(sp)
    cd0c:	dec00104 	addi	sp,sp,4
    cd10:	f800283a 	ret

0000cd14 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cd14:	defff904 	addi	sp,sp,-28
    cd18:	dfc00615 	stw	ra,24(sp)
    cd1c:	df000515 	stw	fp,20(sp)
    cd20:	df000504 	addi	fp,sp,20
    cd24:	e13ffc15 	stw	r4,-16(fp)
    cd28:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cd2c:	e0bffc17 	ldw	r2,-16(fp)
    cd30:	1004803a 	cmplt	r2,r2,zero
    cd34:	1000081e 	bne	r2,zero,cd58 <fstat+0x44>
    cd38:	e0bffc17 	ldw	r2,-16(fp)
    cd3c:	10800324 	muli	r2,r2,12
    cd40:	1007883a 	mov	r3,r2
    cd44:	00800074 	movhi	r2,1
    cd48:	1092b804 	addi	r2,r2,19168
    cd4c:	1887883a 	add	r3,r3,r2
    cd50:	e0ffff15 	stw	r3,-4(fp)
    cd54:	00000106 	br	cd5c <fstat+0x48>
    cd58:	e03fff15 	stw	zero,-4(fp)
    cd5c:	e0bfff17 	ldw	r2,-4(fp)
    cd60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    cd64:	e0bffb17 	ldw	r2,-20(fp)
    cd68:	1005003a 	cmpeq	r2,r2,zero
    cd6c:	1000121e 	bne	r2,zero,cdb8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cd70:	e0bffb17 	ldw	r2,-20(fp)
    cd74:	10800017 	ldw	r2,0(r2)
    cd78:	10800817 	ldw	r2,32(r2)
    cd7c:	1005003a 	cmpeq	r2,r2,zero
    cd80:	1000081e 	bne	r2,zero,cda4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    cd84:	e0bffb17 	ldw	r2,-20(fp)
    cd88:	10800017 	ldw	r2,0(r2)
    cd8c:	10800817 	ldw	r2,32(r2)
    cd90:	e13ffb17 	ldw	r4,-20(fp)
    cd94:	e17ffd17 	ldw	r5,-12(fp)
    cd98:	103ee83a 	callr	r2
    cd9c:	e0bffe15 	stw	r2,-8(fp)
    cda0:	00000b06 	br	cdd0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cda4:	e0fffd17 	ldw	r3,-12(fp)
    cda8:	00880004 	movi	r2,8192
    cdac:	18800115 	stw	r2,4(r3)
      return 0;
    cdb0:	e03ffe15 	stw	zero,-8(fp)
    cdb4:	00000606 	br	cdd0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cdb8:	000cde80 	call	cde8 <alt_get_errno>
    cdbc:	1007883a 	mov	r3,r2
    cdc0:	00801444 	movi	r2,81
    cdc4:	18800015 	stw	r2,0(r3)
    return -1;
    cdc8:	00bfffc4 	movi	r2,-1
    cdcc:	e0bffe15 	stw	r2,-8(fp)
    cdd0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    cdd4:	e037883a 	mov	sp,fp
    cdd8:	dfc00117 	ldw	ra,4(sp)
    cddc:	df000017 	ldw	fp,0(sp)
    cde0:	dec00204 	addi	sp,sp,8
    cde4:	f800283a 	ret

0000cde8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cde8:	defffd04 	addi	sp,sp,-12
    cdec:	dfc00215 	stw	ra,8(sp)
    cdf0:	df000115 	stw	fp,4(sp)
    cdf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cdf8:	00800074 	movhi	r2,1
    cdfc:	10982804 	addi	r2,r2,24736
    ce00:	10800017 	ldw	r2,0(r2)
    ce04:	1005003a 	cmpeq	r2,r2,zero
    ce08:	1000061e 	bne	r2,zero,ce24 <alt_get_errno+0x3c>
    ce0c:	00800074 	movhi	r2,1
    ce10:	10982804 	addi	r2,r2,24736
    ce14:	10800017 	ldw	r2,0(r2)
    ce18:	103ee83a 	callr	r2
    ce1c:	e0bfff15 	stw	r2,-4(fp)
    ce20:	00000306 	br	ce30 <alt_get_errno+0x48>
    ce24:	008000b4 	movhi	r2,2
    ce28:	10a07804 	addi	r2,r2,-32288
    ce2c:	e0bfff15 	stw	r2,-4(fp)
    ce30:	e0bfff17 	ldw	r2,-4(fp)
}
    ce34:	e037883a 	mov	sp,fp
    ce38:	dfc00117 	ldw	ra,4(sp)
    ce3c:	df000017 	ldw	fp,0(sp)
    ce40:	dec00204 	addi	sp,sp,8
    ce44:	f800283a 	ret

0000ce48 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    ce48:	deffef04 	addi	sp,sp,-68
    ce4c:	df001015 	stw	fp,64(sp)
    ce50:	df001004 	addi	fp,sp,64
    ce54:	e13ffc15 	stw	r4,-16(fp)
    ce58:	e17ffd15 	stw	r5,-12(fp)
    ce5c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    ce60:	00bffa84 	movi	r2,-22
    ce64:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ce68:	e0bffc17 	ldw	r2,-16(fp)
    ce6c:	10800828 	cmpgeui	r2,r2,32
    ce70:	1000601e 	bne	r2,zero,cff4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce74:	0005303a 	rdctl	r2,status
    ce78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce7c:	e0fff917 	ldw	r3,-28(fp)
    ce80:	00bfff84 	movi	r2,-2
    ce84:	1884703a 	and	r2,r3,r2
    ce88:	1001703a 	wrctl	status,r2
  
  return context;
    ce8c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ce90:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    ce94:	e0bffc17 	ldw	r2,-16(fp)
    ce98:	00c01f34 	movhi	r3,124
    ce9c:	18e5a904 	addi	r3,r3,-26972
    cea0:	100490fa 	slli	r2,r2,3
    cea4:	10c7883a 	add	r3,r2,r3
    cea8:	e0bffe17 	ldw	r2,-8(fp)
    ceac:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    ceb0:	e0bffc17 	ldw	r2,-16(fp)
    ceb4:	00c01f34 	movhi	r3,124
    ceb8:	18e5a904 	addi	r3,r3,-26972
    cebc:	100490fa 	slli	r2,r2,3
    cec0:	10c5883a 	add	r2,r2,r3
    cec4:	10c00104 	addi	r3,r2,4
    cec8:	e0bffd17 	ldw	r2,-12(fp)
    cecc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ced0:	e0bffe17 	ldw	r2,-8(fp)
    ced4:	1005003a 	cmpeq	r2,r2,zero
    ced8:	1000201e 	bne	r2,zero,cf5c <alt_irq_register+0x114>
    cedc:	e0bffc17 	ldw	r2,-16(fp)
    cee0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cee4:	0005303a 	rdctl	r2,status
    cee8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ceec:	e0fff617 	ldw	r3,-40(fp)
    cef0:	00bfff84 	movi	r2,-2
    cef4:	1884703a 	and	r2,r3,r2
    cef8:	1001703a 	wrctl	status,r2
  
  return context;
    cefc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cf00:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    cf04:	e0fff717 	ldw	r3,-36(fp)
    cf08:	00800044 	movi	r2,1
    cf0c:	10c4983a 	sll	r2,r2,r3
    cf10:	1007883a 	mov	r3,r2
    cf14:	008000b4 	movhi	r2,2
    cf18:	10a07904 	addi	r2,r2,-32284
    cf1c:	10800017 	ldw	r2,0(r2)
    cf20:	1886b03a 	or	r3,r3,r2
    cf24:	008000b4 	movhi	r2,2
    cf28:	10a07904 	addi	r2,r2,-32284
    cf2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cf30:	008000b4 	movhi	r2,2
    cf34:	10a07904 	addi	r2,r2,-32284
    cf38:	10800017 	ldw	r2,0(r2)
    cf3c:	100170fa 	wrctl	ienable,r2
    cf40:	e0bff817 	ldw	r2,-32(fp)
    cf44:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf48:	e0bff517 	ldw	r2,-44(fp)
    cf4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cf50:	0005883a 	mov	r2,zero
    cf54:	e0bfff15 	stw	r2,-4(fp)
    cf58:	00002006 	br	cfdc <alt_irq_register+0x194>
    cf5c:	e0bffc17 	ldw	r2,-16(fp)
    cf60:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf64:	0005303a 	rdctl	r2,status
    cf68:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf6c:	e0fff217 	ldw	r3,-56(fp)
    cf70:	00bfff84 	movi	r2,-2
    cf74:	1884703a 	and	r2,r3,r2
    cf78:	1001703a 	wrctl	status,r2
  
  return context;
    cf7c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cf80:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    cf84:	e0fff317 	ldw	r3,-52(fp)
    cf88:	00800044 	movi	r2,1
    cf8c:	10c4983a 	sll	r2,r2,r3
    cf90:	0084303a 	nor	r2,zero,r2
    cf94:	1007883a 	mov	r3,r2
    cf98:	008000b4 	movhi	r2,2
    cf9c:	10a07904 	addi	r2,r2,-32284
    cfa0:	10800017 	ldw	r2,0(r2)
    cfa4:	1886703a 	and	r3,r3,r2
    cfa8:	008000b4 	movhi	r2,2
    cfac:	10a07904 	addi	r2,r2,-32284
    cfb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cfb4:	008000b4 	movhi	r2,2
    cfb8:	10a07904 	addi	r2,r2,-32284
    cfbc:	10800017 	ldw	r2,0(r2)
    cfc0:	100170fa 	wrctl	ienable,r2
    cfc4:	e0bff417 	ldw	r2,-48(fp)
    cfc8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfcc:	e0bff117 	ldw	r2,-60(fp)
    cfd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cfd4:	0005883a 	mov	r2,zero
    cfd8:	e0bfff15 	stw	r2,-4(fp)
    cfdc:	e0bfff17 	ldw	r2,-4(fp)
    cfe0:	e0bffb15 	stw	r2,-20(fp)
    cfe4:	e0bffa17 	ldw	r2,-24(fp)
    cfe8:	e0bff015 	stw	r2,-64(fp)
    cfec:	e0bff017 	ldw	r2,-64(fp)
    cff0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    cff4:	e0bffb17 	ldw	r2,-20(fp)
}
    cff8:	e037883a 	mov	sp,fp
    cffc:	df000017 	ldw	fp,0(sp)
    d000:	dec00104 	addi	sp,sp,4
    d004:	f800283a 	ret

0000d008 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d008:	deffeb04 	addi	sp,sp,-84
    d00c:	dfc01415 	stw	ra,80(sp)
    d010:	df001315 	stw	fp,76(sp)
    d014:	df001304 	addi	fp,sp,76
    d018:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d01c:	e0bffd17 	ldw	r2,-12(fp)
    d020:	1004803a 	cmplt	r2,r2,zero
    d024:	1000081e 	bne	r2,zero,d048 <isatty+0x40>
    d028:	e0bffd17 	ldw	r2,-12(fp)
    d02c:	10800324 	muli	r2,r2,12
    d030:	1007883a 	mov	r3,r2
    d034:	00800074 	movhi	r2,1
    d038:	1092b804 	addi	r2,r2,19168
    d03c:	1887883a 	add	r3,r3,r2
    d040:	e0ffff15 	stw	r3,-4(fp)
    d044:	00000106 	br	d04c <isatty+0x44>
    d048:	e03fff15 	stw	zero,-4(fp)
    d04c:	e0bfff17 	ldw	r2,-4(fp)
    d050:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    d054:	e0bfed17 	ldw	r2,-76(fp)
    d058:	1005003a 	cmpeq	r2,r2,zero
    d05c:	10000f1e 	bne	r2,zero,d09c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d060:	e0bfed17 	ldw	r2,-76(fp)
    d064:	10800017 	ldw	r2,0(r2)
    d068:	10800817 	ldw	r2,32(r2)
    d06c:	1004c03a 	cmpne	r2,r2,zero
    d070:	1000031e 	bne	r2,zero,d080 <isatty+0x78>
    {
      return 1;
    d074:	00800044 	movi	r2,1
    d078:	e0bffe15 	stw	r2,-8(fp)
    d07c:	00000c06 	br	d0b0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d080:	e17fee04 	addi	r5,fp,-72
    d084:	e13ffd17 	ldw	r4,-12(fp)
    d088:	000cd140 	call	cd14 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d08c:	e0bfef17 	ldw	r2,-68(fp)
    d090:	10880020 	cmpeqi	r2,r2,8192
    d094:	e0bffe15 	stw	r2,-8(fp)
    d098:	00000506 	br	d0b0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d09c:	000d0c80 	call	d0c8 <alt_get_errno>
    d0a0:	1007883a 	mov	r3,r2
    d0a4:	00801444 	movi	r2,81
    d0a8:	18800015 	stw	r2,0(r3)
    return 0;
    d0ac:	e03ffe15 	stw	zero,-8(fp)
    d0b0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    d0b4:	e037883a 	mov	sp,fp
    d0b8:	dfc00117 	ldw	ra,4(sp)
    d0bc:	df000017 	ldw	fp,0(sp)
    d0c0:	dec00204 	addi	sp,sp,8
    d0c4:	f800283a 	ret

0000d0c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0c8:	defffd04 	addi	sp,sp,-12
    d0cc:	dfc00215 	stw	ra,8(sp)
    d0d0:	df000115 	stw	fp,4(sp)
    d0d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d0d8:	00800074 	movhi	r2,1
    d0dc:	10982804 	addi	r2,r2,24736
    d0e0:	10800017 	ldw	r2,0(r2)
    d0e4:	1005003a 	cmpeq	r2,r2,zero
    d0e8:	1000061e 	bne	r2,zero,d104 <alt_get_errno+0x3c>
    d0ec:	00800074 	movhi	r2,1
    d0f0:	10982804 	addi	r2,r2,24736
    d0f4:	10800017 	ldw	r2,0(r2)
    d0f8:	103ee83a 	callr	r2
    d0fc:	e0bfff15 	stw	r2,-4(fp)
    d100:	00000306 	br	d110 <alt_get_errno+0x48>
    d104:	008000b4 	movhi	r2,2
    d108:	10a07804 	addi	r2,r2,-32288
    d10c:	e0bfff15 	stw	r2,-4(fp)
    d110:	e0bfff17 	ldw	r2,-4(fp)
}
    d114:	e037883a 	mov	sp,fp
    d118:	dfc00117 	ldw	ra,4(sp)
    d11c:	df000017 	ldw	fp,0(sp)
    d120:	dec00204 	addi	sp,sp,8
    d124:	f800283a 	ret

0000d128 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d128:	defffe04 	addi	sp,sp,-8
    d12c:	dfc00115 	stw	ra,4(sp)
    d130:	df000015 	stw	fp,0(sp)
    d134:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d138:	01000074 	movhi	r4,1
    d13c:	21182d04 	addi	r4,r4,24756
    d140:	01400074 	movhi	r5,1
    d144:	29500904 	addi	r5,r5,16420
    d148:	01800074 	movhi	r6,1
    d14c:	31982d04 	addi	r6,r6,24756
    d150:	000d1a80 	call	d1a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d154:	01000034 	movhi	r4,0
    d158:	21000804 	addi	r4,r4,32
    d15c:	01400034 	movhi	r5,0
    d160:	29400804 	addi	r5,r5,32
    d164:	01800034 	movhi	r6,0
    d168:	31806e04 	addi	r6,r6,440
    d16c:	000d1a80 	call	d1a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d170:	01000074 	movhi	r4,1
    d174:	210df304 	addi	r4,r4,14284
    d178:	01400074 	movhi	r5,1
    d17c:	294df304 	addi	r5,r5,14284
    d180:	01800074 	movhi	r6,1
    d184:	31900904 	addi	r6,r6,16420
    d188:	000d1a80 	call	d1a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d18c:	00124440 	call	12444 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d190:	00126d00 	call	126d0 <alt_icache_flush_all>
}
    d194:	e037883a 	mov	sp,fp
    d198:	dfc00117 	ldw	ra,4(sp)
    d19c:	df000017 	ldw	fp,0(sp)
    d1a0:	dec00204 	addi	sp,sp,8
    d1a4:	f800283a 	ret

0000d1a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d1a8:	defffc04 	addi	sp,sp,-16
    d1ac:	df000315 	stw	fp,12(sp)
    d1b0:	df000304 	addi	fp,sp,12
    d1b4:	e13ffd15 	stw	r4,-12(fp)
    d1b8:	e17ffe15 	stw	r5,-8(fp)
    d1bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d1c0:	e0fffe17 	ldw	r3,-8(fp)
    d1c4:	e0bffd17 	ldw	r2,-12(fp)
    d1c8:	18800e26 	beq	r3,r2,d204 <alt_load_section+0x5c>
  {
    while( to != end )
    d1cc:	00000a06 	br	d1f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    d1d0:	e0bffd17 	ldw	r2,-12(fp)
    d1d4:	10c00017 	ldw	r3,0(r2)
    d1d8:	e0bffe17 	ldw	r2,-8(fp)
    d1dc:	10c00015 	stw	r3,0(r2)
    d1e0:	e0bffe17 	ldw	r2,-8(fp)
    d1e4:	10800104 	addi	r2,r2,4
    d1e8:	e0bffe15 	stw	r2,-8(fp)
    d1ec:	e0bffd17 	ldw	r2,-12(fp)
    d1f0:	10800104 	addi	r2,r2,4
    d1f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d1f8:	e0fffe17 	ldw	r3,-8(fp)
    d1fc:	e0bfff17 	ldw	r2,-4(fp)
    d200:	18bff31e 	bne	r3,r2,d1d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d204:	e037883a 	mov	sp,fp
    d208:	df000017 	ldw	fp,0(sp)
    d20c:	dec00104 	addi	sp,sp,4
    d210:	f800283a 	ret

0000d214 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d214:	defff804 	addi	sp,sp,-32
    d218:	dfc00715 	stw	ra,28(sp)
    d21c:	df000615 	stw	fp,24(sp)
    d220:	df000604 	addi	fp,sp,24
    d224:	e13ffc15 	stw	r4,-16(fp)
    d228:	e17ffd15 	stw	r5,-12(fp)
    d22c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d230:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d234:	e0bffc17 	ldw	r2,-16(fp)
    d238:	1004803a 	cmplt	r2,r2,zero
    d23c:	1000081e 	bne	r2,zero,d260 <lseek+0x4c>
    d240:	e0bffc17 	ldw	r2,-16(fp)
    d244:	10800324 	muli	r2,r2,12
    d248:	1007883a 	mov	r3,r2
    d24c:	00800074 	movhi	r2,1
    d250:	1092b804 	addi	r2,r2,19168
    d254:	1887883a 	add	r3,r3,r2
    d258:	e0ffff15 	stw	r3,-4(fp)
    d25c:	00000106 	br	d264 <lseek+0x50>
    d260:	e03fff15 	stw	zero,-4(fp)
    d264:	e0bfff17 	ldw	r2,-4(fp)
    d268:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    d26c:	e0bffb17 	ldw	r2,-20(fp)
    d270:	1005003a 	cmpeq	r2,r2,zero
    d274:	1000111e 	bne	r2,zero,d2bc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d278:	e0bffb17 	ldw	r2,-20(fp)
    d27c:	10800017 	ldw	r2,0(r2)
    d280:	10800717 	ldw	r2,28(r2)
    d284:	1005003a 	cmpeq	r2,r2,zero
    d288:	1000091e 	bne	r2,zero,d2b0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d28c:	e0bffb17 	ldw	r2,-20(fp)
    d290:	10800017 	ldw	r2,0(r2)
    d294:	10800717 	ldw	r2,28(r2)
    d298:	e13ffb17 	ldw	r4,-20(fp)
    d29c:	e17ffd17 	ldw	r5,-12(fp)
    d2a0:	e1bffe17 	ldw	r6,-8(fp)
    d2a4:	103ee83a 	callr	r2
    d2a8:	e0bffa15 	stw	r2,-24(fp)
    d2ac:	00000506 	br	d2c4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d2b0:	00bfde84 	movi	r2,-134
    d2b4:	e0bffa15 	stw	r2,-24(fp)
    d2b8:	00000206 	br	d2c4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    d2bc:	00bfebc4 	movi	r2,-81
    d2c0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    d2c4:	e0bffa17 	ldw	r2,-24(fp)
    d2c8:	1004403a 	cmpge	r2,r2,zero
    d2cc:	1000071e 	bne	r2,zero,d2ec <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    d2d0:	000d3040 	call	d304 <alt_get_errno>
    d2d4:	1007883a 	mov	r3,r2
    d2d8:	e0bffa17 	ldw	r2,-24(fp)
    d2dc:	0085c83a 	sub	r2,zero,r2
    d2e0:	18800015 	stw	r2,0(r3)
    rc = -1;
    d2e4:	00bfffc4 	movi	r2,-1
    d2e8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    d2ec:	e0bffa17 	ldw	r2,-24(fp)
}
    d2f0:	e037883a 	mov	sp,fp
    d2f4:	dfc00117 	ldw	ra,4(sp)
    d2f8:	df000017 	ldw	fp,0(sp)
    d2fc:	dec00204 	addi	sp,sp,8
    d300:	f800283a 	ret

0000d304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d304:	defffd04 	addi	sp,sp,-12
    d308:	dfc00215 	stw	ra,8(sp)
    d30c:	df000115 	stw	fp,4(sp)
    d310:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d314:	00800074 	movhi	r2,1
    d318:	10982804 	addi	r2,r2,24736
    d31c:	10800017 	ldw	r2,0(r2)
    d320:	1005003a 	cmpeq	r2,r2,zero
    d324:	1000061e 	bne	r2,zero,d340 <alt_get_errno+0x3c>
    d328:	00800074 	movhi	r2,1
    d32c:	10982804 	addi	r2,r2,24736
    d330:	10800017 	ldw	r2,0(r2)
    d334:	103ee83a 	callr	r2
    d338:	e0bfff15 	stw	r2,-4(fp)
    d33c:	00000306 	br	d34c <alt_get_errno+0x48>
    d340:	008000b4 	movhi	r2,2
    d344:	10a07804 	addi	r2,r2,-32288
    d348:	e0bfff15 	stw	r2,-4(fp)
    d34c:	e0bfff17 	ldw	r2,-4(fp)
}
    d350:	e037883a 	mov	sp,fp
    d354:	dfc00117 	ldw	ra,4(sp)
    d358:	df000017 	ldw	fp,0(sp)
    d35c:	dec00204 	addi	sp,sp,8
    d360:	f800283a 	ret

0000d364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d364:	defffd04 	addi	sp,sp,-12
    d368:	dfc00215 	stw	ra,8(sp)
    d36c:	df000115 	stw	fp,4(sp)
    d370:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d374:	0009883a 	mov	r4,zero
    d378:	000dac40 	call	dac4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d37c:	000daf80 	call	daf8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d380:	01000074 	movhi	r4,1
    d384:	210f9f04 	addi	r4,r4,15996
    d388:	01400074 	movhi	r5,1
    d38c:	294f9f04 	addi	r5,r5,15996
    d390:	01800074 	movhi	r6,1
    d394:	318f9f04 	addi	r6,r6,15996
    d398:	00127c40 	call	127c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d39c:	00125740 	call	12574 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d3a0:	01000074 	movhi	r4,1
    d3a4:	21097604 	addi	r4,r4,9688
    d3a8:	00130880 	call	13088 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d3ac:	d1285d17 	ldw	r4,-24204(gp)
    d3b0:	d1685e17 	ldw	r5,-24200(gp)
    d3b4:	d1a85f17 	ldw	r6,-24196(gp)
    d3b8:	0000b3c0 	call	b3c <main>
    d3bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d3c0:	01000044 	movi	r4,1
    d3c4:	000cb8c0 	call	cb8c <close>
  exit (result);
    d3c8:	e13fff17 	ldw	r4,-4(fp)
    d3cc:	001309c0 	call	1309c <exit>

0000d3d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d3d0:	defffe04 	addi	sp,sp,-8
    d3d4:	df000115 	stw	fp,4(sp)
    d3d8:	df000104 	addi	fp,sp,4
    d3dc:	e13fff15 	stw	r4,-4(fp)
}
    d3e0:	e037883a 	mov	sp,fp
    d3e4:	df000017 	ldw	fp,0(sp)
    d3e8:	dec00104 	addi	sp,sp,4
    d3ec:	f800283a 	ret

0000d3f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d3f0:	defffe04 	addi	sp,sp,-8
    d3f4:	df000115 	stw	fp,4(sp)
    d3f8:	df000104 	addi	fp,sp,4
    d3fc:	e13fff15 	stw	r4,-4(fp)
}
    d400:	e037883a 	mov	sp,fp
    d404:	df000017 	ldw	fp,0(sp)
    d408:	dec00104 	addi	sp,sp,4
    d40c:	f800283a 	ret

0000d410 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    d410:	defff204 	addi	sp,sp,-56
    d414:	dfc00a15 	stw	ra,40(sp)
    d418:	df000915 	stw	fp,36(sp)
    d41c:	df000904 	addi	fp,sp,36
    d420:	e1400215 	stw	r5,8(fp)
    d424:	e1800315 	stw	r6,12(fp)
    d428:	e1c00415 	stw	r7,16(fp)
    d42c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    d430:	e0800204 	addi	r2,fp,8
    d434:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    d438:	e0bfff17 	ldw	r2,-4(fp)
    d43c:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    d440:	00007806 	br	d624 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    d444:	e0bffc07 	ldb	r2,-16(fp)
    d448:	10800960 	cmpeqi	r2,r2,37
    d44c:	1000031e 	bne	r2,zero,d45c <alt_printf+0x4c>
        {
            alt_putchar(c);
    d450:	e13ffc07 	ldb	r4,-16(fp)
    d454:	000d6680 	call	d668 <alt_putchar>
    d458:	00007206 	br	d624 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    d45c:	e0bffd17 	ldw	r2,-12(fp)
    d460:	10800003 	ldbu	r2,0(r2)
    d464:	e0bffc05 	stb	r2,-16(fp)
    d468:	e0bffc07 	ldb	r2,-16(fp)
    d46c:	1004c03a 	cmpne	r2,r2,zero
    d470:	1007883a 	mov	r3,r2
    d474:	e0bffd17 	ldw	r2,-12(fp)
    d478:	10800044 	addi	r2,r2,1
    d47c:	e0bffd15 	stw	r2,-12(fp)
    d480:	18803fcc 	andi	r2,r3,255
    d484:	1005003a 	cmpeq	r2,r2,zero
    d488:	1000721e 	bne	r2,zero,d654 <alt_printf+0x244>
            {
                if (c == '%')
    d48c:	e0bffc07 	ldb	r2,-16(fp)
    d490:	10800958 	cmpnei	r2,r2,37
    d494:	1000031e 	bne	r2,zero,d4a4 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    d498:	e13ffc07 	ldb	r4,-16(fp)
    d49c:	000d6680 	call	d668 <alt_putchar>
    d4a0:	00006006 	br	d624 <alt_printf+0x214>
                } 
                else if (c == 'c')
    d4a4:	e0bffc07 	ldb	r2,-16(fp)
    d4a8:	108018d8 	cmpnei	r2,r2,99
    d4ac:	1000091e 	bne	r2,zero,d4d4 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    d4b0:	e0fffe17 	ldw	r3,-8(fp)
    d4b4:	18800104 	addi	r2,r3,4
    d4b8:	e0bffe15 	stw	r2,-8(fp)
    d4bc:	1805883a 	mov	r2,r3
    d4c0:	10800017 	ldw	r2,0(r2)
    d4c4:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    d4c8:	e13ffb17 	ldw	r4,-20(fp)
    d4cc:	000d6680 	call	d668 <alt_putchar>
    d4d0:	00005406 	br	d624 <alt_printf+0x214>
                }
                else if (c == 'x')
    d4d4:	e0bffc07 	ldb	r2,-16(fp)
    d4d8:	10801e18 	cmpnei	r2,r2,120
    d4dc:	1000371e 	bne	r2,zero,d5bc <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    d4e0:	e0fffe17 	ldw	r3,-8(fp)
    d4e4:	18800104 	addi	r2,r3,4
    d4e8:	e0bffe15 	stw	r2,-8(fp)
    d4ec:	1805883a 	mov	r2,r3
    d4f0:	10800017 	ldw	r2,0(r2)
    d4f4:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    d4f8:	e0bffa17 	ldw	r2,-24(fp)
    d4fc:	1004c03a 	cmpne	r2,r2,zero
    d500:	1000031e 	bne	r2,zero,d510 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    d504:	01000c04 	movi	r4,48
    d508:	000d6680 	call	d668 <alt_putchar>
                        continue;
    d50c:	00004506 	br	d624 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    d510:	00800704 	movi	r2,28
    d514:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    d518:	00000306 	br	d528 <alt_printf+0x118>
                        digit_shift -= 4;
    d51c:	e0bff817 	ldw	r2,-32(fp)
    d520:	10bfff04 	addi	r2,r2,-4
    d524:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    d528:	00c003c4 	movi	r3,15
    d52c:	e0bff817 	ldw	r2,-32(fp)
    d530:	1884983a 	sll	r2,r3,r2
    d534:	1007883a 	mov	r3,r2
    d538:	e0bffa17 	ldw	r2,-24(fp)
    d53c:	1884703a 	and	r2,r3,r2
    d540:	1005003a 	cmpeq	r2,r2,zero
    d544:	103ff51e 	bne	r2,zero,d51c <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    d548:	00001806 	br	d5ac <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    d54c:	00c003c4 	movi	r3,15
    d550:	e0bff817 	ldw	r2,-32(fp)
    d554:	1884983a 	sll	r2,r3,r2
    d558:	1007883a 	mov	r3,r2
    d55c:	e0bffa17 	ldw	r2,-24(fp)
    d560:	1886703a 	and	r3,r3,r2
    d564:	e0bff817 	ldw	r2,-32(fp)
    d568:	1884d83a 	srl	r2,r3,r2
    d56c:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    d570:	e0bff917 	ldw	r2,-28(fp)
    d574:	108002a8 	cmpgeui	r2,r2,10
    d578:	1000041e 	bne	r2,zero,d58c <alt_printf+0x17c>
                            c = '0' + digit;
    d57c:	e0bff917 	ldw	r2,-28(fp)
    d580:	10800c04 	addi	r2,r2,48
    d584:	e0bffc05 	stb	r2,-16(fp)
    d588:	00000306 	br	d598 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    d58c:	e0bff917 	ldw	r2,-28(fp)
    d590:	108015c4 	addi	r2,r2,87
    d594:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    d598:	e13ffc07 	ldb	r4,-16(fp)
    d59c:	000d6680 	call	d668 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    d5a0:	e0bff817 	ldw	r2,-32(fp)
    d5a4:	10bfff04 	addi	r2,r2,-4
    d5a8:	e0bff815 	stw	r2,-32(fp)
    d5ac:	e0bff817 	ldw	r2,-32(fp)
    d5b0:	1004403a 	cmpge	r2,r2,zero
    d5b4:	103fe51e 	bne	r2,zero,d54c <alt_printf+0x13c>
    d5b8:	00001a06 	br	d624 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    d5bc:	e0bffc07 	ldb	r2,-16(fp)
    d5c0:	10801cd8 	cmpnei	r2,r2,115
    d5c4:	1000171e 	bne	r2,zero,d624 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    d5c8:	e0fffe17 	ldw	r3,-8(fp)
    d5cc:	18800104 	addi	r2,r3,4
    d5d0:	e0bffe15 	stw	r2,-8(fp)
    d5d4:	1805883a 	mov	r2,r3
    d5d8:	10800017 	ldw	r2,0(r2)
    d5dc:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    d5e0:	00000906 	br	d608 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    d5e4:	e0bff717 	ldw	r2,-36(fp)
    d5e8:	10800003 	ldbu	r2,0(r2)
    d5ec:	11003fcc 	andi	r4,r2,255
    d5f0:	2100201c 	xori	r4,r4,128
    d5f4:	213fe004 	addi	r4,r4,-128
    d5f8:	e0bff717 	ldw	r2,-36(fp)
    d5fc:	10800044 	addi	r2,r2,1
    d600:	e0bff715 	stw	r2,-36(fp)
    d604:	000d6680 	call	d668 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    d608:	e0bff717 	ldw	r2,-36(fp)
    d60c:	10800003 	ldbu	r2,0(r2)
    d610:	10803fcc 	andi	r2,r2,255
    d614:	1080201c 	xori	r2,r2,128
    d618:	10bfe004 	addi	r2,r2,-128
    d61c:	1004c03a 	cmpne	r2,r2,zero
    d620:	103ff01e 	bne	r2,zero,d5e4 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    d624:	e0bffd17 	ldw	r2,-12(fp)
    d628:	10800003 	ldbu	r2,0(r2)
    d62c:	e0bffc05 	stb	r2,-16(fp)
    d630:	e0bffc07 	ldb	r2,-16(fp)
    d634:	1004c03a 	cmpne	r2,r2,zero
    d638:	1007883a 	mov	r3,r2
    d63c:	e0bffd17 	ldw	r2,-12(fp)
    d640:	10800044 	addi	r2,r2,1
    d644:	e0bffd15 	stw	r2,-12(fp)
    d648:	18803fcc 	andi	r2,r3,255
    d64c:	1004c03a 	cmpne	r2,r2,zero
    d650:	103f7c1e 	bne	r2,zero,d444 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    d654:	e037883a 	mov	sp,fp
    d658:	dfc00117 	ldw	ra,4(sp)
    d65c:	df000017 	ldw	fp,0(sp)
    d660:	dec00504 	addi	sp,sp,20
    d664:	f800283a 	ret

0000d668 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    d668:	defffd04 	addi	sp,sp,-12
    d66c:	dfc00215 	stw	ra,8(sp)
    d670:	df000115 	stw	fp,4(sp)
    d674:	df000104 	addi	fp,sp,4
    d678:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    d67c:	00800074 	movhi	r2,1
    d680:	10981d04 	addi	r2,r2,24692
    d684:	10800017 	ldw	r2,0(r2)
    d688:	11400217 	ldw	r5,8(r2)
    d68c:	e13fff17 	ldw	r4,-4(fp)
    d690:	00131480 	call	13148 <putc>
#endif
}
    d694:	e037883a 	mov	sp,fp
    d698:	dfc00117 	ldw	ra,4(sp)
    d69c:	df000017 	ldw	fp,0(sp)
    d6a0:	dec00204 	addi	sp,sp,8
    d6a4:	f800283a 	ret

0000d6a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d6a8:	defff704 	addi	sp,sp,-36
    d6ac:	dfc00815 	stw	ra,32(sp)
    d6b0:	df000715 	stw	fp,28(sp)
    d6b4:	df000704 	addi	fp,sp,28
    d6b8:	e13ffb15 	stw	r4,-20(fp)
    d6bc:	e17ffc15 	stw	r5,-16(fp)
    d6c0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d6c4:	e0bffb17 	ldw	r2,-20(fp)
    d6c8:	1004803a 	cmplt	r2,r2,zero
    d6cc:	1000081e 	bne	r2,zero,d6f0 <read+0x48>
    d6d0:	e0bffb17 	ldw	r2,-20(fp)
    d6d4:	10800324 	muli	r2,r2,12
    d6d8:	1007883a 	mov	r3,r2
    d6dc:	00800074 	movhi	r2,1
    d6e0:	1092b804 	addi	r2,r2,19168
    d6e4:	1887883a 	add	r3,r3,r2
    d6e8:	e0ffff15 	stw	r3,-4(fp)
    d6ec:	00000106 	br	d6f4 <read+0x4c>
    d6f0:	e03fff15 	stw	zero,-4(fp)
    d6f4:	e0bfff17 	ldw	r2,-4(fp)
    d6f8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    d6fc:	e0bffa17 	ldw	r2,-24(fp)
    d700:	1005003a 	cmpeq	r2,r2,zero
    d704:	1000241e 	bne	r2,zero,d798 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d708:	e0bffa17 	ldw	r2,-24(fp)
    d70c:	10800217 	ldw	r2,8(r2)
    d710:	108000cc 	andi	r2,r2,3
    d714:	10800060 	cmpeqi	r2,r2,1
    d718:	10001a1e 	bne	r2,zero,d784 <read+0xdc>
    d71c:	e0bffa17 	ldw	r2,-24(fp)
    d720:	10800017 	ldw	r2,0(r2)
    d724:	10800517 	ldw	r2,20(r2)
    d728:	1005003a 	cmpeq	r2,r2,zero
    d72c:	1000151e 	bne	r2,zero,d784 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d730:	e0bffa17 	ldw	r2,-24(fp)
    d734:	10800017 	ldw	r2,0(r2)
    d738:	10800517 	ldw	r2,20(r2)
    d73c:	e17ffc17 	ldw	r5,-16(fp)
    d740:	e1bffd17 	ldw	r6,-12(fp)
    d744:	e13ffa17 	ldw	r4,-24(fp)
    d748:	103ee83a 	callr	r2
    d74c:	e0bff915 	stw	r2,-28(fp)
    d750:	e0bff917 	ldw	r2,-28(fp)
    d754:	1004403a 	cmpge	r2,r2,zero
    d758:	1000071e 	bne	r2,zero,d778 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    d75c:	000d7c80 	call	d7c8 <alt_get_errno>
    d760:	e0fff917 	ldw	r3,-28(fp)
    d764:	00c7c83a 	sub	r3,zero,r3
    d768:	10c00015 	stw	r3,0(r2)
          return -1;
    d76c:	00bfffc4 	movi	r2,-1
    d770:	e0bffe15 	stw	r2,-8(fp)
    d774:	00000e06 	br	d7b0 <read+0x108>
        }
        return rval;
    d778:	e0bff917 	ldw	r2,-28(fp)
    d77c:	e0bffe15 	stw	r2,-8(fp)
    d780:	00000b06 	br	d7b0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d784:	000d7c80 	call	d7c8 <alt_get_errno>
    d788:	1007883a 	mov	r3,r2
    d78c:	00800344 	movi	r2,13
    d790:	18800015 	stw	r2,0(r3)
    d794:	00000406 	br	d7a8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d798:	000d7c80 	call	d7c8 <alt_get_errno>
    d79c:	1007883a 	mov	r3,r2
    d7a0:	00801444 	movi	r2,81
    d7a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d7a8:	00bfffc4 	movi	r2,-1
    d7ac:	e0bffe15 	stw	r2,-8(fp)
    d7b0:	e0bffe17 	ldw	r2,-8(fp)
}
    d7b4:	e037883a 	mov	sp,fp
    d7b8:	dfc00117 	ldw	ra,4(sp)
    d7bc:	df000017 	ldw	fp,0(sp)
    d7c0:	dec00204 	addi	sp,sp,8
    d7c4:	f800283a 	ret

0000d7c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7c8:	defffd04 	addi	sp,sp,-12
    d7cc:	dfc00215 	stw	ra,8(sp)
    d7d0:	df000115 	stw	fp,4(sp)
    d7d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d7d8:	00800074 	movhi	r2,1
    d7dc:	10982804 	addi	r2,r2,24736
    d7e0:	10800017 	ldw	r2,0(r2)
    d7e4:	1005003a 	cmpeq	r2,r2,zero
    d7e8:	1000061e 	bne	r2,zero,d804 <alt_get_errno+0x3c>
    d7ec:	00800074 	movhi	r2,1
    d7f0:	10982804 	addi	r2,r2,24736
    d7f4:	10800017 	ldw	r2,0(r2)
    d7f8:	103ee83a 	callr	r2
    d7fc:	e0bfff15 	stw	r2,-4(fp)
    d800:	00000306 	br	d810 <alt_get_errno+0x48>
    d804:	008000b4 	movhi	r2,2
    d808:	10a07804 	addi	r2,r2,-32288
    d80c:	e0bfff15 	stw	r2,-4(fp)
    d810:	e0bfff17 	ldw	r2,-4(fp)
}
    d814:	e037883a 	mov	sp,fp
    d818:	dfc00117 	ldw	ra,4(sp)
    d81c:	df000017 	ldw	fp,0(sp)
    d820:	dec00204 	addi	sp,sp,8
    d824:	f800283a 	ret

0000d828 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d828:	defffe04 	addi	sp,sp,-8
    d82c:	df000115 	stw	fp,4(sp)
    d830:	df000104 	addi	fp,sp,4
    d834:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d838:	e0bfff17 	ldw	r2,-4(fp)
    d83c:	108000d0 	cmplti	r2,r2,3
    d840:	10000d1e 	bne	r2,zero,d878 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d844:	e0bfff17 	ldw	r2,-4(fp)
    d848:	00c00074 	movhi	r3,1
    d84c:	18d2b804 	addi	r3,r3,19168
    d850:	10800324 	muli	r2,r2,12
    d854:	10c5883a 	add	r2,r2,r3
    d858:	10800204 	addi	r2,r2,8
    d85c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d860:	e0bfff17 	ldw	r2,-4(fp)
    d864:	00c00074 	movhi	r3,1
    d868:	18d2b804 	addi	r3,r3,19168
    d86c:	10800324 	muli	r2,r2,12
    d870:	10c5883a 	add	r2,r2,r3
    d874:	10000015 	stw	zero,0(r2)
  }
}
    d878:	e037883a 	mov	sp,fp
    d87c:	df000017 	ldw	fp,0(sp)
    d880:	dec00104 	addi	sp,sp,4
    d884:	f800283a 	ret

0000d888 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d888:	defff804 	addi	sp,sp,-32
    d88c:	df000715 	stw	fp,28(sp)
    d890:	df000704 	addi	fp,sp,28
    d894:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d898:	0005303a 	rdctl	r2,status
    d89c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8a0:	e0fffb17 	ldw	r3,-20(fp)
    d8a4:	00bfff84 	movi	r2,-2
    d8a8:	1884703a 	and	r2,r3,r2
    d8ac:	1001703a 	wrctl	status,r2
  
  return context;
    d8b0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d8b4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d8b8:	d0a00d17 	ldw	r2,-32716(gp)
    d8bc:	10c000c4 	addi	r3,r2,3
    d8c0:	00bfff04 	movi	r2,-4
    d8c4:	1884703a 	and	r2,r3,r2
    d8c8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d8cc:	d0e00d17 	ldw	r3,-32716(gp)
    d8d0:	e0bffe17 	ldw	r2,-8(fp)
    d8d4:	1887883a 	add	r3,r3,r2
    d8d8:	00802034 	movhi	r2,128
    d8dc:	10800004 	addi	r2,r2,0
    d8e0:	10c0072e 	bgeu	r2,r3,d900 <sbrk+0x78>
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8ec:	e0bffa17 	ldw	r2,-24(fp)
    d8f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d8f4:	00bfffc4 	movi	r2,-1
    d8f8:	e0bfff15 	stw	r2,-4(fp)
    d8fc:	00000c06 	br	d930 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    d900:	d0a00d17 	ldw	r2,-32716(gp)
    d904:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    d908:	d0e00d17 	ldw	r3,-32716(gp)
    d90c:	e0bffe17 	ldw	r2,-8(fp)
    d910:	1885883a 	add	r2,r3,r2
    d914:	d0a00d15 	stw	r2,-32716(gp)
    d918:	e0bffd17 	ldw	r2,-12(fp)
    d91c:	e0bff915 	stw	r2,-28(fp)
    d920:	e0bff917 	ldw	r2,-28(fp)
    d924:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d928:	e0bffc17 	ldw	r2,-16(fp)
    d92c:	e0bfff15 	stw	r2,-4(fp)
    d930:	e0bfff17 	ldw	r2,-4(fp)
} 
    d934:	e037883a 	mov	sp,fp
    d938:	df000017 	ldw	fp,0(sp)
    d93c:	dec00104 	addi	sp,sp,4
    d940:	f800283a 	ret

0000d944 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d944:	defff704 	addi	sp,sp,-36
    d948:	dfc00815 	stw	ra,32(sp)
    d94c:	df000715 	stw	fp,28(sp)
    d950:	df000704 	addi	fp,sp,28
    d954:	e13ffb15 	stw	r4,-20(fp)
    d958:	e17ffc15 	stw	r5,-16(fp)
    d95c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d960:	e0bffb17 	ldw	r2,-20(fp)
    d964:	1004803a 	cmplt	r2,r2,zero
    d968:	1000081e 	bne	r2,zero,d98c <write+0x48>
    d96c:	e0bffb17 	ldw	r2,-20(fp)
    d970:	10800324 	muli	r2,r2,12
    d974:	1007883a 	mov	r3,r2
    d978:	00800074 	movhi	r2,1
    d97c:	1092b804 	addi	r2,r2,19168
    d980:	1887883a 	add	r3,r3,r2
    d984:	e0ffff15 	stw	r3,-4(fp)
    d988:	00000106 	br	d990 <write+0x4c>
    d98c:	e03fff15 	stw	zero,-4(fp)
    d990:	e0bfff17 	ldw	r2,-4(fp)
    d994:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    d998:	e0bffa17 	ldw	r2,-24(fp)
    d99c:	1005003a 	cmpeq	r2,r2,zero
    d9a0:	1000241e 	bne	r2,zero,da34 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d9a4:	e0bffa17 	ldw	r2,-24(fp)
    d9a8:	10800217 	ldw	r2,8(r2)
    d9ac:	108000cc 	andi	r2,r2,3
    d9b0:	1005003a 	cmpeq	r2,r2,zero
    d9b4:	10001a1e 	bne	r2,zero,da20 <write+0xdc>
    d9b8:	e0bffa17 	ldw	r2,-24(fp)
    d9bc:	10800017 	ldw	r2,0(r2)
    d9c0:	10800617 	ldw	r2,24(r2)
    d9c4:	1005003a 	cmpeq	r2,r2,zero
    d9c8:	1000151e 	bne	r2,zero,da20 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d9cc:	e0bffa17 	ldw	r2,-24(fp)
    d9d0:	10800017 	ldw	r2,0(r2)
    d9d4:	10800617 	ldw	r2,24(r2)
    d9d8:	e17ffc17 	ldw	r5,-16(fp)
    d9dc:	e1bffd17 	ldw	r6,-12(fp)
    d9e0:	e13ffa17 	ldw	r4,-24(fp)
    d9e4:	103ee83a 	callr	r2
    d9e8:	e0bff915 	stw	r2,-28(fp)
    d9ec:	e0bff917 	ldw	r2,-28(fp)
    d9f0:	1004403a 	cmpge	r2,r2,zero
    d9f4:	1000071e 	bne	r2,zero,da14 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    d9f8:	000da640 	call	da64 <alt_get_errno>
    d9fc:	e0fff917 	ldw	r3,-28(fp)
    da00:	00c7c83a 	sub	r3,zero,r3
    da04:	10c00015 	stw	r3,0(r2)
        return -1;
    da08:	00bfffc4 	movi	r2,-1
    da0c:	e0bffe15 	stw	r2,-8(fp)
    da10:	00000e06 	br	da4c <write+0x108>
      }
      return rval;
    da14:	e0bff917 	ldw	r2,-28(fp)
    da18:	e0bffe15 	stw	r2,-8(fp)
    da1c:	00000b06 	br	da4c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    da20:	000da640 	call	da64 <alt_get_errno>
    da24:	1007883a 	mov	r3,r2
    da28:	00800344 	movi	r2,13
    da2c:	18800015 	stw	r2,0(r3)
    da30:	00000406 	br	da44 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    da34:	000da640 	call	da64 <alt_get_errno>
    da38:	1007883a 	mov	r3,r2
    da3c:	00801444 	movi	r2,81
    da40:	18800015 	stw	r2,0(r3)
  }
  return -1;
    da44:	00bfffc4 	movi	r2,-1
    da48:	e0bffe15 	stw	r2,-8(fp)
    da4c:	e0bffe17 	ldw	r2,-8(fp)
}
    da50:	e037883a 	mov	sp,fp
    da54:	dfc00117 	ldw	ra,4(sp)
    da58:	df000017 	ldw	fp,0(sp)
    da5c:	dec00204 	addi	sp,sp,8
    da60:	f800283a 	ret

0000da64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    da64:	defffd04 	addi	sp,sp,-12
    da68:	dfc00215 	stw	ra,8(sp)
    da6c:	df000115 	stw	fp,4(sp)
    da70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    da74:	00800074 	movhi	r2,1
    da78:	10982804 	addi	r2,r2,24736
    da7c:	10800017 	ldw	r2,0(r2)
    da80:	1005003a 	cmpeq	r2,r2,zero
    da84:	1000061e 	bne	r2,zero,daa0 <alt_get_errno+0x3c>
    da88:	00800074 	movhi	r2,1
    da8c:	10982804 	addi	r2,r2,24736
    da90:	10800017 	ldw	r2,0(r2)
    da94:	103ee83a 	callr	r2
    da98:	e0bfff15 	stw	r2,-4(fp)
    da9c:	00000306 	br	daac <alt_get_errno+0x48>
    daa0:	008000b4 	movhi	r2,2
    daa4:	10a07804 	addi	r2,r2,-32288
    daa8:	e0bfff15 	stw	r2,-4(fp)
    daac:	e0bfff17 	ldw	r2,-4(fp)
}
    dab0:	e037883a 	mov	sp,fp
    dab4:	dfc00117 	ldw	ra,4(sp)
    dab8:	df000017 	ldw	fp,0(sp)
    dabc:	dec00204 	addi	sp,sp,8
    dac0:	f800283a 	ret

0000dac4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dac4:	defffd04 	addi	sp,sp,-12
    dac8:	dfc00215 	stw	ra,8(sp)
    dacc:	df000115 	stw	fp,4(sp)
    dad0:	df000104 	addi	fp,sp,4
    dad4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    dad8:	0012cd40 	call	12cd4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dadc:	00800044 	movi	r2,1
    dae0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    dae4:	e037883a 	mov	sp,fp
    dae8:	dfc00117 	ldw	ra,4(sp)
    daec:	df000017 	ldw	fp,0(sp)
    daf0:	dec00204 	addi	sp,sp,8
    daf4:	f800283a 	ret

0000daf8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    daf8:	defffd04 	addi	sp,sp,-12
    dafc:	dfc00215 	stw	ra,8(sp)
    db00:	df000115 	stw	fp,4(sp)
    db04:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    db08:	00c000b4 	movhi	r3,2
    db0c:	18e07d04 	addi	r3,r3,-32268
    db10:	00840034 	movhi	r2,4096
    db14:	10880004 	addi	r2,r2,8192
    db18:	18800015 	stw	r2,0(r3)
    db1c:	00c000b4 	movhi	r3,2
    db20:	18e07e04 	addi	r3,r3,-32264
    db24:	0080bef4 	movhi	r2,763
    db28:	10bc2004 	addi	r2,r2,-3968
    db2c:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    db30:	01000074 	movhi	r4,1
    db34:	21132204 	addi	r4,r4,19592
    db38:	000b883a 	mov	r5,zero
    db3c:	01800204 	movi	r6,8
    db40:	000e0880 	call	e088 <altera_avalon_jtag_uart_init>
    db44:	01000074 	movhi	r4,1
    db48:	21131804 	addi	r4,r4,19552
    db4c:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    db50:	01000074 	movhi	r4,1
    db54:	21173004 	addi	r4,r4,23744
    db58:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    db5c:	01000074 	movhi	r4,1
    db60:	21173c04 	addi	r4,r4,23792
    db64:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    db68:	01000074 	movhi	r4,1
    db6c:	21174804 	addi	r4,r4,23840
    db70:	000f40c0 	call	f40c <alt_up_character_lcd_init>
    db74:	01000074 	movhi	r4,1
    db78:	21174804 	addi	r4,r4,23840
    db7c:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    db80:	01000074 	movhi	r4,1
    db84:	21175304 	addi	r4,r4,23884
    db88:	000f88c0 	call	f88c <alt_up_ethernet_init>
    db8c:	01000074 	movhi	r4,1
    db90:	21175304 	addi	r4,r4,23884
    db94:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    db98:	01000074 	movhi	r4,1
    db9c:	21176204 	addi	r4,r4,23944
    dba0:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    dba4:	01000074 	movhi	r4,1
    dba8:	21176d04 	addi	r4,r4,23988
    dbac:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    dbb0:	01000074 	movhi	r4,1
    dbb4:	21177804 	addi	r4,r4,24032
    dbb8:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    dbbc:	01000074 	movhi	r4,1
    dbc0:	21178304 	addi	r4,r4,24076
    dbc4:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    dbc8:	01000074 	movhi	r4,1
    dbcc:	21178e04 	addi	r4,r4,24120
    dbd0:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    dbd4:	01000074 	movhi	r4,1
    dbd8:	21179904 	addi	r4,r4,24164
    dbdc:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    dbe0:	01000074 	movhi	r4,1
    dbe4:	2117a404 	addi	r4,r4,24208
    dbe8:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    dbec:	01000074 	movhi	r4,1
    dbf0:	2117af04 	addi	r4,r4,24252
    dbf4:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    dbf8:	01000074 	movhi	r4,1
    dbfc:	2117ba04 	addi	r4,r4,24296
    dc00:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    dc04:	01000074 	movhi	r4,1
    dc08:	2117c504 	addi	r4,r4,24340
    dc0c:	00101140 	call	10114 <alt_up_ps2_init>
    dc10:	01000074 	movhi	r4,1
    dc14:	2117c504 	addi	r4,r4,24340
    dc18:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    dc1c:	01000074 	movhi	r4,1
    dc20:	2117d304 	addi	r4,r4,24396
    dc24:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    dc28:	01000074 	movhi	r4,1
    dc2c:	2117de04 	addi	r4,r4,24440
    dc30:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    dc34:	00800074 	movhi	r2,1
    dc38:	1097eb04 	addi	r2,r2,24492
    dc3c:	10800a17 	ldw	r2,40(r2)
    dc40:	10800104 	addi	r2,r2,4
    dc44:	10800017 	ldw	r2,0(r2)
    dc48:	10ffffcc 	andi	r3,r2,65535
    dc4c:	00800074 	movhi	r2,1
    dc50:	1097eb04 	addi	r2,r2,24492
    dc54:	10c00c15 	stw	r3,48(r2)
    dc58:	00800074 	movhi	r2,1
    dc5c:	1097eb04 	addi	r2,r2,24492
    dc60:	10800a17 	ldw	r2,40(r2)
    dc64:	10800104 	addi	r2,r2,4
    dc68:	10800017 	ldw	r2,0(r2)
    dc6c:	1005d43a 	srai	r2,r2,16
    dc70:	10ffffcc 	andi	r3,r2,65535
    dc74:	00800074 	movhi	r2,1
    dc78:	1097eb04 	addi	r2,r2,24492
    dc7c:	10c00d15 	stw	r3,52(r2)
    dc80:	00800074 	movhi	r2,1
    dc84:	1097eb04 	addi	r2,r2,24492
    dc88:	10800c17 	ldw	r2,48(r2)
    dc8c:	10801068 	cmpgeui	r2,r2,65
    dc90:	1000081e 	bne	r2,zero,dcb4 <alt_sys_init+0x1bc>
    dc94:	00c00074 	movhi	r3,1
    dc98:	18d7eb04 	addi	r3,r3,24492
    dc9c:	00800fc4 	movi	r2,63
    dca0:	18800f15 	stw	r2,60(r3)
    dca4:	00c00074 	movhi	r3,1
    dca8:	18d7eb04 	addi	r3,r3,24492
    dcac:	00800184 	movi	r2,6
    dcb0:	18801015 	stw	r2,64(r3)
    dcb4:	00800074 	movhi	r2,1
    dcb8:	1097eb04 	addi	r2,r2,24492
    dcbc:	10800d17 	ldw	r2,52(r2)
    dcc0:	10800868 	cmpgeui	r2,r2,33
    dcc4:	1000041e 	bne	r2,zero,dcd8 <alt_sys_init+0x1e0>
    dcc8:	00c00074 	movhi	r3,1
    dccc:	18d7eb04 	addi	r3,r3,24492
    dcd0:	008007c4 	movi	r2,31
    dcd4:	18801115 	stw	r2,68(r3)
    dcd8:	01000074 	movhi	r4,1
    dcdc:	2117eb04 	addi	r4,r4,24492
    dce0:	0010a800 	call	10a80 <alt_up_char_buffer_init>
    dce4:	01000074 	movhi	r4,1
    dce8:	2117eb04 	addi	r4,r4,24492
    dcec:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    dcf0:	00800074 	movhi	r2,1
    dcf4:	1097fd04 	addi	r2,r2,24564
    dcf8:	10800a17 	ldw	r2,40(r2)
    dcfc:	10800017 	ldw	r2,0(r2)
    dd00:	1007883a 	mov	r3,r2
    dd04:	00800074 	movhi	r2,1
    dd08:	1097fd04 	addi	r2,r2,24564
    dd0c:	10c00b15 	stw	r3,44(r2)
    dd10:	00800074 	movhi	r2,1
    dd14:	1097fd04 	addi	r2,r2,24564
    dd18:	10800a17 	ldw	r2,40(r2)
    dd1c:	10800104 	addi	r2,r2,4
    dd20:	10800017 	ldw	r2,0(r2)
    dd24:	1007883a 	mov	r3,r2
    dd28:	00800074 	movhi	r2,1
    dd2c:	1097fd04 	addi	r2,r2,24564
    dd30:	10c00c15 	stw	r3,48(r2)
    dd34:	00800074 	movhi	r2,1
    dd38:	1097fd04 	addi	r2,r2,24564
    dd3c:	10800a17 	ldw	r2,40(r2)
    dd40:	10800204 	addi	r2,r2,8
    dd44:	10800017 	ldw	r2,0(r2)
    dd48:	10ffffcc 	andi	r3,r2,65535
    dd4c:	00800074 	movhi	r2,1
    dd50:	1097fd04 	addi	r2,r2,24564
    dd54:	10c00f15 	stw	r3,60(r2)
    dd58:	00800074 	movhi	r2,1
    dd5c:	1097fd04 	addi	r2,r2,24564
    dd60:	10800a17 	ldw	r2,40(r2)
    dd64:	10800204 	addi	r2,r2,8
    dd68:	10800017 	ldw	r2,0(r2)
    dd6c:	1005d43a 	srai	r2,r2,16
    dd70:	10ffffcc 	andi	r3,r2,65535
    dd74:	00800074 	movhi	r2,1
    dd78:	1097fd04 	addi	r2,r2,24564
    dd7c:	10c01015 	stw	r3,64(r2)
    dd80:	00800074 	movhi	r2,1
    dd84:	1097fd04 	addi	r2,r2,24564
    dd88:	10800a17 	ldw	r2,40(r2)
    dd8c:	10800304 	addi	r2,r2,12
    dd90:	10800017 	ldw	r2,0(r2)
    dd94:	1005d07a 	srai	r2,r2,1
    dd98:	10c0004c 	andi	r3,r2,1
    dd9c:	00800074 	movhi	r2,1
    dda0:	1097fd04 	addi	r2,r2,24564
    dda4:	10c00d15 	stw	r3,52(r2)
    dda8:	00800074 	movhi	r2,1
    ddac:	1097fd04 	addi	r2,r2,24564
    ddb0:	10800a17 	ldw	r2,40(r2)
    ddb4:	10800304 	addi	r2,r2,12
    ddb8:	10800017 	ldw	r2,0(r2)
    ddbc:	1005d13a 	srai	r2,r2,4
    ddc0:	10c003cc 	andi	r3,r2,15
    ddc4:	00800074 	movhi	r2,1
    ddc8:	1097fd04 	addi	r2,r2,24564
    ddcc:	10c00e15 	stw	r3,56(r2)
    ddd0:	00800074 	movhi	r2,1
    ddd4:	1097fd04 	addi	r2,r2,24564
    ddd8:	10800a17 	ldw	r2,40(r2)
    dddc:	10800304 	addi	r2,r2,12
    dde0:	10800017 	ldw	r2,0(r2)
    dde4:	1005d43a 	srai	r2,r2,16
    dde8:	1007883a 	mov	r3,r2
    ddec:	00bfffc4 	movi	r2,-1
    ddf0:	1884703a 	and	r2,r3,r2
    ddf4:	e0bfff45 	stb	r2,-3(fp)
    ddf8:	00800074 	movhi	r2,1
    ddfc:	1097fd04 	addi	r2,r2,24564
    de00:	10800a17 	ldw	r2,40(r2)
    de04:	10800304 	addi	r2,r2,12
    de08:	10800017 	ldw	r2,0(r2)
    de0c:	1005d63a 	srai	r2,r2,24
    de10:	1007883a 	mov	r3,r2
    de14:	00bfffc4 	movi	r2,-1
    de18:	1884703a 	and	r2,r3,r2
    de1c:	e0bfff05 	stb	r2,-4(fp)
    de20:	00800074 	movhi	r2,1
    de24:	1097fd04 	addi	r2,r2,24564
    de28:	10800e17 	ldw	r2,56(r2)
    de2c:	10800058 	cmpnei	r2,r2,1
    de30:	1000041e 	bne	r2,zero,de44 <alt_sys_init+0x34c>
    de34:	00800074 	movhi	r2,1
    de38:	1097fd04 	addi	r2,r2,24564
    de3c:	10001115 	stw	zero,68(r2)
    de40:	00000e06 	br	de7c <alt_sys_init+0x384>
    de44:	00800074 	movhi	r2,1
    de48:	1097fd04 	addi	r2,r2,24564
    de4c:	10800e17 	ldw	r2,56(r2)
    de50:	10800098 	cmpnei	r2,r2,2
    de54:	1000051e 	bne	r2,zero,de6c <alt_sys_init+0x374>
    de58:	00c00074 	movhi	r3,1
    de5c:	18d7fd04 	addi	r3,r3,24564
    de60:	00800044 	movi	r2,1
    de64:	18801115 	stw	r2,68(r3)
    de68:	00000406 	br	de7c <alt_sys_init+0x384>
    de6c:	00c00074 	movhi	r3,1
    de70:	18d7fd04 	addi	r3,r3,24564
    de74:	00800084 	movi	r2,2
    de78:	18801115 	stw	r2,68(r3)
    de7c:	e0ffff43 	ldbu	r3,-3(fp)
    de80:	00800804 	movi	r2,32
    de84:	10c7c83a 	sub	r3,r2,r3
    de88:	00bfffc4 	movi	r2,-1
    de8c:	10c6d83a 	srl	r3,r2,r3
    de90:	00800074 	movhi	r2,1
    de94:	1097fd04 	addi	r2,r2,24564
    de98:	10c01215 	stw	r3,72(r2)
    de9c:	e0ffff43 	ldbu	r3,-3(fp)
    dea0:	00800074 	movhi	r2,1
    dea4:	1097fd04 	addi	r2,r2,24564
    dea8:	10801117 	ldw	r2,68(r2)
    deac:	1887883a 	add	r3,r3,r2
    deb0:	00800074 	movhi	r2,1
    deb4:	1097fd04 	addi	r2,r2,24564
    deb8:	10c01315 	stw	r3,76(r2)
    debc:	e0ffff03 	ldbu	r3,-4(fp)
    dec0:	00800804 	movi	r2,32
    dec4:	10c7c83a 	sub	r3,r2,r3
    dec8:	00bfffc4 	movi	r2,-1
    decc:	10c6d83a 	srl	r3,r2,r3
    ded0:	00800074 	movhi	r2,1
    ded4:	1097fd04 	addi	r2,r2,24564
    ded8:	10c01415 	stw	r3,80(r2)
    dedc:	01000074 	movhi	r4,1
    dee0:	2117fd04 	addi	r4,r4,24564
    dee4:	000df080 	call	df08 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    dee8:	01000074 	movhi	r4,1
    deec:	21181204 	addi	r4,r4,24648
    def0:	000df080 	call	df08 <alt_dev_reg>
}
    def4:	e037883a 	mov	sp,fp
    def8:	dfc00117 	ldw	ra,4(sp)
    defc:	df000017 	ldw	fp,0(sp)
    df00:	dec00204 	addi	sp,sp,8
    df04:	f800283a 	ret

0000df08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    df08:	defffd04 	addi	sp,sp,-12
    df0c:	dfc00215 	stw	ra,8(sp)
    df10:	df000115 	stw	fp,4(sp)
    df14:	df000104 	addi	fp,sp,4
    df18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    df1c:	e13fff17 	ldw	r4,-4(fp)
    df20:	01400074 	movhi	r5,1
    df24:	29582504 	addi	r5,r5,24724
    df28:	00124600 	call	12460 <alt_dev_llist_insert>
}
    df2c:	e037883a 	mov	sp,fp
    df30:	dfc00117 	ldw	ra,4(sp)
    df34:	df000017 	ldw	fp,0(sp)
    df38:	dec00204 	addi	sp,sp,8
    df3c:	f800283a 	ret

0000df40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    df40:	defffa04 	addi	sp,sp,-24
    df44:	dfc00515 	stw	ra,20(sp)
    df48:	df000415 	stw	fp,16(sp)
    df4c:	df000404 	addi	fp,sp,16
    df50:	e13ffd15 	stw	r4,-12(fp)
    df54:	e17ffe15 	stw	r5,-8(fp)
    df58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    df5c:	e0bffd17 	ldw	r2,-12(fp)
    df60:	10800017 	ldw	r2,0(r2)
    df64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    df68:	e0bffc17 	ldw	r2,-16(fp)
    df6c:	11000a04 	addi	r4,r2,40
    df70:	e0bffd17 	ldw	r2,-12(fp)
    df74:	11c00217 	ldw	r7,8(r2)
    df78:	e17ffe17 	ldw	r5,-8(fp)
    df7c:	e1bfff17 	ldw	r6,-4(fp)
    df80:	000e5840 	call	e584 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    df84:	e037883a 	mov	sp,fp
    df88:	dfc00117 	ldw	ra,4(sp)
    df8c:	df000017 	ldw	fp,0(sp)
    df90:	dec00204 	addi	sp,sp,8
    df94:	f800283a 	ret

0000df98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    df98:	defffa04 	addi	sp,sp,-24
    df9c:	dfc00515 	stw	ra,20(sp)
    dfa0:	df000415 	stw	fp,16(sp)
    dfa4:	df000404 	addi	fp,sp,16
    dfa8:	e13ffd15 	stw	r4,-12(fp)
    dfac:	e17ffe15 	stw	r5,-8(fp)
    dfb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dfb4:	e0bffd17 	ldw	r2,-12(fp)
    dfb8:	10800017 	ldw	r2,0(r2)
    dfbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    dfc0:	e0bffc17 	ldw	r2,-16(fp)
    dfc4:	11000a04 	addi	r4,r2,40
    dfc8:	e0bffd17 	ldw	r2,-12(fp)
    dfcc:	11c00217 	ldw	r7,8(r2)
    dfd0:	e17ffe17 	ldw	r5,-8(fp)
    dfd4:	e1bfff17 	ldw	r6,-4(fp)
    dfd8:	000e7a80 	call	e7a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    dfdc:	e037883a 	mov	sp,fp
    dfe0:	dfc00117 	ldw	ra,4(sp)
    dfe4:	df000017 	ldw	fp,0(sp)
    dfe8:	dec00204 	addi	sp,sp,8
    dfec:	f800283a 	ret

0000dff0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    dff0:	defffc04 	addi	sp,sp,-16
    dff4:	dfc00315 	stw	ra,12(sp)
    dff8:	df000215 	stw	fp,8(sp)
    dffc:	df000204 	addi	fp,sp,8
    e000:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e004:	e0bfff17 	ldw	r2,-4(fp)
    e008:	10800017 	ldw	r2,0(r2)
    e00c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e010:	e0bffe17 	ldw	r2,-8(fp)
    e014:	11000a04 	addi	r4,r2,40
    e018:	e0bfff17 	ldw	r2,-4(fp)
    e01c:	11400217 	ldw	r5,8(r2)
    e020:	000e41c0 	call	e41c <altera_avalon_jtag_uart_close>
}
    e024:	e037883a 	mov	sp,fp
    e028:	dfc00117 	ldw	ra,4(sp)
    e02c:	df000017 	ldw	fp,0(sp)
    e030:	dec00204 	addi	sp,sp,8
    e034:	f800283a 	ret

0000e038 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e038:	defffa04 	addi	sp,sp,-24
    e03c:	dfc00515 	stw	ra,20(sp)
    e040:	df000415 	stw	fp,16(sp)
    e044:	df000404 	addi	fp,sp,16
    e048:	e13ffd15 	stw	r4,-12(fp)
    e04c:	e17ffe15 	stw	r5,-8(fp)
    e050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e054:	e0bffd17 	ldw	r2,-12(fp)
    e058:	10800017 	ldw	r2,0(r2)
    e05c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e060:	e0bffc17 	ldw	r2,-16(fp)
    e064:	11000a04 	addi	r4,r2,40
    e068:	e17ffe17 	ldw	r5,-8(fp)
    e06c:	e1bfff17 	ldw	r6,-4(fp)
    e070:	000e4900 	call	e490 <altera_avalon_jtag_uart_ioctl>
}
    e074:	e037883a 	mov	sp,fp
    e078:	dfc00117 	ldw	ra,4(sp)
    e07c:	df000017 	ldw	fp,0(sp)
    e080:	dec00204 	addi	sp,sp,8
    e084:	f800283a 	ret

0000e088 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e088:	defffb04 	addi	sp,sp,-20
    e08c:	dfc00415 	stw	ra,16(sp)
    e090:	df000315 	stw	fp,12(sp)
    e094:	df000304 	addi	fp,sp,12
    e098:	e13ffd15 	stw	r4,-12(fp)
    e09c:	e17ffe15 	stw	r5,-8(fp)
    e0a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e0a4:	e0fffd17 	ldw	r3,-12(fp)
    e0a8:	00800044 	movi	r2,1
    e0ac:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e0b0:	e0bffd17 	ldw	r2,-12(fp)
    e0b4:	10800017 	ldw	r2,0(r2)
    e0b8:	11000104 	addi	r4,r2,4
    e0bc:	e0bffd17 	ldw	r2,-12(fp)
    e0c0:	10800817 	ldw	r2,32(r2)
    e0c4:	1007883a 	mov	r3,r2
    e0c8:	2005883a 	mov	r2,r4
    e0cc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    e0d0:	e13fff17 	ldw	r4,-4(fp)
    e0d4:	e17ffd17 	ldw	r5,-12(fp)
    e0d8:	01800074 	movhi	r6,1
    e0dc:	31b85004 	addi	r6,r6,-7872
    e0e0:	000ce480 	call	ce48 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e0e4:	e0bffd17 	ldw	r2,-12(fp)
    e0e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e0ec:	e0bffd17 	ldw	r2,-12(fp)
    e0f0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e0f4:	008000b4 	movhi	r2,2
    e0f8:	10a07f04 	addi	r2,r2,-32260
    e0fc:	10800017 	ldw	r2,0(r2)
    e100:	100b883a 	mov	r5,r2
    e104:	01800074 	movhi	r6,1
    e108:	31b8db04 	addi	r6,r6,-7316
    e10c:	e1fffd17 	ldw	r7,-12(fp)
    e110:	00122f00 	call	122f0 <alt_alarm_start>
    e114:	1004403a 	cmpge	r2,r2,zero
    e118:	1000041e 	bne	r2,zero,e12c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e11c:	e0fffd17 	ldw	r3,-12(fp)
    e120:	00a00034 	movhi	r2,32768
    e124:	10bfffc4 	addi	r2,r2,-1
    e128:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e12c:	e037883a 	mov	sp,fp
    e130:	dfc00117 	ldw	ra,4(sp)
    e134:	df000017 	ldw	fp,0(sp)
    e138:	dec00204 	addi	sp,sp,8
    e13c:	f800283a 	ret

0000e140 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e140:	defff704 	addi	sp,sp,-36
    e144:	df000815 	stw	fp,32(sp)
    e148:	df000804 	addi	fp,sp,32
    e14c:	e13ffe15 	stw	r4,-8(fp)
    e150:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e154:	e0bffe17 	ldw	r2,-8(fp)
    e158:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    e15c:	e0bffd17 	ldw	r2,-12(fp)
    e160:	10800017 	ldw	r2,0(r2)
    e164:	e0bffc15 	stw	r2,-16(fp)
    e168:	00000006 	br	e16c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e16c:	e0bffc17 	ldw	r2,-16(fp)
    e170:	10800104 	addi	r2,r2,4
    e174:	10800037 	ldwio	r2,0(r2)
    e178:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e17c:	e0bffb17 	ldw	r2,-20(fp)
    e180:	1080c00c 	andi	r2,r2,768
    e184:	1005003a 	cmpeq	r2,r2,zero
    e188:	1000741e 	bne	r2,zero,e35c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e18c:	e0bffb17 	ldw	r2,-20(fp)
    e190:	1080400c 	andi	r2,r2,256
    e194:	1005003a 	cmpeq	r2,r2,zero
    e198:	1000351e 	bne	r2,zero,e270 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e19c:	00800074 	movhi	r2,1
    e1a0:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e1a4:	e0bffd17 	ldw	r2,-12(fp)
    e1a8:	10800a17 	ldw	r2,40(r2)
    e1ac:	10800044 	addi	r2,r2,1
    e1b0:	1081ffcc 	andi	r2,r2,2047
    e1b4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    e1b8:	e0bffd17 	ldw	r2,-12(fp)
    e1bc:	10c00b17 	ldw	r3,44(r2)
    e1c0:	e0bff917 	ldw	r2,-28(fp)
    e1c4:	18801626 	beq	r3,r2,e220 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e1c8:	e0bffc17 	ldw	r2,-16(fp)
    e1cc:	10800037 	ldwio	r2,0(r2)
    e1d0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e1d4:	e0bffa17 	ldw	r2,-24(fp)
    e1d8:	10a0000c 	andi	r2,r2,32768
    e1dc:	1005003a 	cmpeq	r2,r2,zero
    e1e0:	10000f1e 	bne	r2,zero,e220 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e1e4:	e0bffd17 	ldw	r2,-12(fp)
    e1e8:	10c00a17 	ldw	r3,40(r2)
    e1ec:	e0bffa17 	ldw	r2,-24(fp)
    e1f0:	1009883a 	mov	r4,r2
    e1f4:	e0bffd17 	ldw	r2,-12(fp)
    e1f8:	1885883a 	add	r2,r3,r2
    e1fc:	10800e04 	addi	r2,r2,56
    e200:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e204:	e0bffd17 	ldw	r2,-12(fp)
    e208:	10800a17 	ldw	r2,40(r2)
    e20c:	10800044 	addi	r2,r2,1
    e210:	10c1ffcc 	andi	r3,r2,2047
    e214:	e0bffd17 	ldw	r2,-12(fp)
    e218:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e21c:	003fe106 	br	e1a4 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e220:	e0bffa17 	ldw	r2,-24(fp)
    e224:	10bfffec 	andhi	r2,r2,65535
    e228:	1005003a 	cmpeq	r2,r2,zero
    e22c:	1000101e 	bne	r2,zero,e270 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e230:	e0bffd17 	ldw	r2,-12(fp)
    e234:	10c00817 	ldw	r3,32(r2)
    e238:	00bfff84 	movi	r2,-2
    e23c:	1886703a 	and	r3,r3,r2
    e240:	e0bffd17 	ldw	r2,-12(fp)
    e244:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e248:	e0bffc17 	ldw	r2,-16(fp)
    e24c:	11000104 	addi	r4,r2,4
    e250:	e0bffd17 	ldw	r2,-12(fp)
    e254:	10800817 	ldw	r2,32(r2)
    e258:	1007883a 	mov	r3,r2
    e25c:	2005883a 	mov	r2,r4
    e260:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	10800104 	addi	r2,r2,4
    e26c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e270:	e0bffb17 	ldw	r2,-20(fp)
    e274:	1080800c 	andi	r2,r2,512
    e278:	1005003a 	cmpeq	r2,r2,zero
    e27c:	103fbb1e 	bne	r2,zero,e16c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e280:	e0bffb17 	ldw	r2,-20(fp)
    e284:	10bfffec 	andhi	r2,r2,65535
    e288:	1004d43a 	srli	r2,r2,16
    e28c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e290:	00001506 	br	e2e8 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e294:	e13ffc17 	ldw	r4,-16(fp)
    e298:	e0bffd17 	ldw	r2,-12(fp)
    e29c:	10c00d17 	ldw	r3,52(r2)
    e2a0:	e0bffd17 	ldw	r2,-12(fp)
    e2a4:	1885883a 	add	r2,r3,r2
    e2a8:	10820e04 	addi	r2,r2,2104
    e2ac:	10800003 	ldbu	r2,0(r2)
    e2b0:	10c03fcc 	andi	r3,r2,255
    e2b4:	18c0201c 	xori	r3,r3,128
    e2b8:	18ffe004 	addi	r3,r3,-128
    e2bc:	2005883a 	mov	r2,r4
    e2c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e2c4:	e0bffd17 	ldw	r2,-12(fp)
    e2c8:	10800d17 	ldw	r2,52(r2)
    e2cc:	10800044 	addi	r2,r2,1
    e2d0:	10c1ffcc 	andi	r3,r2,2047
    e2d4:	e0bffd17 	ldw	r2,-12(fp)
    e2d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e2dc:	e0bff817 	ldw	r2,-32(fp)
    e2e0:	10bfffc4 	addi	r2,r2,-1
    e2e4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e2e8:	e0bff817 	ldw	r2,-32(fp)
    e2ec:	1005003a 	cmpeq	r2,r2,zero
    e2f0:	1000051e 	bne	r2,zero,e308 <altera_avalon_jtag_uart_irq+0x1c8>
    e2f4:	e0bffd17 	ldw	r2,-12(fp)
    e2f8:	10c00d17 	ldw	r3,52(r2)
    e2fc:	e0bffd17 	ldw	r2,-12(fp)
    e300:	10800c17 	ldw	r2,48(r2)
    e304:	18bfe31e 	bne	r3,r2,e294 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e308:	e0bff817 	ldw	r2,-32(fp)
    e30c:	1005003a 	cmpeq	r2,r2,zero
    e310:	103f961e 	bne	r2,zero,e16c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e314:	e0bffd17 	ldw	r2,-12(fp)
    e318:	10c00817 	ldw	r3,32(r2)
    e31c:	00bfff44 	movi	r2,-3
    e320:	1886703a 	and	r3,r3,r2
    e324:	e0bffd17 	ldw	r2,-12(fp)
    e328:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e32c:	e0bffd17 	ldw	r2,-12(fp)
    e330:	10800017 	ldw	r2,0(r2)
    e334:	11000104 	addi	r4,r2,4
    e338:	e0bffd17 	ldw	r2,-12(fp)
    e33c:	10800817 	ldw	r2,32(r2)
    e340:	1007883a 	mov	r3,r2
    e344:	2005883a 	mov	r2,r4
    e348:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e34c:	e0bffc17 	ldw	r2,-16(fp)
    e350:	10800104 	addi	r2,r2,4
    e354:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e358:	003f8406 	br	e16c <altera_avalon_jtag_uart_irq+0x2c>
}
    e35c:	e037883a 	mov	sp,fp
    e360:	df000017 	ldw	fp,0(sp)
    e364:	dec00104 	addi	sp,sp,4
    e368:	f800283a 	ret

0000e36c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e36c:	defffc04 	addi	sp,sp,-16
    e370:	df000315 	stw	fp,12(sp)
    e374:	df000304 	addi	fp,sp,12
    e378:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e384:	e0bffe17 	ldw	r2,-8(fp)
    e388:	10800017 	ldw	r2,0(r2)
    e38c:	10800104 	addi	r2,r2,4
    e390:	10800037 	ldwio	r2,0(r2)
    e394:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e398:	e0bffd17 	ldw	r2,-12(fp)
    e39c:	1081000c 	andi	r2,r2,1024
    e3a0:	1005003a 	cmpeq	r2,r2,zero
    e3a4:	10000c1e 	bne	r2,zero,e3d8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e3a8:	e0bffe17 	ldw	r2,-8(fp)
    e3ac:	10800017 	ldw	r2,0(r2)
    e3b0:	11000104 	addi	r4,r2,4
    e3b4:	e0bffe17 	ldw	r2,-8(fp)
    e3b8:	10800817 	ldw	r2,32(r2)
    e3bc:	10810014 	ori	r2,r2,1024
    e3c0:	1007883a 	mov	r3,r2
    e3c4:	2005883a 	mov	r2,r4
    e3c8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    e3cc:	e0bffe17 	ldw	r2,-8(fp)
    e3d0:	10000915 	stw	zero,36(r2)
    e3d4:	00000a06 	br	e400 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e3d8:	e0bffe17 	ldw	r2,-8(fp)
    e3dc:	10c00917 	ldw	r3,36(r2)
    e3e0:	00a00034 	movhi	r2,32768
    e3e4:	10bfff04 	addi	r2,r2,-4
    e3e8:	10c00536 	bltu	r2,r3,e400 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	10800917 	ldw	r2,36(r2)
    e3f4:	10c00044 	addi	r3,r2,1
    e3f8:	e0bffe17 	ldw	r2,-8(fp)
    e3fc:	10c00915 	stw	r3,36(r2)
    e400:	008000b4 	movhi	r2,2
    e404:	10a07f04 	addi	r2,r2,-32260
    e408:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e40c:	e037883a 	mov	sp,fp
    e410:	df000017 	ldw	fp,0(sp)
    e414:	dec00104 	addi	sp,sp,4
    e418:	f800283a 	ret

0000e41c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e41c:	defffc04 	addi	sp,sp,-16
    e420:	df000315 	stw	fp,12(sp)
    e424:	df000304 	addi	fp,sp,12
    e428:	e13ffd15 	stw	r4,-12(fp)
    e42c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e430:	00000706 	br	e450 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    e434:	e0bffe17 	ldw	r2,-8(fp)
    e438:	1090000c 	andi	r2,r2,16384
    e43c:	1005003a 	cmpeq	r2,r2,zero
    e440:	1000031e 	bne	r2,zero,e450 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    e444:	00bffd44 	movi	r2,-11
    e448:	e0bfff15 	stw	r2,-4(fp)
    e44c:	00000b06 	br	e47c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e450:	e0bffd17 	ldw	r2,-12(fp)
    e454:	10c00d17 	ldw	r3,52(r2)
    e458:	e0bffd17 	ldw	r2,-12(fp)
    e45c:	10800c17 	ldw	r2,48(r2)
    e460:	18800526 	beq	r3,r2,e478 <altera_avalon_jtag_uart_close+0x5c>
    e464:	e0bffd17 	ldw	r2,-12(fp)
    e468:	10c00917 	ldw	r3,36(r2)
    e46c:	e0bffd17 	ldw	r2,-12(fp)
    e470:	10800117 	ldw	r2,4(r2)
    e474:	18bfef36 	bltu	r3,r2,e434 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e478:	e03fff15 	stw	zero,-4(fp)
    e47c:	e0bfff17 	ldw	r2,-4(fp)
}
    e480:	e037883a 	mov	sp,fp
    e484:	df000017 	ldw	fp,0(sp)
    e488:	dec00104 	addi	sp,sp,4
    e48c:	f800283a 	ret

0000e490 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e490:	defff804 	addi	sp,sp,-32
    e494:	df000715 	stw	fp,28(sp)
    e498:	df000704 	addi	fp,sp,28
    e49c:	e13ffb15 	stw	r4,-20(fp)
    e4a0:	e17ffc15 	stw	r5,-16(fp)
    e4a4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    e4a8:	00bff9c4 	movi	r2,-25
    e4ac:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    e4b0:	e0bffc17 	ldw	r2,-16(fp)
    e4b4:	e0bfff15 	stw	r2,-4(fp)
    e4b8:	e0ffff17 	ldw	r3,-4(fp)
    e4bc:	189a8060 	cmpeqi	r2,r3,27137
    e4c0:	1000041e 	bne	r2,zero,e4d4 <altera_avalon_jtag_uart_ioctl+0x44>
    e4c4:	e0ffff17 	ldw	r3,-4(fp)
    e4c8:	189a80a0 	cmpeqi	r2,r3,27138
    e4cc:	10001b1e 	bne	r2,zero,e53c <altera_avalon_jtag_uart_ioctl+0xac>
    e4d0:	00002706 	br	e570 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e4d4:	e0bffb17 	ldw	r2,-20(fp)
    e4d8:	10c00117 	ldw	r3,4(r2)
    e4dc:	00a00034 	movhi	r2,32768
    e4e0:	10bfffc4 	addi	r2,r2,-1
    e4e4:	18802226 	beq	r3,r2,e570 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    e4e8:	e0bffd17 	ldw	r2,-12(fp)
    e4ec:	10800017 	ldw	r2,0(r2)
    e4f0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e4f4:	e0bff917 	ldw	r2,-28(fp)
    e4f8:	10800090 	cmplti	r2,r2,2
    e4fc:	1000071e 	bne	r2,zero,e51c <altera_avalon_jtag_uart_ioctl+0x8c>
    e500:	e0fff917 	ldw	r3,-28(fp)
    e504:	00a00034 	movhi	r2,32768
    e508:	10bfffc4 	addi	r2,r2,-1
    e50c:	18800326 	beq	r3,r2,e51c <altera_avalon_jtag_uart_ioctl+0x8c>
    e510:	e0bff917 	ldw	r2,-28(fp)
    e514:	e0bffe15 	stw	r2,-8(fp)
    e518:	00000306 	br	e528 <altera_avalon_jtag_uart_ioctl+0x98>
    e51c:	00e00034 	movhi	r3,32768
    e520:	18ffff84 	addi	r3,r3,-2
    e524:	e0fffe15 	stw	r3,-8(fp)
    e528:	e0bffb17 	ldw	r2,-20(fp)
    e52c:	e0fffe17 	ldw	r3,-8(fp)
    e530:	10c00115 	stw	r3,4(r2)
      rc = 0;
    e534:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    e538:	00000d06 	br	e570 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e53c:	e0bffb17 	ldw	r2,-20(fp)
    e540:	10c00117 	ldw	r3,4(r2)
    e544:	00a00034 	movhi	r2,32768
    e548:	10bfffc4 	addi	r2,r2,-1
    e54c:	18800826 	beq	r3,r2,e570 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e550:	e13ffd17 	ldw	r4,-12(fp)
    e554:	e0bffb17 	ldw	r2,-20(fp)
    e558:	10c00917 	ldw	r3,36(r2)
    e55c:	e0bffb17 	ldw	r2,-20(fp)
    e560:	10800117 	ldw	r2,4(r2)
    e564:	1885803a 	cmpltu	r2,r3,r2
    e568:	20800015 	stw	r2,0(r4)
      rc = 0;
    e56c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    e570:	e0bffa17 	ldw	r2,-24(fp)
}
    e574:	e037883a 	mov	sp,fp
    e578:	df000017 	ldw	fp,0(sp)
    e57c:	dec00104 	addi	sp,sp,4
    e580:	f800283a 	ret

0000e584 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e584:	defff204 	addi	sp,sp,-56
    e588:	dfc00d15 	stw	ra,52(sp)
    e58c:	df000c15 	stw	fp,48(sp)
    e590:	df000c04 	addi	fp,sp,48
    e594:	e13ffb15 	stw	r4,-20(fp)
    e598:	e17ffc15 	stw	r5,-16(fp)
    e59c:	e1bffd15 	stw	r6,-12(fp)
    e5a0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    e5a4:	e0bffc17 	ldw	r2,-16(fp)
    e5a8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e5ac:	00004806 	br	e6d0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e5b0:	e0bffb17 	ldw	r2,-20(fp)
    e5b4:	10800a17 	ldw	r2,40(r2)
    e5b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e5bc:	e0bffb17 	ldw	r2,-20(fp)
    e5c0:	10800b17 	ldw	r2,44(r2)
    e5c4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    e5c8:	e0fff717 	ldw	r3,-36(fp)
    e5cc:	e0bff617 	ldw	r2,-40(fp)
    e5d0:	18800536 	bltu	r3,r2,e5e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e5d4:	e0bff717 	ldw	r2,-36(fp)
    e5d8:	e0fff617 	ldw	r3,-40(fp)
    e5dc:	10c5c83a 	sub	r2,r2,r3
    e5e0:	e0bff815 	stw	r2,-32(fp)
    e5e4:	00000406 	br	e5f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e5e8:	00820004 	movi	r2,2048
    e5ec:	e0fff617 	ldw	r3,-40(fp)
    e5f0:	10c5c83a 	sub	r2,r2,r3
    e5f4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    e5f8:	e0bff817 	ldw	r2,-32(fp)
    e5fc:	1005003a 	cmpeq	r2,r2,zero
    e600:	10001f1e 	bne	r2,zero,e680 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    e604:	e0fffd17 	ldw	r3,-12(fp)
    e608:	e0bff817 	ldw	r2,-32(fp)
    e60c:	1880022e 	bgeu	r3,r2,e618 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    e610:	e0bffd17 	ldw	r2,-12(fp)
    e614:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e618:	e0bffb17 	ldw	r2,-20(fp)
    e61c:	10c00e04 	addi	r3,r2,56
    e620:	e0bff617 	ldw	r2,-40(fp)
    e624:	1887883a 	add	r3,r3,r2
    e628:	e0bffa17 	ldw	r2,-24(fp)
    e62c:	1009883a 	mov	r4,r2
    e630:	180b883a 	mov	r5,r3
    e634:	e1bff817 	ldw	r6,-32(fp)
    e638:	0003a740 	call	3a74 <memcpy>
      ptr   += n;
    e63c:	e0fff817 	ldw	r3,-32(fp)
    e640:	e0bffa17 	ldw	r2,-24(fp)
    e644:	10c5883a 	add	r2,r2,r3
    e648:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    e64c:	e0fffd17 	ldw	r3,-12(fp)
    e650:	e0bff817 	ldw	r2,-32(fp)
    e654:	1885c83a 	sub	r2,r3,r2
    e658:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e65c:	e0fff617 	ldw	r3,-40(fp)
    e660:	e0bff817 	ldw	r2,-32(fp)
    e664:	1885883a 	add	r2,r3,r2
    e668:	10c1ffcc 	andi	r3,r2,2047
    e66c:	e0bffb17 	ldw	r2,-20(fp)
    e670:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e674:	e0bffd17 	ldw	r2,-12(fp)
    e678:	10800048 	cmpgei	r2,r2,1
    e67c:	103fcc1e 	bne	r2,zero,e5b0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    e680:	e0fffa17 	ldw	r3,-24(fp)
    e684:	e0bffc17 	ldw	r2,-16(fp)
    e688:	1880141e 	bne	r3,r2,e6dc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e68c:	e0bffe17 	ldw	r2,-8(fp)
    e690:	1090000c 	andi	r2,r2,16384
    e694:	1004c03a 	cmpne	r2,r2,zero
    e698:	1000101e 	bne	r2,zero,e6dc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e69c:	e0bffb17 	ldw	r2,-20(fp)
    e6a0:	10c00a17 	ldw	r3,40(r2)
    e6a4:	e0bff717 	ldw	r2,-36(fp)
    e6a8:	1880051e 	bne	r3,r2,e6c0 <altera_avalon_jtag_uart_read+0x13c>
    e6ac:	e0bffb17 	ldw	r2,-20(fp)
    e6b0:	10c00917 	ldw	r3,36(r2)
    e6b4:	e0bffb17 	ldw	r2,-20(fp)
    e6b8:	10800117 	ldw	r2,4(r2)
    e6bc:	18bff736 	bltu	r3,r2,e69c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e6c0:	e0bffb17 	ldw	r2,-20(fp)
    e6c4:	10c00a17 	ldw	r3,40(r2)
    e6c8:	e0bff717 	ldw	r2,-36(fp)
    e6cc:	18800326 	beq	r3,r2,e6dc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e6d0:	e0bffd17 	ldw	r2,-12(fp)
    e6d4:	10800048 	cmpgei	r2,r2,1
    e6d8:	103fb51e 	bne	r2,zero,e5b0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e6dc:	e0fffa17 	ldw	r3,-24(fp)
    e6e0:	e0bffc17 	ldw	r2,-16(fp)
    e6e4:	18801926 	beq	r3,r2,e74c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6e8:	0005303a 	rdctl	r2,status
    e6ec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6f0:	e0fff517 	ldw	r3,-44(fp)
    e6f4:	00bfff84 	movi	r2,-2
    e6f8:	1884703a 	and	r2,r3,r2
    e6fc:	1001703a 	wrctl	status,r2
  
  return context;
    e700:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e704:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e708:	e0bffb17 	ldw	r2,-20(fp)
    e70c:	10800817 	ldw	r2,32(r2)
    e710:	10c00054 	ori	r3,r2,1
    e714:	e0bffb17 	ldw	r2,-20(fp)
    e718:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e71c:	e0bffb17 	ldw	r2,-20(fp)
    e720:	10800017 	ldw	r2,0(r2)
    e724:	11000104 	addi	r4,r2,4
    e728:	e0bffb17 	ldw	r2,-20(fp)
    e72c:	10800817 	ldw	r2,32(r2)
    e730:	1007883a 	mov	r3,r2
    e734:	2005883a 	mov	r2,r4
    e738:	10c00035 	stwio	r3,0(r2)
    e73c:	e0bff917 	ldw	r2,-28(fp)
    e740:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e744:	e0bff417 	ldw	r2,-48(fp)
    e748:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e74c:	e0fffa17 	ldw	r3,-24(fp)
    e750:	e0bffc17 	ldw	r2,-16(fp)
    e754:	18800526 	beq	r3,r2,e76c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    e758:	e0fffa17 	ldw	r3,-24(fp)
    e75c:	e0bffc17 	ldw	r2,-16(fp)
    e760:	1887c83a 	sub	r3,r3,r2
    e764:	e0ffff15 	stw	r3,-4(fp)
    e768:	00000906 	br	e790 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    e76c:	e0bffe17 	ldw	r2,-8(fp)
    e770:	1090000c 	andi	r2,r2,16384
    e774:	1005003a 	cmpeq	r2,r2,zero
    e778:	1000031e 	bne	r2,zero,e788 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e77c:	00bffd44 	movi	r2,-11
    e780:	e0bfff15 	stw	r2,-4(fp)
    e784:	00000206 	br	e790 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    e788:	00bffec4 	movi	r2,-5
    e78c:	e0bfff15 	stw	r2,-4(fp)
    e790:	e0bfff17 	ldw	r2,-4(fp)
}
    e794:	e037883a 	mov	sp,fp
    e798:	dfc00117 	ldw	ra,4(sp)
    e79c:	df000017 	ldw	fp,0(sp)
    e7a0:	dec00204 	addi	sp,sp,8
    e7a4:	f800283a 	ret

0000e7a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e7a8:	defff204 	addi	sp,sp,-56
    e7ac:	dfc00d15 	stw	ra,52(sp)
    e7b0:	df000c15 	stw	fp,48(sp)
    e7b4:	df000c04 	addi	fp,sp,48
    e7b8:	e13ffb15 	stw	r4,-20(fp)
    e7bc:	e17ffc15 	stw	r5,-16(fp)
    e7c0:	e1bffd15 	stw	r6,-12(fp)
    e7c4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e7c8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e7cc:	e0bffc17 	ldw	r2,-16(fp)
    e7d0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e7d4:	00003a06 	br	e8c0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e7d8:	e0bffb17 	ldw	r2,-20(fp)
    e7dc:	10800c17 	ldw	r2,48(r2)
    e7e0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    e7e4:	e0bffb17 	ldw	r2,-20(fp)
    e7e8:	10800d17 	ldw	r2,52(r2)
    e7ec:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    e7f0:	e0fffa17 	ldw	r3,-24(fp)
    e7f4:	e0bff917 	ldw	r2,-28(fp)
    e7f8:	1880062e 	bgeu	r3,r2,e814 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e7fc:	e0fff917 	ldw	r3,-28(fp)
    e800:	e0bffa17 	ldw	r2,-24(fp)
    e804:	1885c83a 	sub	r2,r3,r2
    e808:	10bfffc4 	addi	r2,r2,-1
    e80c:	e0bff815 	stw	r2,-32(fp)
    e810:	00000c06 	br	e844 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    e814:	e0bff917 	ldw	r2,-28(fp)
    e818:	1005003a 	cmpeq	r2,r2,zero
    e81c:	1000051e 	bne	r2,zero,e834 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e820:	00820004 	movi	r2,2048
    e824:	e0fffa17 	ldw	r3,-24(fp)
    e828:	10c5c83a 	sub	r2,r2,r3
    e82c:	e0bff815 	stw	r2,-32(fp)
    e830:	00000406 	br	e844 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e834:	0081ffc4 	movi	r2,2047
    e838:	e0fffa17 	ldw	r3,-24(fp)
    e83c:	10c5c83a 	sub	r2,r2,r3
    e840:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    e844:	e0bff817 	ldw	r2,-32(fp)
    e848:	1005003a 	cmpeq	r2,r2,zero
    e84c:	10001f1e 	bne	r2,zero,e8cc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    e850:	e0fffd17 	ldw	r3,-12(fp)
    e854:	e0bff817 	ldw	r2,-32(fp)
    e858:	1880022e 	bgeu	r3,r2,e864 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    e85c:	e0bffd17 	ldw	r2,-12(fp)
    e860:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e864:	e0bffb17 	ldw	r2,-20(fp)
    e868:	10c20e04 	addi	r3,r2,2104
    e86c:	e0bffa17 	ldw	r2,-24(fp)
    e870:	1885883a 	add	r2,r3,r2
    e874:	e0fffc17 	ldw	r3,-16(fp)
    e878:	1009883a 	mov	r4,r2
    e87c:	180b883a 	mov	r5,r3
    e880:	e1bff817 	ldw	r6,-32(fp)
    e884:	0003a740 	call	3a74 <memcpy>
      ptr   += n;
    e888:	e0fff817 	ldw	r3,-32(fp)
    e88c:	e0bffc17 	ldw	r2,-16(fp)
    e890:	10c5883a 	add	r2,r2,r3
    e894:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    e898:	e0fffd17 	ldw	r3,-12(fp)
    e89c:	e0bff817 	ldw	r2,-32(fp)
    e8a0:	1885c83a 	sub	r2,r3,r2
    e8a4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e8a8:	e0fffa17 	ldw	r3,-24(fp)
    e8ac:	e0bff817 	ldw	r2,-32(fp)
    e8b0:	1885883a 	add	r2,r3,r2
    e8b4:	10c1ffcc 	andi	r3,r2,2047
    e8b8:	e0bffb17 	ldw	r2,-20(fp)
    e8bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e8c0:	e0bffd17 	ldw	r2,-12(fp)
    e8c4:	10800048 	cmpgei	r2,r2,1
    e8c8:	103fc31e 	bne	r2,zero,e7d8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8cc:	0005303a 	rdctl	r2,status
    e8d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e8d4:	e0fff517 	ldw	r3,-44(fp)
    e8d8:	00bfff84 	movi	r2,-2
    e8dc:	1884703a 	and	r2,r3,r2
    e8e0:	1001703a 	wrctl	status,r2
  
  return context;
    e8e4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e8e8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e8ec:	e0bffb17 	ldw	r2,-20(fp)
    e8f0:	10800817 	ldw	r2,32(r2)
    e8f4:	10c00094 	ori	r3,r2,2
    e8f8:	e0bffb17 	ldw	r2,-20(fp)
    e8fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e900:	e0bffb17 	ldw	r2,-20(fp)
    e904:	10800017 	ldw	r2,0(r2)
    e908:	11000104 	addi	r4,r2,4
    e90c:	e0bffb17 	ldw	r2,-20(fp)
    e910:	10800817 	ldw	r2,32(r2)
    e914:	1007883a 	mov	r3,r2
    e918:	2005883a 	mov	r2,r4
    e91c:	10c00035 	stwio	r3,0(r2)
    e920:	e0bff717 	ldw	r2,-36(fp)
    e924:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e928:	e0bff417 	ldw	r2,-48(fp)
    e92c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e930:	e0bffd17 	ldw	r2,-12(fp)
    e934:	10800050 	cmplti	r2,r2,1
    e938:	1000111e 	bne	r2,zero,e980 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    e93c:	e0bffe17 	ldw	r2,-8(fp)
    e940:	1090000c 	andi	r2,r2,16384
    e944:	1004c03a 	cmpne	r2,r2,zero
    e948:	1000101e 	bne	r2,zero,e98c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e94c:	e0bffb17 	ldw	r2,-20(fp)
    e950:	10c00d17 	ldw	r3,52(r2)
    e954:	e0bff917 	ldw	r2,-28(fp)
    e958:	1880051e 	bne	r3,r2,e970 <altera_avalon_jtag_uart_write+0x1c8>
    e95c:	e0bffb17 	ldw	r2,-20(fp)
    e960:	10c00917 	ldw	r3,36(r2)
    e964:	e0bffb17 	ldw	r2,-20(fp)
    e968:	10800117 	ldw	r2,4(r2)
    e96c:	18bff736 	bltu	r3,r2,e94c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    e970:	e0bffb17 	ldw	r2,-20(fp)
    e974:	10c00d17 	ldw	r3,52(r2)
    e978:	e0bff917 	ldw	r2,-28(fp)
    e97c:	18800326 	beq	r3,r2,e98c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    e980:	e0bffd17 	ldw	r2,-12(fp)
    e984:	10800048 	cmpgei	r2,r2,1
    e988:	103fcd1e 	bne	r2,zero,e8c0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e98c:	e0fffc17 	ldw	r3,-16(fp)
    e990:	e0bff617 	ldw	r2,-40(fp)
    e994:	18800526 	beq	r3,r2,e9ac <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    e998:	e0fffc17 	ldw	r3,-16(fp)
    e99c:	e0bff617 	ldw	r2,-40(fp)
    e9a0:	1887c83a 	sub	r3,r3,r2
    e9a4:	e0ffff15 	stw	r3,-4(fp)
    e9a8:	00000906 	br	e9d0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    e9ac:	e0bffe17 	ldw	r2,-8(fp)
    e9b0:	1090000c 	andi	r2,r2,16384
    e9b4:	1005003a 	cmpeq	r2,r2,zero
    e9b8:	1000031e 	bne	r2,zero,e9c8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    e9bc:	00bffd44 	movi	r2,-11
    e9c0:	e0bfff15 	stw	r2,-4(fp)
    e9c4:	00000206 	br	e9d0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e9c8:	00bffec4 	movi	r2,-5
    e9cc:	e0bfff15 	stw	r2,-4(fp)
    e9d0:	e0bfff17 	ldw	r2,-4(fp)
}
    e9d4:	e037883a 	mov	sp,fp
    e9d8:	dfc00117 	ldw	ra,4(sp)
    e9dc:	df000017 	ldw	fp,0(sp)
    e9e0:	dec00204 	addi	sp,sp,8
    e9e4:	f800283a 	ret

0000e9e8 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    e9e8:	defffd04 	addi	sp,sp,-12
    e9ec:	df000215 	stw	fp,8(sp)
    e9f0:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
    e9f4:	008000b4 	movhi	r2,2
    e9f8:	10a07d04 	addi	r2,r2,-32268
    e9fc:	10800017 	ldw	r2,0(r2)
    ea00:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    ea04:	008000b4 	movhi	r2,2
    ea08:	10a07e04 	addi	r2,r2,-32264
    ea0c:	10800017 	ldw	r2,0(r2)
    ea10:	1004c03a 	cmpne	r2,r2,zero
    ea14:	1000031e 	bne	r2,zero,ea24 <alt_timestamp_start+0x3c>
  {
    return -1;
    ea18:	00bfffc4 	movi	r2,-1
    ea1c:	e0bfff15 	stw	r2,-4(fp)
    ea20:	00001506 	br	ea78 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    ea24:	e0bffe17 	ldw	r2,-8(fp)
    ea28:	10800104 	addi	r2,r2,4
    ea2c:	1007883a 	mov	r3,r2
    ea30:	00800204 	movi	r2,8
    ea34:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    ea38:	e0bffe17 	ldw	r2,-8(fp)
    ea3c:	10800204 	addi	r2,r2,8
    ea40:	1007883a 	mov	r3,r2
    ea44:	00bfffd4 	movui	r2,65535
    ea48:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    ea4c:	e0bffe17 	ldw	r2,-8(fp)
    ea50:	10800304 	addi	r2,r2,12
    ea54:	1007883a 	mov	r3,r2
    ea58:	00bfffd4 	movui	r2,65535
    ea5c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    ea60:	e0bffe17 	ldw	r2,-8(fp)
    ea64:	10800104 	addi	r2,r2,4
    ea68:	1007883a 	mov	r3,r2
    ea6c:	00800104 	movi	r2,4
    ea70:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    ea74:	e03fff15 	stw	zero,-4(fp)
    ea78:	e0bfff17 	ldw	r2,-4(fp)
}
    ea7c:	e037883a 	mov	sp,fp
    ea80:	df000017 	ldw	fp,0(sp)
    ea84:	dec00104 	addi	sp,sp,4
    ea88:	f800283a 	ret

0000ea8c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    ea8c:	defffb04 	addi	sp,sp,-20
    ea90:	df000415 	stw	fp,16(sp)
    ea94:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
    ea98:	008000b4 	movhi	r2,2
    ea9c:	10a07d04 	addi	r2,r2,-32268
    eaa0:	10800017 	ldw	r2,0(r2)
    eaa4:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    eaa8:	008000b4 	movhi	r2,2
    eaac:	10a07e04 	addi	r2,r2,-32264
    eab0:	10800017 	ldw	r2,0(r2)
    eab4:	1004c03a 	cmpne	r2,r2,zero
    eab8:	1000031e 	bne	r2,zero,eac8 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
    eabc:	00bfffc4 	movi	r2,-1
    eac0:	e0bfff15 	stw	r2,-4(fp)
    eac4:	00001306 	br	eb14 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    eac8:	e0bffe17 	ldw	r2,-8(fp)
    eacc:	10800404 	addi	r2,r2,16
    ead0:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    ead4:	e0bffe17 	ldw	r2,-8(fp)
    ead8:	10800404 	addi	r2,r2,16
    eadc:	10800037 	ldwio	r2,0(r2)
    eae0:	10bfffcc 	andi	r2,r2,65535
    eae4:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    eae8:	e0bffe17 	ldw	r2,-8(fp)
    eaec:	10800504 	addi	r2,r2,20
    eaf0:	10800037 	ldwio	r2,0(r2)
    eaf4:	10bfffcc 	andi	r2,r2,65535
    eaf8:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    eafc:	e0bffc17 	ldw	r2,-16(fp)
    eb00:	1006943a 	slli	r3,r2,16
    eb04:	e0bffd17 	ldw	r2,-12(fp)
    eb08:	1884b03a 	or	r2,r3,r2
    eb0c:	0084303a 	nor	r2,zero,r2
    eb10:	e0bfff15 	stw	r2,-4(fp)
    eb14:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
    eb18:	e037883a 	mov	sp,fp
    eb1c:	df000017 	ldw	fp,0(sp)
    eb20:	dec00104 	addi	sp,sp,4
    eb24:	f800283a 	ret

0000eb28 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    eb28:	deffff04 	addi	sp,sp,-4
    eb2c:	df000015 	stw	fp,0(sp)
    eb30:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    eb34:	008000b4 	movhi	r2,2
    eb38:	10a07e04 	addi	r2,r2,-32264
    eb3c:	10800017 	ldw	r2,0(r2)
}
    eb40:	e037883a 	mov	sp,fp
    eb44:	df000017 	ldw	fp,0(sp)
    eb48:	dec00104 	addi	sp,sp,4
    eb4c:	f800283a 	ret

0000eb50 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    eb50:	defffc04 	addi	sp,sp,-16
    eb54:	dfc00315 	stw	ra,12(sp)
    eb58:	df000215 	stw	fp,8(sp)
    eb5c:	df000204 	addi	fp,sp,8
    eb60:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    eb64:	e13fff17 	ldw	r4,-4(fp)
    eb68:	01400074 	movhi	r5,1
    eb6c:	29582504 	addi	r5,r5,24724
    eb70:	001263c0 	call	1263c <alt_find_dev>
    eb74:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    eb78:	e0bffe17 	ldw	r2,-8(fp)
}
    eb7c:	e037883a 	mov	sp,fp
    eb80:	dfc00117 	ldw	ra,4(sp)
    eb84:	df000017 	ldw	fp,0(sp)
    eb88:	dec00204 	addi	sp,sp,8
    eb8c:	f800283a 	ret

0000eb90 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    eb90:	defffd04 	addi	sp,sp,-12
    eb94:	df000215 	stw	fp,8(sp)
    eb98:	df000204 	addi	fp,sp,8
    eb9c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    eba0:	e0bfff17 	ldw	r2,-4(fp)
    eba4:	10800a17 	ldw	r2,40(r2)
    eba8:	10800037 	ldwio	r2,0(r2)
    ebac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    ebb0:	e0bffe17 	ldw	r2,-8(fp)
    ebb4:	10800054 	ori	r2,r2,1
    ebb8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    ebbc:	e0bfff17 	ldw	r2,-4(fp)
    ebc0:	10800a17 	ldw	r2,40(r2)
    ebc4:	e0fffe17 	ldw	r3,-8(fp)
    ebc8:	10c00035 	stwio	r3,0(r2)
}
    ebcc:	e037883a 	mov	sp,fp
    ebd0:	df000017 	ldw	fp,0(sp)
    ebd4:	dec00104 	addi	sp,sp,4
    ebd8:	f800283a 	ret

0000ebdc <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    ebdc:	defffd04 	addi	sp,sp,-12
    ebe0:	df000215 	stw	fp,8(sp)
    ebe4:	df000204 	addi	fp,sp,8
    ebe8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ebec:	e0bfff17 	ldw	r2,-4(fp)
    ebf0:	10800a17 	ldw	r2,40(r2)
    ebf4:	10800037 	ldwio	r2,0(r2)
    ebf8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    ebfc:	e0fffe17 	ldw	r3,-8(fp)
    ec00:	00bfff84 	movi	r2,-2
    ec04:	1884703a 	and	r2,r3,r2
    ec08:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    ec0c:	e0bfff17 	ldw	r2,-4(fp)
    ec10:	10800a17 	ldw	r2,40(r2)
    ec14:	e0fffe17 	ldw	r3,-8(fp)
    ec18:	10c00035 	stwio	r3,0(r2)
}
    ec1c:	e037883a 	mov	sp,fp
    ec20:	df000017 	ldw	fp,0(sp)
    ec24:	dec00104 	addi	sp,sp,4
    ec28:	f800283a 	ret

0000ec2c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    ec2c:	defffd04 	addi	sp,sp,-12
    ec30:	df000215 	stw	fp,8(sp)
    ec34:	df000204 	addi	fp,sp,8
    ec38:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ec3c:	e0bfff17 	ldw	r2,-4(fp)
    ec40:	10800a17 	ldw	r2,40(r2)
    ec44:	10800037 	ldwio	r2,0(r2)
    ec48:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    ec4c:	e0bffe17 	ldw	r2,-8(fp)
    ec50:	10800094 	ori	r2,r2,2
    ec54:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    ec58:	e0bfff17 	ldw	r2,-4(fp)
    ec5c:	10800a17 	ldw	r2,40(r2)
    ec60:	e0fffe17 	ldw	r3,-8(fp)
    ec64:	10c00035 	stwio	r3,0(r2)
}
    ec68:	e037883a 	mov	sp,fp
    ec6c:	df000017 	ldw	fp,0(sp)
    ec70:	dec00104 	addi	sp,sp,4
    ec74:	f800283a 	ret

0000ec78 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    ec78:	defffd04 	addi	sp,sp,-12
    ec7c:	df000215 	stw	fp,8(sp)
    ec80:	df000204 	addi	fp,sp,8
    ec84:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ec88:	e0bfff17 	ldw	r2,-4(fp)
    ec8c:	10800a17 	ldw	r2,40(r2)
    ec90:	10800037 	ldwio	r2,0(r2)
    ec94:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    ec98:	e0fffe17 	ldw	r3,-8(fp)
    ec9c:	00bfff44 	movi	r2,-3
    eca0:	1884703a 	and	r2,r3,r2
    eca4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    eca8:	e0bfff17 	ldw	r2,-4(fp)
    ecac:	10800a17 	ldw	r2,40(r2)
    ecb0:	e0fffe17 	ldw	r3,-8(fp)
    ecb4:	10c00035 	stwio	r3,0(r2)
}
    ecb8:	e037883a 	mov	sp,fp
    ecbc:	df000017 	ldw	fp,0(sp)
    ecc0:	dec00104 	addi	sp,sp,4
    ecc4:	f800283a 	ret

0000ecc8 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    ecc8:	defffd04 	addi	sp,sp,-12
    eccc:	df000215 	stw	fp,8(sp)
    ecd0:	df000204 	addi	fp,sp,8
    ecd4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ecd8:	e0bfff17 	ldw	r2,-4(fp)
    ecdc:	10800a17 	ldw	r2,40(r2)
    ece0:	10800037 	ldwio	r2,0(r2)
    ece4:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    ece8:	e0bffe17 	ldw	r2,-8(fp)
    ecec:	1080400c 	andi	r2,r2,256
    ecf0:	1004c03a 	cmpne	r2,r2,zero
}
    ecf4:	e037883a 	mov	sp,fp
    ecf8:	df000017 	ldw	fp,0(sp)
    ecfc:	dec00104 	addi	sp,sp,4
    ed00:	f800283a 	ret

0000ed04 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    ed04:	defffd04 	addi	sp,sp,-12
    ed08:	df000215 	stw	fp,8(sp)
    ed0c:	df000204 	addi	fp,sp,8
    ed10:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ed14:	e0bfff17 	ldw	r2,-4(fp)
    ed18:	10800a17 	ldw	r2,40(r2)
    ed1c:	10800037 	ldwio	r2,0(r2)
    ed20:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    ed24:	e0bffe17 	ldw	r2,-8(fp)
    ed28:	1080800c 	andi	r2,r2,512
    ed2c:	1004c03a 	cmpne	r2,r2,zero
}
    ed30:	e037883a 	mov	sp,fp
    ed34:	df000017 	ldw	fp,0(sp)
    ed38:	dec00104 	addi	sp,sp,4
    ed3c:	f800283a 	ret

0000ed40 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    ed40:	defffd04 	addi	sp,sp,-12
    ed44:	df000215 	stw	fp,8(sp)
    ed48:	df000204 	addi	fp,sp,8
    ed4c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    ed50:	e0bfff17 	ldw	r2,-4(fp)
    ed54:	10800a17 	ldw	r2,40(r2)
    ed58:	10800037 	ldwio	r2,0(r2)
    ed5c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    ed60:	e0bffe17 	ldw	r2,-8(fp)
    ed64:	10800114 	ori	r2,r2,4
    ed68:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    ed6c:	e0bffe17 	ldw	r2,-8(fp)
    ed70:	10800214 	ori	r2,r2,8
    ed74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    ed78:	e0bfff17 	ldw	r2,-4(fp)
    ed7c:	10800a17 	ldw	r2,40(r2)
    ed80:	e0fffe17 	ldw	r3,-8(fp)
    ed84:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    ed88:	e0fffe17 	ldw	r3,-8(fp)
    ed8c:	00bffec4 	movi	r2,-5
    ed90:	1884703a 	and	r2,r3,r2
    ed94:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    ed98:	e0fffe17 	ldw	r3,-8(fp)
    ed9c:	00bffdc4 	movi	r2,-9
    eda0:	1884703a 	and	r2,r3,r2
    eda4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    eda8:	e0bfff17 	ldw	r2,-4(fp)
    edac:	10800a17 	ldw	r2,40(r2)
    edb0:	e0fffe17 	ldw	r3,-8(fp)
    edb4:	10c00035 	stwio	r3,0(r2)
}
    edb8:	e037883a 	mov	sp,fp
    edbc:	df000017 	ldw	fp,0(sp)
    edc0:	dec00104 	addi	sp,sp,4
    edc4:	f800283a 	ret

0000edc8 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    edc8:	defffb04 	addi	sp,sp,-20
    edcc:	df000415 	stw	fp,16(sp)
    edd0:	df000404 	addi	fp,sp,16
    edd4:	e13ffd15 	stw	r4,-12(fp)
    edd8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    eddc:	e0bffd17 	ldw	r2,-12(fp)
    ede0:	10800a17 	ldw	r2,40(r2)
    ede4:	10800104 	addi	r2,r2,4
    ede8:	10800037 	ldwio	r2,0(r2)
    edec:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    edf0:	e0bffe17 	ldw	r2,-8(fp)
    edf4:	1004c03a 	cmpne	r2,r2,zero
    edf8:	1000051e 	bne	r2,zero,ee10 <alt_up_audio_read_fifo_avail+0x48>
    edfc:	e0bffc17 	ldw	r2,-16(fp)
    ee00:	10bfc00c 	andi	r2,r2,65280
    ee04:	1004d23a 	srli	r2,r2,8
    ee08:	e0bfff15 	stw	r2,-4(fp)
    ee0c:	00000306 	br	ee1c <alt_up_audio_read_fifo_avail+0x54>
    ee10:	e0bffc17 	ldw	r2,-16(fp)
    ee14:	10803fcc 	andi	r2,r2,255
    ee18:	e0bfff15 	stw	r2,-4(fp)
    ee1c:	e0bfff17 	ldw	r2,-4(fp)
    ee20:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    ee24:	e0bffc17 	ldw	r2,-16(fp)
}
    ee28:	e037883a 	mov	sp,fp
    ee2c:	df000017 	ldw	fp,0(sp)
    ee30:	dec00104 	addi	sp,sp,4
    ee34:	f800283a 	ret

0000ee38 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    ee38:	defff904 	addi	sp,sp,-28
    ee3c:	dfc00615 	stw	ra,24(sp)
    ee40:	df000515 	stw	fp,20(sp)
    ee44:	df000504 	addi	fp,sp,20
    ee48:	e13ffc15 	stw	r4,-16(fp)
    ee4c:	e17ffd15 	stw	r5,-12(fp)
    ee50:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    ee54:	e13ffc17 	ldw	r4,-16(fp)
    ee58:	01400044 	movi	r5,1
    ee5c:	000edc80 	call	edc8 <alt_up_audio_read_fifo_avail>
    ee60:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    ee64:	e0bffb17 	ldw	r2,-20(fp)
    ee68:	10801868 	cmpgeui	r2,r2,97
    ee6c:	1000021e 	bne	r2,zero,ee78 <alt_up_audio_record_r+0x40>
		return 0;
    ee70:	e03fff15 	stw	zero,-4(fp)
    ee74:	00000606 	br	ee90 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    ee78:	e13ffc17 	ldw	r4,-16(fp)
    ee7c:	e17ffd17 	ldw	r5,-12(fp)
    ee80:	e1bffe17 	ldw	r6,-8(fp)
    ee84:	01c00044 	movi	r7,1
    ee88:	000f06c0 	call	f06c <alt_up_audio_read_fifo>
    ee8c:	e0bfff15 	stw	r2,-4(fp)
    ee90:	e0bfff17 	ldw	r2,-4(fp)
}
    ee94:	e037883a 	mov	sp,fp
    ee98:	dfc00117 	ldw	ra,4(sp)
    ee9c:	df000017 	ldw	fp,0(sp)
    eea0:	dec00204 	addi	sp,sp,8
    eea4:	f800283a 	ret

0000eea8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    eea8:	defff904 	addi	sp,sp,-28
    eeac:	dfc00615 	stw	ra,24(sp)
    eeb0:	df000515 	stw	fp,20(sp)
    eeb4:	df000504 	addi	fp,sp,20
    eeb8:	e13ffc15 	stw	r4,-16(fp)
    eebc:	e17ffd15 	stw	r5,-12(fp)
    eec0:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    eec4:	e13ffc17 	ldw	r4,-16(fp)
    eec8:	000b883a 	mov	r5,zero
    eecc:	000edc80 	call	edc8 <alt_up_audio_read_fifo_avail>
    eed0:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    eed4:	e0bffb17 	ldw	r2,-20(fp)
    eed8:	10801868 	cmpgeui	r2,r2,97
    eedc:	1000021e 	bne	r2,zero,eee8 <alt_up_audio_record_l+0x40>
		return 0;
    eee0:	e03fff15 	stw	zero,-4(fp)
    eee4:	00000606 	br	ef00 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    eee8:	e13ffc17 	ldw	r4,-16(fp)
    eeec:	e17ffd17 	ldw	r5,-12(fp)
    eef0:	e1bffe17 	ldw	r6,-8(fp)
    eef4:	000f883a 	mov	r7,zero
    eef8:	000f06c0 	call	f06c <alt_up_audio_read_fifo>
    eefc:	e0bfff15 	stw	r2,-4(fp)
    ef00:	e0bfff17 	ldw	r2,-4(fp)
}
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    ef18:	defffb04 	addi	sp,sp,-20
    ef1c:	df000415 	stw	fp,16(sp)
    ef20:	df000404 	addi	fp,sp,16
    ef24:	e13ffd15 	stw	r4,-12(fp)
    ef28:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    ef2c:	e0bffd17 	ldw	r2,-12(fp)
    ef30:	10800a17 	ldw	r2,40(r2)
    ef34:	10800104 	addi	r2,r2,4
    ef38:	10800037 	ldwio	r2,0(r2)
    ef3c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    ef40:	e0bffe17 	ldw	r2,-8(fp)
    ef44:	1004c03a 	cmpne	r2,r2,zero
    ef48:	1000051e 	bne	r2,zero,ef60 <alt_up_audio_write_fifo_space+0x48>
    ef4c:	e0bffc17 	ldw	r2,-16(fp)
    ef50:	10bfc02c 	andhi	r2,r2,65280
    ef54:	1004d63a 	srli	r2,r2,24
    ef58:	e0bfff15 	stw	r2,-4(fp)
    ef5c:	00000406 	br	ef70 <alt_up_audio_write_fifo_space+0x58>
    ef60:	e0bffc17 	ldw	r2,-16(fp)
    ef64:	10803fec 	andhi	r2,r2,255
    ef68:	1004d43a 	srli	r2,r2,16
    ef6c:	e0bfff15 	stw	r2,-4(fp)
    ef70:	e0bfff17 	ldw	r2,-4(fp)
    ef74:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    ef78:	e0bffc17 	ldw	r2,-16(fp)
}
    ef7c:	e037883a 	mov	sp,fp
    ef80:	df000017 	ldw	fp,0(sp)
    ef84:	dec00104 	addi	sp,sp,4
    ef88:	f800283a 	ret

0000ef8c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    ef8c:	defff904 	addi	sp,sp,-28
    ef90:	dfc00615 	stw	ra,24(sp)
    ef94:	df000515 	stw	fp,20(sp)
    ef98:	df000504 	addi	fp,sp,20
    ef9c:	e13ffc15 	stw	r4,-16(fp)
    efa0:	e17ffd15 	stw	r5,-12(fp)
    efa4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    efa8:	e13ffc17 	ldw	r4,-16(fp)
    efac:	01400044 	movi	r5,1
    efb0:	000ef180 	call	ef18 <alt_up_audio_write_fifo_space>
    efb4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    efb8:	e0bffb17 	ldw	r2,-20(fp)
    efbc:	10801868 	cmpgeui	r2,r2,97
    efc0:	1000021e 	bne	r2,zero,efcc <alt_up_audio_play_r+0x40>
		return 0;
    efc4:	e03fff15 	stw	zero,-4(fp)
    efc8:	00000606 	br	efe4 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    efcc:	e13ffc17 	ldw	r4,-16(fp)
    efd0:	e17ffd17 	ldw	r5,-12(fp)
    efd4:	e1bffe17 	ldw	r6,-8(fp)
    efd8:	01c00044 	movi	r7,1
    efdc:	000f1700 	call	f170 <alt_up_audio_write_fifo>
    efe0:	e0bfff15 	stw	r2,-4(fp)
    efe4:	e0bfff17 	ldw	r2,-4(fp)
}
    efe8:	e037883a 	mov	sp,fp
    efec:	dfc00117 	ldw	ra,4(sp)
    eff0:	df000017 	ldw	fp,0(sp)
    eff4:	dec00204 	addi	sp,sp,8
    eff8:	f800283a 	ret

0000effc <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    effc:	defff904 	addi	sp,sp,-28
    f000:	dfc00615 	stw	ra,24(sp)
    f004:	df000515 	stw	fp,20(sp)
    f008:	df000504 	addi	fp,sp,20
    f00c:	e13ffc15 	stw	r4,-16(fp)
    f010:	e17ffd15 	stw	r5,-12(fp)
    f014:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    f018:	e13ffc17 	ldw	r4,-16(fp)
    f01c:	000b883a 	mov	r5,zero
    f020:	000ef180 	call	ef18 <alt_up_audio_write_fifo_space>
    f024:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    f028:	e0bffb17 	ldw	r2,-20(fp)
    f02c:	10801868 	cmpgeui	r2,r2,97
    f030:	1000021e 	bne	r2,zero,f03c <alt_up_audio_play_l+0x40>
		return 0;
    f034:	e03fff15 	stw	zero,-4(fp)
    f038:	00000606 	br	f054 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    f03c:	e13ffc17 	ldw	r4,-16(fp)
    f040:	e17ffd17 	ldw	r5,-12(fp)
    f044:	e1bffe17 	ldw	r6,-8(fp)
    f048:	000f883a 	mov	r7,zero
    f04c:	000f1700 	call	f170 <alt_up_audio_write_fifo>
    f050:	e0bfff15 	stw	r2,-4(fp)
    f054:	e0bfff17 	ldw	r2,-4(fp)
}
    f058:	e037883a 	mov	sp,fp
    f05c:	dfc00117 	ldw	ra,4(sp)
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00204 	addi	sp,sp,8
    f068:	f800283a 	ret

0000f06c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    f06c:	defff604 	addi	sp,sp,-40
    f070:	df000915 	stw	fp,36(sp)
    f074:	df000904 	addi	fp,sp,36
    f078:	e13ff915 	stw	r4,-28(fp)
    f07c:	e17ffa15 	stw	r5,-24(fp)
    f080:	e1bffb15 	stw	r6,-20(fp)
    f084:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    f088:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    f08c:	00003006 	br	f150 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    f090:	e0bff917 	ldw	r2,-28(fp)
    f094:	10800a17 	ldw	r2,40(r2)
    f098:	10800104 	addi	r2,r2,4
    f09c:	10800037 	ldwio	r2,0(r2)
    f0a0:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    f0a4:	e0bffc17 	ldw	r2,-16(fp)
    f0a8:	1004c03a 	cmpne	r2,r2,zero
    f0ac:	1000051e 	bne	r2,zero,f0c4 <alt_up_audio_read_fifo+0x58>
    f0b0:	e0bff817 	ldw	r2,-32(fp)
    f0b4:	10bfc00c 	andi	r2,r2,65280
    f0b8:	1004d23a 	srli	r2,r2,8
    f0bc:	e0bfff15 	stw	r2,-4(fp)
    f0c0:	00000306 	br	f0d0 <alt_up_audio_read_fifo+0x64>
    f0c4:	e0bff817 	ldw	r2,-32(fp)
    f0c8:	10803fcc 	andi	r2,r2,255
    f0cc:	e0bfff15 	stw	r2,-4(fp)
    f0d0:	e0bfff17 	ldw	r2,-4(fp)
    f0d4:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    f0d8:	e0bff817 	ldw	r2,-32(fp)
    f0dc:	1005003a 	cmpeq	r2,r2,zero
    f0e0:	10001e1e 	bne	r2,zero,f15c <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    f0e4:	e0bff717 	ldw	r2,-36(fp)
    f0e8:	1085883a 	add	r2,r2,r2
    f0ec:	1085883a 	add	r2,r2,r2
    f0f0:	1007883a 	mov	r3,r2
    f0f4:	e0bffa17 	ldw	r2,-24(fp)
    f0f8:	1887883a 	add	r3,r3,r2
    f0fc:	e0fffe15 	stw	r3,-8(fp)
    f100:	e0bffc17 	ldw	r2,-16(fp)
    f104:	1004c03a 	cmpne	r2,r2,zero
    f108:	1000061e 	bne	r2,zero,f124 <alt_up_audio_read_fifo+0xb8>
    f10c:	e0bff917 	ldw	r2,-28(fp)
    f110:	10800a17 	ldw	r2,40(r2)
    f114:	10800204 	addi	r2,r2,8
    f118:	10800037 	ldwio	r2,0(r2)
    f11c:	e0bffd15 	stw	r2,-12(fp)
    f120:	00000506 	br	f138 <alt_up_audio_read_fifo+0xcc>
    f124:	e0bff917 	ldw	r2,-28(fp)
    f128:	10800a17 	ldw	r2,40(r2)
    f12c:	10800304 	addi	r2,r2,12
    f130:	10800037 	ldwio	r2,0(r2)
    f134:	e0bffd15 	stw	r2,-12(fp)
    f138:	e0fffd17 	ldw	r3,-12(fp)
    f13c:	e0bffe17 	ldw	r2,-8(fp)
    f140:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    f144:	e0bff717 	ldw	r2,-36(fp)
    f148:	10800044 	addi	r2,r2,1
    f14c:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    f150:	e0fff717 	ldw	r3,-36(fp)
    f154:	e0bffb17 	ldw	r2,-20(fp)
    f158:	18bfcd16 	blt	r3,r2,f090 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    f15c:	e0bff717 	ldw	r2,-36(fp)
}
    f160:	e037883a 	mov	sp,fp
    f164:	df000017 	ldw	fp,0(sp)
    f168:	dec00104 	addi	sp,sp,4
    f16c:	f800283a 	ret

0000f170 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    f170:	defff804 	addi	sp,sp,-32
    f174:	df000715 	stw	fp,28(sp)
    f178:	df000704 	addi	fp,sp,28
    f17c:	e13ffb15 	stw	r4,-20(fp)
    f180:	e17ffc15 	stw	r5,-16(fp)
    f184:	e1bffd15 	stw	r6,-12(fp)
    f188:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    f18c:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    f190:	00003a06 	br	f27c <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    f194:	e0bffb17 	ldw	r2,-20(fp)
    f198:	10800a17 	ldw	r2,40(r2)
    f19c:	10800104 	addi	r2,r2,4
    f1a0:	10800037 	ldwio	r2,0(r2)
    f1a4:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    f1a8:	e0bffe17 	ldw	r2,-8(fp)
    f1ac:	1004c03a 	cmpne	r2,r2,zero
    f1b0:	1000051e 	bne	r2,zero,f1c8 <alt_up_audio_write_fifo+0x58>
    f1b4:	e0bffa17 	ldw	r2,-24(fp)
    f1b8:	10bfc02c 	andhi	r2,r2,65280
    f1bc:	1004d63a 	srli	r2,r2,24
    f1c0:	e0bfff15 	stw	r2,-4(fp)
    f1c4:	00000406 	br	f1d8 <alt_up_audio_write_fifo+0x68>
    f1c8:	e0bffa17 	ldw	r2,-24(fp)
    f1cc:	10803fec 	andhi	r2,r2,255
    f1d0:	1004d43a 	srli	r2,r2,16
    f1d4:	e0bfff15 	stw	r2,-4(fp)
    f1d8:	e0bfff17 	ldw	r2,-4(fp)
    f1dc:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    f1e0:	e0bffa17 	ldw	r2,-24(fp)
    f1e4:	1005003a 	cmpeq	r2,r2,zero
    f1e8:	1000271e 	bne	r2,zero,f288 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    f1ec:	e0bffe17 	ldw	r2,-8(fp)
    f1f0:	1004c03a 	cmpne	r2,r2,zero
    f1f4:	1000111e 	bne	r2,zero,f23c <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    f1f8:	e0bffb17 	ldw	r2,-20(fp)
    f1fc:	10800a17 	ldw	r2,40(r2)
    f200:	11000204 	addi	r4,r2,8
    f204:	e0bff917 	ldw	r2,-28(fp)
    f208:	1085883a 	add	r2,r2,r2
    f20c:	1085883a 	add	r2,r2,r2
    f210:	1007883a 	mov	r3,r2
    f214:	e0bffc17 	ldw	r2,-16(fp)
    f218:	1885883a 	add	r2,r3,r2
    f21c:	10800017 	ldw	r2,0(r2)
    f220:	1007883a 	mov	r3,r2
    f224:	e0bff917 	ldw	r2,-28(fp)
    f228:	10800044 	addi	r2,r2,1
    f22c:	e0bff915 	stw	r2,-28(fp)
    f230:	2005883a 	mov	r2,r4
    f234:	10c00035 	stwio	r3,0(r2)
    f238:	00001006 	br	f27c <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    f23c:	e0bffb17 	ldw	r2,-20(fp)
    f240:	10800a17 	ldw	r2,40(r2)
    f244:	11000304 	addi	r4,r2,12
    f248:	e0bff917 	ldw	r2,-28(fp)
    f24c:	1085883a 	add	r2,r2,r2
    f250:	1085883a 	add	r2,r2,r2
    f254:	1007883a 	mov	r3,r2
    f258:	e0bffc17 	ldw	r2,-16(fp)
    f25c:	1885883a 	add	r2,r3,r2
    f260:	10800017 	ldw	r2,0(r2)
    f264:	1007883a 	mov	r3,r2
    f268:	e0bff917 	ldw	r2,-28(fp)
    f26c:	10800044 	addi	r2,r2,1
    f270:	e0bff915 	stw	r2,-28(fp)
    f274:	2005883a 	mov	r2,r4
    f278:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    f27c:	e0fff917 	ldw	r3,-28(fp)
    f280:	e0bffd17 	ldw	r2,-12(fp)
    f284:	18bfc316 	blt	r3,r2,f194 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    f288:	e0bff917 	ldw	r2,-28(fp)
}
    f28c:	e037883a 	mov	sp,fp
    f290:	df000017 	ldw	fp,0(sp)
    f294:	dec00104 	addi	sp,sp,4
    f298:	f800283a 	ret

0000f29c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    f29c:	defffc04 	addi	sp,sp,-16
    f2a0:	df000315 	stw	fp,12(sp)
    f2a4:	df000304 	addi	fp,sp,12
    f2a8:	e13ffd15 	stw	r4,-12(fp)
    f2ac:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    f2b0:	e0bffe17 	ldw	r2,-8(fp)
    f2b4:	1004c03a 	cmpne	r2,r2,zero
    f2b8:	1000061e 	bne	r2,zero,f2d4 <alt_up_audio_read_fifo_head+0x38>
    f2bc:	e0bffd17 	ldw	r2,-12(fp)
    f2c0:	10800a17 	ldw	r2,40(r2)
    f2c4:	10800204 	addi	r2,r2,8
    f2c8:	10800037 	ldwio	r2,0(r2)
    f2cc:	e0bfff15 	stw	r2,-4(fp)
    f2d0:	00000506 	br	f2e8 <alt_up_audio_read_fifo_head+0x4c>
    f2d4:	e0bffd17 	ldw	r2,-12(fp)
    f2d8:	10800a17 	ldw	r2,40(r2)
    f2dc:	10800304 	addi	r2,r2,12
    f2e0:	10800037 	ldwio	r2,0(r2)
    f2e4:	e0bfff15 	stw	r2,-4(fp)
    f2e8:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    f2ec:	e037883a 	mov	sp,fp
    f2f0:	df000017 	ldw	fp,0(sp)
    f2f4:	dec00104 	addi	sp,sp,4
    f2f8:	f800283a 	ret

0000f2fc <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    f2fc:	defffc04 	addi	sp,sp,-16
    f300:	df000315 	stw	fp,12(sp)
    f304:	df000304 	addi	fp,sp,12
    f308:	e13ffd15 	stw	r4,-12(fp)
    f30c:	e17ffe15 	stw	r5,-8(fp)
    f310:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    f314:	e0bfff17 	ldw	r2,-4(fp)
    f318:	1004c03a 	cmpne	r2,r2,zero
    f31c:	1000061e 	bne	r2,zero,f338 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    f320:	e0bffd17 	ldw	r2,-12(fp)
    f324:	10800a17 	ldw	r2,40(r2)
    f328:	10800204 	addi	r2,r2,8
    f32c:	e0fffe17 	ldw	r3,-8(fp)
    f330:	10c00035 	stwio	r3,0(r2)
    f334:	00000506 	br	f34c <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    f338:	e0bffd17 	ldw	r2,-12(fp)
    f33c:	10800a17 	ldw	r2,40(r2)
    f340:	10800304 	addi	r2,r2,12
    f344:	e0fffe17 	ldw	r3,-8(fp)
    f348:	10c00035 	stwio	r3,0(r2)
}
    f34c:	e037883a 	mov	sp,fp
    f350:	df000017 	ldw	fp,0(sp)
    f354:	dec00104 	addi	sp,sp,4
    f358:	f800283a 	ret

0000f35c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    f35c:	defffc04 	addi	sp,sp,-16
    f360:	df000315 	stw	fp,12(sp)
    f364:	df000304 	addi	fp,sp,12
    f368:	e13ffe15 	stw	r4,-8(fp)
    f36c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    f370:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    f374:	e0bfff17 	ldw	r2,-4(fp)
    f378:	1004c03a 	cmpne	r2,r2,zero
    f37c:	1000061e 	bne	r2,zero,f398 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    f380:	e0bffe17 	ldw	r2,-8(fp)
    f384:	1007883a 	mov	r3,r2
    f388:	e0bffd03 	ldbu	r2,-12(fp)
    f38c:	10c4b03a 	or	r2,r2,r3
    f390:	e0bffd05 	stb	r2,-12(fp)
    f394:	00000806 	br	f3b8 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    f398:	e0bffe17 	ldw	r2,-8(fp)
    f39c:	1007883a 	mov	r3,r2
    f3a0:	e0bffd03 	ldbu	r2,-12(fp)
    f3a4:	10c4b03a 	or	r2,r2,r3
    f3a8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    f3ac:	e0bffd03 	ldbu	r2,-12(fp)
    f3b0:	10801014 	ori	r2,r2,64
    f3b4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    f3b8:	e0fffd03 	ldbu	r3,-12(fp)
    f3bc:	00bfe004 	movi	r2,-128
    f3c0:	1884b03a 	or	r2,r3,r2
    f3c4:	10803fcc 	andi	r2,r2,255
}
    f3c8:	e037883a 	mov	sp,fp
    f3cc:	df000017 	ldw	fp,0(sp)
    f3d0:	dec00104 	addi	sp,sp,4
    f3d4:	f800283a 	ret

0000f3d8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    f3d8:	defffd04 	addi	sp,sp,-12
    f3dc:	df000215 	stw	fp,8(sp)
    f3e0:	df000204 	addi	fp,sp,8
    f3e4:	e13ffe15 	stw	r4,-8(fp)
    f3e8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    f3ec:	e0bffe17 	ldw	r2,-8(fp)
    f3f0:	10800a17 	ldw	r2,40(r2)
    f3f4:	e0ffff03 	ldbu	r3,-4(fp)
    f3f8:	10c00025 	stbio	r3,0(r2)
}
    f3fc:	e037883a 	mov	sp,fp
    f400:	df000017 	ldw	fp,0(sp)
    f404:	dec00104 	addi	sp,sp,4
    f408:	f800283a 	ret

0000f40c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    f40c:	defffe04 	addi	sp,sp,-8
    f410:	df000115 	stw	fp,4(sp)
    f414:	df000104 	addi	fp,sp,4
    f418:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    f41c:	e0bfff17 	ldw	r2,-4(fp)
    f420:	10800a17 	ldw	r2,40(r2)
    f424:	1007883a 	mov	r3,r2
    f428:	00800044 	movi	r2,1
    f42c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    f430:	e037883a 	mov	sp,fp
    f434:	df000017 	ldw	fp,0(sp)
    f438:	dec00104 	addi	sp,sp,4
    f43c:	f800283a 	ret

0000f440 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    f440:	defffc04 	addi	sp,sp,-16
    f444:	dfc00315 	stw	ra,12(sp)
    f448:	df000215 	stw	fp,8(sp)
    f44c:	df000204 	addi	fp,sp,8
    f450:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    f454:	e13fff17 	ldw	r4,-4(fp)
    f458:	01400074 	movhi	r5,1
    f45c:	29582504 	addi	r5,r5,24724
    f460:	001263c0 	call	1263c <alt_find_dev>
    f464:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f468:	e0bffe17 	ldw	r2,-8(fp)
}
    f46c:	e037883a 	mov	sp,fp
    f470:	dfc00117 	ldw	ra,4(sp)
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00204 	addi	sp,sp,8
    f47c:	f800283a 	ret

0000f480 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    f480:	defffb04 	addi	sp,sp,-20
    f484:	df000415 	stw	fp,16(sp)
    f488:	df000404 	addi	fp,sp,16
    f48c:	e13ffd15 	stw	r4,-12(fp)
    f490:	e17ffe15 	stw	r5,-8(fp)
    f494:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    f498:	e03ffc15 	stw	zero,-16(fp)
    f49c:	00000f06 	br	f4dc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    f4a0:	e0bffd17 	ldw	r2,-12(fp)
    f4a4:	10800a17 	ldw	r2,40(r2)
    f4a8:	11000044 	addi	r4,r2,1
    f4ac:	e0fffc17 	ldw	r3,-16(fp)
    f4b0:	e0bffe17 	ldw	r2,-8(fp)
    f4b4:	1885883a 	add	r2,r3,r2
    f4b8:	10800003 	ldbu	r2,0(r2)
    f4bc:	10c03fcc 	andi	r3,r2,255
    f4c0:	18c0201c 	xori	r3,r3,128
    f4c4:	18ffe004 	addi	r3,r3,-128
    f4c8:	2005883a 	mov	r2,r4
    f4cc:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    f4d0:	e0bffc17 	ldw	r2,-16(fp)
    f4d4:	10800044 	addi	r2,r2,1
    f4d8:	e0bffc15 	stw	r2,-16(fp)
    f4dc:	e0fffc17 	ldw	r3,-16(fp)
    f4e0:	e0bfff17 	ldw	r2,-4(fp)
    f4e4:	18bfee36 	bltu	r3,r2,f4a0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	df000017 	ldw	fp,0(sp)
    f4f0:	dec00104 	addi	sp,sp,4
    f4f4:	f800283a 	ret

0000f4f8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    f4f8:	defffd04 	addi	sp,sp,-12
    f4fc:	df000215 	stw	fp,8(sp)
    f500:	df000204 	addi	fp,sp,8
    f504:	e13ffe15 	stw	r4,-8(fp)
    f508:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    f50c:	00000d06 	br	f544 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    f510:	e0bffe17 	ldw	r2,-8(fp)
    f514:	10800a17 	ldw	r2,40(r2)
    f518:	11000044 	addi	r4,r2,1
    f51c:	e0bfff17 	ldw	r2,-4(fp)
    f520:	10800003 	ldbu	r2,0(r2)
    f524:	10c03fcc 	andi	r3,r2,255
    f528:	18c0201c 	xori	r3,r3,128
    f52c:	18ffe004 	addi	r3,r3,-128
    f530:	2005883a 	mov	r2,r4
    f534:	10c00025 	stbio	r3,0(r2)
		++ptr;
    f538:	e0bfff17 	ldw	r2,-4(fp)
    f53c:	10800044 	addi	r2,r2,1
    f540:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    f544:	e0bfff17 	ldw	r2,-4(fp)
    f548:	10800003 	ldbu	r2,0(r2)
    f54c:	10803fcc 	andi	r2,r2,255
    f550:	1080201c 	xori	r2,r2,128
    f554:	10bfe004 	addi	r2,r2,-128
    f558:	1004c03a 	cmpne	r2,r2,zero
    f55c:	103fec1e 	bne	r2,zero,f510 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    f560:	e037883a 	mov	sp,fp
    f564:	df000017 	ldw	fp,0(sp)
    f568:	dec00104 	addi	sp,sp,4
    f56c:	f800283a 	ret

0000f570 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    f570:	defffb04 	addi	sp,sp,-20
    f574:	dfc00415 	stw	ra,16(sp)
    f578:	df000315 	stw	fp,12(sp)
    f57c:	df000304 	addi	fp,sp,12
    f580:	e13ffd15 	stw	r4,-12(fp)
    f584:	e17ffe15 	stw	r5,-8(fp)
    f588:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    f58c:	e0bffd17 	ldw	r2,-12(fp)
    f590:	10800017 	ldw	r2,0(r2)
    f594:	1009883a 	mov	r4,r2
    f598:	e1bfff17 	ldw	r6,-4(fp)
    f59c:	e17ffe17 	ldw	r5,-8(fp)
    f5a0:	000f4800 	call	f480 <alt_up_character_lcd_write>
	return 0;
    f5a4:	0005883a 	mov	r2,zero
}
    f5a8:	e037883a 	mov	sp,fp
    f5ac:	dfc00117 	ldw	ra,4(sp)
    f5b0:	df000017 	ldw	fp,0(sp)
    f5b4:	dec00204 	addi	sp,sp,8
    f5b8:	f800283a 	ret

0000f5bc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    f5bc:	defff904 	addi	sp,sp,-28
    f5c0:	dfc00615 	stw	ra,24(sp)
    f5c4:	df000515 	stw	fp,20(sp)
    f5c8:	df000504 	addi	fp,sp,20
    f5cc:	e13ffc15 	stw	r4,-16(fp)
    f5d0:	e17ffd15 	stw	r5,-12(fp)
    f5d4:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    f5d8:	e0bffd17 	ldw	r2,-12(fp)
    f5dc:	10800a28 	cmpgeui	r2,r2,40
    f5e0:	1000031e 	bne	r2,zero,f5f0 <alt_up_character_lcd_set_cursor_pos+0x34>
    f5e4:	e0bffe17 	ldw	r2,-8(fp)
    f5e8:	108000b0 	cmpltui	r2,r2,2
    f5ec:	1000031e 	bne	r2,zero,f5fc <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    f5f0:	00bfffc4 	movi	r2,-1
    f5f4:	e0bfff15 	stw	r2,-4(fp)
    f5f8:	00000806 	br	f61c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    f5fc:	e13ffd17 	ldw	r4,-12(fp)
    f600:	e17ffe17 	ldw	r5,-8(fp)
    f604:	000f35c0 	call	f35c <get_DDRAM_addr>
    f608:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    f60c:	e17ffb03 	ldbu	r5,-20(fp)
    f610:	e13ffc17 	ldw	r4,-16(fp)
    f614:	000f3d80 	call	f3d8 <alt_up_character_lcd_send_cmd>
	return 0;
    f618:	e03fff15 	stw	zero,-4(fp)
    f61c:	e0bfff17 	ldw	r2,-4(fp)
}
    f620:	e037883a 	mov	sp,fp
    f624:	dfc00117 	ldw	ra,4(sp)
    f628:	df000017 	ldw	fp,0(sp)
    f62c:	dec00204 	addi	sp,sp,8
    f630:	f800283a 	ret

0000f634 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    f634:	defff904 	addi	sp,sp,-28
    f638:	dfc00615 	stw	ra,24(sp)
    f63c:	df000515 	stw	fp,20(sp)
    f640:	df000504 	addi	fp,sp,20
    f644:	e13ffc15 	stw	r4,-16(fp)
    f648:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    f64c:	e0bffd17 	ldw	r2,-12(fp)
    f650:	1005003a 	cmpeq	r2,r2,zero
    f654:	10001e1e 	bne	r2,zero,f6d0 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    f658:	e0bffd17 	ldw	r2,-12(fp)
    f65c:	10800050 	cmplti	r2,r2,1
    f660:	1000031e 	bne	r2,zero,f670 <alt_up_character_lcd_shift_cursor+0x3c>
    f664:	00800504 	movi	r2,20
    f668:	e0bfff05 	stb	r2,-4(fp)
    f66c:	00000206 	br	f678 <alt_up_character_lcd_shift_cursor+0x44>
    f670:	00c00404 	movi	r3,16
    f674:	e0ffff05 	stb	r3,-4(fp)
    f678:	e0bfff03 	ldbu	r2,-4(fp)
    f67c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    f680:	e0fffd17 	ldw	r3,-12(fp)
    f684:	e0fffe15 	stw	r3,-8(fp)
    f688:	e0fffe17 	ldw	r3,-8(fp)
    f68c:	1804403a 	cmpge	r2,r3,zero
    f690:	1000031e 	bne	r2,zero,f6a0 <alt_up_character_lcd_shift_cursor+0x6c>
    f694:	e0bffe17 	ldw	r2,-8(fp)
    f698:	0085c83a 	sub	r2,zero,r2
    f69c:	e0bffe15 	stw	r2,-8(fp)
    f6a0:	e0fffe17 	ldw	r3,-8(fp)
    f6a4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    f6a8:	00000306 	br	f6b8 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    f6ac:	e17ffb43 	ldbu	r5,-19(fp)
    f6b0:	e13ffc17 	ldw	r4,-16(fp)
    f6b4:	000f3d80 	call	f3d8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    f6b8:	e0bffb03 	ldbu	r2,-20(fp)
    f6bc:	10bfffc4 	addi	r2,r2,-1
    f6c0:	e0bffb05 	stb	r2,-20(fp)
    f6c4:	e0bffb03 	ldbu	r2,-20(fp)
    f6c8:	10803fd8 	cmpnei	r2,r2,255
    f6cc:	103ff71e 	bne	r2,zero,f6ac <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    f6d0:	e037883a 	mov	sp,fp
    f6d4:	dfc00117 	ldw	ra,4(sp)
    f6d8:	df000017 	ldw	fp,0(sp)
    f6dc:	dec00204 	addi	sp,sp,8
    f6e0:	f800283a 	ret

0000f6e4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    f6e4:	defff904 	addi	sp,sp,-28
    f6e8:	dfc00615 	stw	ra,24(sp)
    f6ec:	df000515 	stw	fp,20(sp)
    f6f0:	df000504 	addi	fp,sp,20
    f6f4:	e13ffc15 	stw	r4,-16(fp)
    f6f8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    f6fc:	e0bffd17 	ldw	r2,-12(fp)
    f700:	1005003a 	cmpeq	r2,r2,zero
    f704:	10001e1e 	bne	r2,zero,f780 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    f708:	e0bffd17 	ldw	r2,-12(fp)
    f70c:	10800050 	cmplti	r2,r2,1
    f710:	1000031e 	bne	r2,zero,f720 <alt_up_character_lcd_shift_display+0x3c>
    f714:	00800704 	movi	r2,28
    f718:	e0bfff05 	stb	r2,-4(fp)
    f71c:	00000206 	br	f728 <alt_up_character_lcd_shift_display+0x44>
    f720:	00c00604 	movi	r3,24
    f724:	e0ffff05 	stb	r3,-4(fp)
    f728:	e0bfff03 	ldbu	r2,-4(fp)
    f72c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    f730:	e0fffd17 	ldw	r3,-12(fp)
    f734:	e0fffe15 	stw	r3,-8(fp)
    f738:	e0fffe17 	ldw	r3,-8(fp)
    f73c:	1804403a 	cmpge	r2,r3,zero
    f740:	1000031e 	bne	r2,zero,f750 <alt_up_character_lcd_shift_display+0x6c>
    f744:	e0bffe17 	ldw	r2,-8(fp)
    f748:	0085c83a 	sub	r2,zero,r2
    f74c:	e0bffe15 	stw	r2,-8(fp)
    f750:	e0fffe17 	ldw	r3,-8(fp)
    f754:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    f758:	00000306 	br	f768 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    f75c:	e17ffb43 	ldbu	r5,-19(fp)
    f760:	e13ffc17 	ldw	r4,-16(fp)
    f764:	000f3d80 	call	f3d8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    f768:	e0bffb03 	ldbu	r2,-20(fp)
    f76c:	10bfffc4 	addi	r2,r2,-1
    f770:	e0bffb05 	stb	r2,-20(fp)
    f774:	e0bffb03 	ldbu	r2,-20(fp)
    f778:	10803fd8 	cmpnei	r2,r2,255
    f77c:	103ff71e 	bne	r2,zero,f75c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    f780:	e037883a 	mov	sp,fp
    f784:	dfc00117 	ldw	ra,4(sp)
    f788:	df000017 	ldw	fp,0(sp)
    f78c:	dec00204 	addi	sp,sp,8
    f790:	f800283a 	ret

0000f794 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    f794:	defff904 	addi	sp,sp,-28
    f798:	dfc00615 	stw	ra,24(sp)
    f79c:	df000515 	stw	fp,20(sp)
    f7a0:	df000504 	addi	fp,sp,20
    f7a4:	e13ffc15 	stw	r4,-16(fp)
    f7a8:	e17ffd15 	stw	r5,-12(fp)
    f7ac:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    f7b0:	e0bffd17 	ldw	r2,-12(fp)
    f7b4:	10800a28 	cmpgeui	r2,r2,40
    f7b8:	1000031e 	bne	r2,zero,f7c8 <alt_up_character_lcd_erase_pos+0x34>
    f7bc:	e0bffe17 	ldw	r2,-8(fp)
    f7c0:	108000b0 	cmpltui	r2,r2,2
    f7c4:	1000031e 	bne	r2,zero,f7d4 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    f7c8:	00bfffc4 	movi	r2,-1
    f7cc:	e0bfff15 	stw	r2,-4(fp)
    f7d0:	00000e06 	br	f80c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    f7d4:	e13ffd17 	ldw	r4,-12(fp)
    f7d8:	e17ffe17 	ldw	r5,-8(fp)
    f7dc:	000f35c0 	call	f35c <get_DDRAM_addr>
    f7e0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    f7e4:	e17ffb03 	ldbu	r5,-20(fp)
    f7e8:	e13ffc17 	ldw	r4,-16(fp)
    f7ec:	000f3d80 	call	f3d8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    f7f0:	e0bffc17 	ldw	r2,-16(fp)
    f7f4:	10800a17 	ldw	r2,40(r2)
    f7f8:	10800044 	addi	r2,r2,1
    f7fc:	1007883a 	mov	r3,r2
    f800:	00800084 	movi	r2,2
    f804:	18800025 	stbio	r2,0(r3)
	return 0;
    f808:	e03fff15 	stw	zero,-4(fp)
    f80c:	e0bfff17 	ldw	r2,-4(fp)
}
    f810:	e037883a 	mov	sp,fp
    f814:	dfc00117 	ldw	ra,4(sp)
    f818:	df000017 	ldw	fp,0(sp)
    f81c:	dec00204 	addi	sp,sp,8
    f820:	f800283a 	ret

0000f824 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    f824:	defffd04 	addi	sp,sp,-12
    f828:	dfc00215 	stw	ra,8(sp)
    f82c:	df000115 	stw	fp,4(sp)
    f830:	df000104 	addi	fp,sp,4
    f834:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    f838:	e13fff17 	ldw	r4,-4(fp)
    f83c:	01400304 	movi	r5,12
    f840:	000f3d80 	call	f3d8 <alt_up_character_lcd_send_cmd>
}
    f844:	e037883a 	mov	sp,fp
    f848:	dfc00117 	ldw	ra,4(sp)
    f84c:	df000017 	ldw	fp,0(sp)
    f850:	dec00204 	addi	sp,sp,8
    f854:	f800283a 	ret

0000f858 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    f858:	defffd04 	addi	sp,sp,-12
    f85c:	dfc00215 	stw	ra,8(sp)
    f860:	df000115 	stw	fp,4(sp)
    f864:	df000104 	addi	fp,sp,4
    f868:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    f86c:	e13fff17 	ldw	r4,-4(fp)
    f870:	014003c4 	movi	r5,15
    f874:	000f3d80 	call	f3d8 <alt_up_character_lcd_send_cmd>
}
    f878:	e037883a 	mov	sp,fp
    f87c:	dfc00117 	ldw	ra,4(sp)
    f880:	df000017 	ldw	fp,0(sp)
    f884:	dec00204 	addi	sp,sp,8
    f888:	f800283a 	ret

0000f88c <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    f88c:	defffb04 	addi	sp,sp,-20
    f890:	dfc00415 	stw	ra,16(sp)
    f894:	df000315 	stw	fp,12(sp)
    f898:	df000304 	addi	fp,sp,12
    f89c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    f8a0:	e0bfff17 	ldw	r2,-4(fp)
    f8a4:	10800a17 	ldw	r2,40(r2)
    f8a8:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    f8ac:	e13ffe17 	ldw	r4,-8(fp)
    f8b0:	014007c4 	movi	r5,31
    f8b4:	000d883a 	mov	r6,zero
    f8b8:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    f8bc:	e13ffe17 	ldw	r4,-8(fp)
    f8c0:	000b883a 	mov	r5,zero
    f8c4:	01800044 	movi	r6,1
    f8c8:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	usleep(10);
    f8cc:	01000284 	movi	r4,10
    f8d0:	0012ca40 	call	12ca4 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    f8d4:	e13ffe17 	ldw	r4,-8(fp)
    f8d8:	000b883a 	mov	r5,zero
    f8dc:	000d883a 	mov	r6,zero
    f8e0:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	usleep(1);
    f8e4:	01000044 	movi	r4,1
    f8e8:	0012ca40 	call	12ca4 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    f8ec:	e03ffd15 	stw	zero,-12(fp)
    f8f0:	00000e06 	br	f92c <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    f8f4:	e0bffd17 	ldw	r2,-12(fp)
    f8f8:	10800404 	addi	r2,r2,16
    f8fc:	100b883a 	mov	r5,r2
    f900:	e0fffd17 	ldw	r3,-12(fp)
    f904:	e0bfff17 	ldw	r2,-4(fp)
    f908:	1885883a 	add	r2,r3,r2
    f90c:	10800d04 	addi	r2,r2,52
    f910:	10800003 	ldbu	r2,0(r2)
    f914:	11803fcc 	andi	r6,r2,255
    f918:	e13ffe17 	ldw	r4,-8(fp)
    f91c:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	10800044 	addi	r2,r2,1
    f928:	e0bffd15 	stw	r2,-12(fp)
    f92c:	e0bffd17 	ldw	r2,-12(fp)
    f930:	10800190 	cmplti	r2,r2,6
    f934:	103fef1e 	bne	r2,zero,f8f4 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    f938:	e13ffe17 	ldw	r4,-8(fp)
    f93c:	01403f84 	movi	r5,254
    f940:	01800fc4 	movi	r6,63
    f944:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    f948:	e13ffe17 	ldw	r4,-8(fp)
    f94c:	01400044 	movi	r5,1
    f950:	01800b04 	movi	r6,44
    f954:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    f958:	e13ffe17 	ldw	r4,-8(fp)
    f95c:	01403fc4 	movi	r5,255
    f960:	01802004 	movi	r6,128
    f964:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    f968:	e13ffe17 	ldw	r4,-8(fp)
    f96c:	01400144 	movi	r5,5
    f970:	01800e44 	movi	r6,57
    f974:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    f978:	e13ffe17 	ldw	r4,-8(fp)
    f97c:	01400c04 	movi	r5,48
    f980:	018000c4 	movi	r6,3
    f984:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	return;
}
    f988:	e037883a 	mov	sp,fp
    f98c:	dfc00117 	ldw	ra,4(sp)
    f990:	df000017 	ldw	fp,0(sp)
    f994:	dec00204 	addi	sp,sp,8
    f998:	f800283a 	ret

0000f99c <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    f99c:	defffc04 	addi	sp,sp,-16
    f9a0:	dfc00315 	stw	ra,12(sp)
    f9a4:	df000215 	stw	fp,8(sp)
    f9a8:	df000204 	addi	fp,sp,8
    f9ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    f9b0:	e13fff17 	ldw	r4,-4(fp)
    f9b4:	01400074 	movhi	r5,1
    f9b8:	29582504 	addi	r5,r5,24724
    f9bc:	001263c0 	call	1263c <alt_find_dev>
    f9c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f9c4:	e0bffe17 	ldw	r2,-8(fp)
}
    f9c8:	e037883a 	mov	sp,fp
    f9cc:	dfc00117 	ldw	ra,4(sp)
    f9d0:	df000017 	ldw	fp,0(sp)
    f9d4:	dec00204 	addi	sp,sp,8
    f9d8:	f800283a 	ret

0000f9dc <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    f9dc:	defffd04 	addi	sp,sp,-12
    f9e0:	df000215 	stw	fp,8(sp)
    f9e4:	df000204 	addi	fp,sp,8
    f9e8:	e13ffe15 	stw	r4,-8(fp)
    f9ec:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    f9f0:	e0bffe17 	ldw	r2,-8(fp)
    f9f4:	e0ffff17 	ldw	r3,-4(fp)
    f9f8:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    f9fc:	e0bffe17 	ldw	r2,-8(fp)
    fa00:	10800104 	addi	r2,r2,4
    fa04:	10800037 	ldwio	r2,0(r2)
}
    fa08:	e037883a 	mov	sp,fp
    fa0c:	df000017 	ldw	fp,0(sp)
    fa10:	dec00104 	addi	sp,sp,4
    fa14:	f800283a 	ret

0000fa18 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    fa18:	defffc04 	addi	sp,sp,-16
    fa1c:	df000315 	stw	fp,12(sp)
    fa20:	df000304 	addi	fp,sp,12
    fa24:	e13ffd15 	stw	r4,-12(fp)
    fa28:	e17ffe15 	stw	r5,-8(fp)
    fa2c:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    fa30:	e0bffd17 	ldw	r2,-12(fp)
    fa34:	e0fffe17 	ldw	r3,-8(fp)
    fa38:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    fa3c:	e0bffd17 	ldw	r2,-12(fp)
    fa40:	10800104 	addi	r2,r2,4
    fa44:	e0ffff17 	ldw	r3,-4(fp)
    fa48:	10c00035 	stwio	r3,0(r2)
}
    fa4c:	e037883a 	mov	sp,fp
    fa50:	df000017 	ldw	fp,0(sp)
    fa54:	dec00104 	addi	sp,sp,4
    fa58:	f800283a 	ret

0000fa5c <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    fa5c:	defffa04 	addi	sp,sp,-24
    fa60:	dfc00515 	stw	ra,20(sp)
    fa64:	df000415 	stw	fp,16(sp)
    fa68:	df000404 	addi	fp,sp,16
    fa6c:	e13ffe15 	stw	r4,-8(fp)
    fa70:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    fa74:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    fa78:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    fa7c:	e0bfff17 	ldw	r2,-4(fp)
    fa80:	11801014 	ori	r6,r2,64
    fa84:	e13ffe17 	ldw	r4,-8(fp)
    fa88:	01400304 	movi	r5,12
    fa8c:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    fa90:	e13ffe17 	ldw	r4,-8(fp)
    fa94:	014002c4 	movi	r5,11
    fa98:	01800304 	movi	r6,12
    fa9c:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    faa0:	01000044 	movi	r4,1
    faa4:	0012ca40 	call	12ca4 <usleep>
		timeout++;
    faa8:	e0bffc17 	ldw	r2,-16(fp)
    faac:	10800044 	addi	r2,r2,1
    fab0:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	10800ca8 	cmpgeui	r2,r2,50
    fabc:	1000071e 	bne	r2,zero,fadc <alt_up_ethernet_phy_reg_read+0x80>
    fac0:	e13ffe17 	ldw	r4,-8(fp)
    fac4:	014002c4 	movi	r5,11
    fac8:	000f9dc0 	call	f9dc <alt_up_ethernet_reg_read>
    facc:	1080004c 	andi	r2,r2,1
    fad0:	10803fcc 	andi	r2,r2,255
    fad4:	1004c03a 	cmpne	r2,r2,zero
    fad8:	103ff11e 	bne	r2,zero,faa0 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    fadc:	01000044 	movi	r4,1
    fae0:	0012ca40 	call	12ca4 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    fae4:	e13ffe17 	ldw	r4,-8(fp)
    fae8:	014002c4 	movi	r5,11
    faec:	01800204 	movi	r6,8
    faf0:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    faf4:	e13ffe17 	ldw	r4,-8(fp)
    faf8:	01400384 	movi	r5,14
    fafc:	000f9dc0 	call	f9dc <alt_up_ethernet_reg_read>
    fb00:	1004923a 	slli	r2,r2,8
    fb04:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    fb08:	e13ffe17 	ldw	r4,-8(fp)
    fb0c:	01400344 	movi	r5,13
    fb10:	000f9dc0 	call	f9dc <alt_up_ethernet_reg_read>
    fb14:	1007883a 	mov	r3,r2
    fb18:	e0bffd17 	ldw	r2,-12(fp)
    fb1c:	10c4b03a 	or	r2,r2,r3
    fb20:	e0bffd15 	stw	r2,-12(fp)

	return result;
    fb24:	e0bffd17 	ldw	r2,-12(fp)
}
    fb28:	e037883a 	mov	sp,fp
    fb2c:	dfc00117 	ldw	ra,4(sp)
    fb30:	df000017 	ldw	fp,0(sp)
    fb34:	dec00204 	addi	sp,sp,8
    fb38:	f800283a 	ret

0000fb3c <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    fb3c:	defffa04 	addi	sp,sp,-24
    fb40:	dfc00515 	stw	ra,20(sp)
    fb44:	df000415 	stw	fp,16(sp)
    fb48:	df000404 	addi	fp,sp,16
    fb4c:	e13ffd15 	stw	r4,-12(fp)
    fb50:	e17ffe15 	stw	r5,-8(fp)
    fb54:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    fb58:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    fb5c:	e0bffe17 	ldw	r2,-8(fp)
    fb60:	11801014 	ori	r6,r2,64
    fb64:	e13ffd17 	ldw	r4,-12(fp)
    fb68:	01400304 	movi	r5,12
    fb6c:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    fb70:	e0bfff17 	ldw	r2,-4(fp)
    fb74:	1004d23a 	srli	r2,r2,8
    fb78:	11803fcc 	andi	r6,r2,255
    fb7c:	e13ffd17 	ldw	r4,-12(fp)
    fb80:	01400384 	movi	r5,14
    fb84:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    fb88:	e0bfff17 	ldw	r2,-4(fp)
    fb8c:	11803fcc 	andi	r6,r2,255
    fb90:	e13ffd17 	ldw	r4,-12(fp)
    fb94:	01400344 	movi	r5,13
    fb98:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    fb9c:	e13ffd17 	ldw	r4,-12(fp)
    fba0:	014002c4 	movi	r5,11
    fba4:	01800284 	movi	r6,10
    fba8:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    fbac:	01000044 	movi	r4,1
    fbb0:	0012ca40 	call	12ca4 <usleep>
		timeout++;
    fbb4:	e0bffc17 	ldw	r2,-16(fp)
    fbb8:	10800044 	addi	r2,r2,1
    fbbc:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    fbc0:	e0bffc17 	ldw	r2,-16(fp)
    fbc4:	10800ca8 	cmpgeui	r2,r2,50
    fbc8:	1000071e 	bne	r2,zero,fbe8 <alt_up_ethernet_phy_reg_write+0xac>
    fbcc:	e13ffd17 	ldw	r4,-12(fp)
    fbd0:	014002c4 	movi	r5,11
    fbd4:	000f9dc0 	call	f9dc <alt_up_ethernet_reg_read>
    fbd8:	1080004c 	andi	r2,r2,1
    fbdc:	10803fcc 	andi	r2,r2,255
    fbe0:	1004c03a 	cmpne	r2,r2,zero
    fbe4:	103ff11e 	bne	r2,zero,fbac <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    fbe8:	01000044 	movi	r4,1
    fbec:	0012ca40 	call	12ca4 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    fbf0:	e13ffd17 	ldw	r4,-12(fp)
    fbf4:	014002c4 	movi	r5,11
    fbf8:	01800204 	movi	r6,8
    fbfc:	000fa180 	call	fa18 <alt_up_ethernet_reg_write>
}
    fc00:	e037883a 	mov	sp,fp
    fc04:	dfc00117 	ldw	ra,4(sp)
    fc08:	df000017 	ldw	fp,0(sp)
    fc0c:	dec00204 	addi	sp,sp,8
    fc10:	f800283a 	ret

0000fc14 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    fc14:	defffd04 	addi	sp,sp,-12
    fc18:	df000215 	stw	fp,8(sp)
    fc1c:	df000204 	addi	fp,sp,8
    fc20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    fc24:	e0bfff17 	ldw	r2,-4(fp)
    fc28:	10800a17 	ldw	r2,40(r2)
    fc2c:	10800104 	addi	r2,r2,4
    fc30:	10800037 	ldwio	r2,0(r2)
    fc34:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    fc38:	e0bffe17 	ldw	r2,-8(fp)
    fc3c:	10800054 	ori	r2,r2,1
    fc40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    fc44:	e0bfff17 	ldw	r2,-4(fp)
    fc48:	10800a17 	ldw	r2,40(r2)
    fc4c:	10800104 	addi	r2,r2,4
    fc50:	e0fffe17 	ldw	r3,-8(fp)
    fc54:	10c00035 	stwio	r3,0(r2)
}
    fc58:	e037883a 	mov	sp,fp
    fc5c:	df000017 	ldw	fp,0(sp)
    fc60:	dec00104 	addi	sp,sp,4
    fc64:	f800283a 	ret

0000fc68 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    fc68:	defffd04 	addi	sp,sp,-12
    fc6c:	df000215 	stw	fp,8(sp)
    fc70:	df000204 	addi	fp,sp,8
    fc74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    fc78:	e0bfff17 	ldw	r2,-4(fp)
    fc7c:	10800a17 	ldw	r2,40(r2)
    fc80:	10800104 	addi	r2,r2,4
    fc84:	10800037 	ldwio	r2,0(r2)
    fc88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    fc8c:	e0fffe17 	ldw	r3,-8(fp)
    fc90:	00bfff84 	movi	r2,-2
    fc94:	1884703a 	and	r2,r3,r2
    fc98:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    fc9c:	e0bfff17 	ldw	r2,-4(fp)
    fca0:	10800a17 	ldw	r2,40(r2)
    fca4:	10800104 	addi	r2,r2,4
    fca8:	e0fffe17 	ldw	r3,-8(fp)
    fcac:	10c00035 	stwio	r3,0(r2)
}
    fcb0:	e037883a 	mov	sp,fp
    fcb4:	df000017 	ldw	fp,0(sp)
    fcb8:	dec00104 	addi	sp,sp,4
    fcbc:	f800283a 	ret

0000fcc0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    fcc0:	defffd04 	addi	sp,sp,-12
    fcc4:	df000215 	stw	fp,8(sp)
    fcc8:	df000204 	addi	fp,sp,8
    fccc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    fcd0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    fcd4:	e0bfff17 	ldw	r2,-4(fp)
    fcd8:	10800a17 	ldw	r2,40(r2)
    fcdc:	10800084 	addi	r2,r2,2
    fce0:	1080002b 	ldhuio	r2,0(r2)
    fce4:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    fce8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    fcec:	e037883a 	mov	sp,fp
    fcf0:	df000017 	ldw	fp,0(sp)
    fcf4:	dec00104 	addi	sp,sp,4
    fcf8:	f800283a 	ret

0000fcfc <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    fcfc:	defffd04 	addi	sp,sp,-12
    fd00:	df000215 	stw	fp,8(sp)
    fd04:	df000204 	addi	fp,sp,8
    fd08:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    fd0c:	e0bfff17 	ldw	r2,-4(fp)
    fd10:	10800a17 	ldw	r2,40(r2)
    fd14:	10800104 	addi	r2,r2,4
    fd18:	10800037 	ldwio	r2,0(r2)
    fd1c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    fd20:	e0bffe17 	ldw	r2,-8(fp)
    fd24:	10bfffec 	andhi	r2,r2,65535
    fd28:	1004d43a 	srli	r2,r2,16
}
    fd2c:	e037883a 	mov	sp,fp
    fd30:	df000017 	ldw	fp,0(sp)
    fd34:	dec00104 	addi	sp,sp,4
    fd38:	f800283a 	ret

0000fd3c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    fd3c:	defffc04 	addi	sp,sp,-16
    fd40:	df000315 	stw	fp,12(sp)
    fd44:	df000304 	addi	fp,sp,12
    fd48:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    fd4c:	e0bffe17 	ldw	r2,-8(fp)
    fd50:	1080800c 	andi	r2,r2,512
    fd54:	1004d27a 	srli	r2,r2,9
    fd58:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    fd5c:	e0bffd17 	ldw	r2,-12(fp)
    fd60:	1005003a 	cmpeq	r2,r2,zero
    fd64:	1000031e 	bne	r2,zero,fd74 <alt_up_irda_check_parity+0x38>
    fd68:	00bfffc4 	movi	r2,-1
    fd6c:	e0bfff15 	stw	r2,-4(fp)
    fd70:	00000106 	br	fd78 <alt_up_irda_check_parity+0x3c>
    fd74:	e03fff15 	stw	zero,-4(fp)
    fd78:	e0bfff17 	ldw	r2,-4(fp)
}
    fd7c:	e037883a 	mov	sp,fp
    fd80:	df000017 	ldw	fp,0(sp)
    fd84:	dec00104 	addi	sp,sp,4
    fd88:	f800283a 	ret

0000fd8c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    fd8c:	defffc04 	addi	sp,sp,-16
    fd90:	df000315 	stw	fp,12(sp)
    fd94:	df000304 	addi	fp,sp,12
    fd98:	e13ffe15 	stw	r4,-8(fp)
    fd9c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    fda0:	e0bffe17 	ldw	r2,-8(fp)
    fda4:	10800a17 	ldw	r2,40(r2)
    fda8:	10800037 	ldwio	r2,0(r2)
    fdac:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    fdb0:	e0bffe17 	ldw	r2,-8(fp)
    fdb4:	10800a17 	ldw	r2,40(r2)
    fdb8:	e0ffff03 	ldbu	r3,-4(fp)
    fdbc:	10c00035 	stwio	r3,0(r2)
	return 0;
    fdc0:	0005883a 	mov	r2,zero
}
    fdc4:	e037883a 	mov	sp,fp
    fdc8:	df000017 	ldw	fp,0(sp)
    fdcc:	dec00104 	addi	sp,sp,4
    fdd0:	f800283a 	ret

0000fdd4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    fdd4:	defffa04 	addi	sp,sp,-24
    fdd8:	dfc00515 	stw	ra,20(sp)
    fddc:	df000415 	stw	fp,16(sp)
    fde0:	df000404 	addi	fp,sp,16
    fde4:	e13ffd15 	stw	r4,-12(fp)
    fde8:	e17ffe15 	stw	r5,-8(fp)
    fdec:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    fdf0:	e0bffd17 	ldw	r2,-12(fp)
    fdf4:	10800a17 	ldw	r2,40(r2)
    fdf8:	10800037 	ldwio	r2,0(r2)
    fdfc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    fe00:	e0bffc17 	ldw	r2,-16(fp)
    fe04:	1007883a 	mov	r3,r2
    fe08:	e0bffe17 	ldw	r2,-8(fp)
    fe0c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    fe10:	e13ffc17 	ldw	r4,-16(fp)
    fe14:	000fd3c0 	call	fd3c <alt_up_irda_check_parity>
    fe18:	1007883a 	mov	r3,r2
    fe1c:	e0bfff17 	ldw	r2,-4(fp)
    fe20:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    fe24:	e0bffc17 	ldw	r2,-16(fp)
    fe28:	10a0000c 	andi	r2,r2,32768
    fe2c:	1004d3fa 	srli	r2,r2,15
    fe30:	10bfffc4 	addi	r2,r2,-1
}
    fe34:	e037883a 	mov	sp,fp
    fe38:	dfc00117 	ldw	ra,4(sp)
    fe3c:	df000017 	ldw	fp,0(sp)
    fe40:	dec00204 	addi	sp,sp,8
    fe44:	f800283a 	ret

0000fe48 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    fe48:	defff804 	addi	sp,sp,-32
    fe4c:	dfc00715 	stw	ra,28(sp)
    fe50:	df000615 	stw	fp,24(sp)
    fe54:	df000604 	addi	fp,sp,24
    fe58:	e13ffd15 	stw	r4,-12(fp)
    fe5c:	e17ffe15 	stw	r5,-8(fp)
    fe60:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    fe64:	e0bffd17 	ldw	r2,-12(fp)
    fe68:	10800017 	ldw	r2,0(r2)
    fe6c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    fe70:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    fe74:	00000c06 	br	fea8 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    fe78:	e17ffe17 	ldw	r5,-8(fp)
    fe7c:	e0bffe17 	ldw	r2,-8(fp)
    fe80:	10800044 	addi	r2,r2,1
    fe84:	e0bffe15 	stw	r2,-8(fp)
    fe88:	e1bffc04 	addi	r6,fp,-16
    fe8c:	e13ffb17 	ldw	r4,-20(fp)
    fe90:	000fdd40 	call	fdd4 <alt_up_irda_read_data>
    fe94:	1004c03a 	cmpne	r2,r2,zero
    fe98:	1000091e 	bne	r2,zero,fec0 <alt_up_irda_read_fd+0x78>
			count++;
    fe9c:	e0bffa17 	ldw	r2,-24(fp)
    fea0:	10800044 	addi	r2,r2,1
    fea4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    fea8:	e0bfff17 	ldw	r2,-4(fp)
    feac:	10bfffc4 	addi	r2,r2,-1
    feb0:	e0bfff15 	stw	r2,-4(fp)
    feb4:	e0bfff17 	ldw	r2,-4(fp)
    feb8:	10bfffd8 	cmpnei	r2,r2,-1
    febc:	103fee1e 	bne	r2,zero,fe78 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    fec0:	e0bffa17 	ldw	r2,-24(fp)
}
    fec4:	e037883a 	mov	sp,fp
    fec8:	dfc00117 	ldw	ra,4(sp)
    fecc:	df000017 	ldw	fp,0(sp)
    fed0:	dec00204 	addi	sp,sp,8
    fed4:	f800283a 	ret

0000fed8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    fed8:	defff904 	addi	sp,sp,-28
    fedc:	dfc00615 	stw	ra,24(sp)
    fee0:	df000515 	stw	fp,20(sp)
    fee4:	df000504 	addi	fp,sp,20
    fee8:	e13ffd15 	stw	r4,-12(fp)
    feec:	e17ffe15 	stw	r5,-8(fp)
    fef0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    fef4:	e0bffd17 	ldw	r2,-12(fp)
    fef8:	10800017 	ldw	r2,0(r2)
    fefc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    ff00:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    ff04:	00000c06 	br	ff38 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    ff08:	e0bffe17 	ldw	r2,-8(fp)
    ff0c:	11403fcc 	andi	r5,r2,255
    ff10:	e0bffe17 	ldw	r2,-8(fp)
    ff14:	10800044 	addi	r2,r2,1
    ff18:	e0bffe15 	stw	r2,-8(fp)
    ff1c:	e13ffc17 	ldw	r4,-16(fp)
    ff20:	000fd8c0 	call	fd8c <alt_up_irda_write_data>
    ff24:	1004c03a 	cmpne	r2,r2,zero
    ff28:	1000091e 	bne	r2,zero,ff50 <alt_up_irda_write_fd+0x78>
			count++;
    ff2c:	e0bffb17 	ldw	r2,-20(fp)
    ff30:	10800044 	addi	r2,r2,1
    ff34:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    ff38:	e0bfff17 	ldw	r2,-4(fp)
    ff3c:	10bfffc4 	addi	r2,r2,-1
    ff40:	e0bfff15 	stw	r2,-4(fp)
    ff44:	e0bfff17 	ldw	r2,-4(fp)
    ff48:	10bfffd8 	cmpnei	r2,r2,-1
    ff4c:	103fee1e 	bne	r2,zero,ff08 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    ff50:	e0bffb17 	ldw	r2,-20(fp)
}
    ff54:	e037883a 	mov	sp,fp
    ff58:	dfc00117 	ldw	ra,4(sp)
    ff5c:	df000017 	ldw	fp,0(sp)
    ff60:	dec00204 	addi	sp,sp,8
    ff64:	f800283a 	ret

0000ff68 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    ff68:	defffc04 	addi	sp,sp,-16
    ff6c:	dfc00315 	stw	ra,12(sp)
    ff70:	df000215 	stw	fp,8(sp)
    ff74:	df000204 	addi	fp,sp,8
    ff78:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    ff7c:	e13fff17 	ldw	r4,-4(fp)
    ff80:	01400074 	movhi	r5,1
    ff84:	29582504 	addi	r5,r5,24724
    ff88:	001263c0 	call	1263c <alt_find_dev>
    ff8c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ff90:	e0bffe17 	ldw	r2,-8(fp)
}
    ff94:	e037883a 	mov	sp,fp
    ff98:	dfc00117 	ldw	ra,4(sp)
    ff9c:	df000017 	ldw	fp,0(sp)
    ffa0:	dec00204 	addi	sp,sp,8
    ffa4:	f800283a 	ret

0000ffa8 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    ffa8:	defffc04 	addi	sp,sp,-16
    ffac:	dfc00315 	stw	ra,12(sp)
    ffb0:	df000215 	stw	fp,8(sp)
    ffb4:	df000204 	addi	fp,sp,8
    ffb8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    ffbc:	e13fff17 	ldw	r4,-4(fp)
    ffc0:	01400074 	movhi	r5,1
    ffc4:	29582504 	addi	r5,r5,24724
    ffc8:	001263c0 	call	1263c <alt_find_dev>
    ffcc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ffd0:	e0bffe17 	ldw	r2,-8(fp)
}
    ffd4:	e037883a 	mov	sp,fp
    ffd8:	dfc00117 	ldw	ra,4(sp)
    ffdc:	df000017 	ldw	fp,0(sp)
    ffe0:	dec00204 	addi	sp,sp,8
    ffe4:	f800283a 	ret

0000ffe8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    ffe8:	defffd04 	addi	sp,sp,-12
    ffec:	df000215 	stw	fp,8(sp)
    fff0:	df000204 	addi	fp,sp,8
    fff4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    fff8:	e0bfff17 	ldw	r2,-4(fp)
    fffc:	1080400c 	andi	r2,r2,256
   10000:	1004d23a 	srli	r2,r2,8
   10004:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   10008:	e0bffe03 	ldbu	r2,-8(fp)
}
   1000c:	e037883a 	mov	sp,fp
   10010:	df000017 	ldw	fp,0(sp)
   10014:	dec00104 	addi	sp,sp,4
   10018:	f800283a 	ret

0001001c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1001c:	defffd04 	addi	sp,sp,-12
   10020:	df000215 	stw	fp,8(sp)
   10024:	df000204 	addi	fp,sp,8
   10028:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1002c:	e0bfff17 	ldw	r2,-4(fp)
   10030:	1080004c 	andi	r2,r2,1
   10034:	e0bffe05 	stb	r2,-8(fp)
	return re;
   10038:	e0bffe03 	ldbu	r2,-8(fp)
}
   1003c:	e037883a 	mov	sp,fp
   10040:	df000017 	ldw	fp,0(sp)
   10044:	dec00104 	addi	sp,sp,4
   10048:	f800283a 	ret

0001004c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1004c:	defffd04 	addi	sp,sp,-12
   10050:	df000215 	stw	fp,8(sp)
   10054:	df000204 	addi	fp,sp,8
   10058:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1005c:	e0bfff17 	ldw	r2,-4(fp)
   10060:	1081000c 	andi	r2,r2,1024
   10064:	1004d2ba 	srli	r2,r2,10
   10068:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1006c:	e0bffe03 	ldbu	r2,-8(fp)
}
   10070:	e037883a 	mov	sp,fp
   10074:	df000017 	ldw	fp,0(sp)
   10078:	dec00104 	addi	sp,sp,4
   1007c:	f800283a 	ret

00010080 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   10080:	defffd04 	addi	sp,sp,-12
   10084:	df000215 	stw	fp,8(sp)
   10088:	df000204 	addi	fp,sp,8
   1008c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   10090:	e0bfff17 	ldw	r2,-4(fp)
   10094:	10bfffec 	andhi	r2,r2,65535
   10098:	1004d43a 	srli	r2,r2,16
   1009c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   100a0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   100a4:	e037883a 	mov	sp,fp
   100a8:	df000017 	ldw	fp,0(sp)
   100ac:	dec00104 	addi	sp,sp,4
   100b0:	f800283a 	ret

000100b4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   100b4:	defffd04 	addi	sp,sp,-12
   100b8:	df000215 	stw	fp,8(sp)
   100bc:	df000204 	addi	fp,sp,8
   100c0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   100c4:	e0bfff17 	ldw	r2,-4(fp)
   100c8:	10a0000c 	andi	r2,r2,32768
   100cc:	1004d3fa 	srli	r2,r2,15
   100d0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   100d4:	e0bffe03 	ldbu	r2,-8(fp)
}
   100d8:	e037883a 	mov	sp,fp
   100dc:	df000017 	ldw	fp,0(sp)
   100e0:	dec00104 	addi	sp,sp,4
   100e4:	f800283a 	ret

000100e8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   100e8:	defffd04 	addi	sp,sp,-12
   100ec:	df000215 	stw	fp,8(sp)
   100f0:	df000204 	addi	fp,sp,8
   100f4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   100f8:	e0bfff17 	ldw	r2,-4(fp)
   100fc:	e0bffe05 	stb	r2,-8(fp)
	return data;
   10100:	e0bffe03 	ldbu	r2,-8(fp)
}
   10104:	e037883a 	mov	sp,fp
   10108:	df000017 	ldw	fp,0(sp)
   1010c:	dec00104 	addi	sp,sp,4
   10110:	f800283a 	ret

00010114 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   10114:	defffb04 	addi	sp,sp,-20
   10118:	dfc00415 	stw	ra,16(sp)
   1011c:	df000315 	stw	fp,12(sp)
   10120:	df000304 	addi	fp,sp,12
   10124:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   10128:	e13fff17 	ldw	r4,-4(fp)
   1012c:	01403fc4 	movi	r5,255
   10130:	00103740 	call	10374 <alt_up_ps2_write_data_byte_with_ack>
   10134:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   10138:	e0bffd17 	ldw	r2,-12(fp)
   1013c:	1004c03a 	cmpne	r2,r2,zero
   10140:	1000221e 	bne	r2,zero,101cc <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   10144:	e17ffe04 	addi	r5,fp,-8
   10148:	e13fff17 	ldw	r4,-4(fp)
   1014c:	00103e00 	call	103e0 <alt_up_ps2_read_data_byte_timeout>
   10150:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   10154:	e0bffd17 	ldw	r2,-12(fp)
   10158:	1004c03a 	cmpne	r2,r2,zero
   1015c:	10001b1e 	bne	r2,zero,101cc <alt_up_ps2_init+0xb8>
   10160:	e0bffe03 	ldbu	r2,-8(fp)
   10164:	10803fcc 	andi	r2,r2,255
   10168:	10802a98 	cmpnei	r2,r2,170
   1016c:	1000171e 	bne	r2,zero,101cc <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   10170:	e17ffe04 	addi	r5,fp,-8
   10174:	e13fff17 	ldw	r4,-4(fp)
   10178:	00103e00 	call	103e0 <alt_up_ps2_read_data_byte_timeout>
   1017c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   10180:	e0bffd17 	ldw	r2,-12(fp)
   10184:	10bfe318 	cmpnei	r2,r2,-116
   10188:	1000041e 	bne	r2,zero,1019c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1018c:	e0ffff17 	ldw	r3,-4(fp)
   10190:	00800044 	movi	r2,1
   10194:	18800d15 	stw	r2,52(r3)
   10198:	00000c06 	br	101cc <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	1004c03a 	cmpne	r2,r2,zero
   101a4:	1000091e 	bne	r2,zero,101cc <alt_up_ps2_init+0xb8>
   101a8:	e0bffe03 	ldbu	r2,-8(fp)
   101ac:	10803fcc 	andi	r2,r2,255
   101b0:	1004c03a 	cmpne	r2,r2,zero
   101b4:	1000051e 	bne	r2,zero,101cc <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   101b8:	e0bfff17 	ldw	r2,-4(fp)
   101bc:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   101c0:	e13fff17 	ldw	r4,-4(fp)
   101c4:	01403d04 	movi	r5,244
   101c8:	001028c0 	call	1028c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   101cc:	e037883a 	mov	sp,fp
   101d0:	dfc00117 	ldw	ra,4(sp)
   101d4:	df000017 	ldw	fp,0(sp)
   101d8:	dec00204 	addi	sp,sp,8
   101dc:	f800283a 	ret

000101e0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   101e0:	defffd04 	addi	sp,sp,-12
   101e4:	df000215 	stw	fp,8(sp)
   101e8:	df000204 	addi	fp,sp,8
   101ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   101f0:	e0bfff17 	ldw	r2,-4(fp)
   101f4:	10800a17 	ldw	r2,40(r2)
   101f8:	10800104 	addi	r2,r2,4
   101fc:	10800037 	ldwio	r2,0(r2)
   10200:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   10204:	e0bffe17 	ldw	r2,-8(fp)
   10208:	10800054 	ori	r2,r2,1
   1020c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   10210:	e0bfff17 	ldw	r2,-4(fp)
   10214:	10800a17 	ldw	r2,40(r2)
   10218:	10800104 	addi	r2,r2,4
   1021c:	e0fffe17 	ldw	r3,-8(fp)
   10220:	10c00035 	stwio	r3,0(r2)
}
   10224:	e037883a 	mov	sp,fp
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00104 	addi	sp,sp,4
   10230:	f800283a 	ret

00010234 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   10234:	defffd04 	addi	sp,sp,-12
   10238:	df000215 	stw	fp,8(sp)
   1023c:	df000204 	addi	fp,sp,8
   10240:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   10244:	e0bfff17 	ldw	r2,-4(fp)
   10248:	10800a17 	ldw	r2,40(r2)
   1024c:	10800104 	addi	r2,r2,4
   10250:	10800037 	ldwio	r2,0(r2)
   10254:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   10258:	e0fffe17 	ldw	r3,-8(fp)
   1025c:	00bfff84 	movi	r2,-2
   10260:	1884703a 	and	r2,r3,r2
   10264:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   10268:	e0bfff17 	ldw	r2,-4(fp)
   1026c:	10800a17 	ldw	r2,40(r2)
   10270:	10800104 	addi	r2,r2,4
   10274:	e0fffe17 	ldw	r3,-8(fp)
   10278:	10c00035 	stwio	r3,0(r2)
}
   1027c:	e037883a 	mov	sp,fp
   10280:	df000017 	ldw	fp,0(sp)
   10284:	dec00104 	addi	sp,sp,4
   10288:	f800283a 	ret

0001028c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1028c:	defffa04 	addi	sp,sp,-24
   10290:	dfc00515 	stw	ra,20(sp)
   10294:	df000415 	stw	fp,16(sp)
   10298:	df000404 	addi	fp,sp,16
   1029c:	e13ffd15 	stw	r4,-12(fp)
   102a0:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800a17 	ldw	r2,40(r2)
   102ac:	e0fffe03 	ldbu	r3,-8(fp)
   102b0:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   102b4:	e0bffd17 	ldw	r2,-12(fp)
   102b8:	10800a17 	ldw	r2,40(r2)
   102bc:	10800104 	addi	r2,r2,4
   102c0:	10800037 	ldwio	r2,0(r2)
   102c4:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
   102c8:	e13ffc17 	ldw	r4,-16(fp)
   102cc:	001004c0 	call	1004c <read_CE_bit>
   102d0:	10803fcc 	andi	r2,r2,255
   102d4:	1005003a 	cmpeq	r2,r2,zero
   102d8:	1000031e 	bne	r2,zero,102e8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   102dc:	00bffec4 	movi	r2,-5
   102e0:	e0bfff15 	stw	r2,-4(fp)
   102e4:	00000106 	br	102ec <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   102e8:	e03fff15 	stw	zero,-4(fp)
   102ec:	e0bfff17 	ldw	r2,-4(fp)
}
   102f0:	e037883a 	mov	sp,fp
   102f4:	dfc00117 	ldw	ra,4(sp)
   102f8:	df000017 	ldw	fp,0(sp)
   102fc:	dec00204 	addi	sp,sp,8
   10300:	f800283a 	ret

00010304 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   10304:	defffb04 	addi	sp,sp,-20
   10308:	dfc00415 	stw	ra,16(sp)
   1030c:	df000315 	stw	fp,12(sp)
   10310:	df000304 	addi	fp,sp,12
   10314:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
   10318:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
   1031c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   10320:	e17ffd44 	addi	r5,fp,-11
   10324:	e13ffe17 	ldw	r4,-8(fp)
   10328:	00103e00 	call	103e0 <alt_up_ps2_read_data_byte_timeout>
   1032c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
   10330:	e0bffd03 	ldbu	r2,-12(fp)
   10334:	1004c03a 	cmpne	r2,r2,zero
   10338:	1000061e 	bne	r2,zero,10354 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1033c:	e0bffd43 	ldbu	r2,-11(fp)
   10340:	10803fcc 	andi	r2,r2,255
   10344:	10803e98 	cmpnei	r2,r2,250
   10348:	103ff51e 	bne	r2,zero,10320 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   1034c:	e03fff15 	stw	zero,-4(fp)
   10350:	00000206 	br	1035c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
   10354:	e0bffd03 	ldbu	r2,-12(fp)
   10358:	e0bfff15 	stw	r2,-4(fp)
   1035c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   10360:	e037883a 	mov	sp,fp
   10364:	dfc00117 	ldw	ra,4(sp)
   10368:	df000017 	ldw	fp,0(sp)
   1036c:	dec00204 	addi	sp,sp,8
   10370:	f800283a 	ret

00010374 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   10374:	defff904 	addi	sp,sp,-28
   10378:	dfc00615 	stw	ra,24(sp)
   1037c:	df000515 	stw	fp,20(sp)
   10380:	df000504 	addi	fp,sp,20
   10384:	e13ffd15 	stw	r4,-12(fp)
   10388:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1038c:	e17ffe03 	ldbu	r5,-8(fp)
   10390:	e13ffd17 	ldw	r4,-12(fp)
   10394:	001028c0 	call	1028c <alt_up_ps2_write_data_byte>
   10398:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1039c:	e0bffc17 	ldw	r2,-16(fp)
   103a0:	1005003a 	cmpeq	r2,r2,zero
   103a4:	1000031e 	bne	r2,zero,103b4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   103a8:	e0bffc17 	ldw	r2,-16(fp)
   103ac:	e0bfff15 	stw	r2,-4(fp)
   103b0:	00000506 	br	103c8 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   103b4:	e13ffd17 	ldw	r4,-12(fp)
   103b8:	00103040 	call	10304 <alt_up_ps2_wait_for_ack>
   103bc:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
   103c0:	e0bffb17 	ldw	r2,-20(fp)
   103c4:	e0bfff15 	stw	r2,-4(fp)
   103c8:	e0bfff17 	ldw	r2,-4(fp)
}
   103cc:	e037883a 	mov	sp,fp
   103d0:	dfc00117 	ldw	ra,4(sp)
   103d4:	df000017 	ldw	fp,0(sp)
   103d8:	dec00204 	addi	sp,sp,8
   103dc:	f800283a 	ret

000103e0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   103e0:	defff904 	addi	sp,sp,-28
   103e4:	dfc00615 	stw	ra,24(sp)
   103e8:	df000515 	stw	fp,20(sp)
   103ec:	df000504 	addi	fp,sp,20
   103f0:	e13ffd15 	stw	r4,-12(fp)
   103f4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
   103f8:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
   103fc:	e03ffb15 	stw	zero,-20(fp)
   10400:	00000006 	br	10404 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
   10404:	e0bffb17 	ldw	r2,-20(fp)
   10408:	10800044 	addi	r2,r2,1
   1040c:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   10410:	e0bffd17 	ldw	r2,-12(fp)
   10414:	10800a17 	ldw	r2,40(r2)
   10418:	10800037 	ldwio	r2,0(r2)
   1041c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
   10420:	e13ffc17 	ldw	r4,-16(fp)
   10424:	00100b40 	call	100b4 <read_data_valid>
   10428:	10803fcc 	andi	r2,r2,255
   1042c:	1005003a 	cmpeq	r2,r2,zero
   10430:	1000071e 	bne	r2,zero,10450 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
   10434:	e13ffc17 	ldw	r4,-16(fp)
   10438:	00100e80 	call	100e8 <read_data_byte>
   1043c:	1007883a 	mov	r3,r2
   10440:	e0bffe17 	ldw	r2,-8(fp)
   10444:	10c00005 	stb	r3,0(r2)
			return 0;
   10448:	e03fff15 	stw	zero,-4(fp)
   1044c:	00000a06 	br	10478 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   10450:	e0bffd17 	ldw	r2,-12(fp)
   10454:	10800c17 	ldw	r2,48(r2)
   10458:	1005003a 	cmpeq	r2,r2,zero
   1045c:	103fe91e 	bne	r2,zero,10404 <alt_up_ps2_read_data_byte_timeout+0x24>
   10460:	e0bffd17 	ldw	r2,-12(fp)
   10464:	10c00c17 	ldw	r3,48(r2)
   10468:	e0bffb17 	ldw	r2,-20(fp)
   1046c:	18bfe52e 	bgeu	r3,r2,10404 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
   10470:	00bfe304 	movi	r2,-116
   10474:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
   10478:	e0bfff17 	ldw	r2,-4(fp)
}
   1047c:	e037883a 	mov	sp,fp
   10480:	dfc00117 	ldw	ra,4(sp)
   10484:	df000017 	ldw	fp,0(sp)
   10488:	dec00204 	addi	sp,sp,8
   1048c:	f800283a 	ret

00010490 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   10490:	defffa04 	addi	sp,sp,-24
   10494:	dfc00515 	stw	ra,20(sp)
   10498:	df000415 	stw	fp,16(sp)
   1049c:	df000404 	addi	fp,sp,16
   104a0:	e13ffd15 	stw	r4,-12(fp)
   104a4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
   104a8:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   104ac:	e0bffd17 	ldw	r2,-12(fp)
   104b0:	10800a17 	ldw	r2,40(r2)
   104b4:	10800037 	ldwio	r2,0(r2)
   104b8:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
   104bc:	e13ffc17 	ldw	r4,-16(fp)
   104c0:	00100b40 	call	100b4 <read_data_valid>
   104c4:	10803fcc 	andi	r2,r2,255
   104c8:	1005003a 	cmpeq	r2,r2,zero
   104cc:	1000071e 	bne	r2,zero,104ec <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
   104d0:	e13ffc17 	ldw	r4,-16(fp)
   104d4:	00100e80 	call	100e8 <read_data_byte>
   104d8:	1007883a 	mov	r3,r2
   104dc:	e0bffe17 	ldw	r2,-8(fp)
   104e0:	10c00005 	stb	r3,0(r2)
		return 0;
   104e4:	e03fff15 	stw	zero,-4(fp)
   104e8:	00000206 	br	104f4 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
   104ec:	00bfffc4 	movi	r2,-1
   104f0:	e0bfff15 	stw	r2,-4(fp)
   104f4:	e0bfff17 	ldw	r2,-4(fp)
}
   104f8:	e037883a 	mov	sp,fp
   104fc:	dfc00117 	ldw	ra,4(sp)
   10500:	df000017 	ldw	fp,0(sp)
   10504:	dec00204 	addi	sp,sp,8
   10508:	f800283a 	ret

0001050c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1050c:	defffb04 	addi	sp,sp,-20
   10510:	dfc00415 	stw	ra,16(sp)
   10514:	df000315 	stw	fp,12(sp)
   10518:	df000304 	addi	fp,sp,12
   1051c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   10520:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
   10524:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   10528:	e0bfff17 	ldw	r2,-4(fp)
   1052c:	10800a17 	ldw	r2,40(r2)
   10530:	10800037 	ldwio	r2,0(r2)
   10534:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   10538:	e13ffd17 	ldw	r4,-12(fp)
   1053c:	00100800 	call	10080 <read_num_bytes_available>
   10540:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
   10544:	e0bffe0b 	ldhu	r2,-8(fp)
   10548:	1004c03a 	cmpne	r2,r2,zero
   1054c:	103ff61e 	bne	r2,zero,10528 <alt_up_ps2_clear_fifo+0x1c>
}
   10550:	e037883a 	mov	sp,fp
   10554:	dfc00117 	ldw	ra,4(sp)
   10558:	df000017 	ldw	fp,0(sp)
   1055c:	dec00204 	addi	sp,sp,8
   10560:	f800283a 	ret

00010564 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   10564:	defff704 	addi	sp,sp,-36
   10568:	dfc00815 	stw	ra,32(sp)
   1056c:	df000715 	stw	fp,28(sp)
   10570:	df000704 	addi	fp,sp,28
   10574:	e13ffc15 	stw	r4,-16(fp)
   10578:	e17ffd15 	stw	r5,-12(fp)
   1057c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   10580:	e0bffc17 	ldw	r2,-16(fp)
   10584:	10800017 	ldw	r2,0(r2)
   10588:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1058c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   10590:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
   10594:	e0fff917 	ldw	r3,-28(fp)
   10598:	e0bffe17 	ldw	r2,-8(fp)
   1059c:	18bffd16 	blt	r3,r2,10594 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
   105a0:	e17ffd17 	ldw	r5,-12(fp)
   105a4:	e0bffd17 	ldw	r2,-12(fp)
   105a8:	10800044 	addi	r2,r2,1
   105ac:	e0bffd15 	stw	r2,-12(fp)
   105b0:	e13ffb17 	ldw	r4,-20(fp)
   105b4:	00103e00 	call	103e0 <alt_up_ps2_read_data_byte_timeout>
   105b8:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   105bc:	e0bffa17 	ldw	r2,-24(fp)
   105c0:	1005003a 	cmpeq	r2,r2,zero
   105c4:	1000031e 	bne	r2,zero,105d4 <alt_up_ps2_read_fd+0x70>
			return count;
   105c8:	e0bff917 	ldw	r2,-28(fp)
   105cc:	e0bfff15 	stw	r2,-4(fp)
   105d0:	00000506 	br	105e8 <alt_up_ps2_read_fd+0x84>
		count++;
   105d4:	e0bff917 	ldw	r2,-28(fp)
   105d8:	10800044 	addi	r2,r2,1
   105dc:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
   105e0:	e0bff917 	ldw	r2,-28(fp)
   105e4:	e0bfff15 	stw	r2,-4(fp)
   105e8:	e0bfff17 	ldw	r2,-4(fp)
}
   105ec:	e037883a 	mov	sp,fp
   105f0:	dfc00117 	ldw	ra,4(sp)
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00204 	addi	sp,sp,8
   105fc:	f800283a 	ret

00010600 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   10600:	defff704 	addi	sp,sp,-36
   10604:	dfc00815 	stw	ra,32(sp)
   10608:	df000715 	stw	fp,28(sp)
   1060c:	df000704 	addi	fp,sp,28
   10610:	e13ffc15 	stw	r4,-16(fp)
   10614:	e17ffd15 	stw	r5,-12(fp)
   10618:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1061c:	e0bffc17 	ldw	r2,-16(fp)
   10620:	10800017 	ldw	r2,0(r2)
   10624:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   10628:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
   1062c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
   10630:	00001206 	br	1067c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   10634:	e0bffd17 	ldw	r2,-12(fp)
   10638:	10800003 	ldbu	r2,0(r2)
   1063c:	11403fcc 	andi	r5,r2,255
   10640:	e0bffd17 	ldw	r2,-12(fp)
   10644:	10800044 	addi	r2,r2,1
   10648:	e0bffd15 	stw	r2,-12(fp)
   1064c:	e13ffb17 	ldw	r4,-20(fp)
   10650:	001028c0 	call	1028c <alt_up_ps2_write_data_byte>
   10654:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
   10658:	e0bffa17 	ldw	r2,-24(fp)
   1065c:	1005003a 	cmpeq	r2,r2,zero
   10660:	1000031e 	bne	r2,zero,10670 <alt_up_ps2_write_fd+0x70>
			return count;
   10664:	e0bff917 	ldw	r2,-28(fp)
   10668:	e0bfff15 	stw	r2,-4(fp)
   1066c:	00000806 	br	10690 <alt_up_ps2_write_fd+0x90>
		count++;
   10670:	e0bff917 	ldw	r2,-28(fp)
   10674:	10800044 	addi	r2,r2,1
   10678:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1067c:	e0fff917 	ldw	r3,-28(fp)
   10680:	e0bffe17 	ldw	r2,-8(fp)
   10684:	18bfeb16 	blt	r3,r2,10634 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   10688:	e0bff917 	ldw	r2,-28(fp)
   1068c:	e0bfff15 	stw	r2,-4(fp)
   10690:	e0bfff17 	ldw	r2,-4(fp)
}
   10694:	e037883a 	mov	sp,fp
   10698:	dfc00117 	ldw	ra,4(sp)
   1069c:	df000017 	ldw	fp,0(sp)
   106a0:	dec00204 	addi	sp,sp,8
   106a4:	f800283a 	ret

000106a8 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   106a8:	defffc04 	addi	sp,sp,-16
   106ac:	dfc00315 	stw	ra,12(sp)
   106b0:	df000215 	stw	fp,8(sp)
   106b4:	df000204 	addi	fp,sp,8
   106b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   106bc:	e13fff17 	ldw	r4,-4(fp)
   106c0:	01400074 	movhi	r5,1
   106c4:	29582504 	addi	r5,r5,24724
   106c8:	001263c0 	call	1263c <alt_find_dev>
   106cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   106d0:	e0bffe17 	ldw	r2,-8(fp)
}
   106d4:	e037883a 	mov	sp,fp
   106d8:	dfc00117 	ldw	ra,4(sp)
   106dc:	df000017 	ldw	fp,0(sp)
   106e0:	dec00204 	addi	sp,sp,8
   106e4:	f800283a 	ret

000106e8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   106e8:	defffd04 	addi	sp,sp,-12
   106ec:	df000215 	stw	fp,8(sp)
   106f0:	df000204 	addi	fp,sp,8
   106f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   106f8:	e0bfff17 	ldw	r2,-4(fp)
   106fc:	10800a17 	ldw	r2,40(r2)
   10700:	10800104 	addi	r2,r2,4
   10704:	10800037 	ldwio	r2,0(r2)
   10708:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1070c:	e0bffe17 	ldw	r2,-8(fp)
   10710:	10800054 	ori	r2,r2,1
   10714:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   10718:	e0bfff17 	ldw	r2,-4(fp)
   1071c:	10800a17 	ldw	r2,40(r2)
   10720:	10800104 	addi	r2,r2,4
   10724:	e0fffe17 	ldw	r3,-8(fp)
   10728:	10c00035 	stwio	r3,0(r2)
}
   1072c:	e037883a 	mov	sp,fp
   10730:	df000017 	ldw	fp,0(sp)
   10734:	dec00104 	addi	sp,sp,4
   10738:	f800283a 	ret

0001073c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1073c:	defffd04 	addi	sp,sp,-12
   10740:	df000215 	stw	fp,8(sp)
   10744:	df000204 	addi	fp,sp,8
   10748:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1074c:	e0bfff17 	ldw	r2,-4(fp)
   10750:	10800a17 	ldw	r2,40(r2)
   10754:	10800104 	addi	r2,r2,4
   10758:	10800037 	ldwio	r2,0(r2)
   1075c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   10760:	e0fffe17 	ldw	r3,-8(fp)
   10764:	00bfff84 	movi	r2,-2
   10768:	1884703a 	and	r2,r3,r2
   1076c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   10770:	e0bfff17 	ldw	r2,-4(fp)
   10774:	10800a17 	ldw	r2,40(r2)
   10778:	10800104 	addi	r2,r2,4
   1077c:	e0fffe17 	ldw	r3,-8(fp)
   10780:	10c00035 	stwio	r3,0(r2)
}
   10784:	e037883a 	mov	sp,fp
   10788:	df000017 	ldw	fp,0(sp)
   1078c:	dec00104 	addi	sp,sp,4
   10790:	f800283a 	ret

00010794 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   10794:	defffd04 	addi	sp,sp,-12
   10798:	df000215 	stw	fp,8(sp)
   1079c:	df000204 	addi	fp,sp,8
   107a0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   107a4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   107a8:	e0bfff17 	ldw	r2,-4(fp)
   107ac:	10800a17 	ldw	r2,40(r2)
   107b0:	10800084 	addi	r2,r2,2
   107b4:	1080002b 	ldhuio	r2,0(r2)
   107b8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   107bc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   107c0:	e037883a 	mov	sp,fp
   107c4:	df000017 	ldw	fp,0(sp)
   107c8:	dec00104 	addi	sp,sp,4
   107cc:	f800283a 	ret

000107d0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   107d0:	defffd04 	addi	sp,sp,-12
   107d4:	df000215 	stw	fp,8(sp)
   107d8:	df000204 	addi	fp,sp,8
   107dc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   107e0:	e0bfff17 	ldw	r2,-4(fp)
   107e4:	10800a17 	ldw	r2,40(r2)
   107e8:	10800104 	addi	r2,r2,4
   107ec:	10800037 	ldwio	r2,0(r2)
   107f0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   107f4:	e0bffe17 	ldw	r2,-8(fp)
   107f8:	10bfffec 	andhi	r2,r2,65535
   107fc:	1004d43a 	srli	r2,r2,16
}
   10800:	e037883a 	mov	sp,fp
   10804:	df000017 	ldw	fp,0(sp)
   10808:	dec00104 	addi	sp,sp,4
   1080c:	f800283a 	ret

00010810 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   10810:	defffc04 	addi	sp,sp,-16
   10814:	df000315 	stw	fp,12(sp)
   10818:	df000304 	addi	fp,sp,12
   1081c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   10820:	e0bffe17 	ldw	r2,-8(fp)
   10824:	1080800c 	andi	r2,r2,512
   10828:	1004d27a 	srli	r2,r2,9
   1082c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
   10830:	e0bffd17 	ldw	r2,-12(fp)
   10834:	1005003a 	cmpeq	r2,r2,zero
   10838:	1000031e 	bne	r2,zero,10848 <alt_up_rs232_check_parity+0x38>
   1083c:	00bfffc4 	movi	r2,-1
   10840:	e0bfff15 	stw	r2,-4(fp)
   10844:	00000106 	br	1084c <alt_up_rs232_check_parity+0x3c>
   10848:	e03fff15 	stw	zero,-4(fp)
   1084c:	e0bfff17 	ldw	r2,-4(fp)
}
   10850:	e037883a 	mov	sp,fp
   10854:	df000017 	ldw	fp,0(sp)
   10858:	dec00104 	addi	sp,sp,4
   1085c:	f800283a 	ret

00010860 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   10860:	defffc04 	addi	sp,sp,-16
   10864:	df000315 	stw	fp,12(sp)
   10868:	df000304 	addi	fp,sp,12
   1086c:	e13ffe15 	stw	r4,-8(fp)
   10870:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   10874:	e0bffe17 	ldw	r2,-8(fp)
   10878:	10800a17 	ldw	r2,40(r2)
   1087c:	10800037 	ldwio	r2,0(r2)
   10880:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   10884:	e0bffe17 	ldw	r2,-8(fp)
   10888:	10800a17 	ldw	r2,40(r2)
   1088c:	e0ffff03 	ldbu	r3,-4(fp)
   10890:	10c00035 	stwio	r3,0(r2)
	return 0;
   10894:	0005883a 	mov	r2,zero
}
   10898:	e037883a 	mov	sp,fp
   1089c:	df000017 	ldw	fp,0(sp)
   108a0:	dec00104 	addi	sp,sp,4
   108a4:	f800283a 	ret

000108a8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   108a8:	defffa04 	addi	sp,sp,-24
   108ac:	dfc00515 	stw	ra,20(sp)
   108b0:	df000415 	stw	fp,16(sp)
   108b4:	df000404 	addi	fp,sp,16
   108b8:	e13ffd15 	stw	r4,-12(fp)
   108bc:	e17ffe15 	stw	r5,-8(fp)
   108c0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   108c4:	e0bffd17 	ldw	r2,-12(fp)
   108c8:	10800a17 	ldw	r2,40(r2)
   108cc:	10800037 	ldwio	r2,0(r2)
   108d0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   108d4:	e0bffc17 	ldw	r2,-16(fp)
   108d8:	1007883a 	mov	r3,r2
   108dc:	e0bffe17 	ldw	r2,-8(fp)
   108e0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   108e4:	e13ffc17 	ldw	r4,-16(fp)
   108e8:	00108100 	call	10810 <alt_up_rs232_check_parity>
   108ec:	1007883a 	mov	r3,r2
   108f0:	e0bfff17 	ldw	r2,-4(fp)
   108f4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   108f8:	e0bffc17 	ldw	r2,-16(fp)
   108fc:	10a0000c 	andi	r2,r2,32768
   10900:	1004d3fa 	srli	r2,r2,15
   10904:	10bfffc4 	addi	r2,r2,-1
}
   10908:	e037883a 	mov	sp,fp
   1090c:	dfc00117 	ldw	ra,4(sp)
   10910:	df000017 	ldw	fp,0(sp)
   10914:	dec00204 	addi	sp,sp,8
   10918:	f800283a 	ret

0001091c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1091c:	defff804 	addi	sp,sp,-32
   10920:	dfc00715 	stw	ra,28(sp)
   10924:	df000615 	stw	fp,24(sp)
   10928:	df000604 	addi	fp,sp,24
   1092c:	e13ffd15 	stw	r4,-12(fp)
   10930:	e17ffe15 	stw	r5,-8(fp)
   10934:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   10938:	e0bffd17 	ldw	r2,-12(fp)
   1093c:	10800017 	ldw	r2,0(r2)
   10940:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   10944:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   10948:	00000c06 	br	1097c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
   1094c:	e17ffe17 	ldw	r5,-8(fp)
   10950:	e0bffe17 	ldw	r2,-8(fp)
   10954:	10800044 	addi	r2,r2,1
   10958:	e0bffe15 	stw	r2,-8(fp)
   1095c:	e1bffc04 	addi	r6,fp,-16
   10960:	e13ffb17 	ldw	r4,-20(fp)
   10964:	00108a80 	call	108a8 <alt_up_rs232_read_data>
   10968:	1004c03a 	cmpne	r2,r2,zero
   1096c:	1000091e 	bne	r2,zero,10994 <alt_up_rs232_read_fd+0x78>
			count++;
   10970:	e0bffa17 	ldw	r2,-24(fp)
   10974:	10800044 	addi	r2,r2,1
   10978:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1097c:	e0bfff17 	ldw	r2,-4(fp)
   10980:	10bfffc4 	addi	r2,r2,-1
   10984:	e0bfff15 	stw	r2,-4(fp)
   10988:	e0bfff17 	ldw	r2,-4(fp)
   1098c:	10bfffd8 	cmpnei	r2,r2,-1
   10990:	103fee1e 	bne	r2,zero,1094c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   10994:	e0bffa17 	ldw	r2,-24(fp)
}
   10998:	e037883a 	mov	sp,fp
   1099c:	dfc00117 	ldw	ra,4(sp)
   109a0:	df000017 	ldw	fp,0(sp)
   109a4:	dec00204 	addi	sp,sp,8
   109a8:	f800283a 	ret

000109ac <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   109ac:	defff904 	addi	sp,sp,-28
   109b0:	dfc00615 	stw	ra,24(sp)
   109b4:	df000515 	stw	fp,20(sp)
   109b8:	df000504 	addi	fp,sp,20
   109bc:	e13ffd15 	stw	r4,-12(fp)
   109c0:	e17ffe15 	stw	r5,-8(fp)
   109c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   109c8:	e0bffd17 	ldw	r2,-12(fp)
   109cc:	10800017 	ldw	r2,0(r2)
   109d0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   109d4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   109d8:	00000d06 	br	10a10 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   109dc:	e0bffe17 	ldw	r2,-8(fp)
   109e0:	10800003 	ldbu	r2,0(r2)
   109e4:	11403fcc 	andi	r5,r2,255
   109e8:	e13ffc17 	ldw	r4,-16(fp)
   109ec:	00108600 	call	10860 <alt_up_rs232_write_data>
   109f0:	1004c03a 	cmpne	r2,r2,zero
   109f4:	10000c1e 	bne	r2,zero,10a28 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
   109f8:	e0bffb17 	ldw	r2,-20(fp)
   109fc:	10800044 	addi	r2,r2,1
   10a00:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   10a04:	e0bffe17 	ldw	r2,-8(fp)
   10a08:	10800044 	addi	r2,r2,1
   10a0c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   10a10:	e0bfff17 	ldw	r2,-4(fp)
   10a14:	10bfffc4 	addi	r2,r2,-1
   10a18:	e0bfff15 	stw	r2,-4(fp)
   10a1c:	e0bfff17 	ldw	r2,-4(fp)
   10a20:	10bfffd8 	cmpnei	r2,r2,-1
   10a24:	103fed1e 	bne	r2,zero,109dc <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
   10a28:	e0bffb17 	ldw	r2,-20(fp)
}
   10a2c:	e037883a 	mov	sp,fp
   10a30:	dfc00117 	ldw	ra,4(sp)
   10a34:	df000017 	ldw	fp,0(sp)
   10a38:	dec00204 	addi	sp,sp,8
   10a3c:	f800283a 	ret

00010a40 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   10a40:	defffc04 	addi	sp,sp,-16
   10a44:	dfc00315 	stw	ra,12(sp)
   10a48:	df000215 	stw	fp,8(sp)
   10a4c:	df000204 	addi	fp,sp,8
   10a50:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   10a54:	e13fff17 	ldw	r4,-4(fp)
   10a58:	01400074 	movhi	r5,1
   10a5c:	29582504 	addi	r5,r5,24724
   10a60:	001263c0 	call	1263c <alt_find_dev>
   10a64:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   10a68:	e0bffe17 	ldw	r2,-8(fp)
}
   10a6c:	e037883a 	mov	sp,fp
   10a70:	dfc00117 	ldw	ra,4(sp)
   10a74:	df000017 	ldw	fp,0(sp)
   10a78:	dec00204 	addi	sp,sp,8
   10a7c:	f800283a 	ret

00010a80 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   10a80:	defffc04 	addi	sp,sp,-16
   10a84:	dfc00315 	stw	ra,12(sp)
   10a88:	df000215 	stw	fp,8(sp)
   10a8c:	df000204 	addi	fp,sp,8
   10a90:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   10a94:	e0bfff17 	ldw	r2,-4(fp)
   10a98:	10800217 	ldw	r2,8(r2)
   10a9c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   10aa0:	00000c06 	br	10ad4 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   10aa4:	e13ffe17 	ldw	r4,-8(fp)
   10aa8:	01400074 	movhi	r5,1
   10aac:	29500204 	addi	r5,r5,16392
   10ab0:	000a7100 	call	a710 <strcmp>
   10ab4:	1004c03a 	cmpne	r2,r2,zero
   10ab8:	1000031e 	bne	r2,zero,10ac8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
   10abc:	e0bffe17 	ldw	r2,-8(fp)
   10ac0:	10000005 	stb	zero,0(r2)
			break;
   10ac4:	00000a06 	br	10af0 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   10ac8:	e0bffe17 	ldw	r2,-8(fp)
   10acc:	10800044 	addi	r2,r2,1
   10ad0:	e0bffe15 	stw	r2,-8(fp)
   10ad4:	e0bffe17 	ldw	r2,-8(fp)
   10ad8:	10800003 	ldbu	r2,0(r2)
   10adc:	10803fcc 	andi	r2,r2,255
   10ae0:	1080201c 	xori	r2,r2,128
   10ae4:	10bfe004 	addi	r2,r2,-128
   10ae8:	1004c03a 	cmpne	r2,r2,zero
   10aec:	103fed1e 	bne	r2,zero,10aa4 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
   10af0:	e037883a 	mov	sp,fp
   10af4:	dfc00117 	ldw	ra,4(sp)
   10af8:	df000017 	ldw	fp,0(sp)
   10afc:	dec00204 	addi	sp,sp,8
   10b00:	f800283a 	ret

00010b04 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   10b04:	defffc04 	addi	sp,sp,-16
   10b08:	dfc00315 	stw	ra,12(sp)
   10b0c:	df000215 	stw	fp,8(sp)
   10b10:	df000204 	addi	fp,sp,8
   10b14:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   10b18:	e13fff17 	ldw	r4,-4(fp)
   10b1c:	01400074 	movhi	r5,1
   10b20:	29582504 	addi	r5,r5,24724
   10b24:	001263c0 	call	1263c <alt_find_dev>
   10b28:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   10b2c:	e0bffe17 	ldw	r2,-8(fp)
}
   10b30:	e037883a 	mov	sp,fp
   10b34:	dfc00117 	ldw	ra,4(sp)
   10b38:	df000017 	ldw	fp,0(sp)
   10b3c:	dec00204 	addi	sp,sp,8
   10b40:	f800283a 	ret

00010b44 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   10b44:	defff904 	addi	sp,sp,-28
   10b48:	df000615 	stw	fp,24(sp)
   10b4c:	df000604 	addi	fp,sp,24
   10b50:	e13ffb15 	stw	r4,-20(fp)
   10b54:	e1bffd15 	stw	r6,-12(fp)
   10b58:	e1fffe15 	stw	r7,-8(fp)
   10b5c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10b60:	e0bffb17 	ldw	r2,-20(fp)
   10b64:	10c00c17 	ldw	r3,48(r2)
   10b68:	e0bffd17 	ldw	r2,-12(fp)
   10b6c:	10c0042e 	bgeu	r2,r3,10b80 <alt_up_char_buffer_draw+0x3c>
   10b70:	e0bffb17 	ldw	r2,-20(fp)
   10b74:	10c00d17 	ldw	r3,52(r2)
   10b78:	e0bffe17 	ldw	r2,-8(fp)
   10b7c:	10c00336 	bltu	r2,r3,10b8c <alt_up_char_buffer_draw+0x48>
		return -1;
   10b80:	00bfffc4 	movi	r2,-1
   10b84:	e0bfff15 	stw	r2,-4(fp)
   10b88:	00001d06 	br	10c00 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   10b8c:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   10b90:	e0bffb17 	ldw	r2,-20(fp)
   10b94:	10c00f17 	ldw	r3,60(r2)
   10b98:	e0bffd17 	ldw	r2,-12(fp)
   10b9c:	1886703a 	and	r3,r3,r2
   10ba0:	e0bffb17 	ldw	r2,-20(fp)
   10ba4:	10800e17 	ldw	r2,56(r2)
   10ba8:	1886983a 	sll	r3,r3,r2
   10bac:	e0bffa17 	ldw	r2,-24(fp)
   10bb0:	10c4b03a 	or	r2,r2,r3
   10bb4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   10bb8:	e0bffb17 	ldw	r2,-20(fp)
   10bbc:	10c01117 	ldw	r3,68(r2)
   10bc0:	e0bffe17 	ldw	r2,-8(fp)
   10bc4:	1886703a 	and	r3,r3,r2
   10bc8:	e0bffb17 	ldw	r2,-20(fp)
   10bcc:	10801017 	ldw	r2,64(r2)
   10bd0:	1886983a 	sll	r3,r3,r2
   10bd4:	e0bffa17 	ldw	r2,-24(fp)
   10bd8:	10c4b03a 	or	r2,r2,r3
   10bdc:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   10be0:	e0bffb17 	ldw	r2,-20(fp)
   10be4:	10800b17 	ldw	r2,44(r2)
   10be8:	1007883a 	mov	r3,r2
   10bec:	e0bffa17 	ldw	r2,-24(fp)
   10bf0:	1885883a 	add	r2,r3,r2
   10bf4:	e0fffc03 	ldbu	r3,-16(fp)
   10bf8:	10c00025 	stbio	r3,0(r2)

	return 0;
   10bfc:	e03fff15 	stw	zero,-4(fp)
   10c00:	e0bfff17 	ldw	r2,-4(fp)
}
   10c04:	e037883a 	mov	sp,fp
   10c08:	df000017 	ldw	fp,0(sp)
   10c0c:	dec00104 	addi	sp,sp,4
   10c10:	f800283a 	ret

00010c14 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   10c14:	defff904 	addi	sp,sp,-28
   10c18:	df000615 	stw	fp,24(sp)
   10c1c:	df000604 	addi	fp,sp,24
   10c20:	e13ffb15 	stw	r4,-20(fp)
   10c24:	e17ffc15 	stw	r5,-16(fp)
   10c28:	e1bffd15 	stw	r6,-12(fp)
   10c2c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   10c30:	e0bffb17 	ldw	r2,-20(fp)
   10c34:	10c00c17 	ldw	r3,48(r2)
   10c38:	e0bffd17 	ldw	r2,-12(fp)
   10c3c:	10c0042e 	bgeu	r2,r3,10c50 <alt_up_char_buffer_string+0x3c>
   10c40:	e0bffb17 	ldw	r2,-20(fp)
   10c44:	10c00d17 	ldw	r3,52(r2)
   10c48:	e0bffe17 	ldw	r2,-8(fp)
   10c4c:	10c00336 	bltu	r2,r3,10c5c <alt_up_char_buffer_string+0x48>
		return -1;
   10c50:	00bfffc4 	movi	r2,-1
   10c54:	e0bfff15 	stw	r2,-4(fp)
   10c58:	00002e06 	br	10d14 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
   10c5c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   10c60:	e0bffb17 	ldw	r2,-20(fp)
   10c64:	10801017 	ldw	r2,64(r2)
   10c68:	1007883a 	mov	r3,r2
   10c6c:	e0bffe17 	ldw	r2,-8(fp)
   10c70:	10c6983a 	sll	r3,r2,r3
   10c74:	e0bffd17 	ldw	r2,-12(fp)
   10c78:	1885883a 	add	r2,r3,r2
   10c7c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
   10c80:	00001c06 	br	10cf4 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   10c84:	e0bffb17 	ldw	r2,-20(fp)
   10c88:	10800b17 	ldw	r2,44(r2)
   10c8c:	1007883a 	mov	r3,r2
   10c90:	e0bffa17 	ldw	r2,-24(fp)
   10c94:	1889883a 	add	r4,r3,r2
   10c98:	e0bffc17 	ldw	r2,-16(fp)
   10c9c:	10800003 	ldbu	r2,0(r2)
   10ca0:	10c03fcc 	andi	r3,r2,255
   10ca4:	18c0201c 	xori	r3,r3,128
   10ca8:	18ffe004 	addi	r3,r3,-128
   10cac:	2005883a 	mov	r2,r4
   10cb0:	10c00025 	stbio	r3,0(r2)
		++ptr;
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10800044 	addi	r2,r2,1
   10cbc:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
   10cc0:	e0bffd17 	ldw	r2,-12(fp)
   10cc4:	10800044 	addi	r2,r2,1
   10cc8:	e0bffd15 	stw	r2,-12(fp)
   10ccc:	e0bffb17 	ldw	r2,-20(fp)
   10cd0:	10c00c17 	ldw	r3,48(r2)
   10cd4:	e0bffd17 	ldw	r2,-12(fp)
   10cd8:	10c00336 	bltu	r2,r3,10ce8 <alt_up_char_buffer_string+0xd4>
			return -1;
   10cdc:	00bfffc4 	movi	r2,-1
   10ce0:	e0bfff15 	stw	r2,-4(fp)
   10ce4:	00000b06 	br	10d14 <alt_up_char_buffer_string+0x100>
		++offset;
   10ce8:	e0bffa17 	ldw	r2,-24(fp)
   10cec:	10800044 	addi	r2,r2,1
   10cf0:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   10cf4:	e0bffc17 	ldw	r2,-16(fp)
   10cf8:	10800003 	ldbu	r2,0(r2)
   10cfc:	10803fcc 	andi	r2,r2,255
   10d00:	1080201c 	xori	r2,r2,128
   10d04:	10bfe004 	addi	r2,r2,-128
   10d08:	1004c03a 	cmpne	r2,r2,zero
   10d0c:	103fdd1e 	bne	r2,zero,10c84 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   10d10:	e03fff15 	stw	zero,-4(fp)
   10d14:	e0bfff17 	ldw	r2,-4(fp)
}
   10d18:	e037883a 	mov	sp,fp
   10d1c:	df000017 	ldw	fp,0(sp)
   10d20:	dec00104 	addi	sp,sp,4
   10d24:	f800283a 	ret

00010d28 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   10d28:	defffe04 	addi	sp,sp,-8
   10d2c:	df000115 	stw	fp,4(sp)
   10d30:	df000104 	addi	fp,sp,4
   10d34:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   10d38:	e0bfff17 	ldw	r2,-4(fp)
   10d3c:	10800a17 	ldw	r2,40(r2)
   10d40:	10800084 	addi	r2,r2,2
   10d44:	1007883a 	mov	r3,r2
   10d48:	00800044 	movi	r2,1
   10d4c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   10d50:	e0bfff17 	ldw	r2,-4(fp)
   10d54:	10800a17 	ldw	r2,40(r2)
   10d58:	10800084 	addi	r2,r2,2
   10d5c:	10800023 	ldbuio	r2,0(r2)
   10d60:	1080004c 	andi	r2,r2,1
   10d64:	10803fcc 	andi	r2,r2,255
   10d68:	1004c03a 	cmpne	r2,r2,zero
   10d6c:	103ff81e 	bne	r2,zero,10d50 <alt_up_char_buffer_clear+0x28>
	return 0;
   10d70:	0005883a 	mov	r2,zero
}
   10d74:	e037883a 	mov	sp,fp
   10d78:	df000017 	ldw	fp,0(sp)
   10d7c:	dec00104 	addi	sp,sp,4
   10d80:	f800283a 	ret

00010d84 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   10d84:	defffc04 	addi	sp,sp,-16
   10d88:	dfc00315 	stw	ra,12(sp)
   10d8c:	df000215 	stw	fp,8(sp)
   10d90:	df000204 	addi	fp,sp,8
   10d94:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   10d98:	e13fff17 	ldw	r4,-4(fp)
   10d9c:	01400074 	movhi	r5,1
   10da0:	29582504 	addi	r5,r5,24724
   10da4:	001263c0 	call	1263c <alt_find_dev>
   10da8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   10dac:	e0bffe17 	ldw	r2,-8(fp)
}
   10db0:	e037883a 	mov	sp,fp
   10db4:	dfc00117 	ldw	ra,4(sp)
   10db8:	df000017 	ldw	fp,0(sp)
   10dbc:	dec00204 	addi	sp,sp,8
   10dc0:	f800283a 	ret

00010dc4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   10dc4:	defff904 	addi	sp,sp,-28
   10dc8:	df000615 	stw	fp,24(sp)
   10dcc:	df000604 	addi	fp,sp,24
   10dd0:	e13ffb15 	stw	r4,-20(fp)
   10dd4:	e17ffc15 	stw	r5,-16(fp)
   10dd8:	e1bffd15 	stw	r6,-12(fp)
   10ddc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   10de0:	e0bffb17 	ldw	r2,-20(fp)
   10de4:	10c00f17 	ldw	r3,60(r2)
   10de8:	e0bffd17 	ldw	r2,-12(fp)
   10dec:	10c0042e 	bgeu	r2,r3,10e00 <alt_up_pixel_buffer_dma_draw+0x3c>
   10df0:	e0bffb17 	ldw	r2,-20(fp)
   10df4:	10c01017 	ldw	r3,64(r2)
   10df8:	e0bffe17 	ldw	r2,-8(fp)
   10dfc:	10c00336 	bltu	r2,r3,10e0c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
   10e00:	00bfffc4 	movi	r2,-1
   10e04:	e0bfff15 	stw	r2,-4(fp)
   10e08:	00005106 	br	10f50 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
   10e0c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10e10:	e0bffb17 	ldw	r2,-20(fp)
   10e14:	10800d17 	ldw	r2,52(r2)
   10e18:	1004c03a 	cmpne	r2,r2,zero
   10e1c:	1000151e 	bne	r2,zero,10e74 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   10e20:	e0bffb17 	ldw	r2,-20(fp)
   10e24:	10c01217 	ldw	r3,72(r2)
   10e28:	e0bffd17 	ldw	r2,-12(fp)
   10e2c:	1886703a 	and	r3,r3,r2
   10e30:	e0bffb17 	ldw	r2,-20(fp)
   10e34:	10801117 	ldw	r2,68(r2)
   10e38:	1886983a 	sll	r3,r3,r2
   10e3c:	e0bffa17 	ldw	r2,-24(fp)
   10e40:	10c4b03a 	or	r2,r2,r3
   10e44:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   10e48:	e0bffb17 	ldw	r2,-20(fp)
   10e4c:	10c01417 	ldw	r3,80(r2)
   10e50:	e0bffe17 	ldw	r2,-8(fp)
   10e54:	1886703a 	and	r3,r3,r2
   10e58:	e0bffb17 	ldw	r2,-20(fp)
   10e5c:	10801317 	ldw	r2,76(r2)
   10e60:	1886983a 	sll	r3,r3,r2
   10e64:	e0bffa17 	ldw	r2,-24(fp)
   10e68:	10c4b03a 	or	r2,r2,r3
   10e6c:	e0bffa15 	stw	r2,-24(fp)
   10e70:	00001706 	br	10ed0 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   10e74:	e0bffb17 	ldw	r2,-20(fp)
   10e78:	10c01217 	ldw	r3,72(r2)
   10e7c:	e0bffd17 	ldw	r2,-12(fp)
   10e80:	1886703a 	and	r3,r3,r2
   10e84:	e0bffb17 	ldw	r2,-20(fp)
   10e88:	10801117 	ldw	r2,68(r2)
   10e8c:	1886983a 	sll	r3,r3,r2
   10e90:	e0bffa17 	ldw	r2,-24(fp)
   10e94:	10c5883a 	add	r2,r2,r3
   10e98:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   10e9c:	e0bffb17 	ldw	r2,-20(fp)
   10ea0:	10c01417 	ldw	r3,80(r2)
   10ea4:	e0bffe17 	ldw	r2,-8(fp)
   10ea8:	1886703a 	and	r3,r3,r2
   10eac:	e0bffb17 	ldw	r2,-20(fp)
   10eb0:	10800f17 	ldw	r2,60(r2)
   10eb4:	1887383a 	mul	r3,r3,r2
   10eb8:	e0bffb17 	ldw	r2,-20(fp)
   10ebc:	10801117 	ldw	r2,68(r2)
   10ec0:	1886983a 	sll	r3,r3,r2
   10ec4:	e0bffa17 	ldw	r2,-24(fp)
   10ec8:	10c5883a 	add	r2,r2,r3
   10ecc:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10ed0:	e0bffb17 	ldw	r2,-20(fp)
   10ed4:	10800e17 	ldw	r2,56(r2)
   10ed8:	10800058 	cmpnei	r2,r2,1
   10edc:	1000081e 	bne	r2,zero,10f00 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10ee0:	e0bffb17 	ldw	r2,-20(fp)
   10ee4:	10800c17 	ldw	r2,48(r2)
   10ee8:	1007883a 	mov	r3,r2
   10eec:	e0bffa17 	ldw	r2,-24(fp)
   10ef0:	1885883a 	add	r2,r3,r2
   10ef4:	e0fffc17 	ldw	r3,-16(fp)
   10ef8:	10c00025 	stbio	r3,0(r2)
   10efc:	00001306 	br	10f4c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10f00:	e0bffb17 	ldw	r2,-20(fp)
   10f04:	10800e17 	ldw	r2,56(r2)
   10f08:	10800098 	cmpnei	r2,r2,2
   10f0c:	1000081e 	bne	r2,zero,10f30 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10f10:	e0bffb17 	ldw	r2,-20(fp)
   10f14:	10800c17 	ldw	r2,48(r2)
   10f18:	1007883a 	mov	r3,r2
   10f1c:	e0bffa17 	ldw	r2,-24(fp)
   10f20:	1885883a 	add	r2,r3,r2
   10f24:	e0fffc17 	ldw	r3,-16(fp)
   10f28:	10c0002d 	sthio	r3,0(r2)
   10f2c:	00000706 	br	10f4c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10f30:	e0bffb17 	ldw	r2,-20(fp)
   10f34:	10800c17 	ldw	r2,48(r2)
   10f38:	1007883a 	mov	r3,r2
   10f3c:	e0bffa17 	ldw	r2,-24(fp)
   10f40:	1885883a 	add	r2,r3,r2
   10f44:	e0fffc17 	ldw	r3,-16(fp)
   10f48:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
   10f4c:	e03fff15 	stw	zero,-4(fp)
   10f50:	e0bfff17 	ldw	r2,-4(fp)
}
   10f54:	e037883a 	mov	sp,fp
   10f58:	df000017 	ldw	fp,0(sp)
   10f5c:	dec00104 	addi	sp,sp,4
   10f60:	f800283a 	ret

00010f64 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   10f64:	defffd04 	addi	sp,sp,-12
   10f68:	df000215 	stw	fp,8(sp)
   10f6c:	df000204 	addi	fp,sp,8
   10f70:	e13ffe15 	stw	r4,-8(fp)
   10f74:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   10f78:	e0bffe17 	ldw	r2,-8(fp)
   10f7c:	10800a17 	ldw	r2,40(r2)
   10f80:	10800104 	addi	r2,r2,4
   10f84:	e0ffff17 	ldw	r3,-4(fp)
   10f88:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   10f8c:	e0bffe17 	ldw	r2,-8(fp)
   10f90:	10800a17 	ldw	r2,40(r2)
   10f94:	10800104 	addi	r2,r2,4
   10f98:	10800037 	ldwio	r2,0(r2)
   10f9c:	1007883a 	mov	r3,r2
   10fa0:	e0bffe17 	ldw	r2,-8(fp)
   10fa4:	10c00c15 	stw	r3,48(r2)
	return 0;
   10fa8:	0005883a 	mov	r2,zero
}
   10fac:	e037883a 	mov	sp,fp
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00104 	addi	sp,sp,4
   10fb8:	f800283a 	ret

00010fbc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   10fbc:	defffe04 	addi	sp,sp,-8
   10fc0:	df000115 	stw	fp,4(sp)
   10fc4:	df000104 	addi	fp,sp,4
   10fc8:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   10fcc:	e0bfff17 	ldw	r2,-4(fp)
   10fd0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   10fd4:	e0bfff17 	ldw	r2,-4(fp)
   10fd8:	10800a17 	ldw	r2,40(r2)
   10fdc:	1007883a 	mov	r3,r2
   10fe0:	00800044 	movi	r2,1
   10fe4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   10fe8:	e0bfff17 	ldw	r2,-4(fp)
   10fec:	10c00b17 	ldw	r3,44(r2)
   10ff0:	e0bfff17 	ldw	r2,-4(fp)
   10ff4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   10ff8:	e0bfff17 	ldw	r2,-4(fp)
   10ffc:	11000b15 	stw	r4,44(r2)
	return 0;
   11000:	0005883a 	mov	r2,zero
}
   11004:	e037883a 	mov	sp,fp
   11008:	df000017 	ldw	fp,0(sp)
   1100c:	dec00104 	addi	sp,sp,4
   11010:	f800283a 	ret

00011014 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   11014:	defffe04 	addi	sp,sp,-8
   11018:	df000115 	stw	fp,4(sp)
   1101c:	df000104 	addi	fp,sp,4
   11020:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   11024:	e0bfff17 	ldw	r2,-4(fp)
   11028:	10800a17 	ldw	r2,40(r2)
   1102c:	10800304 	addi	r2,r2,12
   11030:	10800037 	ldwio	r2,0(r2)
   11034:	1080004c 	andi	r2,r2,1
}
   11038:	e037883a 	mov	sp,fp
   1103c:	df000017 	ldw	fp,0(sp)
   11040:	dec00104 	addi	sp,sp,4
   11044:	f800283a 	ret

00011048 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   11048:	defff604 	addi	sp,sp,-40
   1104c:	df000915 	stw	fp,36(sp)
   11050:	df000904 	addi	fp,sp,36
   11054:	e13ff715 	stw	r4,-36(fp)
   11058:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1105c:	e0bff817 	ldw	r2,-32(fp)
   11060:	10800058 	cmpnei	r2,r2,1
   11064:	1000041e 	bne	r2,zero,11078 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
   11068:	e0bff717 	ldw	r2,-36(fp)
   1106c:	10800c17 	ldw	r2,48(r2)
   11070:	e0bfff15 	stw	r2,-4(fp)
   11074:	00000306 	br	11084 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
   11078:	e0bff717 	ldw	r2,-36(fp)
   1107c:	10800b17 	ldw	r2,44(r2)
   11080:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
   11084:	e0bff717 	ldw	r2,-36(fp)
   11088:	10800f17 	ldw	r2,60(r2)
   1108c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11090:	e0bff717 	ldw	r2,-36(fp)
   11094:	10800e17 	ldw	r2,56(r2)
   11098:	10800098 	cmpnei	r2,r2,2
   1109c:	1000051e 	bne	r2,zero,110b4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
   110a0:	e0fffe17 	ldw	r3,-8(fp)
   110a4:	e0fffe17 	ldw	r3,-8(fp)
   110a8:	18c5883a 	add	r2,r3,r3
   110ac:	e0bffe15 	stw	r2,-8(fp)
   110b0:	00000506 	br	110c8 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
   110b4:	e13ffe17 	ldw	r4,-8(fp)
   110b8:	e13ffe17 	ldw	r4,-8(fp)
   110bc:	2105883a 	add	r2,r4,r4
   110c0:	1085883a 	add	r2,r2,r2
   110c4:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
   110c8:	e0bff717 	ldw	r2,-36(fp)
   110cc:	10801017 	ldw	r2,64(r2)
   110d0:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   110d4:	e0bff717 	ldw	r2,-36(fp)
   110d8:	10800d17 	ldw	r2,52(r2)
   110dc:	1004c03a 	cmpne	r2,r2,zero
   110e0:	10001e1e 	bne	r2,zero,1115c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   110e4:	e0bff717 	ldw	r2,-36(fp)
   110e8:	10801317 	ldw	r2,76(r2)
   110ec:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
   110f0:	e03ffb15 	stw	zero,-20(fp)
   110f4:	00001506 	br	1114c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
   110f8:	e03ffc15 	stw	zero,-16(fp)
   110fc:	00000706 	br	1111c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
   11100:	e0ffff17 	ldw	r3,-4(fp)
   11104:	e0bffc17 	ldw	r2,-16(fp)
   11108:	1885883a 	add	r2,r3,r2
   1110c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   11110:	e0bffc17 	ldw	r2,-16(fp)
   11114:	10800104 	addi	r2,r2,4
   11118:	e0bffc15 	stw	r2,-16(fp)
   1111c:	e0fffc17 	ldw	r3,-16(fp)
   11120:	e13ffe17 	ldw	r4,-8(fp)
   11124:	193ff636 	bltu	r3,r4,11100 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   11128:	e0fffa17 	ldw	r3,-24(fp)
   1112c:	00800044 	movi	r2,1
   11130:	10c4983a 	sll	r2,r2,r3
   11134:	e0ffff17 	ldw	r3,-4(fp)
   11138:	1887883a 	add	r3,r3,r2
   1113c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   11140:	e13ffb17 	ldw	r4,-20(fp)
   11144:	21000044 	addi	r4,r4,1
   11148:	e13ffb15 	stw	r4,-20(fp)
   1114c:	e0bffb17 	ldw	r2,-20(fp)
   11150:	e0fffd17 	ldw	r3,-12(fp)
   11154:	10ffe836 	bltu	r2,r3,110f8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   11158:	00001006 	br	1119c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   1115c:	e13ffd17 	ldw	r4,-12(fp)
   11160:	e0bffe17 	ldw	r2,-8(fp)
   11164:	2089383a 	mul	r4,r4,r2
   11168:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
   1116c:	e03ff915 	stw	zero,-28(fp)
   11170:	00000706 	br	11190 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
   11174:	e0ffff17 	ldw	r3,-4(fp)
   11178:	e0bff917 	ldw	r2,-28(fp)
   1117c:	1885883a 	add	r2,r3,r2
   11180:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   11184:	e0fff917 	ldw	r3,-28(fp)
   11188:	18c00104 	addi	r3,r3,4
   1118c:	e0fff915 	stw	r3,-28(fp)
   11190:	e0bff917 	ldw	r2,-28(fp)
   11194:	e13ffd17 	ldw	r4,-12(fp)
   11198:	113ff636 	bltu	r2,r4,11174 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   1119c:	e037883a 	mov	sp,fp
   111a0:	df000017 	ldw	fp,0(sp)
   111a4:	dec00104 	addi	sp,sp,4
   111a8:	f800283a 	ret

000111ac <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   111ac:	deffed04 	addi	sp,sp,-76
   111b0:	df001215 	stw	fp,72(sp)
   111b4:	df001204 	addi	fp,sp,72
   111b8:	e13fee15 	stw	r4,-72(fp)
   111bc:	e17fef15 	stw	r5,-68(fp)
   111c0:	e1bff015 	stw	r6,-64(fp)
   111c4:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   111c8:	e0bfee17 	ldw	r2,-72(fp)
   111cc:	10800f17 	ldw	r2,60(r2)
   111d0:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   111d4:	e0bfee17 	ldw	r2,-72(fp)
   111d8:	10801017 	ldw	r2,64(r2)
   111dc:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   111e0:	e0bfef17 	ldw	r2,-68(fp)
   111e4:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
   111e8:	e0fff117 	ldw	r3,-60(fp)
   111ec:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
   111f0:	e13ff017 	ldw	r4,-64(fp)
   111f4:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
   111f8:	e0800117 	ldw	r2,4(fp)
   111fc:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
   11200:	e0c00217 	ldw	r3,8(fp)
   11204:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   11208:	e13ffa17 	ldw	r4,-24(fp)
   1120c:	e0bffb17 	ldw	r2,-20(fp)
   11210:	2080062e 	bgeu	r4,r2,1122c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
   11214:	e0fffb17 	ldw	r3,-20(fp)
   11218:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
   1121c:	e13ffa17 	ldw	r4,-24(fp)
   11220:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
   1122c:	e0fff817 	ldw	r3,-32(fp)
   11230:	e13ff917 	ldw	r4,-28(fp)
   11234:	1900062e 	bgeu	r3,r4,11250 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
   11238:	e0bff917 	ldw	r2,-28(fp)
   1123c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
   11240:	e0fff817 	ldw	r3,-32(fp)
   11244:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
   11248:	e13ffc17 	ldw	r4,-16(fp)
   1124c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   11250:	e0bffb17 	ldw	r2,-20(fp)
   11254:	e0fffe17 	ldw	r3,-8(fp)
   11258:	10c10d2e 	bgeu	r2,r3,11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
   1125c:	e13ff917 	ldw	r4,-28(fp)
   11260:	e0bffd17 	ldw	r2,-12(fp)
   11264:	20800136 	bltu	r4,r2,1126c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   11268:	00010906 	br	11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1126c:	e0fffa17 	ldw	r3,-24(fp)
   11270:	e13ffe17 	ldw	r4,-8(fp)
   11274:	19000336 	bltu	r3,r4,11284 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
   11278:	e0bffe17 	ldw	r2,-8(fp)
   1127c:	10bfffc4 	addi	r2,r2,-1
   11280:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   11284:	e0fff817 	ldw	r3,-32(fp)
   11288:	e13ffd17 	ldw	r4,-12(fp)
   1128c:	19000336 	bltu	r3,r4,1129c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
   11290:	e0bffd17 	ldw	r2,-12(fp)
   11294:	10bfffc4 	addi	r2,r2,-1
   11298:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   1129c:	e0800317 	ldw	r2,12(fp)
   112a0:	10800058 	cmpnei	r2,r2,1
   112a4:	1000041e 	bne	r2,zero,112b8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
   112a8:	e0bfee17 	ldw	r2,-72(fp)
   112ac:	10800c17 	ldw	r2,48(r2)
   112b0:	e0bfff15 	stw	r2,-4(fp)
   112b4:	00000306 	br	112c4 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
   112b8:	e0bfee17 	ldw	r2,-72(fp)
   112bc:	10800b17 	ldw	r2,44(r2)
   112c0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   112c4:	e0bfee17 	ldw	r2,-72(fp)
   112c8:	10800d17 	ldw	r2,52(r2)
   112cc:	1004c03a 	cmpne	r2,r2,zero
   112d0:	1000721e 	bne	r2,zero,1149c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   112d4:	e0bfee17 	ldw	r2,-72(fp)
   112d8:	10801317 	ldw	r2,76(r2)
   112dc:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
   112e0:	e0bff417 	ldw	r2,-48(fp)
   112e4:	e0fff917 	ldw	r3,-28(fp)
   112e8:	1884983a 	sll	r2,r3,r2
   112ec:	e13fff17 	ldw	r4,-4(fp)
   112f0:	2089883a 	add	r4,r4,r2
   112f4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   112f8:	e0bfee17 	ldw	r2,-72(fp)
   112fc:	10800e17 	ldw	r2,56(r2)
   11300:	10800058 	cmpnei	r2,r2,1
   11304:	10001e1e 	bne	r2,zero,11380 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
   11308:	e0bff917 	ldw	r2,-28(fp)
   1130c:	e0bff515 	stw	r2,-44(fp)
   11310:	00001706 	br	11370 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
   11314:	e0fffb17 	ldw	r3,-20(fp)
   11318:	e0fff615 	stw	r3,-40(fp)
   1131c:	00000806 	br	11340 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
   11320:	e0ffff17 	ldw	r3,-4(fp)
   11324:	e0bff617 	ldw	r2,-40(fp)
   11328:	1885883a 	add	r2,r3,r2
   1132c:	e0fff717 	ldw	r3,-36(fp)
   11330:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11334:	e13ff617 	ldw	r4,-40(fp)
   11338:	21000044 	addi	r4,r4,1
   1133c:	e13ff615 	stw	r4,-40(fp)
   11340:	e0bffa17 	ldw	r2,-24(fp)
   11344:	e0fff617 	ldw	r3,-40(fp)
   11348:	10fff52e 	bgeu	r2,r3,11320 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   1134c:	e0fff417 	ldw	r3,-48(fp)
   11350:	00800044 	movi	r2,1
   11354:	10c4983a 	sll	r2,r2,r3
   11358:	e13fff17 	ldw	r4,-4(fp)
   1135c:	2089883a 	add	r4,r4,r2
   11360:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   11364:	e0bff517 	ldw	r2,-44(fp)
   11368:	10800044 	addi	r2,r2,1
   1136c:	e0bff515 	stw	r2,-44(fp)
   11370:	e0fff817 	ldw	r3,-32(fp)
   11374:	e13ff517 	ldw	r4,-44(fp)
   11378:	193fe62e 	bgeu	r3,r4,11314 <alt_up_pixel_buffer_dma_draw_box+0x168>
   1137c:	0000c406 	br	11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11380:	e0bfee17 	ldw	r2,-72(fp)
   11384:	10800e17 	ldw	r2,56(r2)
   11388:	10800098 	cmpnei	r2,r2,2
   1138c:	1000211e 	bne	r2,zero,11414 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
   11390:	e0bff917 	ldw	r2,-28(fp)
   11394:	e0bff515 	stw	r2,-44(fp)
   11398:	00001a06 	br	11404 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
   1139c:	e0fffb17 	ldw	r3,-20(fp)
   113a0:	e0fff615 	stw	r3,-40(fp)
   113a4:	00000b06 	br	113d4 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   113a8:	e13ff617 	ldw	r4,-40(fp)
   113ac:	e13ff617 	ldw	r4,-40(fp)
   113b0:	2105883a 	add	r2,r4,r4
   113b4:	1007883a 	mov	r3,r2
   113b8:	e0bfff17 	ldw	r2,-4(fp)
   113bc:	1885883a 	add	r2,r3,r2
   113c0:	e0fff717 	ldw	r3,-36(fp)
   113c4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   113c8:	e0bff617 	ldw	r2,-40(fp)
   113cc:	10800044 	addi	r2,r2,1
   113d0:	e0bff615 	stw	r2,-40(fp)
   113d4:	e0fffa17 	ldw	r3,-24(fp)
   113d8:	e13ff617 	ldw	r4,-40(fp)
   113dc:	193ff22e 	bgeu	r3,r4,113a8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   113e0:	e0fff417 	ldw	r3,-48(fp)
   113e4:	00800044 	movi	r2,1
   113e8:	10c4983a 	sll	r2,r2,r3
   113ec:	e0ffff17 	ldw	r3,-4(fp)
   113f0:	1887883a 	add	r3,r3,r2
   113f4:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   113f8:	e13ff517 	ldw	r4,-44(fp)
   113fc:	21000044 	addi	r4,r4,1
   11400:	e13ff515 	stw	r4,-44(fp)
   11404:	e0bff817 	ldw	r2,-32(fp)
   11408:	e0fff517 	ldw	r3,-44(fp)
   1140c:	10ffe32e 	bgeu	r2,r3,1139c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
   11410:	00009f06 	br	11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   11414:	e13ff917 	ldw	r4,-28(fp)
   11418:	e13ff515 	stw	r4,-44(fp)
   1141c:	00001b06 	br	1148c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
   11420:	e0bffb17 	ldw	r2,-20(fp)
   11424:	e0bff615 	stw	r2,-40(fp)
   11428:	00000c06 	br	1145c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1142c:	e0fff617 	ldw	r3,-40(fp)
   11430:	e0fff617 	ldw	r3,-40(fp)
   11434:	18c5883a 	add	r2,r3,r3
   11438:	1085883a 	add	r2,r2,r2
   1143c:	1007883a 	mov	r3,r2
   11440:	e0bfff17 	ldw	r2,-4(fp)
   11444:	1885883a 	add	r2,r3,r2
   11448:	e0fff717 	ldw	r3,-36(fp)
   1144c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11450:	e13ff617 	ldw	r4,-40(fp)
   11454:	21000044 	addi	r4,r4,1
   11458:	e13ff615 	stw	r4,-40(fp)
   1145c:	e0bffa17 	ldw	r2,-24(fp)
   11460:	e0fff617 	ldw	r3,-40(fp)
   11464:	10fff12e 	bgeu	r2,r3,1142c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   11468:	e0fff417 	ldw	r3,-48(fp)
   1146c:	00800044 	movi	r2,1
   11470:	10c4983a 	sll	r2,r2,r3
   11474:	e13fff17 	ldw	r4,-4(fp)
   11478:	2089883a 	add	r4,r4,r2
   1147c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   11480:	e0bff517 	ldw	r2,-44(fp)
   11484:	10800044 	addi	r2,r2,1
   11488:	e0bff515 	stw	r2,-44(fp)
   1148c:	e0fff817 	ldw	r3,-32(fp)
   11490:	e13ff517 	ldw	r4,-44(fp)
   11494:	193fe22e 	bgeu	r3,r4,11420 <alt_up_pixel_buffer_dma_draw_box+0x274>
   11498:	00007d06 	br	11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1149c:	e0bfee17 	ldw	r2,-72(fp)
   114a0:	10800e17 	ldw	r2,56(r2)
   114a4:	10800058 	cmpnei	r2,r2,1
   114a8:	1000221e 	bne	r2,zero,11534 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
   114ac:	e0fff917 	ldw	r3,-28(fp)
   114b0:	e13ffe17 	ldw	r4,-8(fp)
   114b4:	1905383a 	mul	r2,r3,r4
   114b8:	e0ffff17 	ldw	r3,-4(fp)
   114bc:	1887883a 	add	r3,r3,r2
   114c0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   114c4:	e13ff917 	ldw	r4,-28(fp)
   114c8:	e13ff215 	stw	r4,-56(fp)
   114cc:	00001506 	br	11524 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
   114d0:	e0bffb17 	ldw	r2,-20(fp)
   114d4:	e0bff315 	stw	r2,-52(fp)
   114d8:	00000806 	br	114fc <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
   114dc:	e0ffff17 	ldw	r3,-4(fp)
   114e0:	e0bff317 	ldw	r2,-52(fp)
   114e4:	1885883a 	add	r2,r3,r2
   114e8:	e0fff717 	ldw	r3,-36(fp)
   114ec:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   114f0:	e0fff317 	ldw	r3,-52(fp)
   114f4:	18c00044 	addi	r3,r3,1
   114f8:	e0fff315 	stw	r3,-52(fp)
   114fc:	e13ffa17 	ldw	r4,-24(fp)
   11500:	e0bff317 	ldw	r2,-52(fp)
   11504:	20bff52e 	bgeu	r4,r2,114dc <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   11508:	e0ffff17 	ldw	r3,-4(fp)
   1150c:	e13ffe17 	ldw	r4,-8(fp)
   11510:	1907883a 	add	r3,r3,r4
   11514:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11518:	e0bff217 	ldw	r2,-56(fp)
   1151c:	10800044 	addi	r2,r2,1
   11520:	e0bff215 	stw	r2,-56(fp)
   11524:	e0fff817 	ldw	r3,-32(fp)
   11528:	e13ff217 	ldw	r4,-56(fp)
   1152c:	193fe82e 	bgeu	r3,r4,114d0 <alt_up_pixel_buffer_dma_draw_box+0x324>
   11530:	00005706 	br	11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11534:	e0bfee17 	ldw	r2,-72(fp)
   11538:	10800e17 	ldw	r2,56(r2)
   1153c:	10800098 	cmpnei	r2,r2,2
   11540:	1000291e 	bne	r2,zero,115e8 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
   11544:	e0fffe17 	ldw	r3,-8(fp)
   11548:	e0fffe17 	ldw	r3,-8(fp)
   1154c:	18c5883a 	add	r2,r3,r3
   11550:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   11554:	e13ff917 	ldw	r4,-28(fp)
   11558:	e0fffe17 	ldw	r3,-8(fp)
   1155c:	20c5383a 	mul	r2,r4,r3
   11560:	e13fff17 	ldw	r4,-4(fp)
   11564:	2089883a 	add	r4,r4,r2
   11568:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   1156c:	e0bff917 	ldw	r2,-28(fp)
   11570:	e0bff215 	stw	r2,-56(fp)
   11574:	00001806 	br	115d8 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
   11578:	e0fffb17 	ldw	r3,-20(fp)
   1157c:	e0fff315 	stw	r3,-52(fp)
   11580:	00000b06 	br	115b0 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   11584:	e13ff317 	ldw	r4,-52(fp)
   11588:	e13ff317 	ldw	r4,-52(fp)
   1158c:	2105883a 	add	r2,r4,r4
   11590:	1007883a 	mov	r3,r2
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	1885883a 	add	r2,r3,r2
   1159c:	e0fff717 	ldw	r3,-36(fp)
   115a0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   115a4:	e0bff317 	ldw	r2,-52(fp)
   115a8:	10800044 	addi	r2,r2,1
   115ac:	e0bff315 	stw	r2,-52(fp)
   115b0:	e0fffa17 	ldw	r3,-24(fp)
   115b4:	e13ff317 	ldw	r4,-52(fp)
   115b8:	193ff22e 	bgeu	r3,r4,11584 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   115bc:	e0bfff17 	ldw	r2,-4(fp)
   115c0:	e0fffe17 	ldw	r3,-8(fp)
   115c4:	10c5883a 	add	r2,r2,r3
   115c8:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   115cc:	e13ff217 	ldw	r4,-56(fp)
   115d0:	21000044 	addi	r4,r4,1
   115d4:	e13ff215 	stw	r4,-56(fp)
   115d8:	e0bff817 	ldw	r2,-32(fp)
   115dc:	e0fff217 	ldw	r3,-56(fp)
   115e0:	10ffe52e 	bgeu	r2,r3,11578 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   115e4:	00002a06 	br	11690 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   115e8:	e13ffe17 	ldw	r4,-8(fp)
   115ec:	e13ffe17 	ldw	r4,-8(fp)
   115f0:	2105883a 	add	r2,r4,r4
   115f4:	1085883a 	add	r2,r2,r2
   115f8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   115fc:	e0fff917 	ldw	r3,-28(fp)
   11600:	e13ffe17 	ldw	r4,-8(fp)
   11604:	1905383a 	mul	r2,r3,r4
   11608:	e0ffff17 	ldw	r3,-4(fp)
   1160c:	1887883a 	add	r3,r3,r2
   11610:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   11614:	e13ff917 	ldw	r4,-28(fp)
   11618:	e13ff215 	stw	r4,-56(fp)
   1161c:	00001906 	br	11684 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
   11620:	e0bffb17 	ldw	r2,-20(fp)
   11624:	e0bff315 	stw	r2,-52(fp)
   11628:	00000c06 	br	1165c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1162c:	e0fff317 	ldw	r3,-52(fp)
   11630:	e0fff317 	ldw	r3,-52(fp)
   11634:	18c5883a 	add	r2,r3,r3
   11638:	1085883a 	add	r2,r2,r2
   1163c:	1007883a 	mov	r3,r2
   11640:	e0bfff17 	ldw	r2,-4(fp)
   11644:	1885883a 	add	r2,r3,r2
   11648:	e0fff717 	ldw	r3,-36(fp)
   1164c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   11650:	e13ff317 	ldw	r4,-52(fp)
   11654:	21000044 	addi	r4,r4,1
   11658:	e13ff315 	stw	r4,-52(fp)
   1165c:	e0bffa17 	ldw	r2,-24(fp)
   11660:	e0fff317 	ldw	r3,-52(fp)
   11664:	10fff12e 	bgeu	r2,r3,1162c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   11668:	e13fff17 	ldw	r4,-4(fp)
   1166c:	e0bffe17 	ldw	r2,-8(fp)
   11670:	2089883a 	add	r4,r4,r2
   11674:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11678:	e0fff217 	ldw	r3,-56(fp)
   1167c:	18c00044 	addi	r3,r3,1
   11680:	e0fff215 	stw	r3,-56(fp)
   11684:	e13ff817 	ldw	r4,-32(fp)
   11688:	e0bff217 	ldw	r2,-56(fp)
   1168c:	20bfe42e 	bgeu	r4,r2,11620 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
   11690:	e037883a 	mov	sp,fp
   11694:	df000017 	ldw	fp,0(sp)
   11698:	dec00104 	addi	sp,sp,4
   1169c:	f800283a 	ret

000116a0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   116a0:	defff204 	addi	sp,sp,-56
   116a4:	df000d15 	stw	fp,52(sp)
   116a8:	df000d04 	addi	fp,sp,52
   116ac:	e13ff315 	stw	r4,-52(fp)
   116b0:	e17ff415 	stw	r5,-48(fp)
   116b4:	e1bff515 	stw	r6,-44(fp)
   116b8:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   116bc:	e0bff317 	ldw	r2,-52(fp)
   116c0:	10800f17 	ldw	r2,60(r2)
   116c4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   116c8:	e0bff317 	ldw	r2,-52(fp)
   116cc:	10801017 	ldw	r2,64(r2)
   116d0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   116d4:	e0bff417 	ldw	r2,-48(fp)
   116d8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
   116dc:	e0fff517 	ldw	r3,-44(fp)
   116e0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
   116e4:	e13ff617 	ldw	r4,-40(fp)
   116e8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   116ec:	e0800117 	ldw	r2,4(fp)
   116f0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   116f4:	e0fffb17 	ldw	r3,-20(fp)
   116f8:	e13ffc17 	ldw	r4,-16(fp)
   116fc:	1900042e 	bgeu	r3,r4,11710 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
   11700:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
   11704:	e0fffb17 	ldw	r3,-20(fp)
   11708:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
   1170c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   11710:	e13ffc17 	ldw	r4,-16(fp)
   11714:	e0bffe17 	ldw	r2,-8(fp)
   11718:	2080b12e 	bgeu	r4,r2,119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   1171c:	e0fffa17 	ldw	r3,-24(fp)
   11720:	e13ffd17 	ldw	r4,-12(fp)
   11724:	19000136 	bltu	r3,r4,1172c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   11728:	0000ad06 	br	119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1172c:	e0bffb17 	ldw	r2,-20(fp)
   11730:	e0fffe17 	ldw	r3,-8(fp)
   11734:	10c00336 	bltu	r2,r3,11744 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
   11738:	e13ffe17 	ldw	r4,-8(fp)
   1173c:	213fffc4 	addi	r4,r4,-1
   11740:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   11744:	e0800217 	ldw	r2,8(fp)
   11748:	10800058 	cmpnei	r2,r2,1
   1174c:	1000041e 	bne	r2,zero,11760 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   11750:	e0bff317 	ldw	r2,-52(fp)
   11754:	10800c17 	ldw	r2,48(r2)
   11758:	e0bfff15 	stw	r2,-4(fp)
   1175c:	00000306 	br	1176c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   11760:	e0bff317 	ldw	r2,-52(fp)
   11764:	10800b17 	ldw	r2,44(r2)
   11768:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1176c:	e0bff317 	ldw	r2,-52(fp)
   11770:	10800d17 	ldw	r2,52(r2)
   11774:	1004c03a 	cmpne	r2,r2,zero
   11778:	1000431e 	bne	r2,zero,11888 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1177c:	e0bff317 	ldw	r2,-52(fp)
   11780:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
   11784:	e0fffa17 	ldw	r3,-24(fp)
   11788:	1884983a 	sll	r2,r3,r2
   1178c:	e13fff17 	ldw	r4,-4(fp)
   11790:	2089883a 	add	r4,r4,r2
   11794:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11798:	e0bff317 	ldw	r2,-52(fp)
   1179c:	10800e17 	ldw	r2,56(r2)
   117a0:	10800058 	cmpnei	r2,r2,1
   117a4:	10000f1e 	bne	r2,zero,117e4 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
   117a8:	e0bffc17 	ldw	r2,-16(fp)
   117ac:	e0bff815 	stw	r2,-32(fp)
   117b0:	00000806 	br	117d4 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
   117b4:	e0ffff17 	ldw	r3,-4(fp)
   117b8:	e0bff817 	ldw	r2,-32(fp)
   117bc:	1885883a 	add	r2,r3,r2
   117c0:	e0fff917 	ldw	r3,-28(fp)
   117c4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   117c8:	e0fff817 	ldw	r3,-32(fp)
   117cc:	18c00044 	addi	r3,r3,1
   117d0:	e0fff815 	stw	r3,-32(fp)
   117d4:	e13ffb17 	ldw	r4,-20(fp)
   117d8:	e0bff817 	ldw	r2,-32(fp)
   117dc:	20bff52e 	bgeu	r4,r2,117b4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
   117e0:	00007f06 	br	119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   117e4:	e0bff317 	ldw	r2,-52(fp)
   117e8:	10800e17 	ldw	r2,56(r2)
   117ec:	10800098 	cmpnei	r2,r2,2
   117f0:	1000121e 	bne	r2,zero,1183c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
   117f4:	e0fffc17 	ldw	r3,-16(fp)
   117f8:	e0fff815 	stw	r3,-32(fp)
   117fc:	00000b06 	br	1182c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   11800:	e13ff817 	ldw	r4,-32(fp)
   11804:	e13ff817 	ldw	r4,-32(fp)
   11808:	2105883a 	add	r2,r4,r4
   1180c:	1007883a 	mov	r3,r2
   11810:	e0bfff17 	ldw	r2,-4(fp)
   11814:	1885883a 	add	r2,r3,r2
   11818:	e0fff917 	ldw	r3,-28(fp)
   1181c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   11820:	e0bff817 	ldw	r2,-32(fp)
   11824:	10800044 	addi	r2,r2,1
   11828:	e0bff815 	stw	r2,-32(fp)
   1182c:	e0fffb17 	ldw	r3,-20(fp)
   11830:	e13ff817 	ldw	r4,-32(fp)
   11834:	193ff22e 	bgeu	r3,r4,11800 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   11838:	00006906 	br	119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1183c:	e0bffc17 	ldw	r2,-16(fp)
   11840:	e0bff815 	stw	r2,-32(fp)
   11844:	00000c06 	br	11878 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   11848:	e0fff817 	ldw	r3,-32(fp)
   1184c:	e0fff817 	ldw	r3,-32(fp)
   11850:	18c5883a 	add	r2,r3,r3
   11854:	1085883a 	add	r2,r2,r2
   11858:	1007883a 	mov	r3,r2
   1185c:	e0bfff17 	ldw	r2,-4(fp)
   11860:	1885883a 	add	r2,r3,r2
   11864:	e0fff917 	ldw	r3,-28(fp)
   11868:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1186c:	e13ff817 	ldw	r4,-32(fp)
   11870:	21000044 	addi	r4,r4,1
   11874:	e13ff815 	stw	r4,-32(fp)
   11878:	e0bffb17 	ldw	r2,-20(fp)
   1187c:	e0fff817 	ldw	r3,-32(fp)
   11880:	10fff12e 	bgeu	r2,r3,11848 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   11884:	00005606 	br	119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11888:	e0bff317 	ldw	r2,-52(fp)
   1188c:	10800e17 	ldw	r2,56(r2)
   11890:	10800058 	cmpnei	r2,r2,1
   11894:	1000151e 	bne	r2,zero,118ec <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
   11898:	e13ffa17 	ldw	r4,-24(fp)
   1189c:	e0fffe17 	ldw	r3,-8(fp)
   118a0:	20c5383a 	mul	r2,r4,r3
   118a4:	e13fff17 	ldw	r4,-4(fp)
   118a8:	2089883a 	add	r4,r4,r2
   118ac:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   118b0:	e0bffc17 	ldw	r2,-16(fp)
   118b4:	e0bff715 	stw	r2,-36(fp)
   118b8:	00000806 	br	118dc <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   118bc:	e0ffff17 	ldw	r3,-4(fp)
   118c0:	e0bff717 	ldw	r2,-36(fp)
   118c4:	1885883a 	add	r2,r3,r2
   118c8:	e0fff917 	ldw	r3,-28(fp)
   118cc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   118d0:	e0fff717 	ldw	r3,-36(fp)
   118d4:	18c00044 	addi	r3,r3,1
   118d8:	e0fff715 	stw	r3,-36(fp)
   118dc:	e13ffb17 	ldw	r4,-20(fp)
   118e0:	e0bff717 	ldw	r2,-36(fp)
   118e4:	20bff52e 	bgeu	r4,r2,118bc <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   118e8:	00003d06 	br	119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   118ec:	e0bff317 	ldw	r2,-52(fp)
   118f0:	10800e17 	ldw	r2,56(r2)
   118f4:	10800098 	cmpnei	r2,r2,2
   118f8:	10001c1e 	bne	r2,zero,1196c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
   118fc:	e0fffe17 	ldw	r3,-8(fp)
   11900:	e0fffe17 	ldw	r3,-8(fp)
   11904:	18c5883a 	add	r2,r3,r3
   11908:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   1190c:	e13ffa17 	ldw	r4,-24(fp)
   11910:	e0fffe17 	ldw	r3,-8(fp)
   11914:	20c5383a 	mul	r2,r4,r3
   11918:	e13fff17 	ldw	r4,-4(fp)
   1191c:	2089883a 	add	r4,r4,r2
   11920:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   11924:	e0bffc17 	ldw	r2,-16(fp)
   11928:	e0bff715 	stw	r2,-36(fp)
   1192c:	00000b06 	br	1195c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   11930:	e0fff717 	ldw	r3,-36(fp)
   11934:	e0fff717 	ldw	r3,-36(fp)
   11938:	18c5883a 	add	r2,r3,r3
   1193c:	1007883a 	mov	r3,r2
   11940:	e0bfff17 	ldw	r2,-4(fp)
   11944:	1885883a 	add	r2,r3,r2
   11948:	e0fff917 	ldw	r3,-28(fp)
   1194c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   11950:	e13ff717 	ldw	r4,-36(fp)
   11954:	21000044 	addi	r4,r4,1
   11958:	e13ff715 	stw	r4,-36(fp)
   1195c:	e0bffb17 	ldw	r2,-20(fp)
   11960:	e0fff717 	ldw	r3,-36(fp)
   11964:	10fff22e 	bgeu	r2,r3,11930 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   11968:	00001d06 	br	119e0 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1196c:	e13ffe17 	ldw	r4,-8(fp)
   11970:	e13ffe17 	ldw	r4,-8(fp)
   11974:	2105883a 	add	r2,r4,r4
   11978:	1085883a 	add	r2,r2,r2
   1197c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   11980:	e0fffa17 	ldw	r3,-24(fp)
   11984:	e13ffe17 	ldw	r4,-8(fp)
   11988:	1905383a 	mul	r2,r3,r4
   1198c:	e0ffff17 	ldw	r3,-4(fp)
   11990:	1887883a 	add	r3,r3,r2
   11994:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
   11998:	e13ffc17 	ldw	r4,-16(fp)
   1199c:	e13ff715 	stw	r4,-36(fp)
   119a0:	00000c06 	br	119d4 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   119a4:	e0fff717 	ldw	r3,-36(fp)
   119a8:	e0fff717 	ldw	r3,-36(fp)
   119ac:	18c5883a 	add	r2,r3,r3
   119b0:	1085883a 	add	r2,r2,r2
   119b4:	1007883a 	mov	r3,r2
   119b8:	e0bfff17 	ldw	r2,-4(fp)
   119bc:	1885883a 	add	r2,r3,r2
   119c0:	e0fff917 	ldw	r3,-28(fp)
   119c4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   119c8:	e13ff717 	ldw	r4,-36(fp)
   119cc:	21000044 	addi	r4,r4,1
   119d0:	e13ff715 	stw	r4,-36(fp)
   119d4:	e0bffb17 	ldw	r2,-20(fp)
   119d8:	e0fff717 	ldw	r3,-36(fp)
   119dc:	10fff12e 	bgeu	r2,r3,119a4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   119e0:	e037883a 	mov	sp,fp
   119e4:	df000017 	ldw	fp,0(sp)
   119e8:	dec00104 	addi	sp,sp,4
   119ec:	f800283a 	ret

000119f0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   119f0:	defff104 	addi	sp,sp,-60
   119f4:	df000e15 	stw	fp,56(sp)
   119f8:	df000e04 	addi	fp,sp,56
   119fc:	e13ff215 	stw	r4,-56(fp)
   11a00:	e17ff315 	stw	r5,-52(fp)
   11a04:	e1bff415 	stw	r6,-48(fp)
   11a08:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   11a0c:	e0bff217 	ldw	r2,-56(fp)
   11a10:	10800f17 	ldw	r2,60(r2)
   11a14:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   11a18:	e0bff217 	ldw	r2,-56(fp)
   11a1c:	10801017 	ldw	r2,64(r2)
   11a20:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
   11a24:	e0bff317 	ldw	r2,-52(fp)
   11a28:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
   11a2c:	e0fff417 	ldw	r3,-48(fp)
   11a30:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
   11a34:	e13ff517 	ldw	r4,-44(fp)
   11a38:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   11a3c:	e0800117 	ldw	r2,4(fp)
   11a40:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   11a44:	e0fffa17 	ldw	r3,-24(fp)
   11a48:	e13ffb17 	ldw	r4,-20(fp)
   11a4c:	1900042e 	bgeu	r3,r4,11a60 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
   11a50:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
   11a54:	e0fffa17 	ldw	r3,-24(fp)
   11a58:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
   11a5c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   11a60:	e13ffc17 	ldw	r4,-16(fp)
   11a64:	e0bffe17 	ldw	r2,-8(fp)
   11a68:	2080d12e 	bgeu	r4,r2,11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   11a6c:	e0fffb17 	ldw	r3,-20(fp)
   11a70:	e13ffd17 	ldw	r4,-12(fp)
   11a74:	19000136 	bltu	r3,r4,11a7c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   11a78:	0000cd06 	br	11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   11a7c:	e0bffa17 	ldw	r2,-24(fp)
   11a80:	e0fffd17 	ldw	r3,-12(fp)
   11a84:	10c00336 	bltu	r2,r3,11a94 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
   11a88:	e13ffd17 	ldw	r4,-12(fp)
   11a8c:	213fffc4 	addi	r4,r4,-1
   11a90:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   11a94:	e0800217 	ldw	r2,8(fp)
   11a98:	10800058 	cmpnei	r2,r2,1
   11a9c:	1000041e 	bne	r2,zero,11ab0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   11aa0:	e0bff217 	ldw	r2,-56(fp)
   11aa4:	10800c17 	ldw	r2,48(r2)
   11aa8:	e0bfff15 	stw	r2,-4(fp)
   11aac:	00000306 	br	11abc <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   11ab0:	e0bff217 	ldw	r2,-56(fp)
   11ab4:	10800b17 	ldw	r2,44(r2)
   11ab8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   11abc:	e0bff217 	ldw	r2,-56(fp)
   11ac0:	10800d17 	ldw	r2,52(r2)
   11ac4:	1004c03a 	cmpne	r2,r2,zero
   11ac8:	1000571e 	bne	r2,zero,11c28 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   11acc:	e0bff217 	ldw	r2,-56(fp)
   11ad0:	10801317 	ldw	r2,76(r2)
   11ad4:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
   11ad8:	e0bff717 	ldw	r2,-36(fp)
   11adc:	e0fffb17 	ldw	r3,-20(fp)
   11ae0:	1884983a 	sll	r2,r3,r2
   11ae4:	e13fff17 	ldw	r4,-4(fp)
   11ae8:	2089883a 	add	r4,r4,r2
   11aec:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11af0:	e0bff217 	ldw	r2,-56(fp)
   11af4:	10800e17 	ldw	r2,56(r2)
   11af8:	10800058 	cmpnei	r2,r2,1
   11afc:	1000151e 	bne	r2,zero,11b54 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
   11b00:	e0bffb17 	ldw	r2,-20(fp)
   11b04:	e0bff815 	stw	r2,-32(fp)
   11b08:	00000e06 	br	11b44 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   11b0c:	e0ffff17 	ldw	r3,-4(fp)
   11b10:	e0bffc17 	ldw	r2,-16(fp)
   11b14:	1885883a 	add	r2,r3,r2
   11b18:	e0fff917 	ldw	r3,-28(fp)
   11b1c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   11b20:	e0fff717 	ldw	r3,-36(fp)
   11b24:	00800044 	movi	r2,1
   11b28:	10c4983a 	sll	r2,r2,r3
   11b2c:	e0ffff17 	ldw	r3,-4(fp)
   11b30:	1887883a 	add	r3,r3,r2
   11b34:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   11b38:	e13ff817 	ldw	r4,-32(fp)
   11b3c:	21000044 	addi	r4,r4,1
   11b40:	e13ff815 	stw	r4,-32(fp)
   11b44:	e0bffa17 	ldw	r2,-24(fp)
   11b48:	e0fff817 	ldw	r3,-32(fp)
   11b4c:	10ffef2e 	bgeu	r2,r3,11b0c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   11b50:	00009706 	br	11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11b54:	e0bff217 	ldw	r2,-56(fp)
   11b58:	10800e17 	ldw	r2,56(r2)
   11b5c:	10800098 	cmpnei	r2,r2,2
   11b60:	1000181e 	bne	r2,zero,11bc4 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
   11b64:	e13ffb17 	ldw	r4,-20(fp)
   11b68:	e13ff815 	stw	r4,-32(fp)
   11b6c:	00001106 	br	11bb4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   11b70:	e0fffc17 	ldw	r3,-16(fp)
   11b74:	e0fffc17 	ldw	r3,-16(fp)
   11b78:	18c5883a 	add	r2,r3,r3
   11b7c:	1007883a 	mov	r3,r2
   11b80:	e0bfff17 	ldw	r2,-4(fp)
   11b84:	1885883a 	add	r2,r3,r2
   11b88:	e0fff917 	ldw	r3,-28(fp)
   11b8c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   11b90:	e0fff717 	ldw	r3,-36(fp)
   11b94:	00800044 	movi	r2,1
   11b98:	10c4983a 	sll	r2,r2,r3
   11b9c:	e13fff17 	ldw	r4,-4(fp)
   11ba0:	2089883a 	add	r4,r4,r2
   11ba4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   11ba8:	e0bff817 	ldw	r2,-32(fp)
   11bac:	10800044 	addi	r2,r2,1
   11bb0:	e0bff815 	stw	r2,-32(fp)
   11bb4:	e0fffa17 	ldw	r3,-24(fp)
   11bb8:	e13ff817 	ldw	r4,-32(fp)
   11bbc:	193fec2e 	bgeu	r3,r4,11b70 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   11bc0:	00007b06 	br	11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   11bc4:	e0bffb17 	ldw	r2,-20(fp)
   11bc8:	e0bff815 	stw	r2,-32(fp)
   11bcc:	00001206 	br	11c18 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   11bd0:	e0fffc17 	ldw	r3,-16(fp)
   11bd4:	e0fffc17 	ldw	r3,-16(fp)
   11bd8:	18c5883a 	add	r2,r3,r3
   11bdc:	1085883a 	add	r2,r2,r2
   11be0:	1007883a 	mov	r3,r2
   11be4:	e0bfff17 	ldw	r2,-4(fp)
   11be8:	1885883a 	add	r2,r3,r2
   11bec:	e0fff917 	ldw	r3,-28(fp)
   11bf0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   11bf4:	e0fff717 	ldw	r3,-36(fp)
   11bf8:	00800044 	movi	r2,1
   11bfc:	10c4983a 	sll	r2,r2,r3
   11c00:	e13fff17 	ldw	r4,-4(fp)
   11c04:	2089883a 	add	r4,r4,r2
   11c08:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   11c0c:	e0bff817 	ldw	r2,-32(fp)
   11c10:	10800044 	addi	r2,r2,1
   11c14:	e0bff815 	stw	r2,-32(fp)
   11c18:	e0fffa17 	ldw	r3,-24(fp)
   11c1c:	e13ff817 	ldw	r4,-32(fp)
   11c20:	193feb2e 	bgeu	r3,r4,11bd0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   11c24:	00006206 	br	11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   11c28:	e0bff217 	ldw	r2,-56(fp)
   11c2c:	10800e17 	ldw	r2,56(r2)
   11c30:	10800058 	cmpnei	r2,r2,1
   11c34:	1000191e 	bne	r2,zero,11c9c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   11c38:	e0fffb17 	ldw	r3,-20(fp)
   11c3c:	e13ffe17 	ldw	r4,-8(fp)
   11c40:	1905383a 	mul	r2,r3,r4
   11c44:	e0ffff17 	ldw	r3,-4(fp)
   11c48:	1887883a 	add	r3,r3,r2
   11c4c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   11c50:	e13ffb17 	ldw	r4,-20(fp)
   11c54:	e13ff615 	stw	r4,-40(fp)
   11c58:	00000c06 	br	11c8c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   11c5c:	e0ffff17 	ldw	r3,-4(fp)
   11c60:	e0bffc17 	ldw	r2,-16(fp)
   11c64:	1885883a 	add	r2,r3,r2
   11c68:	e0fff917 	ldw	r3,-28(fp)
   11c6c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   11c70:	e0bfff17 	ldw	r2,-4(fp)
   11c74:	e0fffe17 	ldw	r3,-8(fp)
   11c78:	10c5883a 	add	r2,r2,r3
   11c7c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11c80:	e13ff617 	ldw	r4,-40(fp)
   11c84:	21000044 	addi	r4,r4,1
   11c88:	e13ff615 	stw	r4,-40(fp)
   11c8c:	e0bffa17 	ldw	r2,-24(fp)
   11c90:	e0fff617 	ldw	r3,-40(fp)
   11c94:	10fff12e 	bgeu	r2,r3,11c5c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   11c98:	00004506 	br	11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   11c9c:	e0bff217 	ldw	r2,-56(fp)
   11ca0:	10800e17 	ldw	r2,56(r2)
   11ca4:	10800098 	cmpnei	r2,r2,2
   11ca8:	1000201e 	bne	r2,zero,11d2c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   11cac:	e13ffe17 	ldw	r4,-8(fp)
   11cb0:	e13ffe17 	ldw	r4,-8(fp)
   11cb4:	2105883a 	add	r2,r4,r4
   11cb8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   11cbc:	e0fffb17 	ldw	r3,-20(fp)
   11cc0:	e13ffe17 	ldw	r4,-8(fp)
   11cc4:	1905383a 	mul	r2,r3,r4
   11cc8:	e0ffff17 	ldw	r3,-4(fp)
   11ccc:	1887883a 	add	r3,r3,r2
   11cd0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   11cd4:	e13ffb17 	ldw	r4,-20(fp)
   11cd8:	e13ff615 	stw	r4,-40(fp)
   11cdc:	00000f06 	br	11d1c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   11ce0:	e0fffc17 	ldw	r3,-16(fp)
   11ce4:	e0fffc17 	ldw	r3,-16(fp)
   11ce8:	18c5883a 	add	r2,r3,r3
   11cec:	1007883a 	mov	r3,r2
   11cf0:	e0bfff17 	ldw	r2,-4(fp)
   11cf4:	1885883a 	add	r2,r3,r2
   11cf8:	e0fff917 	ldw	r3,-28(fp)
   11cfc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   11d00:	e13fff17 	ldw	r4,-4(fp)
   11d04:	e0bffe17 	ldw	r2,-8(fp)
   11d08:	2089883a 	add	r4,r4,r2
   11d0c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11d10:	e0fff617 	ldw	r3,-40(fp)
   11d14:	18c00044 	addi	r3,r3,1
   11d18:	e0fff615 	stw	r3,-40(fp)
   11d1c:	e13ffa17 	ldw	r4,-24(fp)
   11d20:	e0bff617 	ldw	r2,-40(fp)
   11d24:	20bfee2e 	bgeu	r4,r2,11ce0 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   11d28:	00002106 	br	11db0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   11d2c:	e0fffe17 	ldw	r3,-8(fp)
   11d30:	e0fffe17 	ldw	r3,-8(fp)
   11d34:	18c5883a 	add	r2,r3,r3
   11d38:	1085883a 	add	r2,r2,r2
   11d3c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   11d40:	e13ffb17 	ldw	r4,-20(fp)
   11d44:	e0fffe17 	ldw	r3,-8(fp)
   11d48:	20c5383a 	mul	r2,r4,r3
   11d4c:	e13fff17 	ldw	r4,-4(fp)
   11d50:	2089883a 	add	r4,r4,r2
   11d54:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   11d58:	e0bffb17 	ldw	r2,-20(fp)
   11d5c:	e0bff615 	stw	r2,-40(fp)
   11d60:	00001006 	br	11da4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   11d64:	e0fffc17 	ldw	r3,-16(fp)
   11d68:	e0fffc17 	ldw	r3,-16(fp)
   11d6c:	18c5883a 	add	r2,r3,r3
   11d70:	1085883a 	add	r2,r2,r2
   11d74:	1007883a 	mov	r3,r2
   11d78:	e0bfff17 	ldw	r2,-4(fp)
   11d7c:	1885883a 	add	r2,r3,r2
   11d80:	e0fff917 	ldw	r3,-28(fp)
   11d84:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   11d88:	e13fff17 	ldw	r4,-4(fp)
   11d8c:	e0bffe17 	ldw	r2,-8(fp)
   11d90:	2089883a 	add	r4,r4,r2
   11d94:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   11d98:	e0fff617 	ldw	r3,-40(fp)
   11d9c:	18c00044 	addi	r3,r3,1
   11da0:	e0fff615 	stw	r3,-40(fp)
   11da4:	e13ffa17 	ldw	r4,-24(fp)
   11da8:	e0bff617 	ldw	r2,-40(fp)
   11dac:	20bfed2e 	bgeu	r4,r2,11d64 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   11db0:	e037883a 	mov	sp,fp
   11db4:	df000017 	ldw	fp,0(sp)
   11db8:	dec00104 	addi	sp,sp,4
   11dbc:	f800283a 	ret

00011dc0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   11dc0:	defff804 	addi	sp,sp,-32
   11dc4:	dfc00715 	stw	ra,28(sp)
   11dc8:	df000615 	stw	fp,24(sp)
   11dcc:	df000604 	addi	fp,sp,24
   11dd0:	e13ffc15 	stw	r4,-16(fp)
   11dd4:	e17ffd15 	stw	r5,-12(fp)
   11dd8:	e1bffe15 	stw	r6,-8(fp)
   11ddc:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   11de0:	e0800317 	ldw	r2,12(fp)
   11de4:	d8800015 	stw	r2,0(sp)
   11de8:	e0800417 	ldw	r2,16(fp)
   11dec:	d8800115 	stw	r2,4(sp)
   11df0:	e13ffc17 	ldw	r4,-16(fp)
   11df4:	e17ffd17 	ldw	r5,-12(fp)
   11df8:	e1bfff17 	ldw	r6,-4(fp)
   11dfc:	e1fffe17 	ldw	r7,-8(fp)
   11e00:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   11e04:	e0800317 	ldw	r2,12(fp)
   11e08:	d8800015 	stw	r2,0(sp)
   11e0c:	e0800417 	ldw	r2,16(fp)
   11e10:	d8800115 	stw	r2,4(sp)
   11e14:	e13ffc17 	ldw	r4,-16(fp)
   11e18:	e17ffd17 	ldw	r5,-12(fp)
   11e1c:	e1bfff17 	ldw	r6,-4(fp)
   11e20:	e1c00217 	ldw	r7,8(fp)
   11e24:	00116a00 	call	116a0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   11e28:	e0800317 	ldw	r2,12(fp)
   11e2c:	d8800015 	stw	r2,0(sp)
   11e30:	e0800417 	ldw	r2,16(fp)
   11e34:	d8800115 	stw	r2,4(sp)
   11e38:	e13ffc17 	ldw	r4,-16(fp)
   11e3c:	e17ffd17 	ldw	r5,-12(fp)
   11e40:	e1bffe17 	ldw	r6,-8(fp)
   11e44:	e1c00217 	ldw	r7,8(fp)
   11e48:	00119f00 	call	119f0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   11e4c:	e0800317 	ldw	r2,12(fp)
   11e50:	d8800015 	stw	r2,0(sp)
   11e54:	e0800417 	ldw	r2,16(fp)
   11e58:	d8800115 	stw	r2,4(sp)
   11e5c:	e13ffc17 	ldw	r4,-16(fp)
   11e60:	e17fff17 	ldw	r5,-4(fp)
   11e64:	e1bffe17 	ldw	r6,-8(fp)
   11e68:	e1c00217 	ldw	r7,8(fp)
   11e6c:	00119f00 	call	119f0 <alt_up_pixel_buffer_dma_draw_vline>
}
   11e70:	e037883a 	mov	sp,fp
   11e74:	dfc00117 	ldw	ra,4(sp)
   11e78:	df000017 	ldw	fp,0(sp)
   11e7c:	dec00204 	addi	sp,sp,8
   11e80:	f800283a 	ret

00011e84 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   11e84:	defffb04 	addi	sp,sp,-20
   11e88:	df000415 	stw	fp,16(sp)
   11e8c:	df000404 	addi	fp,sp,16
   11e90:	e13ffc15 	stw	r4,-16(fp)
   11e94:	e17ffd15 	stw	r5,-12(fp)
   11e98:	e1bffe15 	stw	r6,-8(fp)
   11e9c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   11ea0:	e0c00217 	ldw	r3,8(fp)
   11ea4:	1804c03a 	cmpne	r2,r3,zero
   11ea8:	10000b1e 	bne	r2,zero,11ed8 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   11eac:	e13ffd17 	ldw	r4,-12(fp)
   11eb0:	e0ffff17 	ldw	r3,-4(fp)
   11eb4:	20c5383a 	mul	r2,r4,r3
   11eb8:	e13ffe17 	ldw	r4,-8(fp)
   11ebc:	1105883a 	add	r2,r2,r4
   11ec0:	1007883a 	mov	r3,r2
   11ec4:	e0bffc17 	ldw	r2,-16(fp)
   11ec8:	1885883a 	add	r2,r3,r2
   11ecc:	e0c00117 	ldw	r3,4(fp)
   11ed0:	10c00025 	stbio	r3,0(r2)
   11ed4:	00001b06 	br	11f44 <helper_plot_pixel+0xc0>
	else if (mode == 1)
   11ed8:	e1000217 	ldw	r4,8(fp)
   11edc:	20800058 	cmpnei	r2,r4,1
   11ee0:	10000c1e 	bne	r2,zero,11f14 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   11ee4:	e0fffd17 	ldw	r3,-12(fp)
   11ee8:	e13fff17 	ldw	r4,-4(fp)
   11eec:	1905383a 	mul	r2,r3,r4
   11ef0:	e0fffe17 	ldw	r3,-8(fp)
   11ef4:	10c5883a 	add	r2,r2,r3
   11ef8:	1085883a 	add	r2,r2,r2
   11efc:	1007883a 	mov	r3,r2
   11f00:	e0bffc17 	ldw	r2,-16(fp)
   11f04:	1885883a 	add	r2,r3,r2
   11f08:	e1000117 	ldw	r4,4(fp)
   11f0c:	1100002d 	sthio	r4,0(r2)
   11f10:	00000c06 	br	11f44 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   11f14:	e0fffd17 	ldw	r3,-12(fp)
   11f18:	e13fff17 	ldw	r4,-4(fp)
   11f1c:	1905383a 	mul	r2,r3,r4
   11f20:	e0fffe17 	ldw	r3,-8(fp)
   11f24:	10c5883a 	add	r2,r2,r3
   11f28:	1085883a 	add	r2,r2,r2
   11f2c:	1085883a 	add	r2,r2,r2
   11f30:	1007883a 	mov	r3,r2
   11f34:	e0bffc17 	ldw	r2,-16(fp)
   11f38:	1885883a 	add	r2,r3,r2
   11f3c:	e1000117 	ldw	r4,4(fp)
   11f40:	11000035 	stwio	r4,0(r2)
}
   11f44:	e037883a 	mov	sp,fp
   11f48:	df000017 	ldw	fp,0(sp)
   11f4c:	dec00104 	addi	sp,sp,4
   11f50:	f800283a 	ret

00011f54 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   11f54:	deffe404 	addi	sp,sp,-112
   11f58:	dfc01b15 	stw	ra,108(sp)
   11f5c:	df001a15 	stw	fp,104(sp)
   11f60:	df001a04 	addi	fp,sp,104
   11f64:	e13fe815 	stw	r4,-96(fp)
   11f68:	e17fe915 	stw	r5,-92(fp)
   11f6c:	e1bfea15 	stw	r6,-88(fp)
   11f70:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   11f74:	e0bfe917 	ldw	r2,-92(fp)
   11f78:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   11f7c:	e0ffea17 	ldw	r3,-88(fp)
   11f80:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   11f84:	e13feb17 	ldw	r4,-84(fp)
   11f88:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   11f8c:	e0800217 	ldw	r2,8(fp)
   11f90:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   11f94:	e0fff717 	ldw	r3,-36(fp)
   11f98:	e13ff917 	ldw	r4,-28(fp)
   11f9c:	1905c83a 	sub	r2,r3,r4
   11fa0:	e0bfff15 	stw	r2,-4(fp)
   11fa4:	e0ffff17 	ldw	r3,-4(fp)
   11fa8:	1804403a 	cmpge	r2,r3,zero
   11fac:	1000031e 	bne	r2,zero,11fbc <alt_up_pixel_buffer_dma_draw_line+0x68>
   11fb0:	e13fff17 	ldw	r4,-4(fp)
   11fb4:	0109c83a 	sub	r4,zero,r4
   11fb8:	e13fff15 	stw	r4,-4(fp)
   11fbc:	e0fff817 	ldw	r3,-32(fp)
   11fc0:	e13ffa17 	ldw	r4,-24(fp)
   11fc4:	1905c83a 	sub	r2,r3,r4
   11fc8:	e0bffe15 	stw	r2,-8(fp)
   11fcc:	e0fffe17 	ldw	r3,-8(fp)
   11fd0:	1804403a 	cmpge	r2,r3,zero
   11fd4:	1000031e 	bne	r2,zero,11fe4 <alt_up_pixel_buffer_dma_draw_line+0x90>
   11fd8:	e13ffe17 	ldw	r4,-8(fp)
   11fdc:	0109c83a 	sub	r4,zero,r4
   11fe0:	e13ffe15 	stw	r4,-8(fp)
   11fe4:	e0fffe17 	ldw	r3,-8(fp)
   11fe8:	e13fff17 	ldw	r4,-4(fp)
   11fec:	1904803a 	cmplt	r2,r3,r4
   11ff0:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   11ff4:	e0bfe817 	ldw	r2,-96(fp)
   11ff8:	10800e17 	ldw	r2,56(r2)
   11ffc:	10800060 	cmpeqi	r2,r2,1
   12000:	10000c1e 	bne	r2,zero,12034 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   12004:	e0bfe817 	ldw	r2,-96(fp)
   12008:	10800e17 	ldw	r2,56(r2)
   1200c:	10800098 	cmpnei	r2,r2,2
   12010:	1000031e 	bne	r2,zero,12020 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   12014:	00800044 	movi	r2,1
   12018:	e0bffc15 	stw	r2,-16(fp)
   1201c:	00000206 	br	12028 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   12020:	00c00084 	movi	r3,2
   12024:	e0fffc15 	stw	r3,-16(fp)
   12028:	e13ffc17 	ldw	r4,-16(fp)
   1202c:	e13ffd15 	stw	r4,-12(fp)
   12030:	00000106 	br	12038 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   12034:	e03ffd15 	stw	zero,-12(fp)
   12038:	e0bffd17 	ldw	r2,-12(fp)
   1203c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   12040:	e0c00317 	ldw	r3,12(fp)
   12044:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   12048:	e0bfe817 	ldw	r2,-96(fp)
   1204c:	10800d17 	ldw	r2,52(r2)
   12050:	1004c03a 	cmpne	r2,r2,zero
   12054:	1000091e 	bne	r2,zero,1207c <alt_up_pixel_buffer_dma_draw_line+0x128>
   12058:	e0bfe817 	ldw	r2,-96(fp)
   1205c:	10c01317 	ldw	r3,76(r2)
   12060:	e0bfef17 	ldw	r2,-68(fp)
   12064:	1885c83a 	sub	r2,r3,r2
   12068:	1007883a 	mov	r3,r2
   1206c:	00800044 	movi	r2,1
   12070:	10c4983a 	sll	r2,r2,r3
   12074:	e0bffb15 	stw	r2,-20(fp)
   12078:	00000306 	br	12088 <alt_up_pixel_buffer_dma_draw_line+0x134>
   1207c:	e0bfe817 	ldw	r2,-96(fp)
   12080:	10800f17 	ldw	r2,60(r2)
   12084:	e0bffb15 	stw	r2,-20(fp)
   12088:	e13ffb17 	ldw	r4,-20(fp)
   1208c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   12090:	e0800417 	ldw	r2,16(fp)
   12094:	10800058 	cmpnei	r2,r2,1
   12098:	1000041e 	bne	r2,zero,120ac <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   1209c:	e0bfe817 	ldw	r2,-96(fp)
   120a0:	10800c17 	ldw	r2,48(r2)
   120a4:	e0bfed15 	stw	r2,-76(fp)
   120a8:	00000306 	br	120b8 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   120ac:	e0bfe817 	ldw	r2,-96(fp)
   120b0:	10800b17 	ldw	r2,44(r2)
   120b4:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   120b8:	e0fff603 	ldbu	r3,-40(fp)
   120bc:	18803fcc 	andi	r2,r3,255
   120c0:	1080201c 	xori	r2,r2,128
   120c4:	10bfe004 	addi	r2,r2,-128
   120c8:	10800050 	cmplti	r2,r2,1
   120cc:	10000c1e 	bne	r2,zero,12100 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   120d0:	e13ffa17 	ldw	r4,-24(fp)
   120d4:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   120d8:	e0bff917 	ldw	r2,-28(fp)
   120dc:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   120e0:	e0fff317 	ldw	r3,-52(fp)
   120e4:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   120e8:	e13ff817 	ldw	r4,-32(fp)
   120ec:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   120f0:	e0bff717 	ldw	r2,-36(fp)
   120f4:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   120f8:	e0fff317 	ldw	r3,-52(fp)
   120fc:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   12100:	e13ff817 	ldw	r4,-32(fp)
   12104:	e0bffa17 	ldw	r2,-24(fp)
   12108:	20800c0e 	bge	r4,r2,1213c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   1210c:	e0fffa17 	ldw	r3,-24(fp)
   12110:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   12114:	e13ff817 	ldw	r4,-32(fp)
   12118:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   1211c:	e0bff317 	ldw	r2,-52(fp)
   12120:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   12124:	e0fff917 	ldw	r3,-28(fp)
   12128:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   1212c:	e13ff717 	ldw	r4,-36(fp)
   12130:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   12134:	e0bff317 	ldw	r2,-52(fp)
   12138:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1213c:	e0fff817 	ldw	r3,-32(fp)
   12140:	e13ffa17 	ldw	r4,-24(fp)
   12144:	1907c83a 	sub	r3,r3,r4
   12148:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   1214c:	e0fff717 	ldw	r3,-36(fp)
   12150:	e13ff917 	ldw	r4,-28(fp)
   12154:	1905c83a 	sub	r2,r3,r4
   12158:	e0bff415 	stw	r2,-48(fp)
   1215c:	e0fff417 	ldw	r3,-48(fp)
   12160:	1804403a 	cmpge	r2,r3,zero
   12164:	1000031e 	bne	r2,zero,12174 <alt_up_pixel_buffer_dma_draw_line+0x220>
   12168:	e13ff417 	ldw	r4,-48(fp)
   1216c:	0109c83a 	sub	r4,zero,r4
   12170:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   12174:	e0fff517 	ldw	r3,-44(fp)
   12178:	1804d7fa 	srli	r2,r3,31
   1217c:	e13ff517 	ldw	r4,-44(fp)
   12180:	1105883a 	add	r2,r2,r4
   12184:	1005d07a 	srai	r2,r2,1
   12188:	0085c83a 	sub	r2,zero,r2
   1218c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   12190:	e0bff917 	ldw	r2,-28(fp)
   12194:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   12198:	e0fff917 	ldw	r3,-28(fp)
   1219c:	e13ff717 	ldw	r4,-36(fp)
   121a0:	1900030e 	bge	r3,r4,121b0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   121a4:	00800044 	movi	r2,1
   121a8:	e0bff215 	stw	r2,-56(fp)
   121ac:	00000206 	br	121b8 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   121b0:	00ffffc4 	movi	r3,-1
   121b4:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   121b8:	e13ff603 	ldbu	r4,-40(fp)
   121bc:	20803fcc 	andi	r2,r4,255
   121c0:	1080201c 	xori	r2,r2,128
   121c4:	10bfe004 	addi	r2,r2,-128
   121c8:	10800058 	cmpnei	r2,r2,1
   121cc:	1000221e 	bne	r2,zero,12258 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   121d0:	e0bffa17 	ldw	r2,-24(fp)
   121d4:	e0bff115 	stw	r2,-60(fp)
   121d8:	00001b06 	br	12248 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   121dc:	e0ffee17 	ldw	r3,-72(fp)
   121e0:	d8c00015 	stw	r3,0(sp)
   121e4:	e13fef17 	ldw	r4,-68(fp)
   121e8:	d9000115 	stw	r4,4(sp)
   121ec:	e13fed17 	ldw	r4,-76(fp)
   121f0:	e17fec17 	ldw	r5,-80(fp)
   121f4:	e1bff017 	ldw	r6,-64(fp)
   121f8:	e1fff117 	ldw	r7,-60(fp)
   121fc:	0011e840 	call	11e84 <helper_plot_pixel>
			error = error + deltay;
   12200:	e0bff317 	ldw	r2,-52(fp)
   12204:	e0fff417 	ldw	r3,-48(fp)
   12208:	10c5883a 	add	r2,r2,r3
   1220c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   12210:	e13ff317 	ldw	r4,-52(fp)
   12214:	20800050 	cmplti	r2,r4,1
   12218:	1000081e 	bne	r2,zero,1223c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   1221c:	e0bff017 	ldw	r2,-64(fp)
   12220:	e0fff217 	ldw	r3,-56(fp)
   12224:	10c5883a 	add	r2,r2,r3
   12228:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   1222c:	e13ff317 	ldw	r4,-52(fp)
   12230:	e0bff517 	ldw	r2,-44(fp)
   12234:	2089c83a 	sub	r4,r4,r2
   12238:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   1223c:	e0fff117 	ldw	r3,-60(fp)
   12240:	18c00044 	addi	r3,r3,1
   12244:	e0fff115 	stw	r3,-60(fp)
   12248:	e13ff817 	ldw	r4,-32(fp)
   1224c:	e0bff117 	ldw	r2,-60(fp)
   12250:	20bfe20e 	bge	r4,r2,121dc <alt_up_pixel_buffer_dma_draw_line+0x288>
   12254:	00002106 	br	122dc <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   12258:	e0fffa17 	ldw	r3,-24(fp)
   1225c:	e0fff115 	stw	r3,-60(fp)
   12260:	00001b06 	br	122d0 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   12264:	e13fee17 	ldw	r4,-72(fp)
   12268:	d9000015 	stw	r4,0(sp)
   1226c:	e0bfef17 	ldw	r2,-68(fp)
   12270:	d8800115 	stw	r2,4(sp)
   12274:	e13fed17 	ldw	r4,-76(fp)
   12278:	e17fec17 	ldw	r5,-80(fp)
   1227c:	e1bff117 	ldw	r6,-60(fp)
   12280:	e1fff017 	ldw	r7,-64(fp)
   12284:	0011e840 	call	11e84 <helper_plot_pixel>
			error = error + deltay;
   12288:	e0fff317 	ldw	r3,-52(fp)
   1228c:	e13ff417 	ldw	r4,-48(fp)
   12290:	1907883a 	add	r3,r3,r4
   12294:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   12298:	e0fff317 	ldw	r3,-52(fp)
   1229c:	18800050 	cmplti	r2,r3,1
   122a0:	1000081e 	bne	r2,zero,122c4 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   122a4:	e13ff017 	ldw	r4,-64(fp)
   122a8:	e0bff217 	ldw	r2,-56(fp)
   122ac:	2089883a 	add	r4,r4,r2
   122b0:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   122b4:	e0fff317 	ldw	r3,-52(fp)
   122b8:	e13ff517 	ldw	r4,-44(fp)
   122bc:	1907c83a 	sub	r3,r3,r4
   122c0:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   122c4:	e0bff117 	ldw	r2,-60(fp)
   122c8:	10800044 	addi	r2,r2,1
   122cc:	e0bff115 	stw	r2,-60(fp)
   122d0:	e0fff817 	ldw	r3,-32(fp)
   122d4:	e13ff117 	ldw	r4,-60(fp)
   122d8:	193fe20e 	bge	r3,r4,12264 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   122dc:	e037883a 	mov	sp,fp
   122e0:	dfc00117 	ldw	ra,4(sp)
   122e4:	df000017 	ldw	fp,0(sp)
   122e8:	dec00204 	addi	sp,sp,8
   122ec:	f800283a 	ret

000122f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   122f0:	defff404 	addi	sp,sp,-48
   122f4:	df000b15 	stw	fp,44(sp)
   122f8:	df000b04 	addi	fp,sp,44
   122fc:	e13ffb15 	stw	r4,-20(fp)
   12300:	e17ffc15 	stw	r5,-16(fp)
   12304:	e1bffd15 	stw	r6,-12(fp)
   12308:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1230c:	e03ff915 	stw	zero,-28(fp)
   12310:	008000b4 	movhi	r2,2
   12314:	10a07f04 	addi	r2,r2,-32260
   12318:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1231c:	1005003a 	cmpeq	r2,r2,zero
   12320:	1000411e 	bne	r2,zero,12428 <alt_alarm_start+0x138>
  {
    if (alarm)
   12324:	e0bffb17 	ldw	r2,-20(fp)
   12328:	1005003a 	cmpeq	r2,r2,zero
   1232c:	10003b1e 	bne	r2,zero,1241c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   12330:	e0fffb17 	ldw	r3,-20(fp)
   12334:	e0bffd17 	ldw	r2,-12(fp)
   12338:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1233c:	e0fffb17 	ldw	r3,-20(fp)
   12340:	e0bffe17 	ldw	r2,-8(fp)
   12344:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12348:	0005303a 	rdctl	r2,status
   1234c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12350:	e0fff817 	ldw	r3,-32(fp)
   12354:	00bfff84 	movi	r2,-2
   12358:	1884703a 	and	r2,r3,r2
   1235c:	1001703a 	wrctl	status,r2
  
  return context;
   12360:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   12364:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12368:	008000b4 	movhi	r2,2
   1236c:	10a08004 	addi	r2,r2,-32256
   12370:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   12374:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12378:	e0fffc17 	ldw	r3,-16(fp)
   1237c:	e0bff917 	ldw	r2,-28(fp)
   12380:	1885883a 	add	r2,r3,r2
   12384:	10c00044 	addi	r3,r2,1
   12388:	e0bffb17 	ldw	r2,-20(fp)
   1238c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12390:	e0bffb17 	ldw	r2,-20(fp)
   12394:	10c00217 	ldw	r3,8(r2)
   12398:	e0bff917 	ldw	r2,-28(fp)
   1239c:	1880042e 	bgeu	r3,r2,123b0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   123a0:	e0fffb17 	ldw	r3,-20(fp)
   123a4:	00800044 	movi	r2,1
   123a8:	18800405 	stb	r2,16(r3)
   123ac:	00000206 	br	123b8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   123b0:	e0bffb17 	ldw	r2,-20(fp)
   123b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   123b8:	e0fffb17 	ldw	r3,-20(fp)
   123bc:	00800074 	movhi	r2,1
   123c0:	10982b04 	addi	r2,r2,24748
   123c4:	e0bff615 	stw	r2,-40(fp)
   123c8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   123cc:	e0fff717 	ldw	r3,-36(fp)
   123d0:	e0bff617 	ldw	r2,-40(fp)
   123d4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   123d8:	e0bff617 	ldw	r2,-40(fp)
   123dc:	10c00017 	ldw	r3,0(r2)
   123e0:	e0bff717 	ldw	r2,-36(fp)
   123e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   123e8:	e0bff617 	ldw	r2,-40(fp)
   123ec:	10c00017 	ldw	r3,0(r2)
   123f0:	e0bff717 	ldw	r2,-36(fp)
   123f4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   123f8:	e0fff617 	ldw	r3,-40(fp)
   123fc:	e0bff717 	ldw	r2,-36(fp)
   12400:	18800015 	stw	r2,0(r3)
   12404:	e0bffa17 	ldw	r2,-24(fp)
   12408:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1240c:	e0bff517 	ldw	r2,-44(fp)
   12410:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12414:	e03fff15 	stw	zero,-4(fp)
   12418:	00000506 	br	12430 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1241c:	00bffa84 	movi	r2,-22
   12420:	e0bfff15 	stw	r2,-4(fp)
   12424:	00000206 	br	12430 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   12428:	00bfde84 	movi	r2,-134
   1242c:	e0bfff15 	stw	r2,-4(fp)
   12430:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   12434:	e037883a 	mov	sp,fp
   12438:	df000017 	ldw	fp,0(sp)
   1243c:	dec00104 	addi	sp,sp,4
   12440:	f800283a 	ret

00012444 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12444:	deffff04 	addi	sp,sp,-4
   12448:	df000015 	stw	fp,0(sp)
   1244c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12450:	e037883a 	mov	sp,fp
   12454:	df000017 	ldw	fp,0(sp)
   12458:	dec00104 	addi	sp,sp,4
   1245c:	f800283a 	ret

00012460 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12460:	defff904 	addi	sp,sp,-28
   12464:	dfc00615 	stw	ra,24(sp)
   12468:	df000515 	stw	fp,20(sp)
   1246c:	df000504 	addi	fp,sp,20
   12470:	e13ffd15 	stw	r4,-12(fp)
   12474:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12478:	e0bffd17 	ldw	r2,-12(fp)
   1247c:	1005003a 	cmpeq	r2,r2,zero
   12480:	1000041e 	bne	r2,zero,12494 <alt_dev_llist_insert+0x34>
   12484:	e0bffd17 	ldw	r2,-12(fp)
   12488:	10800217 	ldw	r2,8(r2)
   1248c:	1004c03a 	cmpne	r2,r2,zero
   12490:	1000071e 	bne	r2,zero,124b0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   12494:	00125140 	call	12514 <alt_get_errno>
   12498:	1007883a 	mov	r3,r2
   1249c:	00800584 	movi	r2,22
   124a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   124a4:	00bffa84 	movi	r2,-22
   124a8:	e0bfff15 	stw	r2,-4(fp)
   124ac:	00001306 	br	124fc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   124b0:	e0fffd17 	ldw	r3,-12(fp)
   124b4:	e0bffe17 	ldw	r2,-8(fp)
   124b8:	e0bffb15 	stw	r2,-20(fp)
   124bc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   124c0:	e0fffc17 	ldw	r3,-16(fp)
   124c4:	e0bffb17 	ldw	r2,-20(fp)
   124c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   124cc:	e0bffb17 	ldw	r2,-20(fp)
   124d0:	10c00017 	ldw	r3,0(r2)
   124d4:	e0bffc17 	ldw	r2,-16(fp)
   124d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   124dc:	e0bffb17 	ldw	r2,-20(fp)
   124e0:	10c00017 	ldw	r3,0(r2)
   124e4:	e0bffc17 	ldw	r2,-16(fp)
   124e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   124ec:	e0fffb17 	ldw	r3,-20(fp)
   124f0:	e0bffc17 	ldw	r2,-16(fp)
   124f4:	18800015 	stw	r2,0(r3)

  return 0;  
   124f8:	e03fff15 	stw	zero,-4(fp)
   124fc:	e0bfff17 	ldw	r2,-4(fp)
}
   12500:	e037883a 	mov	sp,fp
   12504:	dfc00117 	ldw	ra,4(sp)
   12508:	df000017 	ldw	fp,0(sp)
   1250c:	dec00204 	addi	sp,sp,8
   12510:	f800283a 	ret

00012514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12514:	defffd04 	addi	sp,sp,-12
   12518:	dfc00215 	stw	ra,8(sp)
   1251c:	df000115 	stw	fp,4(sp)
   12520:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12524:	00800074 	movhi	r2,1
   12528:	10982804 	addi	r2,r2,24736
   1252c:	10800017 	ldw	r2,0(r2)
   12530:	1005003a 	cmpeq	r2,r2,zero
   12534:	1000061e 	bne	r2,zero,12550 <alt_get_errno+0x3c>
   12538:	00800074 	movhi	r2,1
   1253c:	10982804 	addi	r2,r2,24736
   12540:	10800017 	ldw	r2,0(r2)
   12544:	103ee83a 	callr	r2
   12548:	e0bfff15 	stw	r2,-4(fp)
   1254c:	00000306 	br	1255c <alt_get_errno+0x48>
   12550:	008000b4 	movhi	r2,2
   12554:	10a07804 	addi	r2,r2,-32288
   12558:	e0bfff15 	stw	r2,-4(fp)
   1255c:	e0bfff17 	ldw	r2,-4(fp)
}
   12560:	e037883a 	mov	sp,fp
   12564:	dfc00117 	ldw	ra,4(sp)
   12568:	df000017 	ldw	fp,0(sp)
   1256c:	dec00204 	addi	sp,sp,8
   12570:	f800283a 	ret

00012574 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12574:	defffd04 	addi	sp,sp,-12
   12578:	dfc00215 	stw	ra,8(sp)
   1257c:	df000115 	stw	fp,4(sp)
   12580:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12584:	00bfff04 	movi	r2,-4
   12588:	00c00074 	movhi	r3,1
   1258c:	18cdf304 	addi	r3,r3,14284
   12590:	1885883a 	add	r2,r3,r2
   12594:	e0bfff15 	stw	r2,-4(fp)
   12598:	00000606 	br	125b4 <_do_ctors+0x40>
        (*ctor) (); 
   1259c:	e0bfff17 	ldw	r2,-4(fp)
   125a0:	10800017 	ldw	r2,0(r2)
   125a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   125a8:	e0bfff17 	ldw	r2,-4(fp)
   125ac:	10bfff04 	addi	r2,r2,-4
   125b0:	e0bfff15 	stw	r2,-4(fp)
   125b4:	e0ffff17 	ldw	r3,-4(fp)
   125b8:	00800074 	movhi	r2,1
   125bc:	108df204 	addi	r2,r2,14280
   125c0:	18bff62e 	bgeu	r3,r2,1259c <_do_ctors+0x28>
        (*ctor) (); 
}
   125c4:	e037883a 	mov	sp,fp
   125c8:	dfc00117 	ldw	ra,4(sp)
   125cc:	df000017 	ldw	fp,0(sp)
   125d0:	dec00204 	addi	sp,sp,8
   125d4:	f800283a 	ret

000125d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   125d8:	defffd04 	addi	sp,sp,-12
   125dc:	dfc00215 	stw	ra,8(sp)
   125e0:	df000115 	stw	fp,4(sp)
   125e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   125e8:	00bfff04 	movi	r2,-4
   125ec:	00c00074 	movhi	r3,1
   125f0:	18cdf304 	addi	r3,r3,14284
   125f4:	1885883a 	add	r2,r3,r2
   125f8:	e0bfff15 	stw	r2,-4(fp)
   125fc:	00000606 	br	12618 <_do_dtors+0x40>
        (*dtor) (); 
   12600:	e0bfff17 	ldw	r2,-4(fp)
   12604:	10800017 	ldw	r2,0(r2)
   12608:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1260c:	e0bfff17 	ldw	r2,-4(fp)
   12610:	10bfff04 	addi	r2,r2,-4
   12614:	e0bfff15 	stw	r2,-4(fp)
   12618:	e0ffff17 	ldw	r3,-4(fp)
   1261c:	00800074 	movhi	r2,1
   12620:	108df304 	addi	r2,r2,14284
   12624:	18bff62e 	bgeu	r3,r2,12600 <_do_dtors+0x28>
        (*dtor) (); 
}
   12628:	e037883a 	mov	sp,fp
   1262c:	dfc00117 	ldw	ra,4(sp)
   12630:	df000017 	ldw	fp,0(sp)
   12634:	dec00204 	addi	sp,sp,8
   12638:	f800283a 	ret

0001263c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1263c:	defff904 	addi	sp,sp,-28
   12640:	dfc00615 	stw	ra,24(sp)
   12644:	df000515 	stw	fp,20(sp)
   12648:	df000504 	addi	fp,sp,20
   1264c:	e13ffd15 	stw	r4,-12(fp)
   12650:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12654:	e0bffe17 	ldw	r2,-8(fp)
   12658:	10800017 	ldw	r2,0(r2)
   1265c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12660:	e13ffd17 	ldw	r4,-12(fp)
   12664:	000a7cc0 	call	a7cc <strlen>
   12668:	10800044 	addi	r2,r2,1
   1266c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12670:	00000d06 	br	126a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12674:	e0bffc17 	ldw	r2,-16(fp)
   12678:	11000217 	ldw	r4,8(r2)
   1267c:	e1bffb17 	ldw	r6,-20(fp)
   12680:	e17ffd17 	ldw	r5,-12(fp)
   12684:	00130d40 	call	130d4 <memcmp>
   12688:	1004c03a 	cmpne	r2,r2,zero
   1268c:	1000031e 	bne	r2,zero,1269c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12690:	e0bffc17 	ldw	r2,-16(fp)
   12694:	e0bfff15 	stw	r2,-4(fp)
   12698:	00000706 	br	126b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1269c:	e0bffc17 	ldw	r2,-16(fp)
   126a0:	10800017 	ldw	r2,0(r2)
   126a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   126a8:	e0fffe17 	ldw	r3,-8(fp)
   126ac:	e0bffc17 	ldw	r2,-16(fp)
   126b0:	10fff01e 	bne	r2,r3,12674 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   126b4:	e03fff15 	stw	zero,-4(fp)
   126b8:	e0bfff17 	ldw	r2,-4(fp)
}
   126bc:	e037883a 	mov	sp,fp
   126c0:	dfc00117 	ldw	ra,4(sp)
   126c4:	df000017 	ldw	fp,0(sp)
   126c8:	dec00204 	addi	sp,sp,8
   126cc:	f800283a 	ret

000126d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   126d0:	defffe04 	addi	sp,sp,-8
   126d4:	dfc00115 	stw	ra,4(sp)
   126d8:	df000015 	stw	fp,0(sp)
   126dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   126e0:	0009883a 	mov	r4,zero
   126e4:	01440004 	movi	r5,4096
   126e8:	0012ff80 	call	12ff8 <alt_icache_flush>
#endif
}
   126ec:	e037883a 	mov	sp,fp
   126f0:	dfc00117 	ldw	ra,4(sp)
   126f4:	df000017 	ldw	fp,0(sp)
   126f8:	dec00204 	addi	sp,sp,8
   126fc:	f800283a 	ret

00012700 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12700:	defff904 	addi	sp,sp,-28
   12704:	dfc00615 	stw	ra,24(sp)
   12708:	df000515 	stw	fp,20(sp)
   1270c:	df000504 	addi	fp,sp,20
   12710:	e13ffc15 	stw	r4,-16(fp)
   12714:	e17ffd15 	stw	r5,-12(fp)
   12718:	e1bffe15 	stw	r6,-8(fp)
   1271c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   12720:	e13ffd17 	ldw	r4,-12(fp)
   12724:	e17ffe17 	ldw	r5,-8(fp)
   12728:	e1bfff17 	ldw	r6,-4(fp)
   1272c:	00129180 	call	12918 <open>
   12730:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   12734:	e0bffb17 	ldw	r2,-20(fp)
   12738:	1004803a 	cmplt	r2,r2,zero
   1273c:	10001c1e 	bne	r2,zero,127b0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   12740:	e0bffb17 	ldw	r2,-20(fp)
   12744:	00c00074 	movhi	r3,1
   12748:	18d2b804 	addi	r3,r3,19168
   1274c:	10800324 	muli	r2,r2,12
   12750:	10c5883a 	add	r2,r2,r3
   12754:	10c00017 	ldw	r3,0(r2)
   12758:	e0bffc17 	ldw	r2,-16(fp)
   1275c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12760:	e0bffb17 	ldw	r2,-20(fp)
   12764:	00c00074 	movhi	r3,1
   12768:	18d2b804 	addi	r3,r3,19168
   1276c:	10800324 	muli	r2,r2,12
   12770:	10c5883a 	add	r2,r2,r3
   12774:	10800104 	addi	r2,r2,4
   12778:	10c00017 	ldw	r3,0(r2)
   1277c:	e0bffc17 	ldw	r2,-16(fp)
   12780:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12784:	e0bffb17 	ldw	r2,-20(fp)
   12788:	00c00074 	movhi	r3,1
   1278c:	18d2b804 	addi	r3,r3,19168
   12790:	10800324 	muli	r2,r2,12
   12794:	10c5883a 	add	r2,r2,r3
   12798:	10800204 	addi	r2,r2,8
   1279c:	10c00017 	ldw	r3,0(r2)
   127a0:	e0bffc17 	ldw	r2,-16(fp)
   127a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   127a8:	e13ffb17 	ldw	r4,-20(fp)
   127ac:	000d8280 	call	d828 <alt_release_fd>
  }
} 
   127b0:	e037883a 	mov	sp,fp
   127b4:	dfc00117 	ldw	ra,4(sp)
   127b8:	df000017 	ldw	fp,0(sp)
   127bc:	dec00204 	addi	sp,sp,8
   127c0:	f800283a 	ret

000127c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   127c4:	defffb04 	addi	sp,sp,-20
   127c8:	dfc00415 	stw	ra,16(sp)
   127cc:	df000315 	stw	fp,12(sp)
   127d0:	df000304 	addi	fp,sp,12
   127d4:	e13ffd15 	stw	r4,-12(fp)
   127d8:	e17ffe15 	stw	r5,-8(fp)
   127dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   127e0:	01000074 	movhi	r4,1
   127e4:	2112bb04 	addi	r4,r4,19180
   127e8:	e17ffd17 	ldw	r5,-12(fp)
   127ec:	01800044 	movi	r6,1
   127f0:	01c07fc4 	movi	r7,511
   127f4:	00127000 	call	12700 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   127f8:	01000074 	movhi	r4,1
   127fc:	2112b804 	addi	r4,r4,19168
   12800:	e17ffe17 	ldw	r5,-8(fp)
   12804:	000d883a 	mov	r6,zero
   12808:	01c07fc4 	movi	r7,511
   1280c:	00127000 	call	12700 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12810:	01000074 	movhi	r4,1
   12814:	2112be04 	addi	r4,r4,19192
   12818:	e17fff17 	ldw	r5,-4(fp)
   1281c:	01800044 	movi	r6,1
   12820:	01c07fc4 	movi	r7,511
   12824:	00127000 	call	12700 <alt_open_fd>
}  
   12828:	e037883a 	mov	sp,fp
   1282c:	dfc00117 	ldw	ra,4(sp)
   12830:	df000017 	ldw	fp,0(sp)
   12834:	dec00204 	addi	sp,sp,8
   12838:	f800283a 	ret

0001283c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1283c:	defffc04 	addi	sp,sp,-16
   12840:	df000315 	stw	fp,12(sp)
   12844:	df000304 	addi	fp,sp,12
   12848:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	10800217 	ldw	r2,8(r2)
   12854:	10d00034 	orhi	r3,r2,16384
   12858:	e0bffe17 	ldw	r2,-8(fp)
   1285c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12860:	e03ffd15 	stw	zero,-12(fp)
   12864:	00002006 	br	128e8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12868:	e0bffd17 	ldw	r2,-12(fp)
   1286c:	00c00074 	movhi	r3,1
   12870:	18d2b804 	addi	r3,r3,19168
   12874:	10800324 	muli	r2,r2,12
   12878:	10c5883a 	add	r2,r2,r3
   1287c:	10c00017 	ldw	r3,0(r2)
   12880:	e0bffe17 	ldw	r2,-8(fp)
   12884:	10800017 	ldw	r2,0(r2)
   12888:	1880141e 	bne	r3,r2,128dc <alt_file_locked+0xa0>
   1288c:	e0bffd17 	ldw	r2,-12(fp)
   12890:	00c00074 	movhi	r3,1
   12894:	18d2b804 	addi	r3,r3,19168
   12898:	10800324 	muli	r2,r2,12
   1289c:	10c5883a 	add	r2,r2,r3
   128a0:	10800204 	addi	r2,r2,8
   128a4:	10800017 	ldw	r2,0(r2)
   128a8:	1004403a 	cmpge	r2,r2,zero
   128ac:	10000b1e 	bne	r2,zero,128dc <alt_file_locked+0xa0>
   128b0:	e0bffd17 	ldw	r2,-12(fp)
   128b4:	10800324 	muli	r2,r2,12
   128b8:	1007883a 	mov	r3,r2
   128bc:	00800074 	movhi	r2,1
   128c0:	1092b804 	addi	r2,r2,19168
   128c4:	1887883a 	add	r3,r3,r2
   128c8:	e0bffe17 	ldw	r2,-8(fp)
   128cc:	18800326 	beq	r3,r2,128dc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   128d0:	00bffcc4 	movi	r2,-13
   128d4:	e0bfff15 	stw	r2,-4(fp)
   128d8:	00000a06 	br	12904 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   128dc:	e0bffd17 	ldw	r2,-12(fp)
   128e0:	10800044 	addi	r2,r2,1
   128e4:	e0bffd15 	stw	r2,-12(fp)
   128e8:	00800074 	movhi	r2,1
   128ec:	10982704 	addi	r2,r2,24732
   128f0:	10800017 	ldw	r2,0(r2)
   128f4:	1007883a 	mov	r3,r2
   128f8:	e0bffd17 	ldw	r2,-12(fp)
   128fc:	18bfda2e 	bgeu	r3,r2,12868 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12900:	e03fff15 	stw	zero,-4(fp)
   12904:	e0bfff17 	ldw	r2,-4(fp)
}
   12908:	e037883a 	mov	sp,fp
   1290c:	df000017 	ldw	fp,0(sp)
   12910:	dec00104 	addi	sp,sp,4
   12914:	f800283a 	ret

00012918 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12918:	defff404 	addi	sp,sp,-48
   1291c:	dfc00b15 	stw	ra,44(sp)
   12920:	df000a15 	stw	fp,40(sp)
   12924:	df000a04 	addi	fp,sp,40
   12928:	e13ffb15 	stw	r4,-20(fp)
   1292c:	e17ffc15 	stw	r5,-16(fp)
   12930:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12934:	00bfffc4 	movi	r2,-1
   12938:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1293c:	00bffb44 	movi	r2,-19
   12940:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   12944:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12948:	e13ffb17 	ldw	r4,-20(fp)
   1294c:	01400074 	movhi	r5,1
   12950:	29582504 	addi	r5,r5,24724
   12954:	001263c0 	call	1263c <alt_find_dev>
   12958:	e0bffa15 	stw	r2,-24(fp)
   1295c:	e0bffa17 	ldw	r2,-24(fp)
   12960:	1004c03a 	cmpne	r2,r2,zero
   12964:	1000051e 	bne	r2,zero,1297c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12968:	e13ffb17 	ldw	r4,-20(fp)
   1296c:	0012e200 	call	12e20 <alt_find_file>
   12970:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   12974:	00800044 	movi	r2,1
   12978:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1297c:	e0bffa17 	ldw	r2,-24(fp)
   12980:	1005003a 	cmpeq	r2,r2,zero
   12984:	1000301e 	bne	r2,zero,12a48 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12988:	e13ffa17 	ldw	r4,-24(fp)
   1298c:	0012f400 	call	12f40 <alt_get_fd>
   12990:	e0bff815 	stw	r2,-32(fp)
   12994:	e0bff817 	ldw	r2,-32(fp)
   12998:	1004403a 	cmpge	r2,r2,zero
   1299c:	1000031e 	bne	r2,zero,129ac <open+0x94>
    {
      status = index;
   129a0:	e0bff817 	ldw	r2,-32(fp)
   129a4:	e0bff715 	stw	r2,-36(fp)
   129a8:	00002906 	br	12a50 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   129ac:	e0bff817 	ldw	r2,-32(fp)
   129b0:	10800324 	muli	r2,r2,12
   129b4:	1007883a 	mov	r3,r2
   129b8:	00800074 	movhi	r2,1
   129bc:	1092b804 	addi	r2,r2,19168
   129c0:	1885883a 	add	r2,r3,r2
   129c4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   129c8:	e0fffc17 	ldw	r3,-16(fp)
   129cc:	00900034 	movhi	r2,16384
   129d0:	10bfffc4 	addi	r2,r2,-1
   129d4:	1886703a 	and	r3,r3,r2
   129d8:	e0bff917 	ldw	r2,-28(fp)
   129dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   129e0:	e0bff617 	ldw	r2,-40(fp)
   129e4:	1004c03a 	cmpne	r2,r2,zero
   129e8:	1000061e 	bne	r2,zero,12a04 <open+0xec>
   129ec:	e13ff917 	ldw	r4,-28(fp)
   129f0:	001283c0 	call	1283c <alt_file_locked>
   129f4:	e0bff715 	stw	r2,-36(fp)
   129f8:	e0bff717 	ldw	r2,-36(fp)
   129fc:	1004803a 	cmplt	r2,r2,zero
   12a00:	1000131e 	bne	r2,zero,12a50 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12a04:	e0bffa17 	ldw	r2,-24(fp)
   12a08:	10800317 	ldw	r2,12(r2)
   12a0c:	1005003a 	cmpeq	r2,r2,zero
   12a10:	1000091e 	bne	r2,zero,12a38 <open+0x120>
   12a14:	e0bffa17 	ldw	r2,-24(fp)
   12a18:	10800317 	ldw	r2,12(r2)
   12a1c:	e13ff917 	ldw	r4,-28(fp)
   12a20:	e17ffb17 	ldw	r5,-20(fp)
   12a24:	e1bffc17 	ldw	r6,-16(fp)
   12a28:	e1fffd17 	ldw	r7,-12(fp)
   12a2c:	103ee83a 	callr	r2
   12a30:	e0bfff15 	stw	r2,-4(fp)
   12a34:	00000106 	br	12a3c <open+0x124>
   12a38:	e03fff15 	stw	zero,-4(fp)
   12a3c:	e0bfff17 	ldw	r2,-4(fp)
   12a40:	e0bff715 	stw	r2,-36(fp)
   12a44:	00000206 	br	12a50 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12a48:	00bffb44 	movi	r2,-19
   12a4c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12a50:	e0bff717 	ldw	r2,-36(fp)
   12a54:	1004403a 	cmpge	r2,r2,zero
   12a58:	1000091e 	bne	r2,zero,12a80 <open+0x168>
  {
    alt_release_fd (index);  
   12a5c:	e13ff817 	ldw	r4,-32(fp)
   12a60:	000d8280 	call	d828 <alt_release_fd>
    ALT_ERRNO = -status;
   12a64:	0012aa00 	call	12aa0 <alt_get_errno>
   12a68:	e0fff717 	ldw	r3,-36(fp)
   12a6c:	00c7c83a 	sub	r3,zero,r3
   12a70:	10c00015 	stw	r3,0(r2)
    return -1;
   12a74:	00bfffc4 	movi	r2,-1
   12a78:	e0bffe15 	stw	r2,-8(fp)
   12a7c:	00000206 	br	12a88 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   12a80:	e0bff817 	ldw	r2,-32(fp)
   12a84:	e0bffe15 	stw	r2,-8(fp)
   12a88:	e0bffe17 	ldw	r2,-8(fp)
}
   12a8c:	e037883a 	mov	sp,fp
   12a90:	dfc00117 	ldw	ra,4(sp)
   12a94:	df000017 	ldw	fp,0(sp)
   12a98:	dec00204 	addi	sp,sp,8
   12a9c:	f800283a 	ret

00012aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12aa0:	defffd04 	addi	sp,sp,-12
   12aa4:	dfc00215 	stw	ra,8(sp)
   12aa8:	df000115 	stw	fp,4(sp)
   12aac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12ab0:	00800074 	movhi	r2,1
   12ab4:	10982804 	addi	r2,r2,24736
   12ab8:	10800017 	ldw	r2,0(r2)
   12abc:	1005003a 	cmpeq	r2,r2,zero
   12ac0:	1000061e 	bne	r2,zero,12adc <alt_get_errno+0x3c>
   12ac4:	00800074 	movhi	r2,1
   12ac8:	10982804 	addi	r2,r2,24736
   12acc:	10800017 	ldw	r2,0(r2)
   12ad0:	103ee83a 	callr	r2
   12ad4:	e0bfff15 	stw	r2,-4(fp)
   12ad8:	00000306 	br	12ae8 <alt_get_errno+0x48>
   12adc:	008000b4 	movhi	r2,2
   12ae0:	10a07804 	addi	r2,r2,-32288
   12ae4:	e0bfff15 	stw	r2,-4(fp)
   12ae8:	e0bfff17 	ldw	r2,-4(fp)
}
   12aec:	e037883a 	mov	sp,fp
   12af0:	dfc00117 	ldw	ra,4(sp)
   12af4:	df000017 	ldw	fp,0(sp)
   12af8:	dec00204 	addi	sp,sp,8
   12afc:	f800283a 	ret

00012b00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12b00:	defffa04 	addi	sp,sp,-24
   12b04:	df000515 	stw	fp,20(sp)
   12b08:	df000504 	addi	fp,sp,20
   12b0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b10:	0005303a 	rdctl	r2,status
   12b14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b18:	e0fffd17 	ldw	r3,-12(fp)
   12b1c:	00bfff84 	movi	r2,-2
   12b20:	1884703a 	and	r2,r3,r2
   12b24:	1001703a 	wrctl	status,r2
  
  return context;
   12b28:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12b2c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   12b30:	e0bfff17 	ldw	r2,-4(fp)
   12b34:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12b38:	e0bffc17 	ldw	r2,-16(fp)
   12b3c:	10c00017 	ldw	r3,0(r2)
   12b40:	e0bffc17 	ldw	r2,-16(fp)
   12b44:	10800117 	ldw	r2,4(r2)
   12b48:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   12b4c:	e0bffc17 	ldw	r2,-16(fp)
   12b50:	10c00117 	ldw	r3,4(r2)
   12b54:	e0bffc17 	ldw	r2,-16(fp)
   12b58:	10800017 	ldw	r2,0(r2)
   12b5c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12b60:	e0fffc17 	ldw	r3,-16(fp)
   12b64:	e0bffc17 	ldw	r2,-16(fp)
   12b68:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   12b6c:	e0fffc17 	ldw	r3,-16(fp)
   12b70:	e0bffc17 	ldw	r2,-16(fp)
   12b74:	18800015 	stw	r2,0(r3)
   12b78:	e0bffe17 	ldw	r2,-8(fp)
   12b7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b80:	e0bffb17 	ldw	r2,-20(fp)
   12b84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12b88:	e037883a 	mov	sp,fp
   12b8c:	df000017 	ldw	fp,0(sp)
   12b90:	dec00104 	addi	sp,sp,4
   12b94:	f800283a 	ret

00012b98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12b98:	defffb04 	addi	sp,sp,-20
   12b9c:	dfc00415 	stw	ra,16(sp)
   12ba0:	df000315 	stw	fp,12(sp)
   12ba4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12ba8:	d0a00e17 	ldw	r2,-32712(gp)
   12bac:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12bb0:	d0a86317 	ldw	r2,-24180(gp)
   12bb4:	10800044 	addi	r2,r2,1
   12bb8:	d0a86315 	stw	r2,-24180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12bbc:	00003106 	br	12c84 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   12bc0:	e0bffe17 	ldw	r2,-8(fp)
   12bc4:	10800017 	ldw	r2,0(r2)
   12bc8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12bcc:	e0bffe17 	ldw	r2,-8(fp)
   12bd0:	10800403 	ldbu	r2,16(r2)
   12bd4:	10803fcc 	andi	r2,r2,255
   12bd8:	1005003a 	cmpeq	r2,r2,zero
   12bdc:	1000051e 	bne	r2,zero,12bf4 <alt_tick+0x5c>
   12be0:	d0a86317 	ldw	r2,-24180(gp)
   12be4:	1004c03a 	cmpne	r2,r2,zero
   12be8:	1000021e 	bne	r2,zero,12bf4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   12bec:	e0bffe17 	ldw	r2,-8(fp)
   12bf0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12bf4:	e0bffe17 	ldw	r2,-8(fp)
   12bf8:	10c00217 	ldw	r3,8(r2)
   12bfc:	d0a86317 	ldw	r2,-24180(gp)
   12c00:	10c01e36 	bltu	r2,r3,12c7c <alt_tick+0xe4>
   12c04:	e0bffe17 	ldw	r2,-8(fp)
   12c08:	10800403 	ldbu	r2,16(r2)
   12c0c:	10803fcc 	andi	r2,r2,255
   12c10:	1004c03a 	cmpne	r2,r2,zero
   12c14:	1000191e 	bne	r2,zero,12c7c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   12c18:	e0bffe17 	ldw	r2,-8(fp)
   12c1c:	10c00317 	ldw	r3,12(r2)
   12c20:	e0bffe17 	ldw	r2,-8(fp)
   12c24:	11000517 	ldw	r4,20(r2)
   12c28:	183ee83a 	callr	r3
   12c2c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12c30:	e0bffd17 	ldw	r2,-12(fp)
   12c34:	1004c03a 	cmpne	r2,r2,zero
   12c38:	1000031e 	bne	r2,zero,12c48 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   12c3c:	e13ffe17 	ldw	r4,-8(fp)
   12c40:	0012b000 	call	12b00 <alt_alarm_stop>
   12c44:	00000d06 	br	12c7c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   12c48:	e0bffe17 	ldw	r2,-8(fp)
   12c4c:	10c00217 	ldw	r3,8(r2)
   12c50:	e0bffd17 	ldw	r2,-12(fp)
   12c54:	1887883a 	add	r3,r3,r2
   12c58:	e0bffe17 	ldw	r2,-8(fp)
   12c5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12c60:	e0bffe17 	ldw	r2,-8(fp)
   12c64:	10c00217 	ldw	r3,8(r2)
   12c68:	d0a86317 	ldw	r2,-24180(gp)
   12c6c:	1880032e 	bgeu	r3,r2,12c7c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   12c70:	e0fffe17 	ldw	r3,-8(fp)
   12c74:	00800044 	movi	r2,1
   12c78:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   12c7c:	e0bfff17 	ldw	r2,-4(fp)
   12c80:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12c84:	d0e00e04 	addi	r3,gp,-32712
   12c88:	e0bffe17 	ldw	r2,-8(fp)
   12c8c:	10ffcc1e 	bne	r2,r3,12bc0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   12c90:	e037883a 	mov	sp,fp
   12c94:	dfc00117 	ldw	ra,4(sp)
   12c98:	df000017 	ldw	fp,0(sp)
   12c9c:	dec00204 	addi	sp,sp,8
   12ca0:	f800283a 	ret

00012ca4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   12ca4:	defffd04 	addi	sp,sp,-12
   12ca8:	dfc00215 	stw	ra,8(sp)
   12cac:	df000115 	stw	fp,4(sp)
   12cb0:	df000104 	addi	fp,sp,4
   12cb4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   12cb8:	e13fff17 	ldw	r4,-4(fp)
   12cbc:	0012cf40 	call	12cf4 <alt_busy_sleep>
}
   12cc0:	e037883a 	mov	sp,fp
   12cc4:	dfc00117 	ldw	ra,4(sp)
   12cc8:	df000017 	ldw	fp,0(sp)
   12ccc:	dec00204 	addi	sp,sp,8
   12cd0:	f800283a 	ret

00012cd4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   12cd4:	deffff04 	addi	sp,sp,-4
   12cd8:	df000015 	stw	fp,0(sp)
   12cdc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12ce0:	000170fa 	wrctl	ienable,zero
}
   12ce4:	e037883a 	mov	sp,fp
   12ce8:	df000017 	ldw	fp,0(sp)
   12cec:	dec00104 	addi	sp,sp,4
   12cf0:	f800283a 	ret

00012cf4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   12cf4:	defffb04 	addi	sp,sp,-20
   12cf8:	df000415 	stw	fp,16(sp)
   12cfc:	df000404 	addi	fp,sp,16
   12d00:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   12d04:	008000c4 	movi	r2,3
   12d08:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   12d0c:	e0fffc17 	ldw	r3,-16(fp)
   12d10:	008003f4 	movhi	r2,15
   12d14:	10909004 	addi	r2,r2,16960
   12d18:	1887383a 	mul	r3,r3,r2
   12d1c:	0080bef4 	movhi	r2,763
   12d20:	10bc2004 	addi	r2,r2,-3968
   12d24:	10c7203a 	divu	r3,r2,r3
   12d28:	00a00034 	movhi	r2,32768
   12d2c:	10bfffc4 	addi	r2,r2,-1
   12d30:	10c7203a 	divu	r3,r2,r3
   12d34:	e0bfff17 	ldw	r2,-4(fp)
   12d38:	10c5203a 	divu	r2,r2,r3
   12d3c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   12d40:	e0bffd17 	ldw	r2,-12(fp)
   12d44:	1005003a 	cmpeq	r2,r2,zero
   12d48:	1000251e 	bne	r2,zero,12de0 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   12d4c:	e03ffe15 	stw	zero,-8(fp)
   12d50:	00001406 	br	12da4 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12d54:	00a00034 	movhi	r2,32768
   12d58:	10bfffc4 	addi	r2,r2,-1
   12d5c:	10bfffc4 	addi	r2,r2,-1
   12d60:	103ffe1e 	bne	r2,zero,12d5c <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12d64:	e0fffc17 	ldw	r3,-16(fp)
   12d68:	008003f4 	movhi	r2,15
   12d6c:	10909004 	addi	r2,r2,16960
   12d70:	1887383a 	mul	r3,r3,r2
   12d74:	0080bef4 	movhi	r2,763
   12d78:	10bc2004 	addi	r2,r2,-3968
   12d7c:	10c7203a 	divu	r3,r2,r3
   12d80:	00a00034 	movhi	r2,32768
   12d84:	10bfffc4 	addi	r2,r2,-1
   12d88:	10c7203a 	divu	r3,r2,r3
   12d8c:	e0bfff17 	ldw	r2,-4(fp)
   12d90:	10c5c83a 	sub	r2,r2,r3
   12d94:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12d98:	e0bffe17 	ldw	r2,-8(fp)
   12d9c:	10800044 	addi	r2,r2,1
   12da0:	e0bffe15 	stw	r2,-8(fp)
   12da4:	e0fffe17 	ldw	r3,-8(fp)
   12da8:	e0bffd17 	ldw	r2,-12(fp)
   12dac:	18bfe916 	blt	r3,r2,12d54 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12db0:	e0fffc17 	ldw	r3,-16(fp)
   12db4:	008003f4 	movhi	r2,15
   12db8:	10909004 	addi	r2,r2,16960
   12dbc:	1887383a 	mul	r3,r3,r2
   12dc0:	0080bef4 	movhi	r2,763
   12dc4:	10bc2004 	addi	r2,r2,-3968
   12dc8:	10c7203a 	divu	r3,r2,r3
   12dcc:	e0bfff17 	ldw	r2,-4(fp)
   12dd0:	1885383a 	mul	r2,r3,r2
   12dd4:	10bfffc4 	addi	r2,r2,-1
   12dd8:	103ffe1e 	bne	r2,zero,12dd4 <alt_busy_sleep+0xe0>
   12ddc:	00000b06 	br	12e0c <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12de0:	e0fffc17 	ldw	r3,-16(fp)
   12de4:	008003f4 	movhi	r2,15
   12de8:	10909004 	addi	r2,r2,16960
   12dec:	1887383a 	mul	r3,r3,r2
   12df0:	0080bef4 	movhi	r2,763
   12df4:	10bc2004 	addi	r2,r2,-3968
   12df8:	10c7203a 	divu	r3,r2,r3
   12dfc:	e0bfff17 	ldw	r2,-4(fp)
   12e00:	1885383a 	mul	r2,r3,r2
   12e04:	10bfffc4 	addi	r2,r2,-1
   12e08:	00bffe16 	blt	zero,r2,12e04 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   12e0c:	0005883a 	mov	r2,zero
}
   12e10:	e037883a 	mov	sp,fp
   12e14:	df000017 	ldw	fp,0(sp)
   12e18:	dec00104 	addi	sp,sp,4
   12e1c:	f800283a 	ret

00012e20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12e20:	defffa04 	addi	sp,sp,-24
   12e24:	dfc00515 	stw	ra,20(sp)
   12e28:	df000415 	stw	fp,16(sp)
   12e2c:	df000404 	addi	fp,sp,16
   12e30:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12e34:	00800074 	movhi	r2,1
   12e38:	10982304 	addi	r2,r2,24716
   12e3c:	10800017 	ldw	r2,0(r2)
   12e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12e44:	00003306 	br	12f14 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   12e48:	e0bffd17 	ldw	r2,-12(fp)
   12e4c:	11000217 	ldw	r4,8(r2)
   12e50:	000a7cc0 	call	a7cc <strlen>
   12e54:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   12e58:	e0bffd17 	ldw	r2,-12(fp)
   12e5c:	10c00217 	ldw	r3,8(r2)
   12e60:	e0bffc17 	ldw	r2,-16(fp)
   12e64:	1885883a 	add	r2,r3,r2
   12e68:	10bfffc4 	addi	r2,r2,-1
   12e6c:	10800003 	ldbu	r2,0(r2)
   12e70:	10803fcc 	andi	r2,r2,255
   12e74:	1080201c 	xori	r2,r2,128
   12e78:	10bfe004 	addi	r2,r2,-128
   12e7c:	10800bd8 	cmpnei	r2,r2,47
   12e80:	1000031e 	bne	r2,zero,12e90 <alt_find_file+0x70>
    {
      len -= 1;
   12e84:	e0bffc17 	ldw	r2,-16(fp)
   12e88:	10bfffc4 	addi	r2,r2,-1
   12e8c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12e90:	e0bffc17 	ldw	r2,-16(fp)
   12e94:	1007883a 	mov	r3,r2
   12e98:	e0bffe17 	ldw	r2,-8(fp)
   12e9c:	1885883a 	add	r2,r3,r2
   12ea0:	10800003 	ldbu	r2,0(r2)
   12ea4:	10803fcc 	andi	r2,r2,255
   12ea8:	1080201c 	xori	r2,r2,128
   12eac:	10bfe004 	addi	r2,r2,-128
   12eb0:	10800be0 	cmpeqi	r2,r2,47
   12eb4:	10000a1e 	bne	r2,zero,12ee0 <alt_find_file+0xc0>
   12eb8:	e0bffc17 	ldw	r2,-16(fp)
   12ebc:	1007883a 	mov	r3,r2
   12ec0:	e0bffe17 	ldw	r2,-8(fp)
   12ec4:	1885883a 	add	r2,r3,r2
   12ec8:	10800003 	ldbu	r2,0(r2)
   12ecc:	10803fcc 	andi	r2,r2,255
   12ed0:	1080201c 	xori	r2,r2,128
   12ed4:	10bfe004 	addi	r2,r2,-128
   12ed8:	1004c03a 	cmpne	r2,r2,zero
   12edc:	10000a1e 	bne	r2,zero,12f08 <alt_find_file+0xe8>
   12ee0:	e0bffd17 	ldw	r2,-12(fp)
   12ee4:	11000217 	ldw	r4,8(r2)
   12ee8:	e1bffc17 	ldw	r6,-16(fp)
   12eec:	e17ffe17 	ldw	r5,-8(fp)
   12ef0:	00130d40 	call	130d4 <memcmp>
   12ef4:	1004c03a 	cmpne	r2,r2,zero
   12ef8:	1000031e 	bne	r2,zero,12f08 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12efc:	e0bffd17 	ldw	r2,-12(fp)
   12f00:	e0bfff15 	stw	r2,-4(fp)
   12f04:	00000806 	br	12f28 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   12f08:	e0bffd17 	ldw	r2,-12(fp)
   12f0c:	10800017 	ldw	r2,0(r2)
   12f10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12f14:	00c00074 	movhi	r3,1
   12f18:	18d82304 	addi	r3,r3,24716
   12f1c:	e0bffd17 	ldw	r2,-12(fp)
   12f20:	10ffc91e 	bne	r2,r3,12e48 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12f24:	e03fff15 	stw	zero,-4(fp)
   12f28:	e0bfff17 	ldw	r2,-4(fp)
}
   12f2c:	e037883a 	mov	sp,fp
   12f30:	dfc00117 	ldw	ra,4(sp)
   12f34:	df000017 	ldw	fp,0(sp)
   12f38:	dec00204 	addi	sp,sp,8
   12f3c:	f800283a 	ret

00012f40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12f40:	defffc04 	addi	sp,sp,-16
   12f44:	df000315 	stw	fp,12(sp)
   12f48:	df000304 	addi	fp,sp,12
   12f4c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12f50:	00bffa04 	movi	r2,-24
   12f54:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12f58:	e03ffe15 	stw	zero,-8(fp)
   12f5c:	00001e06 	br	12fd8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   12f60:	e0bffe17 	ldw	r2,-8(fp)
   12f64:	00c00074 	movhi	r3,1
   12f68:	18d2b804 	addi	r3,r3,19168
   12f6c:	10800324 	muli	r2,r2,12
   12f70:	10c5883a 	add	r2,r2,r3
   12f74:	10800017 	ldw	r2,0(r2)
   12f78:	1004c03a 	cmpne	r2,r2,zero
   12f7c:	1000131e 	bne	r2,zero,12fcc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   12f80:	e0bffe17 	ldw	r2,-8(fp)
   12f84:	00c00074 	movhi	r3,1
   12f88:	18d2b804 	addi	r3,r3,19168
   12f8c:	10800324 	muli	r2,r2,12
   12f90:	10c7883a 	add	r3,r2,r3
   12f94:	e0bfff17 	ldw	r2,-4(fp)
   12f98:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   12f9c:	00800074 	movhi	r2,1
   12fa0:	10982704 	addi	r2,r2,24732
   12fa4:	10c00017 	ldw	r3,0(r2)
   12fa8:	e0bffe17 	ldw	r2,-8(fp)
   12fac:	1880040e 	bge	r3,r2,12fc0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   12fb0:	00c00074 	movhi	r3,1
   12fb4:	18d82704 	addi	r3,r3,24732
   12fb8:	e0bffe17 	ldw	r2,-8(fp)
   12fbc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   12fc0:	e0bffe17 	ldw	r2,-8(fp)
   12fc4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12fc8:	00000606 	br	12fe4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12fcc:	e0bffe17 	ldw	r2,-8(fp)
   12fd0:	10800044 	addi	r2,r2,1
   12fd4:	e0bffe15 	stw	r2,-8(fp)
   12fd8:	e0bffe17 	ldw	r2,-8(fp)
   12fdc:	10800810 	cmplti	r2,r2,32
   12fe0:	103fdf1e 	bne	r2,zero,12f60 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12fe4:	e0bffd17 	ldw	r2,-12(fp)
}
   12fe8:	e037883a 	mov	sp,fp
   12fec:	df000017 	ldw	fp,0(sp)
   12ff0:	dec00104 	addi	sp,sp,4
   12ff4:	f800283a 	ret

00012ff8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12ff8:	defffb04 	addi	sp,sp,-20
   12ffc:	df000415 	stw	fp,16(sp)
   13000:	df000404 	addi	fp,sp,16
   13004:	e13ffe15 	stw	r4,-8(fp)
   13008:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1300c:	e0bfff17 	ldw	r2,-4(fp)
   13010:	10840070 	cmpltui	r2,r2,4097
   13014:	1000021e 	bne	r2,zero,13020 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13018:	00840004 	movi	r2,4096
   1301c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   13020:	e0fffe17 	ldw	r3,-8(fp)
   13024:	e0bfff17 	ldw	r2,-4(fp)
   13028:	1885883a 	add	r2,r3,r2
   1302c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13030:	e0bffe17 	ldw	r2,-8(fp)
   13034:	e0bffd15 	stw	r2,-12(fp)
   13038:	00000506 	br	13050 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1303c:	e0bffd17 	ldw	r2,-12(fp)
   13040:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13044:	e0bffd17 	ldw	r2,-12(fp)
   13048:	10800804 	addi	r2,r2,32
   1304c:	e0bffd15 	stw	r2,-12(fp)
   13050:	e0fffd17 	ldw	r3,-12(fp)
   13054:	e0bffc17 	ldw	r2,-16(fp)
   13058:	18bff836 	bltu	r3,r2,1303c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1305c:	e0bffe17 	ldw	r2,-8(fp)
   13060:	108007cc 	andi	r2,r2,31
   13064:	1005003a 	cmpeq	r2,r2,zero
   13068:	1000021e 	bne	r2,zero,13074 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1306c:	e0bffd17 	ldw	r2,-12(fp)
   13070:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   13074:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13078:	e037883a 	mov	sp,fp
   1307c:	df000017 	ldw	fp,0(sp)
   13080:	dec00104 	addi	sp,sp,4
   13084:	f800283a 	ret

00013088 <atexit>:
   13088:	200b883a 	mov	r5,r4
   1308c:	000d883a 	mov	r6,zero
   13090:	0009883a 	mov	r4,zero
   13094:	000f883a 	mov	r7,zero
   13098:	00134801 	jmpi	13480 <__register_exitproc>

0001309c <exit>:
   1309c:	defffe04 	addi	sp,sp,-8
   130a0:	000b883a 	mov	r5,zero
   130a4:	dc000015 	stw	r16,0(sp)
   130a8:	dfc00115 	stw	ra,4(sp)
   130ac:	2021883a 	mov	r16,r4
   130b0:	00135b80 	call	135b8 <__call_exitprocs>
   130b4:	00800074 	movhi	r2,1
   130b8:	10981e04 	addi	r2,r2,24696
   130bc:	11000017 	ldw	r4,0(r2)
   130c0:	20800f17 	ldw	r2,60(r4)
   130c4:	10000126 	beq	r2,zero,130cc <exit+0x30>
   130c8:	103ee83a 	callr	r2
   130cc:	8009883a 	mov	r4,r16
   130d0:	00137a80 	call	137a8 <_exit>

000130d4 <memcmp>:
   130d4:	00c000c4 	movi	r3,3
   130d8:	1980032e 	bgeu	r3,r6,130e8 <memcmp+0x14>
   130dc:	2144b03a 	or	r2,r4,r5
   130e0:	10c4703a 	and	r2,r2,r3
   130e4:	10000f26 	beq	r2,zero,13124 <memcmp+0x50>
   130e8:	31ffffc4 	addi	r7,r6,-1
   130ec:	3000061e 	bne	r6,zero,13108 <memcmp+0x34>
   130f0:	00000a06 	br	1311c <memcmp+0x48>
   130f4:	39ffffc4 	addi	r7,r7,-1
   130f8:	00bfffc4 	movi	r2,-1
   130fc:	21000044 	addi	r4,r4,1
   13100:	29400044 	addi	r5,r5,1
   13104:	38800526 	beq	r7,r2,1311c <memcmp+0x48>
   13108:	20c00003 	ldbu	r3,0(r4)
   1310c:	28800003 	ldbu	r2,0(r5)
   13110:	18bff826 	beq	r3,r2,130f4 <memcmp+0x20>
   13114:	1885c83a 	sub	r2,r3,r2
   13118:	f800283a 	ret
   1311c:	0005883a 	mov	r2,zero
   13120:	f800283a 	ret
   13124:	180f883a 	mov	r7,r3
   13128:	20c00017 	ldw	r3,0(r4)
   1312c:	28800017 	ldw	r2,0(r5)
   13130:	18bfed1e 	bne	r3,r2,130e8 <memcmp+0x14>
   13134:	31bfff04 	addi	r6,r6,-4
   13138:	21000104 	addi	r4,r4,4
   1313c:	29400104 	addi	r5,r5,4
   13140:	39bff936 	bltu	r7,r6,13128 <memcmp+0x54>
   13144:	003fe806 	br	130e8 <memcmp+0x14>

00013148 <putc>:
   13148:	defffc04 	addi	sp,sp,-16
   1314c:	dc800215 	stw	r18,8(sp)
   13150:	04800074 	movhi	r18,1
   13154:	94981d04 	addi	r18,r18,24692
   13158:	90c00017 	ldw	r3,0(r18)
   1315c:	dc400115 	stw	r17,4(sp)
   13160:	dc000015 	stw	r16,0(sp)
   13164:	dfc00315 	stw	ra,12(sp)
   13168:	2023883a 	mov	r17,r4
   1316c:	2821883a 	mov	r16,r5
   13170:	18000226 	beq	r3,zero,1317c <putc+0x34>
   13174:	18800e17 	ldw	r2,56(r3)
   13178:	10001126 	beq	r2,zero,131c0 <putc+0x78>
   1317c:	80800217 	ldw	r2,8(r16)
   13180:	10ffffc4 	addi	r3,r2,-1
   13184:	80c00215 	stw	r3,8(r16)
   13188:	18001316 	blt	r3,zero,131d8 <putc+0x90>
   1318c:	80800017 	ldw	r2,0(r16)
   13190:	14400005 	stb	r17,0(r2)
   13194:	80c00017 	ldw	r3,0(r16)
   13198:	18800044 	addi	r2,r3,1
   1319c:	18c00003 	ldbu	r3,0(r3)
   131a0:	80800015 	stw	r2,0(r16)
   131a4:	1805883a 	mov	r2,r3
   131a8:	dfc00317 	ldw	ra,12(sp)
   131ac:	dc800217 	ldw	r18,8(sp)
   131b0:	dc400117 	ldw	r17,4(sp)
   131b4:	dc000017 	ldw	r16,0(sp)
   131b8:	dec00404 	addi	sp,sp,16
   131bc:	f800283a 	ret
   131c0:	1809883a 	mov	r4,r3
   131c4:	00076ec0 	call	76ec <__sinit>
   131c8:	80800217 	ldw	r2,8(r16)
   131cc:	10ffffc4 	addi	r3,r2,-1
   131d0:	80c00215 	stw	r3,8(r16)
   131d4:	183fed0e 	bge	r3,zero,1318c <putc+0x44>
   131d8:	80800617 	ldw	r2,24(r16)
   131dc:	18800f16 	blt	r3,r2,1321c <putc+0xd4>
   131e0:	80800017 	ldw	r2,0(r16)
   131e4:	14400005 	stb	r17,0(r2)
   131e8:	81000017 	ldw	r4,0(r16)
   131ec:	00800284 	movi	r2,10
   131f0:	20c00003 	ldbu	r3,0(r4)
   131f4:	18801226 	beq	r3,r2,13240 <putc+0xf8>
   131f8:	20800044 	addi	r2,r4,1
   131fc:	80800015 	stw	r2,0(r16)
   13200:	1805883a 	mov	r2,r3
   13204:	dfc00317 	ldw	ra,12(sp)
   13208:	dc800217 	ldw	r18,8(sp)
   1320c:	dc400117 	ldw	r17,4(sp)
   13210:	dc000017 	ldw	r16,0(sp)
   13214:	dec00404 	addi	sp,sp,16
   13218:	f800283a 	ret
   1321c:	91000017 	ldw	r4,0(r18)
   13220:	880b883a 	mov	r5,r17
   13224:	800d883a 	mov	r6,r16
   13228:	dfc00317 	ldw	ra,12(sp)
   1322c:	dc800217 	ldw	r18,8(sp)
   13230:	dc400117 	ldw	r17,4(sp)
   13234:	dc000017 	ldw	r16,0(sp)
   13238:	dec00404 	addi	sp,sp,16
   1323c:	00133341 	jmpi	13334 <__swbuf_r>
   13240:	91000017 	ldw	r4,0(r18)
   13244:	180b883a 	mov	r5,r3
   13248:	003ff606 	br	13224 <putc+0xdc>

0001324c <_putc_r>:
   1324c:	defffc04 	addi	sp,sp,-16
   13250:	dc400215 	stw	r17,8(sp)
   13254:	dc000115 	stw	r16,4(sp)
   13258:	dfc00315 	stw	ra,12(sp)
   1325c:	2021883a 	mov	r16,r4
   13260:	2823883a 	mov	r17,r5
   13264:	20000226 	beq	r4,zero,13270 <_putc_r+0x24>
   13268:	20800e17 	ldw	r2,56(r4)
   1326c:	10001026 	beq	r2,zero,132b0 <_putc_r+0x64>
   13270:	30800217 	ldw	r2,8(r6)
   13274:	10ffffc4 	addi	r3,r2,-1
   13278:	30c00215 	stw	r3,8(r6)
   1327c:	18001316 	blt	r3,zero,132cc <_putc_r+0x80>
   13280:	30800017 	ldw	r2,0(r6)
   13284:	14400005 	stb	r17,0(r2)
   13288:	30c00017 	ldw	r3,0(r6)
   1328c:	18800044 	addi	r2,r3,1
   13290:	18c00003 	ldbu	r3,0(r3)
   13294:	30800015 	stw	r2,0(r6)
   13298:	1805883a 	mov	r2,r3
   1329c:	dfc00317 	ldw	ra,12(sp)
   132a0:	dc400217 	ldw	r17,8(sp)
   132a4:	dc000117 	ldw	r16,4(sp)
   132a8:	dec00404 	addi	sp,sp,16
   132ac:	f800283a 	ret
   132b0:	d9800015 	stw	r6,0(sp)
   132b4:	00076ec0 	call	76ec <__sinit>
   132b8:	d9800017 	ldw	r6,0(sp)
   132bc:	30800217 	ldw	r2,8(r6)
   132c0:	10ffffc4 	addi	r3,r2,-1
   132c4:	30c00215 	stw	r3,8(r6)
   132c8:	183fed0e 	bge	r3,zero,13280 <_putc_r+0x34>
   132cc:	30800617 	ldw	r2,24(r6)
   132d0:	18800e16 	blt	r3,r2,1330c <_putc_r+0xc0>
   132d4:	30800017 	ldw	r2,0(r6)
   132d8:	14400005 	stb	r17,0(r2)
   132dc:	31000017 	ldw	r4,0(r6)
   132e0:	00800284 	movi	r2,10
   132e4:	20c00003 	ldbu	r3,0(r4)
   132e8:	18800f26 	beq	r3,r2,13328 <_putc_r+0xdc>
   132ec:	20800044 	addi	r2,r4,1
   132f0:	30800015 	stw	r2,0(r6)
   132f4:	1805883a 	mov	r2,r3
   132f8:	dfc00317 	ldw	ra,12(sp)
   132fc:	dc400217 	ldw	r17,8(sp)
   13300:	dc000117 	ldw	r16,4(sp)
   13304:	dec00404 	addi	sp,sp,16
   13308:	f800283a 	ret
   1330c:	8009883a 	mov	r4,r16
   13310:	880b883a 	mov	r5,r17
   13314:	dfc00317 	ldw	ra,12(sp)
   13318:	dc400217 	ldw	r17,8(sp)
   1331c:	dc000117 	ldw	r16,4(sp)
   13320:	dec00404 	addi	sp,sp,16
   13324:	00133341 	jmpi	13334 <__swbuf_r>
   13328:	8009883a 	mov	r4,r16
   1332c:	180b883a 	mov	r5,r3
   13330:	003ff806 	br	13314 <_putc_r+0xc8>

00013334 <__swbuf_r>:
   13334:	defffc04 	addi	sp,sp,-16
   13338:	dc400215 	stw	r17,8(sp)
   1333c:	dc000115 	stw	r16,4(sp)
   13340:	dfc00315 	stw	ra,12(sp)
   13344:	2023883a 	mov	r17,r4
   13348:	2821883a 	mov	r16,r5
   1334c:	20000226 	beq	r4,zero,13358 <__swbuf_r+0x24>
   13350:	20800e17 	ldw	r2,56(r4)
   13354:	10002f26 	beq	r2,zero,13414 <__swbuf_r+0xe0>
   13358:	3080030b 	ldhu	r2,12(r6)
   1335c:	30c00617 	ldw	r3,24(r6)
   13360:	1080020c 	andi	r2,r2,8
   13364:	30c00215 	stw	r3,8(r6)
   13368:	10002226 	beq	r2,zero,133f4 <__swbuf_r+0xc0>
   1336c:	30c00417 	ldw	r3,16(r6)
   13370:	18002026 	beq	r3,zero,133f4 <__swbuf_r+0xc0>
   13374:	31000017 	ldw	r4,0(r6)
   13378:	30800517 	ldw	r2,20(r6)
   1337c:	20c7c83a 	sub	r3,r4,r3
   13380:	18802f0e 	bge	r3,r2,13440 <__swbuf_r+0x10c>
   13384:	19400044 	addi	r5,r3,1
   13388:	30800217 	ldw	r2,8(r6)
   1338c:	84003fcc 	andi	r16,r16,255
   13390:	20c00044 	addi	r3,r4,1
   13394:	10bfffc4 	addi	r2,r2,-1
   13398:	30800215 	stw	r2,8(r6)
   1339c:	24000005 	stb	r16,0(r4)
   133a0:	30800517 	ldw	r2,20(r6)
   133a4:	30c00015 	stw	r3,0(r6)
   133a8:	11400c26 	beq	r2,r5,133dc <__swbuf_r+0xa8>
   133ac:	3080030b 	ldhu	r2,12(r6)
   133b0:	1080004c 	andi	r2,r2,1
   133b4:	1005003a 	cmpeq	r2,r2,zero
   133b8:	10000626 	beq	r2,zero,133d4 <__swbuf_r+0xa0>
   133bc:	8005883a 	mov	r2,r16
   133c0:	dfc00317 	ldw	ra,12(sp)
   133c4:	dc400217 	ldw	r17,8(sp)
   133c8:	dc000117 	ldw	r16,4(sp)
   133cc:	dec00404 	addi	sp,sp,16
   133d0:	f800283a 	ret
   133d4:	00800284 	movi	r2,10
   133d8:	80bff81e 	bne	r16,r2,133bc <__swbuf_r+0x88>
   133dc:	8809883a 	mov	r4,r17
   133e0:	300b883a 	mov	r5,r6
   133e4:	00074540 	call	7454 <_fflush_r>
   133e8:	103ff426 	beq	r2,zero,133bc <__swbuf_r+0x88>
   133ec:	043fffc4 	movi	r16,-1
   133f0:	003ff206 	br	133bc <__swbuf_r+0x88>
   133f4:	300b883a 	mov	r5,r6
   133f8:	8809883a 	mov	r4,r17
   133fc:	d9800015 	stw	r6,0(sp)
   13400:	0005b4c0 	call	5b4c <__swsetup_r>
   13404:	d9800017 	ldw	r6,0(sp)
   13408:	1000061e 	bne	r2,zero,13424 <__swbuf_r+0xf0>
   1340c:	30c00417 	ldw	r3,16(r6)
   13410:	003fd806 	br	13374 <__swbuf_r+0x40>
   13414:	d9800015 	stw	r6,0(sp)
   13418:	00076ec0 	call	76ec <__sinit>
   1341c:	d9800017 	ldw	r6,0(sp)
   13420:	003fcd06 	br	13358 <__swbuf_r+0x24>
   13424:	3080030b 	ldhu	r2,12(r6)
   13428:	00c00244 	movi	r3,9
   1342c:	043fffc4 	movi	r16,-1
   13430:	10801014 	ori	r2,r2,64
   13434:	3080030d 	sth	r2,12(r6)
   13438:	88c00015 	stw	r3,0(r17)
   1343c:	003fdf06 	br	133bc <__swbuf_r+0x88>
   13440:	300b883a 	mov	r5,r6
   13444:	8809883a 	mov	r4,r17
   13448:	d9800015 	stw	r6,0(sp)
   1344c:	00074540 	call	7454 <_fflush_r>
   13450:	d9800017 	ldw	r6,0(sp)
   13454:	103fe51e 	bne	r2,zero,133ec <__swbuf_r+0xb8>
   13458:	31000017 	ldw	r4,0(r6)
   1345c:	01400044 	movi	r5,1
   13460:	003fc906 	br	13388 <__swbuf_r+0x54>

00013464 <__swbuf>:
   13464:	01800074 	movhi	r6,1
   13468:	31981d04 	addi	r6,r6,24692
   1346c:	2007883a 	mov	r3,r4
   13470:	31000017 	ldw	r4,0(r6)
   13474:	280d883a 	mov	r6,r5
   13478:	180b883a 	mov	r5,r3
   1347c:	00133341 	jmpi	13334 <__swbuf_r>

00013480 <__register_exitproc>:
   13480:	defffa04 	addi	sp,sp,-24
   13484:	00800074 	movhi	r2,1
   13488:	10981e04 	addi	r2,r2,24696
   1348c:	dc000015 	stw	r16,0(sp)
   13490:	14000017 	ldw	r16,0(r2)
   13494:	dd000415 	stw	r20,16(sp)
   13498:	2829883a 	mov	r20,r5
   1349c:	81405217 	ldw	r5,328(r16)
   134a0:	dcc00315 	stw	r19,12(sp)
   134a4:	dc800215 	stw	r18,8(sp)
   134a8:	dc400115 	stw	r17,4(sp)
   134ac:	dfc00515 	stw	ra,20(sp)
   134b0:	2023883a 	mov	r17,r4
   134b4:	3027883a 	mov	r19,r6
   134b8:	3825883a 	mov	r18,r7
   134bc:	28002526 	beq	r5,zero,13554 <__register_exitproc+0xd4>
   134c0:	29000117 	ldw	r4,4(r5)
   134c4:	008007c4 	movi	r2,31
   134c8:	11002716 	blt	r2,r4,13568 <__register_exitproc+0xe8>
   134cc:	8800101e 	bne	r17,zero,13510 <__register_exitproc+0x90>
   134d0:	2105883a 	add	r2,r4,r4
   134d4:	1085883a 	add	r2,r2,r2
   134d8:	20c00044 	addi	r3,r4,1
   134dc:	1145883a 	add	r2,r2,r5
   134e0:	0009883a 	mov	r4,zero
   134e4:	15000215 	stw	r20,8(r2)
   134e8:	28c00115 	stw	r3,4(r5)
   134ec:	2005883a 	mov	r2,r4
   134f0:	dfc00517 	ldw	ra,20(sp)
   134f4:	dd000417 	ldw	r20,16(sp)
   134f8:	dcc00317 	ldw	r19,12(sp)
   134fc:	dc800217 	ldw	r18,8(sp)
   13500:	dc400117 	ldw	r17,4(sp)
   13504:	dc000017 	ldw	r16,0(sp)
   13508:	dec00604 	addi	sp,sp,24
   1350c:	f800283a 	ret
   13510:	29802204 	addi	r6,r5,136
   13514:	00800044 	movi	r2,1
   13518:	110e983a 	sll	r7,r2,r4
   1351c:	30c04017 	ldw	r3,256(r6)
   13520:	2105883a 	add	r2,r4,r4
   13524:	1085883a 	add	r2,r2,r2
   13528:	1185883a 	add	r2,r2,r6
   1352c:	19c6b03a 	or	r3,r3,r7
   13530:	14802015 	stw	r18,128(r2)
   13534:	14c00015 	stw	r19,0(r2)
   13538:	00800084 	movi	r2,2
   1353c:	30c04015 	stw	r3,256(r6)
   13540:	88bfe31e 	bne	r17,r2,134d0 <__register_exitproc+0x50>
   13544:	30804117 	ldw	r2,260(r6)
   13548:	11c4b03a 	or	r2,r2,r7
   1354c:	30804115 	stw	r2,260(r6)
   13550:	003fdf06 	br	134d0 <__register_exitproc+0x50>
   13554:	00801f34 	movhi	r2,124
   13558:	10a5e904 	addi	r2,r2,-26716
   1355c:	100b883a 	mov	r5,r2
   13560:	80805215 	stw	r2,328(r16)
   13564:	003fd606 	br	134c0 <__register_exitproc+0x40>
   13568:	00800034 	movhi	r2,0
   1356c:	10800004 	addi	r2,r2,0
   13570:	1000021e 	bne	r2,zero,1357c <__register_exitproc+0xfc>
   13574:	013fffc4 	movi	r4,-1
   13578:	003fdc06 	br	134ec <__register_exitproc+0x6c>
   1357c:	01006404 	movi	r4,400
   13580:	103ee83a 	callr	r2
   13584:	1007883a 	mov	r3,r2
   13588:	103ffa26 	beq	r2,zero,13574 <__register_exitproc+0xf4>
   1358c:	80805217 	ldw	r2,328(r16)
   13590:	180b883a 	mov	r5,r3
   13594:	18000115 	stw	zero,4(r3)
   13598:	18800015 	stw	r2,0(r3)
   1359c:	80c05215 	stw	r3,328(r16)
   135a0:	18006215 	stw	zero,392(r3)
   135a4:	18006315 	stw	zero,396(r3)
   135a8:	0009883a 	mov	r4,zero
   135ac:	883fc826 	beq	r17,zero,134d0 <__register_exitproc+0x50>
   135b0:	003fd706 	br	13510 <__register_exitproc+0x90>

000135b4 <register_fini>:
   135b4:	f800283a 	ret

000135b8 <__call_exitprocs>:
   135b8:	00800074 	movhi	r2,1
   135bc:	10981e04 	addi	r2,r2,24696
   135c0:	10800017 	ldw	r2,0(r2)
   135c4:	defff304 	addi	sp,sp,-52
   135c8:	df000b15 	stw	fp,44(sp)
   135cc:	d8800115 	stw	r2,4(sp)
   135d0:	00800034 	movhi	r2,0
   135d4:	10800004 	addi	r2,r2,0
   135d8:	1005003a 	cmpeq	r2,r2,zero
   135dc:	d8800215 	stw	r2,8(sp)
   135e0:	d8800117 	ldw	r2,4(sp)
   135e4:	dd400815 	stw	r21,32(sp)
   135e8:	dd000715 	stw	r20,28(sp)
   135ec:	10805204 	addi	r2,r2,328
   135f0:	dfc00c15 	stw	ra,48(sp)
   135f4:	ddc00a15 	stw	r23,40(sp)
   135f8:	dd800915 	stw	r22,36(sp)
   135fc:	dcc00615 	stw	r19,24(sp)
   13600:	dc800515 	stw	r18,20(sp)
   13604:	dc400415 	stw	r17,16(sp)
   13608:	dc000315 	stw	r16,12(sp)
   1360c:	282b883a 	mov	r21,r5
   13610:	2039883a 	mov	fp,r4
   13614:	d8800015 	stw	r2,0(sp)
   13618:	2829003a 	cmpeq	r20,r5,zero
   1361c:	d8800117 	ldw	r2,4(sp)
   13620:	14405217 	ldw	r17,328(r2)
   13624:	88001026 	beq	r17,zero,13668 <__call_exitprocs+0xb0>
   13628:	ddc00017 	ldw	r23,0(sp)
   1362c:	88800117 	ldw	r2,4(r17)
   13630:	8c802204 	addi	r18,r17,136
   13634:	143fffc4 	addi	r16,r2,-1
   13638:	80000916 	blt	r16,zero,13660 <__call_exitprocs+0xa8>
   1363c:	05bfffc4 	movi	r22,-1
   13640:	a000151e 	bne	r20,zero,13698 <__call_exitprocs+0xe0>
   13644:	8409883a 	add	r4,r16,r16
   13648:	2105883a 	add	r2,r4,r4
   1364c:	1485883a 	add	r2,r2,r18
   13650:	10c02017 	ldw	r3,128(r2)
   13654:	a8c01126 	beq	r21,r3,1369c <__call_exitprocs+0xe4>
   13658:	843fffc4 	addi	r16,r16,-1
   1365c:	85bff81e 	bne	r16,r22,13640 <__call_exitprocs+0x88>
   13660:	d8800217 	ldw	r2,8(sp)
   13664:	10003126 	beq	r2,zero,1372c <__call_exitprocs+0x174>
   13668:	dfc00c17 	ldw	ra,48(sp)
   1366c:	df000b17 	ldw	fp,44(sp)
   13670:	ddc00a17 	ldw	r23,40(sp)
   13674:	dd800917 	ldw	r22,36(sp)
   13678:	dd400817 	ldw	r21,32(sp)
   1367c:	dd000717 	ldw	r20,28(sp)
   13680:	dcc00617 	ldw	r19,24(sp)
   13684:	dc800517 	ldw	r18,20(sp)
   13688:	dc400417 	ldw	r17,16(sp)
   1368c:	dc000317 	ldw	r16,12(sp)
   13690:	dec00d04 	addi	sp,sp,52
   13694:	f800283a 	ret
   13698:	8409883a 	add	r4,r16,r16
   1369c:	88c00117 	ldw	r3,4(r17)
   136a0:	2105883a 	add	r2,r4,r4
   136a4:	1445883a 	add	r2,r2,r17
   136a8:	18ffffc4 	addi	r3,r3,-1
   136ac:	11800217 	ldw	r6,8(r2)
   136b0:	1c001526 	beq	r3,r16,13708 <__call_exitprocs+0x150>
   136b4:	10000215 	stw	zero,8(r2)
   136b8:	303fe726 	beq	r6,zero,13658 <__call_exitprocs+0xa0>
   136bc:	00c00044 	movi	r3,1
   136c0:	1c06983a 	sll	r3,r3,r16
   136c4:	90804017 	ldw	r2,256(r18)
   136c8:	8cc00117 	ldw	r19,4(r17)
   136cc:	1884703a 	and	r2,r3,r2
   136d0:	10001426 	beq	r2,zero,13724 <__call_exitprocs+0x16c>
   136d4:	90804117 	ldw	r2,260(r18)
   136d8:	1884703a 	and	r2,r3,r2
   136dc:	10000c1e 	bne	r2,zero,13710 <__call_exitprocs+0x158>
   136e0:	2105883a 	add	r2,r4,r4
   136e4:	1485883a 	add	r2,r2,r18
   136e8:	11400017 	ldw	r5,0(r2)
   136ec:	e009883a 	mov	r4,fp
   136f0:	303ee83a 	callr	r6
   136f4:	88800117 	ldw	r2,4(r17)
   136f8:	98bfc81e 	bne	r19,r2,1361c <__call_exitprocs+0x64>
   136fc:	b8800017 	ldw	r2,0(r23)
   13700:	147fd526 	beq	r2,r17,13658 <__call_exitprocs+0xa0>
   13704:	003fc506 	br	1361c <__call_exitprocs+0x64>
   13708:	8c000115 	stw	r16,4(r17)
   1370c:	003fea06 	br	136b8 <__call_exitprocs+0x100>
   13710:	2105883a 	add	r2,r4,r4
   13714:	1485883a 	add	r2,r2,r18
   13718:	11000017 	ldw	r4,0(r2)
   1371c:	303ee83a 	callr	r6
   13720:	003ff406 	br	136f4 <__call_exitprocs+0x13c>
   13724:	303ee83a 	callr	r6
   13728:	003ff206 	br	136f4 <__call_exitprocs+0x13c>
   1372c:	88800117 	ldw	r2,4(r17)
   13730:	1000081e 	bne	r2,zero,13754 <__call_exitprocs+0x19c>
   13734:	89000017 	ldw	r4,0(r17)
   13738:	20000726 	beq	r4,zero,13758 <__call_exitprocs+0x1a0>
   1373c:	b9000015 	stw	r4,0(r23)
   13740:	8809883a 	mov	r4,r17
   13744:	00000000 	call	0 <__alt_mem_SDRAM>
   13748:	bc400017 	ldw	r17,0(r23)
   1374c:	883fb71e 	bne	r17,zero,1362c <__call_exitprocs+0x74>
   13750:	003fc506 	br	13668 <__call_exitprocs+0xb0>
   13754:	89000017 	ldw	r4,0(r17)
   13758:	882f883a 	mov	r23,r17
   1375c:	2023883a 	mov	r17,r4
   13760:	883fb21e 	bne	r17,zero,1362c <__call_exitprocs+0x74>
   13764:	003fc006 	br	13668 <__call_exitprocs+0xb0>

00013768 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   13768:	defffd04 	addi	sp,sp,-12
   1376c:	df000215 	stw	fp,8(sp)
   13770:	df000204 	addi	fp,sp,8
   13774:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   13778:	e0bfff17 	ldw	r2,-4(fp)
   1377c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13780:	e0bffe17 	ldw	r2,-8(fp)
   13784:	1005003a 	cmpeq	r2,r2,zero
   13788:	1000021e 	bne	r2,zero,13794 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1378c:	002af070 	cmpltui	zero,zero,43969
   13790:	00000106 	br	13798 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   13794:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   13798:	e037883a 	mov	sp,fp
   1379c:	df000017 	ldw	fp,0(sp)
   137a0:	dec00104 	addi	sp,sp,4
   137a4:	f800283a 	ret

000137a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   137a8:	defffd04 	addi	sp,sp,-12
   137ac:	dfc00215 	stw	ra,8(sp)
   137b0:	df000115 	stw	fp,4(sp)
   137b4:	df000104 	addi	fp,sp,4
   137b8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   137bc:	e13fff17 	ldw	r4,-4(fp)
   137c0:	00137680 	call	13768 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   137c4:	003fff06 	br	137c4 <_exit+0x1c>
   137c8:	000135b4 	movhi	zero,1238
